
ProjectFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e984  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001699c  0800eb18  0800eb18  0000fb18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080254b4  080254b4  00029a28  2**0
                  CONTENTS
  4 .ARM          00000008  080254b4  080254b4  000264b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080254bc  080254bc  00029a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080254bc  080254bc  000264bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080254c0  080254c0  000264c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002a28  20000000  080254c4  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00029a28  2**0
                  CONTENTS
 10 .bss          00000ca4  20002a28  20002a28  00029a28  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200036cc  200036cc  00029a28  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00029a28  2**0
                  CONTENTS, READONLY
 13 .debug_info   000190de  00000000  00000000  00029a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041c4  00000000  00000000  00042b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  00046d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001345  00000000  00000000  00048728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242a1  00000000  00000000  00049a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fcfd  00000000  00000000  0006dd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7b68  00000000  00000000  0008da0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00165573  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f10  00000000  00000000  001655b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0016d4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002a28 	.word	0x20002a28
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eafc 	.word	0x0800eafc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002a2c 	.word	0x20002a2c
 80001cc:	0800eafc 	.word	0x0800eafc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b9a0 	b.w	8000f34 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f83c 	bl	8000c78 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2lz>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	460d      	mov	r5, r1
 8000c16:	f7ff ff71 	bl	8000afc <__aeabi_dcmplt>
 8000c1a:	b928      	cbnz	r0, 8000c28 <__aeabi_d2lz+0x1c>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b80a 	b.w	8000c3c <__aeabi_d2ulz>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c2e:	f000 f805 	bl	8000c3c <__aeabi_d2ulz>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2ulz>:
 8000c3c:	b5d0      	push	{r4, r6, r7, lr}
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <__aeabi_d2ulz+0x34>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	4606      	mov	r6, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	f7ff fce7 	bl	8000618 <__aeabi_dmul>
 8000c4a:	f7ff ffa7 	bl	8000b9c <__aeabi_d2uiz>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	f7ff fc68 	bl	8000524 <__aeabi_ui2d>
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <__aeabi_d2ulz+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fcde 	bl	8000618 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4630      	mov	r0, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	f7ff fb20 	bl	80002a8 <__aeabi_dsub>
 8000c68:	f7ff ff98 	bl	8000b9c <__aeabi_d2uiz>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c70:	3df00000 	.word	0x3df00000
 8000c74:	41f00000 	.word	0x41f00000

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  //По умолчанию на линии высокий уровень
  lineUp();
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	889b      	ldrh	r3, [r3, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f007 fa86 	bl	800846c <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	889b      	ldrh	r3, [r3, #4]
 8000f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8000f66:	2311      	movs	r3, #17
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	79db      	ldrb	r3, [r3, #7]
 8000f6e:	617b      	str	r3, [r7, #20]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000f70:	2302      	movs	r3, #2
 8000f72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f107 020c 	add.w	r2, r7, #12
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f007 f8c0 	bl	8008104 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	889b      	ldrh	r3, [r3, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	79db      	ldrb	r3, [r3, #7]
 8000fb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f107 020c 	add.w	r2, r7, #12
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f007 f8a0 	bl	8008104 <HAL_GPIO_Init>
}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08e      	sub	sp, #56	@ 0x38
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
	DHT_data data = {-128.0f, -128.0f};
 8000fd4:	4a76      	ldr	r2, [pc, #472]	@ (80011b0 <DHT_getData+0x1e4>)
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fde:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	799b      	ldrb	r3, [r3, #6]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <DHT_getData+0x26>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000fea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fee:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000ff0:	e002      	b.n	8000ff8 <DHT_getData+0x2c>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 8000ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff6:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000ff8:	f006 feb0 	bl	8007d5c <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	1ad2      	subs	r2, r2, r3
 8001004:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001006:	429a      	cmp	r2, r3
 8001008:	d212      	bcs.n	8001030 <DHT_getData+0x64>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00e      	beq.n	8001030 <DHT_getData+0x64>
		data.hum = sensor->lastHum;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	61fb      	str	r3, [r7, #28]
		data.temp = sensor->lastTemp;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	623b      	str	r3, [r7, #32]
		return data;
 800101e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001022:	f107 021c 	add.w	r2, r7, #28
 8001026:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102a:	e883 0003 	stmia.w	r3, {r0, r1}
 800102e:	e16d      	b.n	800130c <DHT_getData+0x340>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 8001030:	f006 fe94 	bl	8007d5c <HAL_GetTick>
 8001034:	4603      	mov	r3, r0
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f7ff ff7b 	bl	8000f38 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	f007 fa0d 	bl	800846c <HAL_GPIO_WritePin>
	Delay(18);
 8001052:	2012      	movs	r0, #18
 8001054:	f006 fe8e 	bl	8007d74 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	889b      	ldrh	r3, [r3, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	f007 fa02 	bl	800846c <HAL_GPIO_WritePin>
	goToInput(sensor);
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f7ff ff8f 	bl	8000f8c <goToInput>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106e:	b672      	cpsid	i
}
 8001070:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	86bb      	strh	r3, [r7, #52]	@ 0x34
	//Ожидание спада
	while(getLine()) {
 8001076:	e01a      	b.n	80010ae <DHT_getData+0xe2>
		timeout++;
 8001078:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800107a:	3301      	adds	r3, #1
 800107c:	86bb      	strh	r3, [r7, #52]	@ 0x34
		if (timeout > DHT_TIMEOUT) {
 800107e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001080:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001084:	4293      	cmp	r3, r2
 8001086:	d912      	bls.n	80010ae <DHT_getData+0xe2>
  __ASM volatile ("cpsie i" : : : "memory");
 8001088:	b662      	cpsie	i
}
 800108a:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8001092:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 800109a:	60da      	str	r2, [r3, #12]

			return data;
 800109c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a0:	f107 021c 	add.w	r2, r7, #28
 80010a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80010ac:	e12e      	b.n	800130c <DHT_getData+0x340>
	while(getLine()) {
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	889b      	ldrh	r3, [r3, #4]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4610      	mov	r0, r2
 80010ba:	f007 f9bf 	bl	800843c <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d0d9      	beq.n	8001078 <DHT_getData+0xac>
		}
	}
	timeout = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	86bb      	strh	r3, [r7, #52]	@ 0x34
	//Ожидание подъёма
	while(!getLine()) {
 80010c8:	e01a      	b.n	8001100 <DHT_getData+0x134>
		timeout++;
 80010ca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80010cc:	3301      	adds	r3, #1
 80010ce:	86bb      	strh	r3, [r7, #52]	@ 0x34
		if (timeout > DHT_TIMEOUT) {
 80010d0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80010d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d912      	bls.n	8001100 <DHT_getData+0x134>
  __ASM volatile ("cpsie i" : : : "memory");
 80010da:	b662      	cpsie	i
}
 80010dc:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80010e4:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80010ec:	60da      	str	r2, [r3, #12]

			return data;
 80010ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f2:	f107 021c 	add.w	r2, r7, #28
 80010f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80010fe:	e105      	b.n	800130c <DHT_getData+0x340>
	while(!getLine()) {
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	889b      	ldrh	r3, [r3, #4]
 8001108:	4619      	mov	r1, r3
 800110a:	4610      	mov	r0, r2
 800110c:	f007 f996 	bl	800843c <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	d1d9      	bne.n	80010ca <DHT_getData+0xfe>
		}
	}
	timeout = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	86bb      	strh	r3, [r7, #52]	@ 0x34
	//Ожидание спада
	while(getLine()) {
 800111a:	e012      	b.n	8001142 <DHT_getData+0x176>
		timeout++;
 800111c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800111e:	3301      	adds	r3, #1
 8001120:	86bb      	strh	r3, [r7, #52]	@ 0x34
		if (timeout > DHT_TIMEOUT) {
 8001122:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001124:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001128:	4293      	cmp	r3, r2
 800112a:	d90a      	bls.n	8001142 <DHT_getData+0x176>
  __ASM volatile ("cpsie i" : : : "memory");
 800112c:	b662      	cpsie	i
}
 800112e:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8001130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001134:	f107 021c 	add.w	r2, r7, #28
 8001138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800113c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001140:	e0e4      	b.n	800130c <DHT_getData+0x340>
	while(getLine()) {
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	889b      	ldrh	r3, [r3, #4]
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f007 f975 	bl	800843c <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	2b01      	cmp	r3, #1
 8001156:	d0e1      	beq.n	800111c <DHT_getData+0x150>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8001158:	4a16      	ldr	r2, [pc, #88]	@ (80011b4 <DHT_getData+0x1e8>)
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001162:	6018      	str	r0, [r3, #0]
 8001164:	3304      	adds	r3, #4
 8001166:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800116e:	e062      	b.n	8001236 <DHT_getData+0x26a>
		for(uint8_t b = 7; b != 255; b--) {
 8001170:	2307      	movs	r3, #7
 8001172:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001176:	e055      	b.n	8001224 <DHT_getData+0x258>
			uint16_t hT = 0, lT = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	863b      	strh	r3, [r7, #48]	@ 0x30
 800117c:	2300      	movs	r3, #0
 800117e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8001180:	e002      	b.n	8001188 <DHT_getData+0x1bc>
 8001182:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001184:	3301      	adds	r3, #1
 8001186:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	889b      	ldrh	r3, [r3, #4]
 8001190:	4619      	mov	r1, r3
 8001192:	4610      	mov	r0, r2
 8001194:	f007 f952 	bl	800843c <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d004      	beq.n	80011a8 <DHT_getData+0x1dc>
 800119e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80011a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d1ec      	bne.n	8001182 <DHT_getData+0x1b6>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	86bb      	strh	r3, [r7, #52]	@ 0x34
			while(getLine()&& hT != 65535) hT++;
 80011ac:	e00b      	b.n	80011c6 <DHT_getData+0x1fa>
 80011ae:	bf00      	nop
 80011b0:	0800eb18 	.word	0x0800eb18
 80011b4:	0800eb20 	.word	0x0800eb20
 80011b8:	3dcccccd 	.word	0x3dcccccd
 80011bc:	bdcccccd 	.word	0xbdcccccd
 80011c0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80011c2:	3301      	adds	r3, #1
 80011c4:	863b      	strh	r3, [r7, #48]	@ 0x30
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	889b      	ldrh	r3, [r3, #4]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f007 f933 	bl	800843c <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d104      	bne.n	80011e6 <DHT_getData+0x21a>
 80011dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80011de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d1ec      	bne.n	80011c0 <DHT_getData+0x1f4>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80011e6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80011e8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d915      	bls.n	800121a <DHT_getData+0x24e>
 80011ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011f2:	3338      	adds	r3, #56	@ 0x38
 80011f4:	443b      	add	r3, r7
 80011f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011fa:	b25a      	sxtb	r2, r3
 80011fc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001200:	2101      	movs	r1, #1
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	b25b      	sxtb	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b25a      	sxtb	r2, r3
 800120c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	3338      	adds	r3, #56	@ 0x38
 8001214:	443b      	add	r3, r7
 8001216:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(uint8_t b = 7; b != 255; b--) {
 800121a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800121e:	3b01      	subs	r3, #1
 8001220:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001224:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001228:	2bff      	cmp	r3, #255	@ 0xff
 800122a:	d1a5      	bne.n	8001178 <DHT_getData+0x1ac>
	for(uint8_t a = 0; a < 5; a++) {
 800122c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001230:	3301      	adds	r3, #1
 8001232:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001236:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800123a:	2b04      	cmp	r3, #4
 800123c:	d998      	bls.n	8001170 <DHT_getData+0x1a4>
  __ASM volatile ("cpsie i" : : : "memory");
 800123e:	b662      	cpsie	i
}
 8001240:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8001242:	7d3a      	ldrb	r2, [r7, #20]
 8001244:	7d7b      	ldrb	r3, [r7, #21]
 8001246:	4413      	add	r3, r2
 8001248:	b2da      	uxtb	r2, r3
 800124a:	7dbb      	ldrb	r3, [r7, #22]
 800124c:	4413      	add	r3, r2
 800124e:	b2da      	uxtb	r2, r3
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	4413      	add	r3, r2
 8001254:	b2da      	uxtb	r2, r3
 8001256:	7e3b      	ldrb	r3, [r7, #24]
 8001258:	429a      	cmp	r2, r3
 800125a:	d149      	bne.n	80012f0 <DHT_getData+0x324>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	799b      	ldrb	r3, [r3, #6]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d133      	bne.n	80012cc <DHT_getData+0x300>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001264:	7d3b      	ldrb	r3, [r7, #20]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	7d7a      	ldrb	r2, [r7, #21]
 800126a:	4313      	orrs	r3, r2
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001274:	ed1f 7a30 	vldr	s14, [pc, #-192]	@ 80011b8 <DHT_getData+0x1ec>
 8001278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127c:	edc7 7a07 	vstr	s15, [r7, #28]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8001280:	7dbb      	ldrb	r3, [r7, #22]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0e      	blt.n	80012a6 <DHT_getData+0x2da>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001288:	7dbb      	ldrb	r3, [r7, #22]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	7dfa      	ldrb	r2, [r7, #23]
 800128e:	4313      	orrs	r3, r2
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001298:	ed1f 7a39 	vldr	s14, [pc, #-228]	@ 80011b8 <DHT_getData+0x1ec>
 800129c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a0:	edc7 7a08 	vstr	s15, [r7, #32]
 80012a4:	e012      	b.n	80012cc <DHT_getData+0x300>
			}	else {
				rawData[2] &= ~(1<<7);
 80012a6:	7dbb      	ldrb	r3, [r7, #22]
 80012a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	75bb      	strb	r3, [r7, #22]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 80012b0:	7dbb      	ldrb	r3, [r7, #22]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	7dfa      	ldrb	r2, [r7, #23]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c0:	ed1f 7a42 	vldr	s14, [pc, #-264]	@ 80011bc <DHT_getData+0x1f0>
 80012c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c8:	edc7 7a08 	vstr	s15, [r7, #32]
			}
		}
		if (sensor->type == DHT11) {
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	799b      	ldrb	r3, [r3, #6]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10d      	bne.n	80012f0 <DHT_getData+0x324>
			data.hum = (float)rawData[0];
 80012d4:	7d3b      	ldrb	r3, [r7, #20]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012de:	edc7 7a07 	vstr	s15, [r7, #28]
			data.temp = (float)rawData[2];
 80012e2:	7dbb      	ldrb	r3, [r7, #22]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ec:	edc7 7a08 	vstr	s15, [r7, #32]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80012f6:	6a3a      	ldr	r2, [r7, #32]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80012fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001300:	f107 021c 	add.w	r2, r7, #28
 8001304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001308:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800130c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800130e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001310:	ee07 2a10 	vmov	s14, r2
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eeb0 0a47 	vmov.f32	s0, s14
 800131c:	eef0 0a67 	vmov.f32	s1, s15
 8001320:	3738      	adds	r7, #56	@ 0x38
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop

08001328 <DHT_ReadData>:

void DHT_ReadData(float *temperature, float *humidity) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	DHT_sensor mySensor = {
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <DHT_ReadData+0x84>)
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	2301      	movs	r3, #1
 8001348:	833b      	strh	r3, [r7, #24]
 800134a:	2301      	movs	r3, #1
 800134c:	76bb      	strb	r3, [r7, #26]
	    .DHT_Pin = GPIO_PIN_0,
	    .type = DHT22,
	    .pullUp = GPIO_NOPULL
	};

	DHT_data data = DHT_getData(&mySensor);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fe3a 	bl	8000fcc <DHT_getData>
 8001358:	eeb0 7a40 	vmov.f32	s14, s0
 800135c:	eef0 7a60 	vmov.f32	s15, s1
 8001360:	ed87 7a03 	vstr	s14, [r7, #12]
 8001364:	edc7 7a04 	vstr	s15, [r7, #16]
	if (data.temp != -1 && data.hum != -1) {
 8001368:	edd7 7a04 	vldr	s15, [r7, #16]
 800136c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001370:	eef4 7a47 	vcmp.f32	s15, s14
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	d00f      	beq.n	800139a <DHT_ReadData+0x72>
 800137a:	edd7 7a03 	vldr	s15, [r7, #12]
 800137e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001382:	eef4 7a47 	vcmp.f32	s15, s14
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	d006      	beq.n	800139a <DHT_ReadData+0x72>
	    *temperature = data.temp;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	601a      	str	r2, [r3, #0]
	    *humidity = data.hum;
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e003      	b.n	80013a2 <DHT_ReadData+0x7a>
	} else {
	    // Hiển thị lỗi nếu đọc thất bại
	    lcdPrintf("DHT22 Read Error\n");
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <DHT_ReadData+0x88>)
 800139c:	f004 fa6e 	bl	800587c <lcdPrintf>
	}
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	@ 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40020800 	.word	0x40020800
 80013b0:	0800eb28 	.word	0x0800eb28

080013b4 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <case_insensitive_strcmp+0x16>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e056      	b.n	800147c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d10d      	bne.n	80013f2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e050      	b.n	800147c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e04a      	b.n	800147c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3301      	adds	r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a22      	ldr	r2, [pc, #136]	@ (8001488 <case_insensitive_strcmp+0xd4>)
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d103      	bne.n	8001412 <case_insensitive_strcmp+0x5e>
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	f103 0220 	add.w	r2, r3, #32
 8001410:	e000      	b.n	8001414 <case_insensitive_strcmp+0x60>
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	73bb      	strb	r3, [r7, #14]
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	3301      	adds	r3, #1
 800141e:	491a      	ldr	r1, [pc, #104]	@ (8001488 <case_insensitive_strcmp+0xd4>)
 8001420:	440b      	add	r3, r1
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b01      	cmp	r3, #1
 800142a:	d102      	bne.n	8001432 <case_insensitive_strcmp+0x7e>
 800142c:	7bbb      	ldrb	r3, [r7, #14]
 800142e:	3320      	adds	r3, #32
 8001430:	e000      	b.n	8001434 <case_insensitive_strcmp+0x80>
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	429a      	cmp	r2, r3
 8001436:	d0d0      	beq.n	80013da <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	737b      	strb	r3, [r7, #13]
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	3301      	adds	r3, #1
 8001442:	4a11      	ldr	r2, [pc, #68]	@ (8001488 <case_insensitive_strcmp+0xd4>)
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d103      	bne.n	8001458 <case_insensitive_strcmp+0xa4>
 8001450:	7b7b      	ldrb	r3, [r7, #13]
 8001452:	f103 0220 	add.w	r2, r3, #32
 8001456:	e000      	b.n	800145a <case_insensitive_strcmp+0xa6>
 8001458:	7b7a      	ldrb	r2, [r7, #13]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	733b      	strb	r3, [r7, #12]
 8001460:	7b3b      	ldrb	r3, [r7, #12]
 8001462:	3301      	adds	r3, #1
 8001464:	4908      	ldr	r1, [pc, #32]	@ (8001488 <case_insensitive_strcmp+0xd4>)
 8001466:	440b      	add	r3, r1
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d102      	bne.n	8001478 <case_insensitive_strcmp+0xc4>
 8001472:	7b3b      	ldrb	r3, [r7, #12]
 8001474:	3320      	adds	r3, #32
 8001476:	e000      	b.n	800147a <case_insensitive_strcmp+0xc6>
 8001478:	7b3b      	ldrb	r3, [r7, #12]
 800147a:	1ad3      	subs	r3, r2, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	08025140 	.word	0x08025140

0800148c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2028      	movs	r0, #40	@ 0x28
 800149a:	4798      	blx	r3
 800149c:	60f8      	str	r0, [r7, #12]
    if (node)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80014a4:	2228      	movs	r2, #40	@ 0x28
 80014a6:	2100      	movs	r1, #0
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f00a feab 	bl	800c204 <memset>
    }

    return node;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80014c4:	e03d      	b.n	8001542 <cJSON_Delete+0x8a>
    {
        next = item->next;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d108      	bne.n	80014ea <cJSON_Delete+0x32>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffe7 	bl	80014b8 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10c      	bne.n	8001510 <cJSON_Delete+0x58>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <cJSON_Delete+0x9c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6912      	ldr	r2, [r2, #16]
 8001506:	4610      	mov	r0, r2
 8001508:	4798      	blx	r3
            item->valuestring = NULL;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10c      	bne.n	8001536 <cJSON_Delete+0x7e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <cJSON_Delete+0x9c>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6a12      	ldr	r2, [r2, #32]
 800152c:	4610      	mov	r0, r2
 800152e:	4798      	blx	r3
            item->string = NULL;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <cJSON_Delete+0x9c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4798      	blx	r3
        item = next;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1be      	bne.n	80014c6 <cJSON_Delete+0xe>
    }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000000 	.word	0x20000000

08001558 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800155c:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b098      	sub	sp, #96	@ 0x60
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800157e:	2300      	movs	r3, #0
 8001580:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001582:	f7ff ffe9 	bl	8001558 <get_decimal_point>
 8001586:	4603      	mov	r3, r0
 8001588:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <parse_number+0x36>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <parse_number+0x3a>
    {
        return false;
 800159e:	2300      	movs	r3, #0
 80015a0:	e0a0      	b.n	80016e4 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80015a6:	e03d      	b.n	8001624 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	6899      	ldr	r1, [r3, #8]
 80015b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015b2:	440b      	add	r3, r1
 80015b4:	4413      	add	r3, r2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b45      	cmp	r3, #69	@ 0x45
 80015ba:	dc17      	bgt.n	80015ec <parse_number+0x84>
 80015bc:	2b2b      	cmp	r3, #43	@ 0x2b
 80015be:	db40      	blt.n	8001642 <parse_number+0xda>
 80015c0:	3b2b      	subs	r3, #43	@ 0x2b
 80015c2:	2201      	movs	r2, #1
 80015c4:	409a      	lsls	r2, r3
 80015c6:	4b4c      	ldr	r3, [pc, #304]	@ (80016f8 <parse_number+0x190>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10b      	bne.n	80015f0 <parse_number+0x88>
 80015d8:	f002 0308 	and.w	r3, r2, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d111      	bne.n	800160e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80015ea:	e02a      	b.n	8001642 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80015ec:	2b65      	cmp	r3, #101	@ 0x65
 80015ee:	d128      	bne.n	8001642 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	6899      	ldr	r1, [r3, #8]
 80015f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015fa:	440b      	add	r3, r1
 80015fc:	4413      	add	r3, r2
 80015fe:	7819      	ldrb	r1, [r3, #0]
 8001600:	f107 0208 	add.w	r2, r7, #8
 8001604:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001606:	4413      	add	r3, r2
 8001608:	460a      	mov	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]
                break;
 800160c:	e007      	b.n	800161e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800160e:	f107 0208 	add.w	r2, r7, #8
 8001612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001614:	4413      	add	r3, r2
 8001616:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800161a:	701a      	strb	r2, [r3, #0]
                break;
 800161c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800161e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001620:	3301      	adds	r3, #1
 8001622:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001624:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001626:	2b3e      	cmp	r3, #62	@ 0x3e
 8001628:	d80d      	bhi.n	8001646 <parse_number+0xde>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00a      	beq.n	8001646 <parse_number+0xde>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001636:	441a      	add	r2, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3b3      	bcc.n	80015a8 <parse_number+0x40>
        }
    }
loop_end:
 8001640:	e001      	b.n	8001646 <parse_number+0xde>
                goto loop_end;
 8001642:	bf00      	nop
 8001644:	e000      	b.n	8001648 <parse_number+0xe0>
loop_end:
 8001646:	bf00      	nop
    number_c_string[i] = '\0';
 8001648:	f107 0208 	add.w	r2, r7, #8
 800164c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800164e:	4413      	add	r3, r2
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001654:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f00a fc3e 	bl	800bee0 <strtod>
 8001664:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001668:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	429a      	cmp	r2, r3
 8001670:	d101      	bne.n	8001676 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8001672:	2300      	movs	r3, #0
 8001674:	e036      	b.n	80016e4 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800167c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001680:	a31b      	add	r3, pc, #108	@ (adr r3, 80016f0 <parse_number+0x188>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800168a:	f7ff fa4b 	bl	8000b24 <__aeabi_dcmpge>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	e015      	b.n	80016ca <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <parse_number+0x194>)
 80016a4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80016a8:	f7ff fa32 	bl	8000b10 <__aeabi_dcmple>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80016b8:	615a      	str	r2, [r3, #20]
 80016ba:	e006      	b.n	80016ca <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 80016bc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80016c0:	f7ff fa44 	bl	8000b4c <__aeabi_d2iz>
 80016c4:	4602      	mov	r2, r0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2208      	movs	r2, #8
 80016ce:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80016d6:	f107 0208 	add.w	r2, r7, #8
 80016da:	1a8a      	subs	r2, r1, r2
 80016dc:	441a      	add	r2, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	609a      	str	r2, [r3, #8]
    return true;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3760      	adds	r7, #96	@ 0x60
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	f3af 8000 	nop.w
 80016f0:	ffc00000 	.word	0xffc00000
 80016f4:	41dfffff 	.word	0x41dfffff
 80016f8:	04007fe5 	.word	0x04007fe5
 80016fc:	c1e00000 	.word	0xc1e00000

08001700 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	e04c      	b.n	80017b0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001720:	d90f      	bls.n	8001742 <parse_hex4+0x42>
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4413      	add	r3, r2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b39      	cmp	r3, #57	@ 0x39
 800172c:	d809      	bhi.n	8001742 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	3b30      	subs	r3, #48	@ 0x30
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e02d      	b.n	800179e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4413      	add	r3, r2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b40      	cmp	r3, #64	@ 0x40
 800174c:	d90f      	bls.n	800176e <parse_hex4+0x6e>
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b46      	cmp	r3, #70	@ 0x46
 8001758:	d809      	bhi.n	800176e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	3b37      	subs	r3, #55	@ 0x37
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	e017      	b.n	800179e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b60      	cmp	r3, #96	@ 0x60
 8001778:	d90f      	bls.n	800179a <parse_hex4+0x9a>
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b66      	cmp	r3, #102	@ 0x66
 8001784:	d809      	bhi.n	800179a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4413      	add	r3, r2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	3b57      	subs	r3, #87	@ 0x57
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	e001      	b.n	800179e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800179a:	2300      	movs	r3, #0
 800179c:	e00c      	b.n	80017b8 <parse_hex4+0xb8>
        }

        if (i < 3)
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d802      	bhi.n	80017aa <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d9af      	bls.n	8001716 <parse_hex4+0x16>
        }
    }

    return h;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	@ 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	f340 80b7 	ble.w	800196e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	3302      	adds	r3, #2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff7b 	bl	8001700 <parse_hex4>
 800180a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001812:	d304      	bcc.n	800181e <utf16_literal_to_utf8+0x5a>
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800181a:	f0c0 80aa 	bcc.w	8001972 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8001824:	d337      	bcc.n	8001896 <utf16_literal_to_utf8+0xd2>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800182c:	d233      	bcs.n	8001896 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	3306      	adds	r3, #6
 8001832:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001838:	230c      	movs	r3, #12
 800183a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b05      	cmp	r3, #5
 8001846:	f340 8096 	ble.w	8001976 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001850:	f040 8093 	bne.w	800197a <utf16_literal_to_utf8+0x1b6>
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b75      	cmp	r3, #117	@ 0x75
 800185c:	f040 808d 	bne.w	800197a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3302      	adds	r3, #2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff4b 	bl	8001700 <parse_hex4>
 800186a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001872:	f0c0 8084 	bcc.w	800197e <utf16_literal_to_utf8+0x1ba>
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800187c:	d27f      	bcs.n	800197e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	029a      	lsls	r2, r3, #10
 8001882:	4b43      	ldr	r3, [pc, #268]	@ (8001990 <utf16_literal_to_utf8+0x1cc>)
 8001884:	4013      	ands	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800188c:	4313      	orrs	r3, r2
 800188e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001894:	e004      	b.n	80018a0 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001896:	2306      	movs	r3, #6
 8001898:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80018a4:	d803      	bhi.n	80018ae <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018ac:	e01f      	b.n	80018ee <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018b4:	d206      	bcs.n	80018c4 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80018bc:	23c0      	movs	r3, #192	@ 0xc0
 80018be:	f887 3020 	strb.w	r3, [r7, #32]
 80018c2:	e014      	b.n	80018ee <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80018c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ca:	d206      	bcs.n	80018da <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80018cc:	2303      	movs	r3, #3
 80018ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80018d2:	23e0      	movs	r3, #224	@ 0xe0
 80018d4:	f887 3020 	strb.w	r3, [r7, #32]
 80018d8:	e009      	b.n	80018ee <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80018e0:	d24f      	bcs.n	8001982 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80018e2:	2304      	movs	r3, #4
 80018e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80018e8:	23f0      	movs	r3, #240	@ 0xf0
 80018ea:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80018ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80018f8:	e015      	b.n	8001926 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001902:	b2da      	uxtb	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6819      	ldr	r1, [r3, #0]
 8001908:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800190c:	440b      	add	r3, r1
 800190e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	099b      	lsrs	r3, r3, #6
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800191c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001920:	3b01      	subs	r3, #1
 8001922:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001926:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1e5      	bne.n	80018fa <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800192e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001932:	2b01      	cmp	r3, #1
 8001934:	d909      	bls.n	800194a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	b2d9      	uxtb	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001942:	430a      	orrs	r2, r1
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e007      	b.n	800195a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	b2da      	uxtb	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001962:	441a      	add	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001968:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800196c:	e00b      	b.n	8001986 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800196e:	bf00      	nop
 8001970:	e008      	b.n	8001984 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001972:	bf00      	nop
 8001974:	e006      	b.n	8001984 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001976:	bf00      	nop
 8001978:	e004      	b.n	8001984 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800197a:	bf00      	nop
 800197c:	e002      	b.n	8001984 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800197e:	bf00      	nop
 8001980:	e000      	b.n	8001984 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001982:	bf00      	nop

fail:
    return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3728      	adds	r7, #40	@ 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	000ffc00 	.word	0x000ffc00

08001994 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	@ 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	3301      	adds	r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	3301      	adds	r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b22      	cmp	r3, #34	@ 0x22
 80019d0:	f040 8103 	bne.w	8001bda <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80019dc:	e017      	b.n	8001a0e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b5c      	cmp	r3, #92	@ 0x5c
 80019e4:	d110      	bne.n	8001a08 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	f080 80f1 	bcs.w	8001bde <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	3301      	adds	r3, #1
 8001a00:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	3301      	adds	r3, #1
 8001a06:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6a3a      	ldr	r2, [r7, #32]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d203      	bcs.n	8001a28 <parse_string+0x94>
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b22      	cmp	r3, #34	@ 0x22
 8001a26:	d1da      	bne.n	80019de <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a3a      	ldr	r2, [r7, #32]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	f080 80d3 	bcs.w	8001be2 <parse_string+0x24e>
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b22      	cmp	r3, #34	@ 0x22
 8001a42:	f040 80ce 	bne.w	8001be2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	4413      	add	r3, r2
 8001a50:	6a3a      	ldr	r2, [r7, #32]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	3201      	adds	r2, #1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4798      	blx	r3
 8001a68:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80ba 	beq.w	8001be6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001a76:	e094      	b.n	8001ba2 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001a7e:	d008      	beq.n	8001a92 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a82:	1c53      	adds	r3, r2, #1
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1c59      	adds	r1, r3, #1
 8001a8a:	60f9      	str	r1, [r7, #12]
 8001a8c:	7812      	ldrb	r2, [r2, #0]
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e087      	b.n	8001ba2 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001a92:	2302      	movs	r3, #2
 8001a94:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001a96:	6a3a      	ldr	r2, [r7, #32]
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f340 80a4 	ble.w	8001bea <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b75      	cmp	r3, #117	@ 0x75
 8001aaa:	f300 80a0 	bgt.w	8001bee <parse_string+0x25a>
 8001aae:	2b5c      	cmp	r3, #92	@ 0x5c
 8001ab0:	da04      	bge.n	8001abc <parse_string+0x128>
 8001ab2:	2b22      	cmp	r3, #34	@ 0x22
 8001ab4:	d05c      	beq.n	8001b70 <parse_string+0x1dc>
 8001ab6:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ab8:	d05a      	beq.n	8001b70 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001aba:	e098      	b.n	8001bee <parse_string+0x25a>
            switch (input_pointer[1])
 8001abc:	3b5c      	subs	r3, #92	@ 0x5c
 8001abe:	2b19      	cmp	r3, #25
 8001ac0:	f200 8095 	bhi.w	8001bee <parse_string+0x25a>
 8001ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8001acc <parse_string+0x138>)
 8001ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aca:	bf00      	nop
 8001acc:	08001b71 	.word	0x08001b71
 8001ad0:	08001bef 	.word	0x08001bef
 8001ad4:	08001bef 	.word	0x08001bef
 8001ad8:	08001bef 	.word	0x08001bef
 8001adc:	08001bef 	.word	0x08001bef
 8001ae0:	08001bef 	.word	0x08001bef
 8001ae4:	08001b35 	.word	0x08001b35
 8001ae8:	08001bef 	.word	0x08001bef
 8001aec:	08001bef 	.word	0x08001bef
 8001af0:	08001bef 	.word	0x08001bef
 8001af4:	08001b41 	.word	0x08001b41
 8001af8:	08001bef 	.word	0x08001bef
 8001afc:	08001bef 	.word	0x08001bef
 8001b00:	08001bef 	.word	0x08001bef
 8001b04:	08001bef 	.word	0x08001bef
 8001b08:	08001bef 	.word	0x08001bef
 8001b0c:	08001bef 	.word	0x08001bef
 8001b10:	08001bef 	.word	0x08001bef
 8001b14:	08001b4d 	.word	0x08001b4d
 8001b18:	08001bef 	.word	0x08001bef
 8001b1c:	08001bef 	.word	0x08001bef
 8001b20:	08001bef 	.word	0x08001bef
 8001b24:	08001b59 	.word	0x08001b59
 8001b28:	08001bef 	.word	0x08001bef
 8001b2c:	08001b65 	.word	0x08001b65
 8001b30:	08001b81 	.word	0x08001b81
                    *output_pointer++ = '\b';
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	60fa      	str	r2, [r7, #12]
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	701a      	strb	r2, [r3, #0]
                    break;
 8001b3e:	e02c      	b.n	8001b9a <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	60fa      	str	r2, [r7, #12]
 8001b46:	220c      	movs	r2, #12
 8001b48:	701a      	strb	r2, [r3, #0]
                    break;
 8001b4a:	e026      	b.n	8001b9a <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	60fa      	str	r2, [r7, #12]
 8001b52:	220a      	movs	r2, #10
 8001b54:	701a      	strb	r2, [r3, #0]
                    break;
 8001b56:	e020      	b.n	8001b9a <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	60fa      	str	r2, [r7, #12]
 8001b5e:	220d      	movs	r2, #13
 8001b60:	701a      	strb	r2, [r3, #0]
                    break;
 8001b62:	e01a      	b.n	8001b9a <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	60fa      	str	r2, [r7, #12]
 8001b6a:	2209      	movs	r2, #9
 8001b6c:	701a      	strb	r2, [r3, #0]
                    break;
 8001b6e:	e014      	b.n	8001b9a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1c59      	adds	r1, r3, #1
 8001b78:	60f9      	str	r1, [r7, #12]
 8001b7a:	7812      	ldrb	r2, [r2, #0]
 8001b7c:	701a      	strb	r2, [r3, #0]
                    break;
 8001b7e:	e00c      	b.n	8001b9a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	461a      	mov	r2, r3
 8001b86:	6a39      	ldr	r1, [r7, #32]
 8001b88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b8a:	f7ff fe1b 	bl	80017c4 <utf16_literal_to_utf8>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d02c      	beq.n	8001bf2 <parse_string+0x25e>
                    break;
 8001b98:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b9e:	4413      	add	r3, r2
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	f4ff af66 	bcc.w	8001a78 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2210      	movs	r2, #16
 8001bb6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a3a      	ldr	r2, [r7, #32]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	609a      	str	r2, [r3, #8]

    return true;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e020      	b.n	8001c1c <parse_string+0x288>
        goto fail;
 8001bda:	bf00      	nop
 8001bdc:	e00a      	b.n	8001bf4 <parse_string+0x260>
                    goto fail;
 8001bde:	bf00      	nop
 8001be0:	e008      	b.n	8001bf4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001be2:	bf00      	nop
 8001be4:	e006      	b.n	8001bf4 <parse_string+0x260>
            goto fail; /* allocation failure */
 8001be6:	bf00      	nop
 8001be8:	e004      	b.n	8001bf4 <parse_string+0x260>
                goto fail;
 8001bea:	bf00      	nop
 8001bec:	e002      	b.n	8001bf4 <parse_string+0x260>
                    goto fail;
 8001bee:	bf00      	nop
 8001bf0:	e000      	b.n	8001bf4 <parse_string+0x260>
                        goto fail;
 8001bf2:	bf00      	nop

fail:
    if (output != NULL)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	69f8      	ldr	r0, [r7, #28]
 8001c00:	4798      	blx	r3
        output = NULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3728      	adds	r7, #40	@ 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <buffer_skip_whitespace+0x16>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e02c      	b.n	8001c98 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <buffer_skip_whitespace+0x2c>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d306      	bcc.n	8001c5e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	e021      	b.n	8001c98 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00d      	beq.n	8001c80 <buffer_skip_whitespace+0x5c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d207      	bcs.n	8001c80 <buffer_skip_whitespace+0x5c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4413      	add	r3, r2
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d9e9      	bls.n	8001c54 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d104      	bne.n	8001c96 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	1e5a      	subs	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001c96:	687b      	ldr	r3, [r7, #4]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <skip_utf8_bom+0x1e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <skip_utf8_bom+0x1e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e01c      	b.n	8001d00 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d018      	beq.n	8001cfe <skip_utf8_bom+0x5a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	1d1a      	adds	r2, r3, #4
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d211      	bcs.n	8001cfe <skip_utf8_bom+0x5a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	4908      	ldr	r1, [pc, #32]	@ (8001d08 <skip_utf8_bom+0x64>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00a faa6 	bl	800c23a <strncmp>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d104      	bne.n	8001cfe <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	1cda      	adds	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001cfe:	687b      	ldr	r3, [r7, #4]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	0800eb74 	.word	0x0800eb74

08001d0c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e00c      	b.n	8001d3c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7fe fa5e 	bl	80001e4 <strlen>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	6979      	ldr	r1, [r7, #20]
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f805 	bl	8001d44 <cJSON_ParseWithLengthOpts>
 8001d3a:	4603      	mov	r3, r0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08e      	sub	sp, #56	@ 0x38
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001d52:	f107 0318 	add.w	r3, r7, #24
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]
 8001d62:	615a      	str	r2, [r3, #20]
 8001d64:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001d6a:	4b41      	ldr	r3, [pc, #260]	@ (8001e70 <cJSON_ParseWithLengthOpts+0x12c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001d70:	4b3f      	ldr	r3, [pc, #252]	@ (8001e70 <cJSON_ParseWithLengthOpts+0x12c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d042      	beq.n	8001e02 <cJSON_ParseWithLengthOpts+0xbe>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d03f      	beq.n	8001e02 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001d8e:	4a39      	ldr	r2, [pc, #228]	@ (8001e74 <cJSON_ParseWithLengthOpts+0x130>)
 8001d90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d94:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d96:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001d9a:	4836      	ldr	r0, [pc, #216]	@ (8001e74 <cJSON_ParseWithLengthOpts+0x130>)
 8001d9c:	f7ff fb76 	bl	800148c <cJSON_New_Item>
 8001da0:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d02e      	beq.n	8001e06 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001da8:	f107 0318 	add.w	r3, r7, #24
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff79 	bl	8001ca4 <skip_utf8_bom>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff35 	bl	8001c24 <buffer_skip_whitespace>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001dc0:	f000 f868 	bl	8001e94 <parse_value>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01f      	beq.n	8001e0a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00e      	beq.n	8001dee <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001dd0:	f107 0318 	add.w	r3, r7, #24
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff25 	bl	8001c24 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001dda:	6a3a      	ldr	r2, [r7, #32]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d215      	bcs.n	8001e0e <cJSON_ParseWithLengthOpts+0xca>
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	4413      	add	r3, r2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	441a      	add	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e00:	e031      	b.n	8001e66 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001e02:	bf00      	nop
 8001e04:	e004      	b.n	8001e10 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001e06:	bf00      	nop
 8001e08:	e002      	b.n	8001e10 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001e0a:	bf00      	nop
 8001e0c:	e000      	b.n	8001e10 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001e0e:	bf00      	nop

fail:
    if (item != NULL)
 8001e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001e16:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e18:	f7ff fb4e 	bl	80014b8 <cJSON_Delete>
    }

    if (value != NULL)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d020      	beq.n	8001e64 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001e2a:	6a3a      	ldr	r2, [r7, #32]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d202      	bcs.n	8001e38 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e005      	b.n	8001e44 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	441a      	add	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <cJSON_ParseWithLengthOpts+0x12c>)
 8001e56:	461a      	mov	r2, r3
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e60:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3738      	adds	r7, #56	@ 0x38
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20002a44 	.word	0x20002a44
 8001e74:	20000000 	.word	0x20000000

08001e78 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2100      	movs	r1, #0
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ff41 	bl	8001d0c <cJSON_ParseWithOpts>
 8001e8a:	4603      	mov	r3, r0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <parse_value+0x18>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <parse_value+0x1c>
    {
        return false; /* no input */
 8001eac:	2300      	movs	r3, #0
 8001eae:	e0d2      	b.n	8002056 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01d      	beq.n	8001ef2 <parse_value+0x5e>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	1d1a      	adds	r2, r3, #4
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d816      	bhi.n	8001ef2 <parse_value+0x5e>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4413      	add	r3, r2
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4963      	ldr	r1, [pc, #396]	@ (8002060 <parse_value+0x1cc>)
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00a f9b1 	bl	800c23a <strncmp>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	1d1a      	adds	r2, r3, #4
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	609a      	str	r2, [r3, #8]
        return true;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0b1      	b.n	8002056 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01d      	beq.n	8001f34 <parse_value+0xa0>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	1d5a      	adds	r2, r3, #5
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d816      	bhi.n	8001f34 <parse_value+0xa0>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	4413      	add	r3, r2
 8001f10:	2205      	movs	r2, #5
 8001f12:	4954      	ldr	r1, [pc, #336]	@ (8002064 <parse_value+0x1d0>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	f00a f990 	bl	800c23a <strncmp>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	1d5a      	adds	r2, r3, #5
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	609a      	str	r2, [r3, #8]
        return true;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e090      	b.n	8002056 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <parse_value+0xe8>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	1d1a      	adds	r2, r3, #4
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d819      	bhi.n	8001f7c <parse_value+0xe8>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4413      	add	r3, r2
 8001f52:	2204      	movs	r2, #4
 8001f54:	4944      	ldr	r1, [pc, #272]	@ (8002068 <parse_value+0x1d4>)
 8001f56:	4618      	mov	r0, r3
 8001f58:	f00a f96f 	bl	800c23a <strncmp>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2202      	movs	r2, #2
 8001f66:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	1d1a      	adds	r2, r3, #4
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	609a      	str	r2, [r3, #8]
        return true;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e06c      	b.n	8002056 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d013      	beq.n	8001faa <parse_value+0x116>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d20d      	bcs.n	8001faa <parse_value+0x116>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4413      	add	r3, r2
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b22      	cmp	r3, #34	@ 0x22
 8001f9c:	d105      	bne.n	8001faa <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001f9e:	6839      	ldr	r1, [r7, #0]
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fcf7 	bl	8001994 <parse_string>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	e055      	b.n	8002056 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d023      	beq.n	8001ff8 <parse_value+0x164>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d21d      	bcs.n	8001ff8 <parse_value+0x164>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b2d      	cmp	r3, #45	@ 0x2d
 8001fca:	d00f      	beq.n	8001fec <parse_value+0x158>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b2f      	cmp	r3, #47	@ 0x2f
 8001fda:	d90d      	bls.n	8001ff8 <parse_value+0x164>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b39      	cmp	r3, #57	@ 0x39
 8001fea:	d805      	bhi.n	8001ff8 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001fec:	6839      	ldr	r1, [r7, #0]
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff faba 	bl	8001568 <parse_number>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	e02e      	b.n	8002056 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d013      	beq.n	8002026 <parse_value+0x192>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	d20d      	bcs.n	8002026 <parse_value+0x192>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4413      	add	r3, r2
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b5b      	cmp	r3, #91	@ 0x5b
 8002018:	d105      	bne.n	8002026 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800201a:	6839      	ldr	r1, [r7, #0]
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f825 	bl	800206c <parse_array>
 8002022:	4603      	mov	r3, r0
 8002024:	e017      	b.n	8002056 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <parse_value+0x1c0>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	d20d      	bcs.n	8002054 <parse_value+0x1c0>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4413      	add	r3, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b7b      	cmp	r3, #123	@ 0x7b
 8002046:	d105      	bne.n	8002054 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002048:	6839      	ldr	r1, [r7, #0]
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8d2 	bl	80021f4 <parse_object>
 8002050:	4603      	mov	r3, r0
 8002052:	e000      	b.n	8002056 <parse_value+0x1c2>
    }

    return false;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	0800eb48 	.word	0x0800eb48
 8002064:	0800eb78 	.word	0x0800eb78
 8002068:	0800eb80 	.word	0x0800eb80

0800206c <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002086:	d301      	bcc.n	800208c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002088:	2300      	movs	r3, #0
 800208a:	e0af      	b.n	80021ec <parse_array+0x180>
    }
    input_buffer->depth++;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4413      	add	r3, r2
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b5b      	cmp	r3, #91	@ 0x5b
 80020a4:	f040 8094 	bne.w	80021d0 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80020b2:	6838      	ldr	r0, [r7, #0]
 80020b4:	f7ff fdb6 	bl	8001c24 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00d      	beq.n	80020da <parse_array+0x6e>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d207      	bcs.n	80020da <parse_array+0x6e>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	4413      	add	r3, r2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b5d      	cmp	r3, #93	@ 0x5d
 80020d8:	d061      	beq.n	800219e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <parse_array+0x80>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d305      	bcc.n	80020f8 <parse_array+0x8c>
    {
        input_buffer->offset--;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	1e5a      	subs	r2, r3, #1
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	609a      	str	r2, [r3, #8]
        goto fail;
 80020f6:	e072      	b.n	80021de <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	1e5a      	subs	r2, r3, #1
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	3310      	adds	r3, #16
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f9c0 	bl	800148c <cJSON_New_Item>
 800210c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05f      	beq.n	80021d4 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d104      	bne.n	8002124 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	e007      	b.n	8002134 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800213e:	6838      	ldr	r0, [r7, #0]
 8002140:	f7ff fd70 	bl	8001c24 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002144:	6839      	ldr	r1, [r7, #0]
 8002146:	6938      	ldr	r0, [r7, #16]
 8002148:	f7ff fea4 	bl	8001e94 <parse_value>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d042      	beq.n	80021d8 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002152:	6838      	ldr	r0, [r7, #0]
 8002154:	f7ff fd66 	bl	8001c24 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00d      	beq.n	800217a <parse_array+0x10e>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d207      	bcs.n	800217a <parse_array+0x10e>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b2c      	cmp	r3, #44	@ 0x2c
 8002178:	d0c3      	beq.n	8002102 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d02d      	beq.n	80021dc <parse_array+0x170>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	d227      	bcs.n	80021dc <parse_array+0x170>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4413      	add	r3, r2
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b5d      	cmp	r3, #93	@ 0x5d
 800219a:	d11f      	bne.n	80021dc <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800219c:	e000      	b.n	80021a0 <parse_array+0x134>
        goto success;
 800219e:	bf00      	nop
    input_buffer->depth--;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	1e5a      	subs	r2, r3, #1
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <parse_array+0x14a>
        head->prev = current_item;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2220      	movs	r2, #32
 80021ba:	60da      	str	r2, [r3, #12]
    item->child = head;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	609a      	str	r2, [r3, #8]

    return true;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e00d      	b.n	80021ec <parse_array+0x180>
        goto fail;
 80021d0:	bf00      	nop
 80021d2:	e004      	b.n	80021de <parse_array+0x172>
            goto fail; /* allocation failure */
 80021d4:	bf00      	nop
 80021d6:	e002      	b.n	80021de <parse_array+0x172>
            goto fail; /* failed to parse value */
 80021d8:	bf00      	nop
 80021da:	e000      	b.n	80021de <parse_array+0x172>
        goto fail; /* expected end of array */
 80021dc:	bf00      	nop

fail:
    if (head != NULL)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80021e4:	6978      	ldr	r0, [r7, #20]
 80021e6:	f7ff f967 	bl	80014b8 <cJSON_Delete>
    }

    return false;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800220e:	d301      	bcc.n	8002214 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002210:	2300      	movs	r3, #0
 8002212:	e0f7      	b.n	8002404 <parse_object+0x210>
    }
    input_buffer->depth++;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80db 	beq.w	80023dc <parse_object+0x1e8>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	f080 80d4 	bcs.w	80023dc <parse_object+0x1e8>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4413      	add	r3, r2
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b7b      	cmp	r3, #123	@ 0x7b
 8002242:	f040 80cb 	bne.w	80023dc <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002250:	6838      	ldr	r0, [r7, #0]
 8002252:	f7ff fce7 	bl	8001c24 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00e      	beq.n	800227a <parse_object+0x86>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	d208      	bcs.n	800227a <parse_object+0x86>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4413      	add	r3, r2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b7d      	cmp	r3, #125	@ 0x7d
 8002276:	f000 8098 	beq.w	80023aa <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <parse_object+0x98>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	d305      	bcc.n	8002298 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	1e5a      	subs	r2, r3, #1
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	609a      	str	r2, [r3, #8]
        goto fail;
 8002296:	e0ae      	b.n	80023f6 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	1e5a      	subs	r2, r3, #1
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	3310      	adds	r3, #16
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff f8f0 	bl	800148c <cJSON_New_Item>
 80022ac:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8095 	beq.w	80023e0 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d104      	bne.n	80022c6 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	e007      	b.n	80022d6 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8083 	beq.w	80023e4 <parse_object+0x1f0>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d27b      	bcs.n	80023e4 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80022f6:	6838      	ldr	r0, [r7, #0]
 80022f8:	f7ff fc94 	bl	8001c24 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80022fc:	6839      	ldr	r1, [r7, #0]
 80022fe:	6938      	ldr	r0, [r7, #16]
 8002300:	f7ff fb48 	bl	8001994 <parse_string>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d06e      	beq.n	80023e8 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800230a:	6838      	ldr	r0, [r7, #0]
 800230c:	f7ff fc8a 	bl	8001c24 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d063      	beq.n	80023ec <parse_object+0x1f8>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	d25d      	bcs.n	80023ec <parse_object+0x1f8>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4413      	add	r3, r2
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b3a      	cmp	r3, #58	@ 0x3a
 800233e:	d155      	bne.n	80023ec <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7ff fc6a 	bl	8001c24 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002350:	6839      	ldr	r1, [r7, #0]
 8002352:	6938      	ldr	r0, [r7, #16]
 8002354:	f7ff fd9e 	bl	8001e94 <parse_value>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d048      	beq.n	80023f0 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800235e:	6838      	ldr	r0, [r7, #0]
 8002360:	f7ff fc60 	bl	8001c24 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00d      	beq.n	8002386 <parse_object+0x192>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d207      	bcs.n	8002386 <parse_object+0x192>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	4413      	add	r3, r2
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b2c      	cmp	r3, #44	@ 0x2c
 8002384:	d08d      	beq.n	80022a2 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d033      	beq.n	80023f4 <parse_object+0x200>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d22d      	bcs.n	80023f4 <parse_object+0x200>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4413      	add	r3, r2
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b7d      	cmp	r3, #125	@ 0x7d
 80023a6:	d125      	bne.n	80023f4 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 80023a8:	e000      	b.n	80023ac <parse_object+0x1b8>
        goto success; /* empty object */
 80023aa:	bf00      	nop
    input_buffer->depth--;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	1e5a      	subs	r2, r3, #1
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <parse_object+0x1ce>
        head->prev = current_item;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2240      	movs	r2, #64	@ 0x40
 80023c6:	60da      	str	r2, [r3, #12]
    item->child = head;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	609a      	str	r2, [r3, #8]
    return true;
 80023d8:	2301      	movs	r3, #1
 80023da:	e013      	b.n	8002404 <parse_object+0x210>
        goto fail; /* not an object */
 80023dc:	bf00      	nop
 80023de:	e00a      	b.n	80023f6 <parse_object+0x202>
            goto fail; /* allocation failure */
 80023e0:	bf00      	nop
 80023e2:	e008      	b.n	80023f6 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 80023e4:	bf00      	nop
 80023e6:	e006      	b.n	80023f6 <parse_object+0x202>
            goto fail; /* failed to parse name */
 80023e8:	bf00      	nop
 80023ea:	e004      	b.n	80023f6 <parse_object+0x202>
            goto fail; /* invalid object */
 80023ec:	bf00      	nop
 80023ee:	e002      	b.n	80023f6 <parse_object+0x202>
            goto fail; /* failed to parse value */
 80023f0:	bf00      	nop
 80023f2:	e000      	b.n	80023f6 <parse_object+0x202>
        goto fail; /* expected end of object */
 80023f4:	bf00      	nop

fail:
    if (head != NULL)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <parse_object+0x20e>
    {
        cJSON_Delete(head);
 80023fc:	6978      	ldr	r0, [r7, #20]
 80023fe:	f7ff f85b 	bl	80014b8 <cJSON_Delete>
    }

    return false;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <cJSON_GetArraySize>:
    return true;
}

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <cJSON_GetArraySize+0x1a>
    {
        return 0;
 8002422:	2300      	movs	r3, #0
 8002424:	e00d      	b.n	8002442 <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 800242c:	e005      	b.n	800243a <cJSON_GetArraySize+0x2e>
    {
        size++;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3301      	adds	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
        child = child->next;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f6      	bne.n	800242e <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 8002440:	68bb      	ldr	r3, [r7, #8]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <get_array_item+0x18>
    {
        return NULL;
 8002462:	2300      	movs	r3, #0
 8002464:	e010      	b.n	8002488 <get_array_item+0x3a>
    }

    current_child = array->child;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 800246c:	e005      	b.n	800247a <get_array_item+0x2c>
    {
        index--;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	3b01      	subs	r3, #1
 8002472:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <get_array_item+0x38>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f3      	bne.n	800246e <get_array_item+0x20>
    }

    return current_child;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
    if (index < 0)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da01      	bge.n	80024a8 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e005      	b.n	80024b4 <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	4619      	mov	r1, r3
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ffce 	bl	800244e <get_array_item>
 80024b2:	4603      	mov	r3, r0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <get_object_item+0x1c>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <get_object_item+0x20>
    {
        return NULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	e033      	b.n	8002544 <get_object_item+0x88>
    }

    current_element = object->child;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d017      	beq.n	8002518 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80024e8:	e002      	b.n	80024f0 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01c      	beq.n	8002530 <get_object_item+0x74>
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d018      	beq.n	8002530 <get_object_item+0x74>
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4619      	mov	r1, r3
 8002504:	68b8      	ldr	r0, [r7, #8]
 8002506:	f7fd fe63 	bl	80001d0 <strcmp>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ec      	bne.n	80024ea <get_object_item+0x2e>
 8002510:	e00e      	b.n	8002530 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <get_object_item+0x74>
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4619      	mov	r1, r3
 8002524:	68b8      	ldr	r0, [r7, #8]
 8002526:	f7fe ff45 	bl	80013b4 <case_insensitive_strcmp>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <get_object_item+0x82>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <get_object_item+0x86>
        return NULL;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <get_object_item+0x88>
    }

    return current_element;
 8002542:	697b      	ldr	r3, [r7, #20]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002556:	2200      	movs	r2, #0
 8002558:	6839      	ldr	r1, [r7, #0]
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffae 	bl	80024bc <get_object_item>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <setCalibrationMatrix>:
#include "calibrate.h"

int setCalibrationMatrix( POINT_T * displayPtr,
						  POINT_T * screenPtr,
                          MATRIX * matrixPtr)
{
 800256a:	b480      	push	{r7}
 800256c:	b087      	sub	sp, #28
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]

    int  retValue = OK ;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]



    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3310      	adds	r3, #16
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	3208      	adds	r2, #8
 800258a:	6851      	ldr	r1, [r2, #4]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	3210      	adds	r2, #16
 8002590:	6852      	ldr	r2, [r2, #4]
 8002592:	1a8a      	subs	r2, r1, r2
 8002594:	fb03 f202 	mul.w	r2, r3, r2
                         ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	3308      	adds	r3, #8
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3310      	adds	r3, #16
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	1acb      	subs	r3, r1, r3
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	6848      	ldr	r0, [r1, #4]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	3110      	adds	r1, #16
 80025ae:	6849      	ldr	r1, [r1, #4]
 80025b0:	1a41      	subs	r1, r0, r1
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 80025b6:	1ad2      	subs	r2, r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	619a      	str	r2, [r3, #24]

    if( matrixPtr->Divider == 0 )
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d103      	bne.n	80025cc <setCalibrationMatrix+0x62>
    {
        retValue = NOT_OK ;
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e105      	b.n	80027d8 <setCalibrationMatrix+0x26e>
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3310      	adds	r3, #16
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	3208      	adds	r2, #8
 80025dc:	6851      	ldr	r1, [r2, #4]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	3210      	adds	r2, #16
 80025e2:	6852      	ldr	r2, [r2, #4]
 80025e4:	1a8a      	subs	r2, r1, r2
 80025e6:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3308      	adds	r3, #8
 80025ee:	6819      	ldr	r1, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3310      	adds	r3, #16
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	1acb      	subs	r3, r1, r3
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6848      	ldr	r0, [r1, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	3110      	adds	r1, #16
 8002600:	6849      	ldr	r1, [r1, #4]
 8002602:	1a41      	subs	r1, r0, r1
 8002604:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8002608:	1ad2      	subs	r2, r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	601a      	str	r2, [r3, #0]

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3310      	adds	r3, #16
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	3208      	adds	r2, #8
 800261e:	6811      	ldr	r1, [r2, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	3210      	adds	r2, #16
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	1a8a      	subs	r2, r1, r2
 8002628:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3310      	adds	r3, #16
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	1acb      	subs	r3, r1, r3
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	3108      	adds	r1, #8
 800263c:	6808      	ldr	r0, [r1, #0]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	3110      	adds	r1, #16
 8002642:	6809      	ldr	r1, [r1, #0]
 8002644:	1a41      	subs	r1, r0, r1
 8002646:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 800264a:	1ad2      	subs	r2, r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	605a      	str	r2, [r3, #4]

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	3310      	adds	r3, #16
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	3208      	adds	r2, #8
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	fb03 f202 	mul.w	r2, r3, r2
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	3308      	adds	r3, #8
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68f9      	ldr	r1, [r7, #12]
 8002668:	3110      	adds	r1, #16
 800266a:	6809      	ldr	r1, [r1, #0]
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	6852      	ldr	r2, [r2, #4]
 8002676:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68f9      	ldr	r1, [r7, #12]
 8002680:	3110      	adds	r1, #16
 8002682:	6809      	ldr	r1, [r1, #0]
 8002684:	fb03 f101 	mul.w	r1, r3, r1
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3310      	adds	r3, #16
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	6800      	ldr	r0, [r0, #0]
 8002692:	fb00 f303 	mul.w	r3, r0, r3
 8002696:	1acb      	subs	r3, r1, r3
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	3108      	adds	r1, #8
 800269c:	6849      	ldr	r1, [r1, #4]
 800269e:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80026a2:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	3308      	adds	r3, #8
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68f9      	ldr	r1, [r7, #12]
 80026ac:	6809      	ldr	r1, [r1, #0]
 80026ae:	fb03 f101 	mul.w	r1, r3, r1
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	3008      	adds	r0, #8
 80026ba:	6800      	ldr	r0, [r0, #0]
 80026bc:	fb00 f303 	mul.w	r3, r0, r3
 80026c0:	1acb      	subs	r3, r1, r3
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	3110      	adds	r1, #16
 80026c6:	6849      	ldr	r1, [r1, #4]
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 80026cc:	441a      	add	r2, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	609a      	str	r2, [r3, #8]

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3310      	adds	r3, #16
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	3208      	adds	r2, #8
 80026e2:	6851      	ldr	r1, [r2, #4]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	3210      	adds	r2, #16
 80026e8:	6852      	ldr	r2, [r2, #4]
 80026ea:	1a8a      	subs	r2, r1, r2
 80026ec:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3308      	adds	r3, #8
 80026f4:	6859      	ldr	r1, [r3, #4]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3310      	adds	r3, #16
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	1acb      	subs	r3, r1, r3
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	6848      	ldr	r0, [r1, #4]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	3110      	adds	r1, #16
 8002706:	6849      	ldr	r1, [r1, #4]
 8002708:	1a41      	subs	r1, r0, r1
 800270a:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 800270e:	1ad2      	subs	r2, r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	60da      	str	r2, [r3, #12]

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3310      	adds	r3, #16
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	3208      	adds	r2, #8
 8002724:	6851      	ldr	r1, [r2, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	3210      	adds	r2, #16
 800272a:	6852      	ldr	r2, [r2, #4]
 800272c:	1a8a      	subs	r2, r1, r2
 800272e:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3310      	adds	r3, #16
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	1acb      	subs	r3, r1, r3
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	3108      	adds	r1, #8
 8002742:	6808      	ldr	r0, [r1, #0]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	3110      	adds	r1, #16
 8002748:	6809      	ldr	r1, [r1, #0]
 800274a:	1a41      	subs	r1, r0, r1
 800274c:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 8002750:	1ad2      	subs	r2, r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	611a      	str	r2, [r3, #16]

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	3310      	adds	r3, #16
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	3208      	adds	r2, #8
 8002760:	6852      	ldr	r2, [r2, #4]
 8002762:	fb03 f202 	mul.w	r2, r3, r2
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3308      	adds	r3, #8
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68f9      	ldr	r1, [r7, #12]
 800276e:	3110      	adds	r1, #16
 8002770:	6849      	ldr	r1, [r1, #4]
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	6852      	ldr	r2, [r2, #4]
 800277c:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	3110      	adds	r1, #16
 8002788:	6849      	ldr	r1, [r1, #4]
 800278a:	fb03 f101 	mul.w	r1, r3, r1
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3310      	adds	r3, #16
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	6840      	ldr	r0, [r0, #4]
 8002798:	fb00 f303 	mul.w	r3, r0, r3
 800279c:	1acb      	subs	r3, r1, r3
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	3108      	adds	r1, #8
 80027a2:	6849      	ldr	r1, [r1, #4]
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 80027a8:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	3308      	adds	r3, #8
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	6849      	ldr	r1, [r1, #4]
 80027b4:	fb03 f101 	mul.w	r1, r3, r1
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	3008      	adds	r0, #8
 80027c0:	6840      	ldr	r0, [r0, #4]
 80027c2:	fb00 f303 	mul.w	r3, r0, r3
 80027c6:	1acb      	subs	r3, r1, r3
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	3110      	adds	r1, #16
 80027cc:	6849      	ldr	r1, [r1, #4]
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 80027d2:	441a      	add	r2, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	615a      	str	r2, [r3, #20]
    }

    return( retValue ) ;
 80027d8:	697b      	ldr	r3, [r7, #20]

} /* end of setCalibrationMatrix() */
 80027da:	4618      	mov	r0, r3
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <getDisplayPoint>:
 *
 */
int getDisplayPoint( POINT_T * displayPtr,
					 POINT_T * screenPtr,
                     MATRIX * matrixPtr )
{
 80027e6:	b480      	push	{r7}
 80027e8:	b087      	sub	sp, #28
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
    int retValue = OK ;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]


    if( matrixPtr->Divider != 0 )
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d02c      	beq.n	8002858 <getDisplayPoint+0x72>
        /* Operation order is important since we are doing integer */
        /*  math. Make sure you add all terms together before      */
        /*  dividing, so that the remainder is not rounded off     */
        /*  prematurely.                                           */

        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	fb03 f202 	mul.w	r2, r3, r2
                          (matrixPtr->Bn * screenPtr->y) +
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	6849      	ldr	r1, [r1, #4]
 8002812:	fb01 f303 	mul.w	r3, r1, r3
        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 8002816:	441a      	add	r2, r3
                           matrixPtr->Cn
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
                          (matrixPtr->Bn * screenPtr->y) +
 800281c:	441a      	add	r2, r3
                        ) / matrixPtr->Divider ;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	fb92 f2f3 	sdiv	r2, r2, r3
        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	601a      	str	r2, [r3, #0]

        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	fb03 f202 	mul.w	r2, r3, r2
                          (matrixPtr->En * screenPtr->y) +
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	6849      	ldr	r1, [r1, #4]
 800283e:	fb01 f303 	mul.w	r3, r1, r3
        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 8002842:	441a      	add	r2, r3
                           matrixPtr->Fn
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
                          (matrixPtr->En * screenPtr->y) +
 8002848:	441a      	add	r2, r3
                        ) / matrixPtr->Divider ;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	fb92 f2f3 	sdiv	r2, r2, r3
        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	e002      	b.n	800285e <getDisplayPoint+0x78>
    }
    else
    {
        retValue = NOT_OK;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
 800285c:	617b      	str	r3, [r7, #20]
    }

    return (retValue);
 800285e:	697b      	ldr	r3, [r7, #20]

} /* end of getDisplayPoint() */
 8002860:	4618      	mov	r0, r3
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <DrawCloud>:
  lcdDrawImage(0, (lcdGetHeight() - bmBackGround.ySize) / 2, &bmBackGround);
 }
 return HAL_GetTick() - start;
}

void DrawCloud(int x, int y) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmicon3);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	b29b      	uxth	r3, r3
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	b291      	uxth	r1, r2
 800287e:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <DrawCloud+0x24>)
 8002880:	4618      	mov	r0, r3
 8002882:	f002 fefd 	bl	8005680 <lcdDrawImage>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	08021d04 	.word	0x08021d04

08002894 <TextTitle>:

void TextTitle(int16_t x, int16_t y){
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	460a      	mov	r2, r1
 800289e:	80fb      	strh	r3, [r7, #6]
 80028a0:	4613      	mov	r3, r2
 80028a2:	80bb      	strh	r3, [r7, #4]
	lcdSetCursor(x, y);
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	88ba      	ldrh	r2, [r7, #4]
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 f902 	bl	8005ab4 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 80028b0:	f249 517f 	movw	r1, #38271	@ 0x957f
 80028b4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80028b8:	f003 f87c 	bl	80059b4 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 80028bc:	4804      	ldr	r0, [pc, #16]	@ (80028d0 <TextTitle+0x3c>)
 80028be:	f003 f869 	bl	8005994 <lcdSetTextFont>
	lcdPrintf("Weather Report\r\n");
 80028c2:	4804      	ldr	r0, [pc, #16]	@ (80028d4 <TextTitle+0x40>)
 80028c4:	f002 ffda 	bl	800587c <lcdPrintf>

}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	2000001c 	.word	0x2000001c
 80028d4:	0800ecb4 	.word	0x0800ecb4

080028d8 <CloudRain>:
	lcdDrawThickArc(x0 , y0 ,r , start_angle , -93  , thickness , COLOR_GREEN);
	lcdDrawThickArc(x0 , y0 ,r , -87 , -23  , thickness , COLOR_BLUE);
	lcdDrawThickArc(x0 , y0 ,r , -17 , end_angle  , thickness , COLOR_ORANGE);
}

void CloudRain (int x, int y){
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b085      	sub	sp, #20
 80028dc:	af02      	add	r7, sp, #8
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	b218      	sxth	r0, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b219      	sxth	r1, r3
 80028ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	2305      	movs	r3, #5
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	230a      	movs	r3, #10
 80028f6:	221e      	movs	r2, #30
 80028f8:	f002 fe5c 	bl	80055b4 <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3318      	adds	r3, #24
 8002902:	b29b      	uxth	r3, r3
 8002904:	b218      	sxth	r0, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	3302      	adds	r3, #2
 800290c:	b29b      	uxth	r3, r3
 800290e:	b219      	sxth	r1, r3
 8002910:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002914:	2207      	movs	r2, #7
 8002916:	f002 fd18 	bl	800534a <lcdFillCircle>
    lcdFillCircle(x + 15, y , 9, COLOR_WHITE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	b29b      	uxth	r3, r3
 800291e:	330f      	adds	r3, #15
 8002920:	b29b      	uxth	r3, r3
 8002922:	b218      	sxth	r0, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b219      	sxth	r1, r3
 8002928:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800292c:	2209      	movs	r2, #9
 800292e:	f002 fd0c 	bl	800534a <lcdFillCircle>

    lcdDrawLine(x + 7, y + 13, x + 5, y + 16, COLOR_BLUE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	b29b      	uxth	r3, r3
 8002936:	3307      	adds	r3, #7
 8002938:	b29b      	uxth	r3, r3
 800293a:	b218      	sxth	r0, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	330d      	adds	r3, #13
 8002942:	b29b      	uxth	r3, r3
 8002944:	b219      	sxth	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	b29b      	uxth	r3, r3
 800294a:	3305      	adds	r3, #5
 800294c:	b29b      	uxth	r3, r3
 800294e:	b21a      	sxth	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	3310      	adds	r3, #16
 8002956:	b29b      	uxth	r3, r3
 8002958:	b21b      	sxth	r3, r3
 800295a:	241f      	movs	r4, #31
 800295c:	9400      	str	r4, [sp, #0]
 800295e:	f002 fa0d 	bl	8004d7c <lcdDrawLine>
    lcdDrawLine(x + 8, y + 13, x + 6, y + 16, COLOR_BLUE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	b29b      	uxth	r3, r3
 8002966:	3308      	adds	r3, #8
 8002968:	b29b      	uxth	r3, r3
 800296a:	b218      	sxth	r0, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	330d      	adds	r3, #13
 8002972:	b29b      	uxth	r3, r3
 8002974:	b219      	sxth	r1, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	b29b      	uxth	r3, r3
 800297a:	3306      	adds	r3, #6
 800297c:	b29b      	uxth	r3, r3
 800297e:	b21a      	sxth	r2, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	3310      	adds	r3, #16
 8002986:	b29b      	uxth	r3, r3
 8002988:	b21b      	sxth	r3, r3
 800298a:	241f      	movs	r4, #31
 800298c:	9400      	str	r4, [sp, #0]
 800298e:	f002 f9f5 	bl	8004d7c <lcdDrawLine>

    lcdDrawLine(x + 13, y + 13, x + 8, y + 19, COLOR_BLUE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	b29b      	uxth	r3, r3
 8002996:	330d      	adds	r3, #13
 8002998:	b29b      	uxth	r3, r3
 800299a:	b218      	sxth	r0, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	330d      	adds	r3, #13
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	b219      	sxth	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3308      	adds	r3, #8
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3313      	adds	r3, #19
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	241f      	movs	r4, #31
 80029bc:	9400      	str	r4, [sp, #0]
 80029be:	f002 f9dd 	bl	8004d7c <lcdDrawLine>
    lcdDrawLine(x + 14, y + 13, x + 9, y + 19, COLOR_BLUE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	330e      	adds	r3, #14
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	b218      	sxth	r0, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	330d      	adds	r3, #13
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	b219      	sxth	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3309      	adds	r3, #9
 80029dc:	b29b      	uxth	r3, r3
 80029de:	b21a      	sxth	r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3313      	adds	r3, #19
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	241f      	movs	r4, #31
 80029ec:	9400      	str	r4, [sp, #0]
 80029ee:	f002 f9c5 	bl	8004d7c <lcdDrawLine>

    lcdDrawLine(x + 19, y + 13, x + 17, y + 16, COLOR_BLUE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3313      	adds	r3, #19
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	b218      	sxth	r0, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	330d      	adds	r3, #13
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	b219      	sxth	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3311      	adds	r3, #17
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	b21a      	sxth	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3310      	adds	r3, #16
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	b21b      	sxth	r3, r3
 8002a1a:	241f      	movs	r4, #31
 8002a1c:	9400      	str	r4, [sp, #0]
 8002a1e:	f002 f9ad 	bl	8004d7c <lcdDrawLine>
    lcdDrawLine(x + 20, y + 13, x + 18, y + 16, COLOR_BLUE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3314      	adds	r3, #20
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	b218      	sxth	r0, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	330d      	adds	r3, #13
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	b219      	sxth	r1, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3312      	adds	r3, #18
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	b21a      	sxth	r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3310      	adds	r3, #16
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	b21b      	sxth	r3, r3
 8002a4a:	241f      	movs	r4, #31
 8002a4c:	9400      	str	r4, [sp, #0]
 8002a4e:	f002 f995 	bl	8004d7c <lcdDrawLine>

    lcdDrawLine(x + 25, y + 13, x + 20, y + 19, COLOR_BLUE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3319      	adds	r3, #25
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	b218      	sxth	r0, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	330d      	adds	r3, #13
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b219      	sxth	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3314      	adds	r3, #20
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	b21a      	sxth	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3313      	adds	r3, #19
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	241f      	movs	r4, #31
 8002a7c:	9400      	str	r4, [sp, #0]
 8002a7e:	f002 f97d 	bl	8004d7c <lcdDrawLine>
    lcdDrawLine(x + 26, y + 13, x + 21, y + 19, COLOR_BLUE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	331a      	adds	r3, #26
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	b218      	sxth	r0, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	330d      	adds	r3, #13
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b219      	sxth	r1, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3315      	adds	r3, #21
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b21a      	sxth	r2, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3313      	adds	r3, #19
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	241f      	movs	r4, #31
 8002aac:	9400      	str	r4, [sp, #0]
 8002aae:	f002 f965 	bl	8004d7c <lcdDrawLine>
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd90      	pop	{r4, r7, pc}

08002aba <CloudSun>:
void CloudSun (int x, int y){
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af02      	add	r7, sp, #8
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]

	lcdFillCircle(x + 21, y - 5 , 7, COLOR_DARKYELLOW);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3315      	adds	r3, #21
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	b218      	sxth	r0, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b05      	subs	r3, #5
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	b219      	sxth	r1, r3
 8002ad8:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002adc:	2207      	movs	r2, #7
 8002ade:	f002 fc34 	bl	800534a <lcdFillCircle>
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	b218      	sxth	r0, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b219      	sxth	r1, r3
 8002aea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	2305      	movs	r3, #5
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	230a      	movs	r3, #10
 8002af6:	221e      	movs	r2, #30
 8002af8:	f002 fd5c 	bl	80055b4 <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3318      	adds	r3, #24
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	b218      	sxth	r0, r3
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	b219      	sxth	r1, r3
 8002b10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b14:	2207      	movs	r2, #7
 8002b16:	f002 fc18 	bl	800534a <lcdFillCircle>
    lcdFillCircle(x + 15, y , 9, COLOR_WHITE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	330f      	adds	r3, #15
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	b218      	sxth	r0, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b219      	sxth	r1, r3
 8002b28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b2c:	2209      	movs	r2, #9
 8002b2e:	f002 fc0c 	bl	800534a <lcdFillCircle>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <CloudMoon>:
void CloudMoon (int x, int y){
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af02      	add	r7, sp, #8
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]

	lcdFillCircle(x + 10, y - 5 , 7, COLOR_DARKYELLOW);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	330a      	adds	r3, #10
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	b218      	sxth	r0, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b05      	subs	r3, #5
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	b219      	sxth	r1, r3
 8002b58:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	f002 fbf4 	bl	800534a <lcdFillCircle>
	lcdFillCircle(x + 7, y - 8 , 4, COLOR_THEME_SKYBLUE_BASE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3307      	adds	r3, #7
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	b218      	sxth	r0, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b08      	subs	r3, #8
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	b219      	sxth	r1, r3
 8002b76:	f249 537f 	movw	r3, #38271	@ 0x957f
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	f002 fbe5 	bl	800534a <lcdFillCircle>
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	b218      	sxth	r0, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	b219      	sxth	r1, r3
 8002b88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	2305      	movs	r3, #5
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	230a      	movs	r3, #10
 8002b94:	221e      	movs	r2, #30
 8002b96:	f002 fd0d 	bl	80055b4 <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3318      	adds	r3, #24
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	b218      	sxth	r0, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3302      	adds	r3, #2
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b219      	sxth	r1, r3
 8002bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bb2:	2207      	movs	r2, #7
 8002bb4:	f002 fbc9 	bl	800534a <lcdFillCircle>
    lcdFillCircle(x + 20, y , 9, COLOR_WHITE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3314      	adds	r3, #20
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	b218      	sxth	r0, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b219      	sxth	r1, r3
 8002bc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bca:	2209      	movs	r2, #9
 8002bcc:	f002 fbbd 	bl	800534a <lcdFillCircle>


}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <CloudThunder>:
void CloudThunder (int x, int y){
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	b218      	sxth	r0, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	b219      	sxth	r1, r3
 8002bea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	2305      	movs	r3, #5
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	230a      	movs	r3, #10
 8002bf6:	221e      	movs	r2, #30
 8002bf8:	f002 fcdc 	bl	80055b4 <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3318      	adds	r3, #24
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	b218      	sxth	r0, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	b219      	sxth	r1, r3
 8002c10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c14:	2207      	movs	r2, #7
 8002c16:	f002 fb98 	bl	800534a <lcdFillCircle>
    lcdFillCircle(x + 15, y , 9, COLOR_WHITE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	330f      	adds	r3, #15
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b218      	sxth	r0, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	b219      	sxth	r1, r3
 8002c28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c2c:	2209      	movs	r2, #9
 8002c2e:	f002 fb8c 	bl	800534a <lcdFillCircle>

    // Draw the first thunderbolt using lines for a zigzag shape
        lcdDrawLine(x + 7, y + 10, x + 5, y + 15, COLOR_YELLOW);   // First thunderbolt
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3307      	adds	r3, #7
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	b218      	sxth	r0, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	330a      	adds	r3, #10
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	b219      	sxth	r1, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3305      	adds	r3, #5
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	b21a      	sxth	r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	330f      	adds	r3, #15
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	b21b      	sxth	r3, r3
 8002c5a:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002c5e:	9400      	str	r4, [sp, #0]
 8002c60:	f002 f88c 	bl	8004d7c <lcdDrawLine>
        lcdDrawLine(x + 5, y + 15, x + 9, y + 15, COLOR_YELLOW);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3305      	adds	r3, #5
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	b218      	sxth	r0, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	330f      	adds	r3, #15
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	b219      	sxth	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3309      	adds	r3, #9
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	b21a      	sxth	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	330f      	adds	r3, #15
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b21b      	sxth	r3, r3
 8002c8c:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002c90:	9400      	str	r4, [sp, #0]
 8002c92:	f002 f873 	bl	8004d7c <lcdDrawLine>
        lcdDrawLine(x + 9, y + 15, x + 6, y + 21, COLOR_YELLOW);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3309      	adds	r3, #9
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b218      	sxth	r0, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	330f      	adds	r3, #15
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	b219      	sxth	r1, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3306      	adds	r3, #6
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	b21a      	sxth	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3315      	adds	r3, #21
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002cc2:	9400      	str	r4, [sp, #0]
 8002cc4:	f002 f85a 	bl	8004d7c <lcdDrawLine>

        // Draw the second thunderbolt (centered below the cloud)
        lcdDrawLine(x + 15, y + 10, x + 13, y + 15, COLOR_YELLOW);  // Second thunderbolt
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	330f      	adds	r3, #15
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	b218      	sxth	r0, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	330a      	adds	r3, #10
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	b219      	sxth	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	330d      	adds	r3, #13
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	b21a      	sxth	r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	330f      	adds	r3, #15
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	b21b      	sxth	r3, r3
 8002cf0:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002cf4:	9400      	str	r4, [sp, #0]
 8002cf6:	f002 f841 	bl	8004d7c <lcdDrawLine>
        lcdDrawLine(x + 13, y + 15, x + 17, y + 15, COLOR_YELLOW);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	330d      	adds	r3, #13
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	b218      	sxth	r0, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	330f      	adds	r3, #15
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	b219      	sxth	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3311      	adds	r3, #17
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b21a      	sxth	r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	330f      	adds	r3, #15
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002d26:	9400      	str	r4, [sp, #0]
 8002d28:	f002 f828 	bl	8004d7c <lcdDrawLine>
        lcdDrawLine(x + 17, y + 15, x + 14, y + 21, COLOR_YELLOW);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3311      	adds	r3, #17
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	b218      	sxth	r0, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	330f      	adds	r3, #15
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	b219      	sxth	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	330e      	adds	r3, #14
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	b21a      	sxth	r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3315      	adds	r3, #21
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	b21b      	sxth	r3, r3
 8002d54:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002d58:	9400      	str	r4, [sp, #0]
 8002d5a:	f002 f80f 	bl	8004d7c <lcdDrawLine>

        // Draw the third thunderbolt (right side)
        lcdDrawLine(x + 23, y + 10, x + 21, y + 15, COLOR_YELLOW);  // Third thunderbolt
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3317      	adds	r3, #23
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	b218      	sxth	r0, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	330a      	adds	r3, #10
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	b219      	sxth	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3315      	adds	r3, #21
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	b21a      	sxth	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	330f      	adds	r3, #15
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	b21b      	sxth	r3, r3
 8002d86:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002d8a:	9400      	str	r4, [sp, #0]
 8002d8c:	f001 fff6 	bl	8004d7c <lcdDrawLine>
        lcdDrawLine(x + 21, y + 15, x + 25, y + 15, COLOR_YELLOW);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3315      	adds	r3, #21
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	b218      	sxth	r0, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	330f      	adds	r3, #15
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b219      	sxth	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3319      	adds	r3, #25
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	b21a      	sxth	r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	330f      	adds	r3, #15
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b21b      	sxth	r3, r3
 8002db8:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002dbc:	9400      	str	r4, [sp, #0]
 8002dbe:	f001 ffdd 	bl	8004d7c <lcdDrawLine>
        lcdDrawLine(x + 25, y + 15, x + 22, y + 21, COLOR_YELLOW);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3319      	adds	r3, #25
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	b218      	sxth	r0, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	330f      	adds	r3, #15
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	b219      	sxth	r1, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3316      	adds	r3, #22
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	b21a      	sxth	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3315      	adds	r3, #21
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002dee:	9400      	str	r4, [sp, #0]
 8002df0:	f001 ffc4 	bl	8004d7c <lcdDrawLine>

        // Draw the first thunderbolt using lines for a zigzag shape
		lcdDrawLine(x + 7 + 1, y + 10, x + 5 + 1, y + 15, COLOR_YELLOW);   // First thunderbolt
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3308      	adds	r3, #8
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	b218      	sxth	r0, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	330a      	adds	r3, #10
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	b219      	sxth	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3306      	adds	r3, #6
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	b21a      	sxth	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	330f      	adds	r3, #15
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	b21b      	sxth	r3, r3
 8002e1c:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002e20:	9400      	str	r4, [sp, #0]
 8002e22:	f001 ffab 	bl	8004d7c <lcdDrawLine>
		lcdDrawLine(x + 5 + 1, y + 15, x + 9 + 1, y + 15, COLOR_YELLOW);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3306      	adds	r3, #6
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	b218      	sxth	r0, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	330f      	adds	r3, #15
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	b219      	sxth	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	330a      	adds	r3, #10
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b21a      	sxth	r2, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	330f      	adds	r3, #15
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	b21b      	sxth	r3, r3
 8002e4e:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002e52:	9400      	str	r4, [sp, #0]
 8002e54:	f001 ff92 	bl	8004d7c <lcdDrawLine>
		lcdDrawLine(x + 9 + 1, y + 15, x + 6 + 1, y + 21, COLOR_YELLOW);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	330a      	adds	r3, #10
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	b218      	sxth	r0, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	330f      	adds	r3, #15
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	b219      	sxth	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3307      	adds	r3, #7
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	b21a      	sxth	r2, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3315      	adds	r3, #21
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	b21b      	sxth	r3, r3
 8002e80:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002e84:	9400      	str	r4, [sp, #0]
 8002e86:	f001 ff79 	bl	8004d7c <lcdDrawLine>

		// Draw the second thunderbolt (centered below the cloud)
		lcdDrawLine(x + 15 + 1, y + 10, x + 13 + 1, y + 15, COLOR_YELLOW);  // Second thunderbolt
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3310      	adds	r3, #16
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	b218      	sxth	r0, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	330a      	adds	r3, #10
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	b219      	sxth	r1, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	330e      	adds	r3, #14
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b21a      	sxth	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	330f      	adds	r3, #15
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	b21b      	sxth	r3, r3
 8002eb2:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002eb6:	9400      	str	r4, [sp, #0]
 8002eb8:	f001 ff60 	bl	8004d7c <lcdDrawLine>
		lcdDrawLine(x + 13 + 1, y + 15, x + 17 + 1, y + 15, COLOR_YELLOW);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	330e      	adds	r3, #14
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	b218      	sxth	r0, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	330f      	adds	r3, #15
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	b219      	sxth	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3312      	adds	r3, #18
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	b21a      	sxth	r2, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	330f      	adds	r3, #15
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002ee8:	9400      	str	r4, [sp, #0]
 8002eea:	f001 ff47 	bl	8004d7c <lcdDrawLine>
		lcdDrawLine(x + 17 + 1, y + 15, x + 14 + 1, y + 21, COLOR_YELLOW);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3312      	adds	r3, #18
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	b218      	sxth	r0, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	330f      	adds	r3, #15
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	b219      	sxth	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	330f      	adds	r3, #15
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	b21a      	sxth	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3315      	adds	r3, #21
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	b21b      	sxth	r3, r3
 8002f16:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002f1a:	9400      	str	r4, [sp, #0]
 8002f1c:	f001 ff2e 	bl	8004d7c <lcdDrawLine>

		// Draw the third thunderbolt (right side)
		lcdDrawLine(x + 23 + 1, y + 10, x + 21 + 1, y + 15, COLOR_YELLOW);  // Third thunderbolt
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3318      	adds	r3, #24
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	b218      	sxth	r0, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	330a      	adds	r3, #10
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	b219      	sxth	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3316      	adds	r3, #22
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	b21a      	sxth	r2, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	330f      	adds	r3, #15
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002f4c:	9400      	str	r4, [sp, #0]
 8002f4e:	f001 ff15 	bl	8004d7c <lcdDrawLine>
		lcdDrawLine(x + 21 + 1, y + 15, x + 25 + 1, y + 15, COLOR_YELLOW);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3316      	adds	r3, #22
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	b218      	sxth	r0, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	330f      	adds	r3, #15
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	b219      	sxth	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	331a      	adds	r3, #26
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	b21a      	sxth	r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	330f      	adds	r3, #15
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	b21b      	sxth	r3, r3
 8002f7a:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002f7e:	9400      	str	r4, [sp, #0]
 8002f80:	f001 fefc 	bl	8004d7c <lcdDrawLine>
		lcdDrawLine(x + 25 + 1, y + 15, x + 22 + 1, y + 21, COLOR_YELLOW);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	331a      	adds	r3, #26
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	b218      	sxth	r0, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	330f      	adds	r3, #15
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	b219      	sxth	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3317      	adds	r3, #23
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	b21a      	sxth	r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3315      	adds	r3, #21
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	b21b      	sxth	r3, r3
 8002fac:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002fb0:	9400      	str	r4, [sp, #0]
 8002fb2:	f001 fee3 	bl	8004d7c <lcdDrawLine>
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd90      	pop	{r4, r7, pc}

08002fbe <interpolateColor>:

uint16_t interpolateColor(uint16_t color1, uint16_t color2, float ratio) {
 8002fbe:	b480      	push	{r7}
 8002fc0:	b089      	sub	sp, #36	@ 0x24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	460a      	mov	r2, r1
 8002fc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002fcc:	81fb      	strh	r3, [r7, #14]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	81bb      	strh	r3, [r7, #12]
    uint8_t r1 = (color1 >> 11) & 0x1F;
 8002fd2:	89fb      	ldrh	r3, [r7, #14]
 8002fd4:	0adb      	lsrs	r3, r3, #11
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	77fb      	strb	r3, [r7, #31]
    uint8_t g1 = (color1 >> 5) & 0x3F;
 8002fe0:	89fb      	ldrh	r3, [r7, #14]
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fec:	77bb      	strb	r3, [r7, #30]
    uint8_t b1 = color1 & 0x1F;
 8002fee:	89fb      	ldrh	r3, [r7, #14]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	777b      	strb	r3, [r7, #29]

    uint8_t r2 = (color2 >> 11) & 0x1F;
 8002ff8:	89bb      	ldrh	r3, [r7, #12]
 8002ffa:	0adb      	lsrs	r3, r3, #11
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	773b      	strb	r3, [r7, #28]
    uint8_t g2 = (color2 >> 5) & 0x3F;
 8003006:	89bb      	ldrh	r3, [r7, #12]
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	b29b      	uxth	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003012:	76fb      	strb	r3, [r7, #27]
    uint8_t b2 = color2 & 0x1F;
 8003014:	89bb      	ldrh	r3, [r7, #12]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	76bb      	strb	r3, [r7, #26]

    uint8_t r = r1 + (r2 - r1) * ratio;
 800301e:	7ffb      	ldrb	r3, [r7, #31]
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003028:	7f3a      	ldrb	r2, [r7, #28]
 800302a:	7ffb      	ldrb	r3, [r7, #31]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003036:	edd7 7a02 	vldr	s15, [r7, #8]
 800303a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800303e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003046:	edc7 7a01 	vstr	s15, [r7, #4]
 800304a:	793b      	ldrb	r3, [r7, #4]
 800304c:	767b      	strb	r3, [r7, #25]
    uint8_t g = g1 + (g2 - g1) * ratio;
 800304e:	7fbb      	ldrb	r3, [r7, #30]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003058:	7efa      	ldrb	r2, [r7, #27]
 800305a:	7fbb      	ldrb	r3, [r7, #30]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003066:	edd7 7a02 	vldr	s15, [r7, #8]
 800306a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800306e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003076:	edc7 7a01 	vstr	s15, [r7, #4]
 800307a:	793b      	ldrb	r3, [r7, #4]
 800307c:	763b      	strb	r3, [r7, #24]
    uint8_t b = b1 + (b2 - b1) * ratio;
 800307e:	7f7b      	ldrb	r3, [r7, #29]
 8003080:	ee07 3a90 	vmov	s15, r3
 8003084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003088:	7eba      	ldrb	r2, [r7, #26]
 800308a:	7f7b      	ldrb	r3, [r7, #29]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	ee07 3a90 	vmov	s15, r3
 8003092:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003096:	edd7 7a02 	vldr	s15, [r7, #8]
 800309a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800309e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80030aa:	793b      	ldrb	r3, [r7, #4]
 80030ac:	75fb      	strb	r3, [r7, #23]

    return (r << 11) | (g << 5) | b;
 80030ae:	7e7b      	ldrb	r3, [r7, #25]
 80030b0:	02db      	lsls	r3, r3, #11
 80030b2:	b21a      	sxth	r2, r3
 80030b4:	7e3b      	ldrb	r3, [r7, #24]
 80030b6:	015b      	lsls	r3, r3, #5
 80030b8:	b21b      	sxth	r3, r3
 80030ba:	4313      	orrs	r3, r2
 80030bc:	b21a      	sxth	r2, r3
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	b21b      	sxth	r3, r3
 80030c2:	4313      	orrs	r3, r2
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	b29b      	uxth	r3, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3724      	adds	r7, #36	@ 0x24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <DrawGradientLine>:

void DrawGradientLine(int16_t x, int16_t y, int16_t length, int16_t thickness, uint16_t colorStart, uint16_t colorEnd , int Vitri) {
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4604      	mov	r4, r0
 80030dc:	4608      	mov	r0, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	461a      	mov	r2, r3
 80030e2:	4623      	mov	r3, r4
 80030e4:	80fb      	strh	r3, [r7, #6]
 80030e6:	4603      	mov	r3, r0
 80030e8:	80bb      	strh	r3, [r7, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	807b      	strh	r3, [r7, #2]
 80030ee:	4613      	mov	r3, r2
 80030f0:	803b      	strh	r3, [r7, #0]
    // Radius for rounded ends, equal to half the thickness of the line
    int16_t radius = thickness / 2;
 80030f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030f6:	0fda      	lsrs	r2, r3, #31
 80030f8:	4413      	add	r3, r2
 80030fa:	105b      	asrs	r3, r3, #1
 80030fc:	827b      	strh	r3, [r7, #18]

    // Draw the main gradient line with thickness
    for (int16_t i = 0; i < length; i++) {
 80030fe:	2300      	movs	r3, #0
 8003100:	82fb      	strh	r3, [r7, #22]
 8003102:	e03d      	b.n	8003180 <DrawGradientLine+0xac>
        float ratio = (float)i / length;  // Calculate the interpolation ratio
 8003104:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003108:	ee07 3a90 	vmov	s15, r3
 800310c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003110:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003114:	ee07 3a90 	vmov	s15, r3
 8003118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800311c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003120:	edc7 7a03 	vstr	s15, [r7, #12]
        uint16_t color = interpolateColor(colorStart, colorEnd, ratio);
 8003124:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003126:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003128:	ed97 0a03 	vldr	s0, [r7, #12]
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ff45 	bl	8002fbe <interpolateColor>
 8003134:	4603      	mov	r3, r0
 8003136:	817b      	strh	r3, [r7, #10]

        // Draw a vertical line of "thickness" pixels at each position along the gradient line
        for (int16_t j = -radius + 1; j <= radius; j++) {
 8003138:	8a7b      	ldrh	r3, [r7, #18]
 800313a:	f1c3 0301 	rsb	r3, r3, #1
 800313e:	b29b      	uxth	r3, r3
 8003140:	82bb      	strh	r3, [r7, #20]
 8003142:	e011      	b.n	8003168 <DrawGradientLine+0x94>
            lcdDrawPixel(x + i , y + j, color);  // Center the thickness vertically
 8003144:	88fa      	ldrh	r2, [r7, #6]
 8003146:	8afb      	ldrh	r3, [r7, #22]
 8003148:	4413      	add	r3, r2
 800314a:	b298      	uxth	r0, r3
 800314c:	88ba      	ldrh	r2, [r7, #4]
 800314e:	8abb      	ldrh	r3, [r7, #20]
 8003150:	4413      	add	r3, r2
 8003152:	b29b      	uxth	r3, r3
 8003154:	897a      	ldrh	r2, [r7, #10]
 8003156:	4619      	mov	r1, r3
 8003158:	f001 fd56 	bl	8004c08 <lcdDrawPixel>
        for (int16_t j = -radius + 1; j <= radius; j++) {
 800315c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003160:	b29b      	uxth	r3, r3
 8003162:	3301      	adds	r3, #1
 8003164:	b29b      	uxth	r3, r3
 8003166:	82bb      	strh	r3, [r7, #20]
 8003168:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800316c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003170:	429a      	cmp	r2, r3
 8003172:	dde7      	ble.n	8003144 <DrawGradientLine+0x70>
    for (int16_t i = 0; i < length; i++) {
 8003174:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003178:	b29b      	uxth	r3, r3
 800317a:	3301      	adds	r3, #1
 800317c:	b29b      	uxth	r3, r3
 800317e:	82fb      	strh	r3, [r7, #22]
 8003180:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003184:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003188:	429a      	cmp	r2, r3
 800318a:	dbbb      	blt.n	8003104 <DrawGradientLine+0x30>
        }
    }

    // Draw rounded ends as circles with colors matching the ends of the gradient
    lcdFillCircle(x, y  , radius - 1, colorStart);                 // Start of the line
 800318c:	8a7b      	ldrh	r3, [r7, #18]
 800318e:	3b01      	subs	r3, #1
 8003190:	b29b      	uxth	r3, r3
 8003192:	b21a      	sxth	r2, r3
 8003194:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003196:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800319a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800319e:	f002 f8d4 	bl	800534a <lcdFillCircle>
    lcdFillCircle(x + length - 1, y , radius - 1, colorEnd);      // End of the line
 80031a2:	88fa      	ldrh	r2, [r7, #6]
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	4413      	add	r3, r2
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	b218      	sxth	r0, r3
 80031b0:	8a7b      	ldrh	r3, [r7, #18]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	b21a      	sxth	r2, r3
 80031b8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80031ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80031be:	f002 f8c4 	bl	800534a <lcdFillCircle>
    lcdDrawCircle(x + Vitri, y , radius , COLOR_THEME_SKYBLUE_BASE);
 80031c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	4413      	add	r3, r2
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	b218      	sxth	r0, r3
 80031ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80031d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80031d6:	f249 537f 	movw	r3, #38271	@ 0x957f
 80031da:	f001 ffe2 	bl	80051a2 <lcdDrawCircle>
    lcdDrawCircle(x + Vitri, y , radius - 1 , COLOR_WHITE);
 80031de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	4413      	add	r3, r2
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	b218      	sxth	r0, r3
 80031ea:	8a7b      	ldrh	r3, [r7, #18]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80031f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031fa:	f001 ffd2 	bl	80051a2 <lcdDrawCircle>
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	bd90      	pop	{r4, r7, pc}
	...

08003208 <WeatherDay>:

void WeatherDay (int x , int y , int TempMax , int TempMin , int weather_code , int current_temp){
 8003208:	b580      	push	{r7, lr}
 800320a:	b090      	sub	sp, #64	@ 0x40
 800320c:	af04      	add	r7, sp, #16
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
	int rate = 8;
 8003216:	2308      	movs	r3, #8
 8003218:	62fb      	str	r3, [r7, #44]	@ 0x2c

	  lcdSetCursor(x + 5, y + 20);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	b29b      	uxth	r3, r3
 800321e:	3305      	adds	r3, #5
 8003220:	b29a      	uxth	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	b29b      	uxth	r3, r3
 8003226:	3314      	adds	r3, #20
 8003228:	b29b      	uxth	r3, r3
 800322a:	4619      	mov	r1, r3
 800322c:	4610      	mov	r0, r2
 800322e:	f002 fc41 	bl	8005ab4 <lcdSetCursor>
	  lcdSetTextFont(&Font16);
 8003232:	4895      	ldr	r0, [pc, #596]	@ (8003488 <WeatherDay+0x280>)
 8003234:	f002 fbae 	bl	8005994 <lcdSetTextFont>
	  lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003238:	f249 517f 	movw	r1, #38271	@ 0x957f
 800323c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003240:	f002 fbb8 	bl	80059b4 <lcdSetTextColor>

	  CloudRain(x + 45, y + 10);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	330a      	adds	r3, #10
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7ff fb41 	bl	80028d8 <CloudRain>
	  lcdSetTextFont(&Font12);
 8003256:	488d      	ldr	r0, [pc, #564]	@ (800348c <WeatherDay+0x284>)
 8003258:	f002 fb9c 	bl	8005994 <lcdSetTextFont>
	  if (rate >= 10)
 800325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325e:	2b09      	cmp	r3, #9
 8003260:	dd2e      	ble.n	80032c0 <WeatherDay+0xb8>
	  {
		  lcdSetCursor(x + 51, y + 32);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	b29b      	uxth	r3, r3
 8003266:	3333      	adds	r3, #51	@ 0x33
 8003268:	b29a      	uxth	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	b29b      	uxth	r3, r3
 800326e:	3320      	adds	r3, #32
 8003270:	b29b      	uxth	r3, r3
 8003272:	4619      	mov	r1, r3
 8003274:	4610      	mov	r0, r2
 8003276:	f002 fc1d 	bl	8005ab4 <lcdSetCursor>
		  lcdPrintf("%d/", rate);
 800327a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800327c:	4884      	ldr	r0, [pc, #528]	@ (8003490 <WeatherDay+0x288>)
 800327e:	f002 fafd 	bl	800587c <lcdPrintf>
	      lcdDrawCircle(x + 67, y + 33 , 1 , COLOR_WHITE);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	b29b      	uxth	r3, r3
 8003286:	3343      	adds	r3, #67	@ 0x43
 8003288:	b29b      	uxth	r3, r3
 800328a:	b218      	sxth	r0, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	b29b      	uxth	r3, r3
 8003290:	3321      	adds	r3, #33	@ 0x21
 8003292:	b29b      	uxth	r3, r3
 8003294:	b219      	sxth	r1, r3
 8003296:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800329a:	2201      	movs	r2, #1
 800329c:	f001 ff81 	bl	80051a2 <lcdDrawCircle>
		  lcdDrawCircle(x + 67, y + 40 , 1 , COLOR_WHITE);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3343      	adds	r3, #67	@ 0x43
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	b218      	sxth	r0, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3328      	adds	r3, #40	@ 0x28
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	b219      	sxth	r1, r3
 80032b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032b8:	2201      	movs	r2, #1
 80032ba:	f001 ff72 	bl	80051a2 <lcdDrawCircle>
 80032be:	e02d      	b.n	800331c <WeatherDay+0x114>

	  }
	  else{
		  lcdSetCursor(x + 54, y + 32);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3336      	adds	r3, #54	@ 0x36
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3320      	adds	r3, #32
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f002 fbee 	bl	8005ab4 <lcdSetCursor>
		  lcdPrintf("%d/", rate);
 80032d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032da:	486d      	ldr	r0, [pc, #436]	@ (8003490 <WeatherDay+0x288>)
 80032dc:	f002 face 	bl	800587c <lcdPrintf>
		  lcdDrawCircle(x + 63, y + 33 , 1 , COLOR_WHITE);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	333f      	adds	r3, #63	@ 0x3f
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	b218      	sxth	r0, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3321      	adds	r3, #33	@ 0x21
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	b219      	sxth	r1, r3
 80032f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032f8:	2201      	movs	r2, #1
 80032fa:	f001 ff52 	bl	80051a2 <lcdDrawCircle>
		  lcdDrawCircle(x + 66, y + 40 , 1 , COLOR_WHITE);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	b29b      	uxth	r3, r3
 8003302:	3342      	adds	r3, #66	@ 0x42
 8003304:	b29b      	uxth	r3, r3
 8003306:	b218      	sxth	r0, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	b29b      	uxth	r3, r3
 800330c:	3328      	adds	r3, #40	@ 0x28
 800330e:	b29b      	uxth	r3, r3
 8003310:	b219      	sxth	r1, r3
 8003312:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003316:	2201      	movs	r2, #1
 8003318:	f001 ff43 	bl	80051a2 <lcdDrawCircle>
	  }

	  lcdSetCursor(x + 5, y + 20);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	b29b      	uxth	r3, r3
 8003320:	3305      	adds	r3, #5
 8003322:	b29a      	uxth	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	b29b      	uxth	r3, r3
 8003328:	3314      	adds	r3, #20
 800332a:	b29b      	uxth	r3, r3
 800332c:	4619      	mov	r1, r3
 800332e:	4610      	mov	r0, r2
 8003330:	f002 fbc0 	bl	8005ab4 <lcdSetCursor>
	  lcdSetTextFont(&Font16);
 8003334:	4854      	ldr	r0, [pc, #336]	@ (8003488 <WeatherDay+0x280>)
 8003336:	f002 fb2d 	bl	8005994 <lcdSetTextFont>
	  lcdPrintf("Now");
 800333a:	4856      	ldr	r0, [pc, #344]	@ (8003494 <WeatherDay+0x28c>)
 800333c:	f002 fa9e 	bl	800587c <lcdPrintf>
	  lcdSetCursor(x + 93, y + 20);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	b29b      	uxth	r3, r3
 8003344:	335d      	adds	r3, #93	@ 0x5d
 8003346:	b29a      	uxth	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	b29b      	uxth	r3, r3
 800334c:	3314      	adds	r3, #20
 800334e:	b29b      	uxth	r3, r3
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f002 fbae 	bl	8005ab4 <lcdSetCursor>
	  if (10 <= TempMin)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b09      	cmp	r3, #9
 800335c:	dd2e      	ble.n	80033bc <WeatherDay+0x1b4>
	  {
		lcdSetCursor(x + 93, y + 20);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	b29b      	uxth	r3, r3
 8003362:	335d      	adds	r3, #93	@ 0x5d
 8003364:	b29a      	uxth	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	b29b      	uxth	r3, r3
 800336a:	3314      	adds	r3, #20
 800336c:	b29b      	uxth	r3, r3
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f002 fb9f 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d" , TempMin);
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	4847      	ldr	r0, [pc, #284]	@ (8003498 <WeatherDay+0x290>)
 800337a:	f002 fa7f 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 121 , y + 19 , 3, COLOR_WHITE);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	b29b      	uxth	r3, r3
 8003382:	3379      	adds	r3, #121	@ 0x79
 8003384:	b29b      	uxth	r3, r3
 8003386:	b218      	sxth	r0, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	b29b      	uxth	r3, r3
 800338c:	3313      	adds	r3, #19
 800338e:	b29b      	uxth	r3, r3
 8003390:	b219      	sxth	r1, r3
 8003392:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003396:	2203      	movs	r2, #3
 8003398:	f001 ff03 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 121 , y + 19 , 2, COLOR_WHITE);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3379      	adds	r3, #121	@ 0x79
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	b218      	sxth	r0, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3313      	adds	r3, #19
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	b219      	sxth	r1, r3
 80033b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033b4:	2202      	movs	r2, #2
 80033b6:	f001 fef4 	bl	80051a2 <lcdDrawCircle>
 80033ba:	e09d      	b.n	80034f8 <WeatherDay+0x2f0>
	  }
	  else if ( 0 <  TempMin)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	dd2e      	ble.n	8003420 <WeatherDay+0x218>
	  {
		lcdSetCursor(x + 104, y + 20);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3368      	adds	r3, #104	@ 0x68
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3314      	adds	r3, #20
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	4619      	mov	r1, r3
 80033d4:	4610      	mov	r0, r2
 80033d6:	f002 fb6d 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d" , TempMin);
 80033da:	6839      	ldr	r1, [r7, #0]
 80033dc:	482e      	ldr	r0, [pc, #184]	@ (8003498 <WeatherDay+0x290>)
 80033de:	f002 fa4d 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 121 , y + 19 , 3, COLOR_WHITE);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3379      	adds	r3, #121	@ 0x79
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	b218      	sxth	r0, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3313      	adds	r3, #19
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	b219      	sxth	r1, r3
 80033f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033fa:	2203      	movs	r2, #3
 80033fc:	f001 fed1 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 121 , y + 19 , 2, COLOR_WHITE);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	b29b      	uxth	r3, r3
 8003404:	3379      	adds	r3, #121	@ 0x79
 8003406:	b29b      	uxth	r3, r3
 8003408:	b218      	sxth	r0, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	b29b      	uxth	r3, r3
 800340e:	3313      	adds	r3, #19
 8003410:	b29b      	uxth	r3, r3
 8003412:	b219      	sxth	r1, r3
 8003414:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003418:	2202      	movs	r2, #2
 800341a:	f001 fec2 	bl	80051a2 <lcdDrawCircle>
 800341e:	e06b      	b.n	80034f8 <WeatherDay+0x2f0>
	  }
	  else if (-10 < TempMin )
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f113 0f09 	cmn.w	r3, #9
 8003426:	db39      	blt.n	800349c <WeatherDay+0x294>
	  {
		lcdSetCursor(x + 93, y + 20);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	b29b      	uxth	r3, r3
 800342c:	335d      	adds	r3, #93	@ 0x5d
 800342e:	b29a      	uxth	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	b29b      	uxth	r3, r3
 8003434:	3314      	adds	r3, #20
 8003436:	b29b      	uxth	r3, r3
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f002 fb3a 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d" , TempMin);
 8003440:	6839      	ldr	r1, [r7, #0]
 8003442:	4815      	ldr	r0, [pc, #84]	@ (8003498 <WeatherDay+0x290>)
 8003444:	f002 fa1a 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 121 , y + 19 , 3, COLOR_WHITE);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	b29b      	uxth	r3, r3
 800344c:	3379      	adds	r3, #121	@ 0x79
 800344e:	b29b      	uxth	r3, r3
 8003450:	b218      	sxth	r0, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	b29b      	uxth	r3, r3
 8003456:	3313      	adds	r3, #19
 8003458:	b29b      	uxth	r3, r3
 800345a:	b219      	sxth	r1, r3
 800345c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003460:	2203      	movs	r2, #3
 8003462:	f001 fe9e 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 121 , y + 19 , 2, COLOR_WHITE);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	b29b      	uxth	r3, r3
 800346a:	3379      	adds	r3, #121	@ 0x79
 800346c:	b29b      	uxth	r3, r3
 800346e:	b218      	sxth	r0, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	b29b      	uxth	r3, r3
 8003474:	3313      	adds	r3, #19
 8003476:	b29b      	uxth	r3, r3
 8003478:	b219      	sxth	r1, r3
 800347a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800347e:	2202      	movs	r2, #2
 8003480:	f001 fe8f 	bl	80051a2 <lcdDrawCircle>
 8003484:	e038      	b.n	80034f8 <WeatherDay+0x2f0>
 8003486:	bf00      	nop
 8003488:	20000014 	.word	0x20000014
 800348c:	2000000c 	.word	0x2000000c
 8003490:	0800ecfc 	.word	0x0800ecfc
 8003494:	0800ed00 	.word	0x0800ed00
 8003498:	0800ecec 	.word	0x0800ecec
	  }
	  else
	  {
		lcdSetCursor(x + 82, y + 20);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3352      	adds	r3, #82	@ 0x52
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3314      	adds	r3, #20
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f002 fb00 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d" , TempMin);
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	489b      	ldr	r0, [pc, #620]	@ (8003724 <WeatherDay+0x51c>)
 80034b8:	f002 f9e0 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 121 , y + 19 , 3, COLOR_WHITE);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3379      	adds	r3, #121	@ 0x79
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	b218      	sxth	r0, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3313      	adds	r3, #19
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	b219      	sxth	r1, r3
 80034d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034d4:	2203      	movs	r2, #3
 80034d6:	f001 fe64 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 121 , y + 19 , 2, COLOR_WHITE);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3379      	adds	r3, #121	@ 0x79
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	b218      	sxth	r0, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3313      	adds	r3, #19
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	b219      	sxth	r1, r3
 80034ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034f2:	2202      	movs	r2, #2
 80034f4:	f001 fe55 	bl	80051a2 <lcdDrawCircle>
	  }
	  double Dolon = TempMax - TempMin;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fd f820 	bl	8000544 <__aeabi_i2d>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  double Dolon1 = current_temp - TempMin;
 800350c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd f816 	bl	8000544 <__aeabi_i2d>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  int Vitri = (Dolon1 / Dolon) * 50;
 8003520:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003524:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003528:	f7fd f9a0 	bl	800086c <__aeabi_ddiv>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	4b7b      	ldr	r3, [pc, #492]	@ (8003728 <WeatherDay+0x520>)
 800353a:	f7fd f86d 	bl	8000618 <__aeabi_dmul>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	f7fd fb01 	bl	8000b4c <__aeabi_d2iz>
 800354a:	4603      	mov	r3, r0
 800354c:	617b      	str	r3, [r7, #20]

	  DrawGradientLine(x + 133, y + 25 , 50 , 6 ,  COLOR_ORANGE , COLOR_RED , Vitri);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	b29b      	uxth	r3, r3
 8003552:	3385      	adds	r3, #133	@ 0x85
 8003554:	b29b      	uxth	r3, r3
 8003556:	b218      	sxth	r0, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	b29b      	uxth	r3, r3
 800355c:	3319      	adds	r3, #25
 800355e:	b29b      	uxth	r3, r3
 8003560:	b219      	sxth	r1, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	9302      	str	r3, [sp, #8]
 8003566:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2306      	movs	r3, #6
 8003574:	2232      	movs	r2, #50	@ 0x32
 8003576:	f7ff fdad 	bl	80030d4 <DrawGradientLine>

	  lcdSetCursor(x + 188, y + 20);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	b29b      	uxth	r3, r3
 800357e:	33bc      	adds	r3, #188	@ 0xbc
 8003580:	b29a      	uxth	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	b29b      	uxth	r3, r3
 8003586:	3314      	adds	r3, #20
 8003588:	b29b      	uxth	r3, r3
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f002 fa91 	bl	8005ab4 <lcdSetCursor>
	  if (10 < TempMax)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b0a      	cmp	r3, #10
 8003596:	dd2e      	ble.n	80035f6 <WeatherDay+0x3ee>
	  {
		lcdSetCursor(x + 191, y + 20);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	b29b      	uxth	r3, r3
 800359c:	33bf      	adds	r3, #191	@ 0xbf
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3314      	adds	r3, #20
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	4619      	mov	r1, r3
 80035aa:	4610      	mov	r0, r2
 80035ac:	f002 fa82 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d" , TempMax);
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	485c      	ldr	r0, [pc, #368]	@ (8003724 <WeatherDay+0x51c>)
 80035b4:	f002 f962 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 218 , y + 19 , 3, COLOR_WHITE);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	33da      	adds	r3, #218	@ 0xda
 80035be:	b29b      	uxth	r3, r3
 80035c0:	b218      	sxth	r0, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3313      	adds	r3, #19
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	b219      	sxth	r1, r3
 80035cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035d0:	2203      	movs	r2, #3
 80035d2:	f001 fde6 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 218 , y + 19 , 2, COLOR_WHITE);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	33da      	adds	r3, #218	@ 0xda
 80035dc:	b29b      	uxth	r3, r3
 80035de:	b218      	sxth	r0, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3313      	adds	r3, #19
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	b219      	sxth	r1, r3
 80035ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035ee:	2202      	movs	r2, #2
 80035f0:	f001 fdd7 	bl	80051a2 <lcdDrawCircle>
		lcdSetCursor(x + 191, y + 20);
		lcdPrintf("%d" , TempMax);
		lcdDrawCircle( x + 229 , y + 19 , 3, COLOR_WHITE);
		lcdDrawCircle( x + 229 , y + 19 , 2, COLOR_WHITE);
	  }
}
 80035f4:	e092      	b.n	800371c <WeatherDay+0x514>
	  else if ( 0 <  TempMax)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	dd2e      	ble.n	800365a <WeatherDay+0x452>
		lcdSetCursor(x + 191, y + 20);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	33bf      	adds	r3, #191	@ 0xbf
 8003602:	b29a      	uxth	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	b29b      	uxth	r3, r3
 8003608:	3314      	adds	r3, #20
 800360a:	b29b      	uxth	r3, r3
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f002 fa50 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d" , TempMax);
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4843      	ldr	r0, [pc, #268]	@ (8003724 <WeatherDay+0x51c>)
 8003618:	f002 f930 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 207 , y + 19 , 3, COLOR_WHITE);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	b29b      	uxth	r3, r3
 8003620:	33cf      	adds	r3, #207	@ 0xcf
 8003622:	b29b      	uxth	r3, r3
 8003624:	b218      	sxth	r0, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	b29b      	uxth	r3, r3
 800362a:	3313      	adds	r3, #19
 800362c:	b29b      	uxth	r3, r3
 800362e:	b219      	sxth	r1, r3
 8003630:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003634:	2203      	movs	r2, #3
 8003636:	f001 fdb4 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 207 , y + 19 , 2, COLOR_WHITE);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	b29b      	uxth	r3, r3
 800363e:	33cf      	adds	r3, #207	@ 0xcf
 8003640:	b29b      	uxth	r3, r3
 8003642:	b218      	sxth	r0, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	b29b      	uxth	r3, r3
 8003648:	3313      	adds	r3, #19
 800364a:	b29b      	uxth	r3, r3
 800364c:	b219      	sxth	r1, r3
 800364e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003652:	2202      	movs	r2, #2
 8003654:	f001 fda5 	bl	80051a2 <lcdDrawCircle>
}
 8003658:	e060      	b.n	800371c <WeatherDay+0x514>
	  else if (-10 < TempMax )
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f113 0f09 	cmn.w	r3, #9
 8003660:	db2e      	blt.n	80036c0 <WeatherDay+0x4b8>
		lcdSetCursor(x + 191, y + 20);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	b29b      	uxth	r3, r3
 8003666:	33bf      	adds	r3, #191	@ 0xbf
 8003668:	b29a      	uxth	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	b29b      	uxth	r3, r3
 800366e:	3314      	adds	r3, #20
 8003670:	b29b      	uxth	r3, r3
 8003672:	4619      	mov	r1, r3
 8003674:	4610      	mov	r0, r2
 8003676:	f002 fa1d 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d" , TempMax);
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4829      	ldr	r0, [pc, #164]	@ (8003724 <WeatherDay+0x51c>)
 800367e:	f002 f8fd 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 218 , y + 19 , 3, COLOR_WHITE);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	b29b      	uxth	r3, r3
 8003686:	33da      	adds	r3, #218	@ 0xda
 8003688:	b29b      	uxth	r3, r3
 800368a:	b218      	sxth	r0, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	b29b      	uxth	r3, r3
 8003690:	3313      	adds	r3, #19
 8003692:	b29b      	uxth	r3, r3
 8003694:	b219      	sxth	r1, r3
 8003696:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800369a:	2203      	movs	r2, #3
 800369c:	f001 fd81 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 218 , y + 19 , 2, COLOR_WHITE);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	33da      	adds	r3, #218	@ 0xda
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	b218      	sxth	r0, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3313      	adds	r3, #19
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	b219      	sxth	r1, r3
 80036b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036b8:	2202      	movs	r2, #2
 80036ba:	f001 fd72 	bl	80051a2 <lcdDrawCircle>
}
 80036be:	e02d      	b.n	800371c <WeatherDay+0x514>
		lcdSetCursor(x + 191, y + 20);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	33bf      	adds	r3, #191	@ 0xbf
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3314      	adds	r3, #20
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f002 f9ee 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d" , TempMax);
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4812      	ldr	r0, [pc, #72]	@ (8003724 <WeatherDay+0x51c>)
 80036dc:	f002 f8ce 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 229 , y + 19 , 3, COLOR_WHITE);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	33e5      	adds	r3, #229	@ 0xe5
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	b218      	sxth	r0, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3313      	adds	r3, #19
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	b219      	sxth	r1, r3
 80036f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036f8:	2203      	movs	r2, #3
 80036fa:	f001 fd52 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 229 , y + 19 , 2, COLOR_WHITE);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	b29b      	uxth	r3, r3
 8003702:	33e5      	adds	r3, #229	@ 0xe5
 8003704:	b29b      	uxth	r3, r3
 8003706:	b218      	sxth	r0, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	b29b      	uxth	r3, r3
 800370c:	3313      	adds	r3, #19
 800370e:	b29b      	uxth	r3, r3
 8003710:	b219      	sxth	r1, r3
 8003712:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003716:	2202      	movs	r2, #2
 8003718:	f001 fd43 	bl	80051a2 <lcdDrawCircle>
}
 800371c:	bf00      	nop
 800371e:	3730      	adds	r7, #48	@ 0x30
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	0800ecec 	.word	0x0800ecec
 8003728:	40490000 	.word	0x40490000

0800372c <DrawThermometer>:

    // Vẽ vòng tròn trung tâm
    lcdDrawCircle(centerX, centerY, 5, COLOR_WHITE);
}

void DrawThermometer(int x, int y, int height, int width, int fillHeight, uint16_t borderColor, uint16_t fillColor) {
 800372c:	b5b0      	push	{r4, r5, r7, lr}
 800372e:	b090      	sub	sp, #64	@ 0x40
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
    int bulbRadius = width / 2;                  // Radius of the bulb at the bottom
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	0fda      	lsrs	r2, r3, #31
 800373e:	4413      	add	r3, r2
 8003740:	105b      	asrs	r3, r3, #1
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30
    int tubeWidth = width / 2;                   // Width of the thermometer tube
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	0fda      	lsrs	r2, r3, #31
 8003748:	4413      	add	r3, r2
 800374a:	105b      	asrs	r3, r3, #1
 800374c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int tubeHeight = height - bulbRadius * 2;    // Height of the thermometer tube
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Draw the bulb at the bottom
    lcdFillCircle(x, y + height - bulbRadius, bulbRadius , borderColor);           // Outer circle for bulb
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	b218      	sxth	r0, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	b29a      	uxth	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	b29b      	uxth	r3, r3
 8003764:	4413      	add	r3, r2
 8003766:	b29a      	uxth	r2, r3
 8003768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376a:	b29b      	uxth	r3, r3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	b29b      	uxth	r3, r3
 8003770:	b219      	sxth	r1, r3
 8003772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003774:	b21a      	sxth	r2, r3
 8003776:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800377a:	f001 fde6 	bl	800534a <lcdFillCircle>
    lcdFillCircle(x, y + height - bulbRadius, bulbRadius - 2, COLOR_WHITE);       // Inner circle for bulb border
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	b218      	sxth	r0, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	b29a      	uxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	b29b      	uxth	r3, r3
 800378a:	4413      	add	r3, r2
 800378c:	b29a      	uxth	r2, r3
 800378e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003790:	b29b      	uxth	r3, r3
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	b29b      	uxth	r3, r3
 8003796:	b219      	sxth	r1, r3
 8003798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b02      	subs	r3, #2
 800379e:	b29b      	uxth	r3, r3
 80037a0:	b21a      	sxth	r2, r3
 80037a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037a6:	f001 fdd0 	bl	800534a <lcdFillCircle>
    lcdFillCircle(x, y + height - bulbRadius, bulbRadius - 3, fillColor);         // Inner fill for "mercury" in bulb
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	b218      	sxth	r0, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037bc:	b29b      	uxth	r3, r3
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	b219      	sxth	r1, r3
 80037c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b03      	subs	r3, #3
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	b21a      	sxth	r2, r3
 80037ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037d2:	f001 fdba 	bl	800534a <lcdFillCircle>

    // Draw the thermometer tube
    lcdFillRoundRect(x - tubeWidth / 2, y, tubeWidth, tubeHeight + 1 , tubeWidth / 2, borderColor);       // Outer tube border
 80037d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d8:	0fda      	lsrs	r2, r3, #31
 80037da:	4413      	add	r3, r2
 80037dc:	105b      	asrs	r3, r3, #1
 80037de:	425b      	negs	r3, r3
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b218      	sxth	r0, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	b219      	sxth	r1, r3
 80037f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f2:	b21c      	sxth	r4, r3
 80037f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	b21d      	sxth	r5, r3
 80037fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003800:	0fda      	lsrs	r2, r3, #31
 8003802:	4413      	add	r3, r2
 8003804:	105b      	asrs	r3, r3, #1
 8003806:	b21b      	sxth	r3, r3
 8003808:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800380c:	9201      	str	r2, [sp, #4]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	462b      	mov	r3, r5
 8003812:	4622      	mov	r2, r4
 8003814:	f001 fece 	bl	80055b4 <lcdFillRoundRect>
    lcdFillRoundRect(x - tubeWidth / 2 + 2, y + 2, tubeWidth - 4, tubeHeight - 4, tubeWidth / 2 - 2, COLOR_WHITE); // Inner tube border
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	0fda      	lsrs	r2, r3, #31
 800381c:	4413      	add	r3, r2
 800381e:	105b      	asrs	r3, r3, #1
 8003820:	425b      	negs	r3, r3
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	b29b      	uxth	r3, r3
 8003828:	4413      	add	r3, r2
 800382a:	b29b      	uxth	r3, r3
 800382c:	3302      	adds	r3, #2
 800382e:	b29b      	uxth	r3, r3
 8003830:	b218      	sxth	r0, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	b29b      	uxth	r3, r3
 8003836:	3302      	adds	r3, #2
 8003838:	b29b      	uxth	r3, r3
 800383a:	b219      	sxth	r1, r3
 800383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b04      	subs	r3, #4
 8003842:	b29b      	uxth	r3, r3
 8003844:	b21c      	sxth	r4, r3
 8003846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b04      	subs	r3, #4
 800384c:	b29b      	uxth	r3, r3
 800384e:	b21d      	sxth	r5, r3
 8003850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003852:	0fda      	lsrs	r2, r3, #31
 8003854:	4413      	add	r3, r2
 8003856:	105b      	asrs	r3, r3, #1
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b02      	subs	r3, #2
 800385c:	b29b      	uxth	r3, r3
 800385e:	b21b      	sxth	r3, r3
 8003860:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003864:	9201      	str	r2, [sp, #4]
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	462b      	mov	r3, r5
 800386a:	4622      	mov	r2, r4
 800386c:	f001 fea2 	bl	80055b4 <lcdFillRoundRect>

    // Fill the thermometer tube based on the fill height
    int filledTubeHeight = fillHeight * tubeHeight / height;  // Scale fill height to tube height
 8003870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003874:	fb03 f202 	mul.w	r2, r3, r2
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	fb92 f3f3 	sdiv	r3, r2, r3
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24
    lcdFillRect(x - tubeWidth / 2 + 2, y + tubeHeight - filledTubeHeight + 2, tubeWidth - 5, filledTubeHeight, fillColor);  // Fill tube with "mercury"
 8003880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003882:	0fda      	lsrs	r2, r3, #31
 8003884:	4413      	add	r3, r2
 8003886:	105b      	asrs	r3, r3, #1
 8003888:	425b      	negs	r3, r3
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	b29b      	uxth	r3, r3
 8003890:	4413      	add	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	3302      	adds	r3, #2
 8003896:	b29b      	uxth	r3, r3
 8003898:	b218      	sxth	r0, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	b29a      	uxth	r2, r3
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3302      	adds	r3, #2
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	b219      	sxth	r1, r3
 80038b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b05      	subs	r3, #5
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	b21a      	sxth	r2, r3
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	b21c      	sxth	r4, r3
 80038c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4623      	mov	r3, r4
 80038ca:	f001 fe17 	bl	80054fc <lcdFillRect>

    // Draw finer scale marks on the side of the thermometer
    int markCount = 8;  // Increased number of marks for more detail
 80038ce:	2308      	movs	r3, #8
 80038d0:	623b      	str	r3, [r7, #32]
    int markSpacing = tubeHeight / markCount; // Spacing between marks
 80038d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80038da:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i <= markCount; i++) {
 80038dc:	2300      	movs	r3, #0
 80038de:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e0:	e03a      	b.n	8003958 <DrawThermometer+0x22c>
        int markY = y + tubeHeight - i * markSpacing;
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	441a      	add	r2, r3
 80038e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ea:	69f9      	ldr	r1, [r7, #28]
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	61bb      	str	r3, [r7, #24]
        int markLength = (i % 2 == 0) ? 8 : 5;  // Longer marks every other line for a clearer scale
 80038f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <DrawThermometer+0x1d6>
 80038fe:	2308      	movs	r3, #8
 8003900:	e000      	b.n	8003904 <DrawThermometer+0x1d8>
 8003902:	2305      	movs	r3, #5
 8003904:	617b      	str	r3, [r7, #20]
        lcdDrawLine(x + tubeWidth / 2 + 3, markY, x + tubeWidth / 2 + 3 + markLength, markY, borderColor);
 8003906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003908:	0fda      	lsrs	r2, r3, #31
 800390a:	4413      	add	r3, r2
 800390c:	105b      	asrs	r3, r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	b29b      	uxth	r3, r3
 8003914:	4413      	add	r3, r2
 8003916:	b29b      	uxth	r3, r3
 8003918:	3303      	adds	r3, #3
 800391a:	b29b      	uxth	r3, r3
 800391c:	b218      	sxth	r0, r3
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	b219      	sxth	r1, r3
 8003922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003924:	0fda      	lsrs	r2, r3, #31
 8003926:	4413      	add	r3, r2
 8003928:	105b      	asrs	r3, r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	b29b      	uxth	r3, r3
 8003930:	4413      	add	r3, r2
 8003932:	b29a      	uxth	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	b29b      	uxth	r3, r3
 8003938:	4413      	add	r3, r2
 800393a:	b29b      	uxth	r3, r3
 800393c:	3303      	adds	r3, #3
 800393e:	b29b      	uxth	r3, r3
 8003940:	b21a      	sxth	r2, r3
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	b21c      	sxth	r4, r3
 8003946:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4623      	mov	r3, r4
 800394e:	f001 fa15 	bl	8004d7c <lcdDrawLine>
    for (int i = 0; i <= markCount; i++) {
 8003952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003954:	3301      	adds	r3, #1
 8003956:	637b      	str	r3, [r7, #52]	@ 0x34
 8003958:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	429a      	cmp	r2, r3
 800395e:	ddc0      	ble.n	80038e2 <DrawThermometer+0x1b6>
    }
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3738      	adds	r7, #56	@ 0x38
 8003966:	46bd      	mov	sp, r7
 8003968:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800396c <DrawIconHumidyti1>:

void DrawIconHumidyti1 (int x, int y)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmicon1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	b29b      	uxth	r3, r3
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	b291      	uxth	r1, r2
 800397e:	4a04      	ldr	r2, [pc, #16]	@ (8003990 <DrawIconHumidyti1+0x24>)
 8003980:	4618      	mov	r0, r3
 8003982:	f001 fe7d 	bl	8005680 <lcdDrawImage>
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	0801ea24 	.word	0x0801ea24

08003994 <DrawIconDate>:

void DrawIconDate (int x, int y)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmicon2);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	b291      	uxth	r1, r2
 80039a6:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <DrawIconDate+0x24>)
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 fe69 	bl	8005680 <lcdDrawImage>
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	0801f6b0 	.word	0x0801f6b0

080039bc <DrawIconWeather>:
void DrawIconWeather (int x, int y)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmwether);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	b291      	uxth	r1, r2
 80039ce:	4a04      	ldr	r2, [pc, #16]	@ (80039e0 <DrawIconWeather+0x24>)
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 fe55 	bl	8005680 <lcdDrawImage>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	080249f8 	.word	0x080249f8

080039e4 <DrawIconTem>:
void DrawIconTem (int x, int y)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmTem);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	b291      	uxth	r1, r2
 80039f6:	4a04      	ldr	r2, [pc, #16]	@ (8003a08 <DrawIconTem+0x24>)
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 fe41 	bl	8005680 <lcdDrawImage>
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	08016d40 	.word	0x08016d40

08003a0c <DrawIconWind>:
void DrawIconWind (int x, int y)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmwind);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	b291      	uxth	r1, r2
 8003a1e:	4a04      	ldr	r2, [pc, #16]	@ (8003a30 <DrawIconWind+0x24>)
 8003a20:	4618      	mov	r0, r3
 8003a22:	f001 fe2d 	bl	8005680 <lcdDrawImage>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	080250d0 	.word	0x080250d0

08003a34 <TextTemperature16>:
void TextTemperature16 (int x , int y , int temperature){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003a40:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003a44:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003a48:	f001 ffb4 	bl	80059b4 <lcdSetTextColor>
	lcdSetTextFont(&Font24);
 8003a4c:	4861      	ldr	r0, [pc, #388]	@ (8003bd4 <TextTemperature16+0x1a0>)
 8003a4e:	f001 ffa1 	bl	8005994 <lcdSetTextFont>
	if (10 <= temperature)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b09      	cmp	r3, #9
 8003a56:	dd2c      	ble.n	8003ab2 <TextTemperature16+0x7e>
	{
		lcdSetCursor(x + 5 , y );
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3305      	adds	r3, #5
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	b292      	uxth	r2, r2
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f002 f824 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	485a      	ldr	r0, [pc, #360]	@ (8003bd8 <TextTemperature16+0x1a4>)
 8003a70:	f001 ff04 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 47 , y + 3 , 3, COLOR_WHITE);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	332f      	adds	r3, #47	@ 0x2f
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	b218      	sxth	r0, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3303      	adds	r3, #3
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	b219      	sxth	r1, r3
 8003a88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	f001 fb88 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 47 , y + 3 , 2, COLOR_WHITE);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	332f      	adds	r3, #47	@ 0x2f
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	b218      	sxth	r0, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3303      	adds	r3, #3
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	b219      	sxth	r1, r3
 8003aa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f001 fb79 	bl	80051a2 <lcdDrawCircle>
		lcdSetCursor(x - 3  , y );
		lcdPrintf("%d C\r\n" , temperature);
		lcdDrawCircle( x + 56 , y + 3 , 3, COLOR_WHITE);
		lcdDrawCircle( x + 56 , y + 3 , 2, COLOR_WHITE);
	}
}
 8003ab0:	e08c      	b.n	8003bcc <TextTemperature16+0x198>
	else if ( 0 <  temperature)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	dd2c      	ble.n	8003b12 <TextTemperature16+0xde>
		lcdSetCursor(x + 12  , y );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	330c      	adds	r3, #12
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	b292      	uxth	r2, r2
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f001 fff4 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4842      	ldr	r0, [pc, #264]	@ (8003bd8 <TextTemperature16+0x1a4>)
 8003ad0:	f001 fed4 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 36 , y + 3 , 3, COLOR_WHITE);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3324      	adds	r3, #36	@ 0x24
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	b218      	sxth	r0, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3303      	adds	r3, #3
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	b219      	sxth	r1, r3
 8003ae8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003aec:	2203      	movs	r2, #3
 8003aee:	f001 fb58 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 36 , y + 3 , 2, COLOR_WHITE);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3324      	adds	r3, #36	@ 0x24
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	b218      	sxth	r0, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3303      	adds	r3, #3
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	b219      	sxth	r1, r3
 8003b06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f001 fb49 	bl	80051a2 <lcdDrawCircle>
}
 8003b10:	e05c      	b.n	8003bcc <TextTemperature16+0x198>
	else if (-10 < temperature )
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f113 0f09 	cmn.w	r3, #9
 8003b18:	db2c      	blt.n	8003b74 <TextTemperature16+0x140>
		lcdSetCursor(x + 5  , y );
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3305      	adds	r3, #5
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	b292      	uxth	r2, r2
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 ffc3 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4829      	ldr	r0, [pc, #164]	@ (8003bd8 <TextTemperature16+0x1a4>)
 8003b32:	f001 fea3 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 47 , y + 3 , 3, COLOR_WHITE);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	332f      	adds	r3, #47	@ 0x2f
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	b218      	sxth	r0, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3303      	adds	r3, #3
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	b219      	sxth	r1, r3
 8003b4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b4e:	2203      	movs	r2, #3
 8003b50:	f001 fb27 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 47 , y + 3 , 2, COLOR_WHITE);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	332f      	adds	r3, #47	@ 0x2f
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	b218      	sxth	r0, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3303      	adds	r3, #3
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	b219      	sxth	r1, r3
 8003b68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f001 fb18 	bl	80051a2 <lcdDrawCircle>
}
 8003b72:	e02b      	b.n	8003bcc <TextTemperature16+0x198>
		lcdSetCursor(x - 3  , y );
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b03      	subs	r3, #3
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	b292      	uxth	r2, r2
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 ff96 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4813      	ldr	r0, [pc, #76]	@ (8003bd8 <TextTemperature16+0x1a4>)
 8003b8c:	f001 fe76 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 56 , y + 3 , 3, COLOR_WHITE);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3338      	adds	r3, #56	@ 0x38
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	b218      	sxth	r0, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3303      	adds	r3, #3
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	b219      	sxth	r1, r3
 8003ba4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ba8:	2203      	movs	r2, #3
 8003baa:	f001 fafa 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 56 , y + 3 , 2, COLOR_WHITE);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3338      	adds	r3, #56	@ 0x38
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	b218      	sxth	r0, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3303      	adds	r3, #3
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	b219      	sxth	r1, r3
 8003bc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f001 faeb 	bl	80051a2 <lcdDrawCircle>
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000024 	.word	0x20000024
 8003bd8:	0800ece4 	.word	0x0800ece4

08003bdc <TextHumidyti16>:

void TextHumidyti16 (int x , int y , int humidyti){
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003be8:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003bec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003bf0:	f001 fee0 	bl	80059b4 <lcdSetTextColor>
	lcdSetTextFont(&Font24);
 8003bf4:	4830      	ldr	r0, [pc, #192]	@ (8003cb8 <TextHumidyti16+0xdc>)
 8003bf6:	f001 fecd 	bl	8005994 <lcdSetTextFont>
	if (humidyti < 10){
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	dc2a      	bgt.n	8003c56 <TextHumidyti16+0x7a>
		lcdSetCursor(x  , y );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	b292      	uxth	r2, r2
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 ff52 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d/\r\n" , humidyti);
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	482a      	ldr	r0, [pc, #168]	@ (8003cbc <TextHumidyti16+0xe0>)
 8003c14:	f001 fe32 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 20 , y + 3 , 2, COLOR_WHITE);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	b218      	sxth	r0, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3303      	adds	r3, #3
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b219      	sxth	r1, r3
 8003c2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c30:	2202      	movs	r2, #2
 8003c32:	f001 fab6 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 29 , y + 16 , 2, COLOR_WHITE);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	331d      	adds	r3, #29
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	b218      	sxth	r0, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3310      	adds	r3, #16
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	b219      	sxth	r1, r3
 8003c4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f001 faa7 	bl	80051a2 <lcdDrawCircle>
		lcdSetCursor(x - 5  , y );
		lcdPrintf("%d/\r\n" , humidyti);
		lcdDrawCircle( x + 33 , y + 3 , 2, COLOR_WHITE);
		lcdDrawCircle( x + 41 , y + 15 , 2, COLOR_WHITE);
	}
}
 8003c54:	e02b      	b.n	8003cae <TextHumidyti16+0xd2>
		lcdSetCursor(x - 5  , y );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b05      	subs	r3, #5
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	b292      	uxth	r2, r2
 8003c62:	4611      	mov	r1, r2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 ff25 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("%d/\r\n" , humidyti);
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4813      	ldr	r0, [pc, #76]	@ (8003cbc <TextHumidyti16+0xe0>)
 8003c6e:	f001 fe05 	bl	800587c <lcdPrintf>
		lcdDrawCircle( x + 33 , y + 3 , 2, COLOR_WHITE);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3321      	adds	r3, #33	@ 0x21
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	b218      	sxth	r0, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3303      	adds	r3, #3
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	b219      	sxth	r1, r3
 8003c86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f001 fa89 	bl	80051a2 <lcdDrawCircle>
		lcdDrawCircle( x + 41 , y + 15 , 2, COLOR_WHITE);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3329      	adds	r3, #41	@ 0x29
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	b218      	sxth	r0, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	330f      	adds	r3, #15
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	b219      	sxth	r1, r3
 8003ca4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f001 fa7a 	bl	80051a2 <lcdDrawCircle>
}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000024 	.word	0x20000024
 8003cbc:	0800ecf4 	.word	0x0800ecf4

08003cc0 <TextTime>:
void TextTime(int x , int y , char * current_time){
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
	lcdSetCursor(x, y);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	b292      	uxth	r2, r2
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 feec 	bl	8005ab4 <lcdSetCursor>
	lcdSetTextFont(&Font12);
 8003cdc:	4808      	ldr	r0, [pc, #32]	@ (8003d00 <TextTime+0x40>)
 8003cde:	f001 fe59 	bl	8005994 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003ce2:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003ce6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003cea:	f001 fe63 	bl	80059b4 <lcdSetTextColor>
	lcdPrintf("Time: %s" , current_time);
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4804      	ldr	r0, [pc, #16]	@ (8003d04 <TextTime+0x44>)
 8003cf2:	f001 fdc3 	bl	800587c <lcdPrintf>
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	2000000c 	.word	0x2000000c
 8003d04:	0800ed04 	.word	0x0800ed04

08003d08 <TextDate>:
void TextDate(int x , int y , char * current_date){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
	lcdSetCursor(x, y);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	b292      	uxth	r2, r2
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 fec8 	bl	8005ab4 <lcdSetCursor>
	lcdSetTextFont(&Font12);
 8003d24:	4808      	ldr	r0, [pc, #32]	@ (8003d48 <TextDate+0x40>)
 8003d26:	f001 fe35 	bl	8005994 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003d2a:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003d2e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003d32:	f001 fe3f 	bl	80059b4 <lcdSetTextColor>
	lcdPrintf("Date: %s" , current_date);
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4804      	ldr	r0, [pc, #16]	@ (8003d4c <TextDate+0x44>)
 8003d3a:	f001 fd9f 	bl	800587c <lcdPrintf>
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	2000000c 	.word	0x2000000c
 8003d4c:	0800ed10 	.word	0x0800ed10

08003d50 <TextLocation>:
void TextLocation(int x , int y , int choice)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
	lcdSetCursor(x, y);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	b292      	uxth	r2, r2
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 fea4 	bl	8005ab4 <lcdSetCursor>
	lcdSetTextFont(&Font12);
 8003d6c:	4817      	ldr	r0, [pc, #92]	@ (8003dcc <TextLocation+0x7c>)
 8003d6e:	f001 fe11 	bl	8005994 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003d72:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003d76:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003d7a:	f001 fe1b 	bl	80059b4 <lcdSetTextColor>
    if (choice == 1){
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d103      	bne.n	8003d8c <TextLocation+0x3c>
    	lcdPrintf("City: Ho Chi Minh");
 8003d84:	4812      	ldr	r0, [pc, #72]	@ (8003dd0 <TextLocation+0x80>)
 8003d86:	f001 fd79 	bl	800587c <lcdPrintf>
    	lcdPrintf("City: Can Tho");
	}
    else if(choice == 5){
    	lcdPrintf("City: Da Nang");
	}
}
 8003d8a:	e01a      	b.n	8003dc2 <TextLocation+0x72>
    else if(choice == 2){
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d103      	bne.n	8003d9a <TextLocation+0x4a>
    	lcdPrintf("City: Ha Noi");
 8003d92:	4810      	ldr	r0, [pc, #64]	@ (8003dd4 <TextLocation+0x84>)
 8003d94:	f001 fd72 	bl	800587c <lcdPrintf>
}
 8003d98:	e013      	b.n	8003dc2 <TextLocation+0x72>
    else if(choice == 3){
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d103      	bne.n	8003da8 <TextLocation+0x58>
    	lcdPrintf("City: Hai Phong");
 8003da0:	480d      	ldr	r0, [pc, #52]	@ (8003dd8 <TextLocation+0x88>)
 8003da2:	f001 fd6b 	bl	800587c <lcdPrintf>
}
 8003da6:	e00c      	b.n	8003dc2 <TextLocation+0x72>
    else if(choice == 4){
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d103      	bne.n	8003db6 <TextLocation+0x66>
    	lcdPrintf("City: Can Tho");
 8003dae:	480b      	ldr	r0, [pc, #44]	@ (8003ddc <TextLocation+0x8c>)
 8003db0:	f001 fd64 	bl	800587c <lcdPrintf>
}
 8003db4:	e005      	b.n	8003dc2 <TextLocation+0x72>
    else if(choice == 5){
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b05      	cmp	r3, #5
 8003dba:	d102      	bne.n	8003dc2 <TextLocation+0x72>
    	lcdPrintf("City: Da Nang");
 8003dbc:	4808      	ldr	r0, [pc, #32]	@ (8003de0 <TextLocation+0x90>)
 8003dbe:	f001 fd5d 	bl	800587c <lcdPrintf>
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	0800ed1c 	.word	0x0800ed1c
 8003dd4:	0800ed30 	.word	0x0800ed30
 8003dd8:	0800ed40 	.word	0x0800ed40
 8003ddc:	0800ed50 	.word	0x0800ed50
 8003de0:	0800ed60 	.word	0x0800ed60

08003de4 <TextSensor>:
void TextSensor(int x , int y ,float temperature ,float humidity ){
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	ed87 0a01 	vstr	s0, [r7, #4]
 8003df2:	edc7 0a00 	vstr	s1, [r7]
	lcdSetCursor(x + 40, y);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3328      	adds	r3, #40	@ 0x28
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	b292      	uxth	r2, r2
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f001 fe55 	bl	8005ab4 <lcdSetCursor>
	lcdSetTextFont(&Font16);
 8003e0a:	481d      	ldr	r0, [pc, #116]	@ (8003e80 <TextSensor+0x9c>)
 8003e0c:	f001 fdc2 	bl	8005994 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003e10:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003e14:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003e18:	f001 fdcc 	bl	80059b4 <lcdSetTextColor>
	lcdPrintf("Sensor");
 8003e1c:	4819      	ldr	r0, [pc, #100]	@ (8003e84 <TextSensor+0xa0>)
 8003e1e:	f001 fd2d 	bl	800587c <lcdPrintf>
	lcdSetCursor(x + 12, y + 55);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	330c      	adds	r3, #12
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3337      	adds	r3, #55	@ 0x37
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f001 fe3d 	bl	8005ab4 <lcdSetCursor>
	lcdPrintf("%d C", (int)temperature);
 8003e3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e42:	ee17 1a90 	vmov	r1, s15
 8003e46:	4810      	ldr	r0, [pc, #64]	@ (8003e88 <TextSensor+0xa4>)
 8003e48:	f001 fd18 	bl	800587c <lcdPrintf>
	lcdSetCursor(x + 90, y + 55);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	335a      	adds	r3, #90	@ 0x5a
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3337      	adds	r3, #55	@ 0x37
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f001 fe28 	bl	8005ab4 <lcdSetCursor>
	lcdPrintf("%d%%", (int)humidity);
 8003e64:	edd7 7a00 	vldr	s15, [r7]
 8003e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e6c:	ee17 1a90 	vmov	r1, s15
 8003e70:	4806      	ldr	r0, [pc, #24]	@ (8003e8c <TextSensor+0xa8>)
 8003e72:	f001 fd03 	bl	800587c <lcdPrintf>
}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000014 	.word	0x20000014
 8003e84:	0800ed70 	.word	0x0800ed70
 8003e88:	0800ed78 	.word	0x0800ed78
 8003e8c:	0800ed80 	.word	0x0800ed80

08003e90 <TextCloudRate>:
void TextCloudRate(int x , int y , int cloud_rate ){
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
	lcdSetCursor(x + 10, y);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	330a      	adds	r3, #10
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	b292      	uxth	r2, r2
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 fe02 	bl	8005ab4 <lcdSetCursor>
	lcdSetTextFont(&Font16);
 8003eb0:	4817      	ldr	r0, [pc, #92]	@ (8003f10 <TextCloudRate+0x80>)
 8003eb2:	f001 fd6f 	bl	8005994 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003eb6:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003eba:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003ebe:	f001 fd79 	bl	80059b4 <lcdSetTextColor>
	lcdPrintf("Cloud");
 8003ec2:	4814      	ldr	r0, [pc, #80]	@ (8003f14 <TextCloudRate+0x84>)
 8003ec4:	f001 fcda 	bl	800587c <lcdPrintf>
	if (cloud_rate < 100){
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b63      	cmp	r3, #99	@ 0x63
 8003ecc:	dc0c      	bgt.n	8003ee8 <TextCloudRate+0x58>
		lcdSetCursor(x + 22, y + 55);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3316      	adds	r3, #22
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3337      	adds	r3, #55	@ 0x37
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	f001 fde7 	bl	8005ab4 <lcdSetCursor>
 8003ee6:	e00b      	b.n	8003f00 <TextCloudRate+0x70>
	}
	else {
		lcdSetCursor(x + 15, y + 55);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	330f      	adds	r3, #15
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3337      	adds	r3, #55	@ 0x37
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f001 fdda 	bl	8005ab4 <lcdSetCursor>
	}
	lcdPrintf("%d%%", cloud_rate);
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4805      	ldr	r0, [pc, #20]	@ (8003f18 <TextCloudRate+0x88>)
 8003f04:	f001 fcba 	bl	800587c <lcdPrintf>
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000014 	.word	0x20000014
 8003f14:	0800ed88 	.word	0x0800ed88
 8003f18:	0800ed80 	.word	0x0800ed80

08003f1c <DrawIconHot>:
void DrawIconHot (int x, int y){
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmhot);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	b291      	uxth	r1, r2
 8003f2e:	4a04      	ldr	r2, [pc, #16]	@ (8003f40 <DrawIconHot+0x24>)
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fba5 	bl	8005680 <lcdDrawImage>
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	0801d634 	.word	0x0801d634

08003f44 <DrawIconIce>:
void DrawIconIce (int x, int y){
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmice);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	b291      	uxth	r1, r2
 8003f56:	4a04      	ldr	r2, [pc, #16]	@ (8003f68 <DrawIconIce+0x24>)
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 fb91 	bl	8005680 <lcdDrawImage>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	0801dd48 	.word	0x0801dd48

08003f6c <DrawIconTree>:
void DrawIconTree (int x, int y){
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmtree1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	b291      	uxth	r1, r2
 8003f7e:	4a04      	ldr	r2, [pc, #16]	@ (8003f90 <DrawIconTree+0x24>)
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 fb7d 	bl	8005680 <lcdDrawImage>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	08023658 	.word	0x08023658

08003f94 <DrawIconWater>:
void DrawIconWater (int x, int y){
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmwater);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	b291      	uxth	r1, r2
 8003fa6:	4a04      	ldr	r2, [pc, #16]	@ (8003fb8 <DrawIconWater+0x24>)
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 fb69 	bl	8005680 <lcdDrawImage>
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	08023d6c 	.word	0x08023d6c

08003fbc <DrawIconClockTem>:
void DrawIconClockTem(int x , int y){
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmclocktem);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	b291      	uxth	r1, r2
 8003fce:	4a04      	ldr	r2, [pc, #16]	@ (8003fe0 <DrawIconClockTem+0x24>)
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 fb55 	bl	8005680 <lcdDrawImage>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	080184c8 	.word	0x080184c8

08003fe4 <DrawIconClockHumi>:
void DrawIconClockHumi(int x , int y){
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmclockhumi);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	b291      	uxth	r1, r2
 8003ff6:	4a04      	ldr	r2, [pc, #16]	@ (8004008 <DrawIconClockHumi+0x24>)
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 fb41 	bl	8005680 <lcdDrawImage>
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	08017904 	.word	0x08017904

0800400c <DrawIconCloudRate>:
void DrawIconCloudRate(int x , int y){
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmcloudrate);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	b29b      	uxth	r3, r3
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	b291      	uxth	r1, r2
 800401e:	4a04      	ldr	r2, [pc, #16]	@ (8004030 <DrawIconCloudRate+0x24>)
 8004020:	4618      	mov	r0, r3
 8004022:	f001 fb2d 	bl	8005680 <lcdDrawImage>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	0801953c 	.word	0x0801953c

08004034 <DrawIconLocation>:
void DrawIconLocation(int x , int y){
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmlocation);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	b29b      	uxth	r3, r3
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	b291      	uxth	r1, r2
 8004046:	4a04      	ldr	r2, [pc, #16]	@ (8004058 <DrawIconLocation+0x24>)
 8004048:	4618      	mov	r0, r3
 800404a:	f001 fb19 	bl	8005680 <lcdDrawImage>
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	08022618 	.word	0x08022618

0800405c <DrawIconNext1>:
void DrawIconNext(int x , int y){
	lcdDrawImage(x, y, &bmnext);
}
void DrawIconNext1(int x , int y){
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmnext1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	b29b      	uxth	r3, r3
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	b291      	uxth	r1, r2
 800406e:	4a04      	ldr	r2, [pc, #16]	@ (8004080 <DrawIconNext1+0x24>)
 8004070:	4618      	mov	r0, r3
 8004072:	f001 fb05 	bl	8005680 <lcdDrawImage>
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	08022f2c 	.word	0x08022f2c

08004084 <OneDay>:
void OneDay(int x , int y, int MinTem , int MaxTem , int wind , char day_name[] , int day_code , char date[]){
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
	  lcdSetCursor(x + 7 , y - 6);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	b29b      	uxth	r3, r3
 8004096:	3307      	adds	r3, #7
 8004098:	b29a      	uxth	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b06      	subs	r3, #6
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f001 fd05 	bl	8005ab4 <lcdSetCursor>
	  lcdSetTextFont(&Font12);
 80040aa:	4871      	ldr	r0, [pc, #452]	@ (8004270 <OneDay+0x1ec>)
 80040ac:	f001 fc72 	bl	8005994 <lcdSetTextFont>
	  lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 80040b0:	f249 517f 	movw	r1, #38271	@ 0x957f
 80040b4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80040b8:	f001 fc7c 	bl	80059b4 <lcdSetTextColor>
	  lcdPrintf(day_name);
 80040bc:	69f8      	ldr	r0, [r7, #28]
 80040be:	f001 fbdd 	bl	800587c <lcdPrintf>
	  lcdSetCursor(x , y + 7);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3307      	adds	r3, #7
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f001 fcef 	bl	8005ab4 <lcdSetCursor>
	  lcdPrintf(date);
 80040d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040d8:	f001 fbd0 	bl	800587c <lcdPrintf>
	  lcdSetTextFont(&Font16);
 80040dc:	4865      	ldr	r0, [pc, #404]	@ (8004274 <OneDay+0x1f0>)
 80040de:	f001 fc59 	bl	8005994 <lcdSetTextFont>

	  lcdSetCursor(x + 103, y);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3367      	adds	r3, #103	@ 0x67
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	b292      	uxth	r2, r2
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 fcdf 	bl	8005ab4 <lcdSetCursor>
	  if (MinTem < 10){
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b09      	cmp	r3, #9
 80040fa:	dc0e      	bgt.n	800411a <OneDay+0x96>
		  if (MaxTem < 10){
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b09      	cmp	r3, #9
 8004100:	dc05      	bgt.n	800410e <OneDay+0x8a>
			lcdPrintf("0%d-0%d", MinTem , MaxTem);
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	485c      	ldr	r0, [pc, #368]	@ (8004278 <OneDay+0x1f4>)
 8004108:	f001 fbb8 	bl	800587c <lcdPrintf>
 800410c:	e013      	b.n	8004136 <OneDay+0xb2>
		  }
		  else {
			  lcdPrintf("0%d-%d", MinTem , MaxTem);
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	485a      	ldr	r0, [pc, #360]	@ (800427c <OneDay+0x1f8>)
 8004114:	f001 fbb2 	bl	800587c <lcdPrintf>
 8004118:	e00d      	b.n	8004136 <OneDay+0xb2>
		  }
	  }
	  else{
		  if (MaxTem < 10){
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b09      	cmp	r3, #9
 800411e:	dc05      	bgt.n	800412c <OneDay+0xa8>
			  lcdPrintf("%d-0%d", MinTem , MaxTem);
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4856      	ldr	r0, [pc, #344]	@ (8004280 <OneDay+0x1fc>)
 8004126:	f001 fba9 	bl	800587c <lcdPrintf>
 800412a:	e004      	b.n	8004136 <OneDay+0xb2>
		  }
		  else {
			  lcdPrintf("%d-%d", MinTem , MaxTem);
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4854      	ldr	r0, [pc, #336]	@ (8004284 <OneDay+0x200>)
 8004132:	f001 fba3 	bl	800587c <lcdPrintf>
		  }
	  }

	  lcdDrawCircle(x + 163, y - 2, 2, COLOR_WHITE);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	b29b      	uxth	r3, r3
 800413a:	33a3      	adds	r3, #163	@ 0xa3
 800413c:	b29b      	uxth	r3, r3
 800413e:	b218      	sxth	r0, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b02      	subs	r3, #2
 8004146:	b29b      	uxth	r3, r3
 8004148:	b219      	sxth	r1, r3
 800414a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800414e:	2202      	movs	r2, #2
 8004150:	f001 f827 	bl	80051a2 <lcdDrawCircle>
	  lcdDrawCircle(x + 163, y - 2, 3, COLOR_WHITE);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	b29b      	uxth	r3, r3
 8004158:	33a3      	adds	r3, #163	@ 0xa3
 800415a:	b29b      	uxth	r3, r3
 800415c:	b218      	sxth	r0, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b02      	subs	r3, #2
 8004164:	b29b      	uxth	r3, r3
 8004166:	b219      	sxth	r1, r3
 8004168:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800416c:	2203      	movs	r2, #3
 800416e:	f001 f818 	bl	80051a2 <lcdDrawCircle>

	  if ( day_code >=95)
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	2b5e      	cmp	r3, #94	@ 0x5e
 8004176:	dd09      	ble.n	800418c <OneDay+0x108>
	  {
		  CloudThunder (x + 51, y - 1);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3b01      	subs	r3, #1
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f7fe fd27 	bl	8002bd8 <CloudThunder>
 800418a:	e028      	b.n	80041de <OneDay+0x15a>
	  }
	  else if (day_code <= 67 || day_code ==80 || day_code == 81 || day_code == 82){
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	2b43      	cmp	r3, #67	@ 0x43
 8004190:	dd08      	ble.n	80041a4 <OneDay+0x120>
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	2b50      	cmp	r3, #80	@ 0x50
 8004196:	d005      	beq.n	80041a4 <OneDay+0x120>
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2b51      	cmp	r3, #81	@ 0x51
 800419c:	d002      	beq.n	80041a4 <OneDay+0x120>
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	2b52      	cmp	r3, #82	@ 0x52
 80041a2:	d106      	bne.n	80041b2 <OneDay+0x12e>
		  CloudRain(x + 51 , y );
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3333      	adds	r3, #51	@ 0x33
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fb94 	bl	80028d8 <CloudRain>
 80041b0:	e015      	b.n	80041de <OneDay+0x15a>
	  }
	  else  if (day_code <= 57){
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2b39      	cmp	r3, #57	@ 0x39
 80041b6:	dc09      	bgt.n	80041cc <OneDay+0x148>
		  CloudSun(x + 51, y + 5);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	3305      	adds	r3, #5
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f7fe fc78 	bl	8002aba <CloudSun>
 80041ca:	e008      	b.n	80041de <OneDay+0x15a>
	  }
	  else {
		  CloudMoon(x + 51, y + 5);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3305      	adds	r3, #5
 80041d6:	4619      	mov	r1, r3
 80041d8:	4610      	mov	r0, r2
 80041da:	f7fe fcae 	bl	8002b3a <CloudMoon>
	  }

	  if (wind >= 10){
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b09      	cmp	r3, #9
 80041e2:	dd20      	ble.n	8004226 <OneDay+0x1a2>
		  lcdSetCursor(x + 178, y);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	33b2      	adds	r3, #178	@ 0xb2
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	b292      	uxth	r2, r2
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 fc5e 	bl	8005ab4 <lcdSetCursor>
		  lcdPrintf("%d",wind);
 80041f8:	69b9      	ldr	r1, [r7, #24]
 80041fa:	4823      	ldr	r0, [pc, #140]	@ (8004288 <OneDay+0x204>)
 80041fc:	f001 fb3e 	bl	800587c <lcdPrintf>

		  lcdSetCursor(x + 202, y+1);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	b29b      	uxth	r3, r3
 8004204:	33ca      	adds	r3, #202	@ 0xca
 8004206:	b29a      	uxth	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	b29b      	uxth	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	b29b      	uxth	r3, r3
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f001 fc4e 	bl	8005ab4 <lcdSetCursor>
		  lcdSetTextFont(&Font12);
 8004218:	4815      	ldr	r0, [pc, #84]	@ (8004270 <OneDay+0x1ec>)
 800421a:	f001 fbbb 	bl	8005994 <lcdSetTextFont>
		  lcdPrintf("km/h");
 800421e:	481b      	ldr	r0, [pc, #108]	@ (800428c <OneDay+0x208>)
 8004220:	f001 fb2c 	bl	800587c <lcdPrintf>
		  lcdSetTextFont(&Font12);
		  lcdPrintf("km/h");
//		  lcdDrawCircle(x + 209, y + 2, 2, COLOR_WHITE);
//		  lcdDrawCircle(x + 215, y + 10, 2, COLOR_WHITE);
	  }
}
 8004224:	e01f      	b.n	8004266 <OneDay+0x1e2>
		  lcdSetCursor(x + 178, y);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	b29b      	uxth	r3, r3
 800422a:	33b2      	adds	r3, #178	@ 0xb2
 800422c:	b29b      	uxth	r3, r3
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	b292      	uxth	r2, r2
 8004232:	4611      	mov	r1, r2
 8004234:	4618      	mov	r0, r3
 8004236:	f001 fc3d 	bl	8005ab4 <lcdSetCursor>
		  lcdPrintf("0%d",wind);
 800423a:	69b9      	ldr	r1, [r7, #24]
 800423c:	4814      	ldr	r0, [pc, #80]	@ (8004290 <OneDay+0x20c>)
 800423e:	f001 fb1d 	bl	800587c <lcdPrintf>
		  lcdSetCursor(x + 202, y+1);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	b29b      	uxth	r3, r3
 8004246:	33ca      	adds	r3, #202	@ 0xca
 8004248:	b29a      	uxth	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	b29b      	uxth	r3, r3
 800424e:	3301      	adds	r3, #1
 8004250:	b29b      	uxth	r3, r3
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f001 fc2d 	bl	8005ab4 <lcdSetCursor>
		  lcdSetTextFont(&Font12);
 800425a:	4805      	ldr	r0, [pc, #20]	@ (8004270 <OneDay+0x1ec>)
 800425c:	f001 fb9a 	bl	8005994 <lcdSetTextFont>
		  lcdPrintf("km/h");
 8004260:	480a      	ldr	r0, [pc, #40]	@ (800428c <OneDay+0x208>)
 8004262:	f001 fb0b 	bl	800587c <lcdPrintf>
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	2000000c 	.word	0x2000000c
 8004274:	20000014 	.word	0x20000014
 8004278:	0800ed90 	.word	0x0800ed90
 800427c:	0800ed98 	.word	0x0800ed98
 8004280:	0800eda0 	.word	0x0800eda0
 8004284:	0800eda8 	.word	0x0800eda8
 8004288:	0800ecec 	.word	0x0800ecec
 800428c:	0800edb0 	.word	0x0800edb0
 8004290:	0800edb8 	.word	0x0800edb8

08004294 <Screen0>:

void Screen0(){
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
	lcdFillRGB(COLOR_THEME_SKYBLUE_BASE);
 8004298:	f249 507f 	movw	r0, #38271	@ 0x957f
 800429c:	f000 fc8a 	bl	8004bb4 <lcdFillRGB>
	lcdDrawImage(60, 100, &bmLoading);
 80042a0:	4a03      	ldr	r2, [pc, #12]	@ (80042b0 <Screen0+0x1c>)
 80042a2:	2164      	movs	r1, #100	@ 0x64
 80042a4:	203c      	movs	r0, #60	@ 0x3c
 80042a6:	f001 f9eb 	bl	8005680 <lcdDrawImage>
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	080160b4 	.word	0x080160b4

080042b4 <Screen1>:
void Screen1(int TempMax , int TempMin , int current_temp ,int current_humi , int current_code , int current_cloud , char * current_time , char * current_date , int choice){
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af04      	add	r7, sp, #16
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]


	lcdFillRGB(COLOR_THEME_SKYBLUE_BASE);
 80042c2:	f249 507f 	movw	r0, #38271	@ 0x957f
 80042c6:	f000 fc75 	bl	8004bb4 <lcdFillRGB>
	// Divide layout

	lcdDrawRoundRect(158, 25, 40, 40, 5, COLOR_THEME_SKYBLUE_SHADOW);
 80042ca:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	2305      	movs	r3, #5
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	2328      	movs	r3, #40	@ 0x28
 80042d6:	2228      	movs	r2, #40	@ 0x28
 80042d8:	2119      	movs	r1, #25
 80042da:	209e      	movs	r0, #158	@ 0x9e
 80042dc:	f000 fdec 	bl	8004eb8 <lcdDrawRoundRect>
	DrawIconLocation(161, 28);
 80042e0:	211c      	movs	r1, #28
 80042e2:	20a1      	movs	r0, #161	@ 0xa1
 80042e4:	f7ff fea6 	bl	8004034 <DrawIconLocation>

	lcdDrawRoundRect(199, 25, 40, 40, 5, COLOR_THEME_SKYBLUE_SHADOW);
 80042e8:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	2305      	movs	r3, #5
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	2328      	movs	r3, #40	@ 0x28
 80042f4:	2228      	movs	r2, #40	@ 0x28
 80042f6:	2119      	movs	r1, #25
 80042f8:	20c7      	movs	r0, #199	@ 0xc7
 80042fa:	f000 fddd 	bl	8004eb8 <lcdDrawRoundRect>
	DrawIconNext1(202, 28);
 80042fe:	211c      	movs	r1, #28
 8004300:	20ca      	movs	r0, #202	@ 0xca
 8004302:	f7ff feab 	bl	800405c <DrawIconNext1>

	lcdDrawRoundRect(76, 70, 163, 110, 6, COLOR_THEME_SKYBLUE_SHADOW);
 8004306:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 800430a:	9301      	str	r3, [sp, #4]
 800430c:	2306      	movs	r3, #6
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	236e      	movs	r3, #110	@ 0x6e
 8004312:	22a3      	movs	r2, #163	@ 0xa3
 8004314:	2146      	movs	r1, #70	@ 0x46
 8004316:	204c      	movs	r0, #76	@ 0x4c
 8004318:	f000 fdce 	bl	8004eb8 <lcdDrawRoundRect>

	lcdDrawRoundRect(1, 70, 73, 110, 6, COLOR_THEME_SKYBLUE_SHADOW);
 800431c:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 8004320:	9301      	str	r3, [sp, #4]
 8004322:	2306      	movs	r3, #6
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	236e      	movs	r3, #110	@ 0x6e
 8004328:	2249      	movs	r2, #73	@ 0x49
 800432a:	2146      	movs	r1, #70	@ 0x46
 800432c:	2001      	movs	r0, #1
 800432e:	f000 fdc3 	bl	8004eb8 <lcdDrawRoundRect>

	lcdDrawRoundRect(1, 187, 238, 50, 6, COLOR_THEME_SKYBLUE_SHADOW);
 8004332:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	2306      	movs	r3, #6
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2332      	movs	r3, #50	@ 0x32
 800433e:	22ee      	movs	r2, #238	@ 0xee
 8004340:	21bb      	movs	r1, #187	@ 0xbb
 8004342:	2001      	movs	r0, #1
 8004344:	f000 fdb8 	bl	8004eb8 <lcdDrawRoundRect>



	lcdDrawRoundRect(1, 240, 150, 78, 6, COLOR_THEME_SKYBLUE_SHADOW);
 8004348:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	2306      	movs	r3, #6
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	234e      	movs	r3, #78	@ 0x4e
 8004354:	2296      	movs	r2, #150	@ 0x96
 8004356:	21f0      	movs	r1, #240	@ 0xf0
 8004358:	2001      	movs	r0, #1
 800435a:	f000 fdad 	bl	8004eb8 <lcdDrawRoundRect>
	lcdDrawLine(1 , 262 , 150 , 262 , COLOR_BLACK);
 800435e:	2300      	movs	r3, #0
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8004366:	2296      	movs	r2, #150	@ 0x96
 8004368:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800436c:	2001      	movs	r0, #1
 800436e:	f000 fd05 	bl	8004d7c <lcdDrawLine>

	lcdDrawLine(76, 262, 76, 317, COLOR_BLACK);
 8004372:	2300      	movs	r3, #0
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	f240 133d 	movw	r3, #317	@ 0x13d
 800437a:	224c      	movs	r2, #76	@ 0x4c
 800437c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004380:	204c      	movs	r0, #76	@ 0x4c
 8004382:	f000 fcfb 	bl	8004d7c <lcdDrawLine>

	lcdDrawRoundRect(155, 240, 84, 78, 6, COLOR_THEME_SKYBLUE_SHADOW);
 8004386:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	2306      	movs	r3, #6
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	234e      	movs	r3, #78	@ 0x4e
 8004392:	2254      	movs	r2, #84	@ 0x54
 8004394:	21f0      	movs	r1, #240	@ 0xf0
 8004396:	209b      	movs	r0, #155	@ 0x9b
 8004398:	f000 fd8e 	bl	8004eb8 <lcdDrawRoundRect>
	lcdDrawLine(155 , 262 , 239 , 262 , COLOR_BLACK);
 800439c:	2300      	movs	r3, #0
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80043a4:	22ef      	movs	r2, #239	@ 0xef
 80043a6:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80043aa:	209b      	movs	r0, #155	@ 0x9b
 80043ac:	f000 fce6 	bl	8004d7c <lcdDrawLine>


	// Cac text va icon ban dau
	TextTitle( 22 , 2);
 80043b0:	2102      	movs	r1, #2
 80043b2:	2016      	movs	r0, #22
 80043b4:	f7fe fa6e 	bl	8002894 <TextTitle>
	TextTime(5, 25 , current_time);
 80043b8:	6a3a      	ldr	r2, [r7, #32]
 80043ba:	2119      	movs	r1, #25
 80043bc:	2005      	movs	r0, #5
 80043be:	f7ff fc7f 	bl	8003cc0 <TextTime>
	TextDate(5, 40 , current_date);
 80043c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c4:	2128      	movs	r1, #40	@ 0x28
 80043c6:	2005      	movs	r0, #5
 80043c8:	f7ff fc9e 	bl	8003d08 <TextDate>
	TextLocation(5, 55 , choice);
 80043cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043ce:	2137      	movs	r1, #55	@ 0x37
 80043d0:	2005      	movs	r0, #5
 80043d2:	f7ff fcbd 	bl	8003d50 <TextLocation>
	DrawCloud (3 , 80);
 80043d6:	2150      	movs	r1, #80	@ 0x50
 80043d8:	2003      	movs	r0, #3
 80043da:	f7fe fa47 	bl	800286c <DrawCloud>

	// Ve icon nhiet do va hien thi nhiet do
	DrawThermometer(95, 80 , 40, 12, 25, COLOR_BLACK, COLOR_RED);
 80043de:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80043e2:	9302      	str	r3, [sp, #8]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	2319      	movs	r3, #25
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	230c      	movs	r3, #12
 80043ee:	2228      	movs	r2, #40	@ 0x28
 80043f0:	2150      	movs	r1, #80	@ 0x50
 80043f2:	205f      	movs	r0, #95	@ 0x5f
 80043f4:	f7ff f99a 	bl	800372c <DrawThermometer>
	TextTemperature16(120, 95, current_temp);
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	215f      	movs	r1, #95	@ 0x5f
 80043fc:	2078      	movs	r0, #120	@ 0x78
 80043fe:	f7ff fb19 	bl	8003a34 <TextTemperature16>

	if (current_temp >= 29){
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b1c      	cmp	r3, #28
 8004406:	dd04      	ble.n	8004412 <Screen1+0x15e>
	  DrawIconHot(205 , 85);
 8004408:	2155      	movs	r1, #85	@ 0x55
 800440a:	20cd      	movs	r0, #205	@ 0xcd
 800440c:	f7ff fd86 	bl	8003f1c <DrawIconHot>
 8004410:	e00b      	b.n	800442a <Screen1+0x176>
	}
	else if ( current_temp < 20){
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b13      	cmp	r3, #19
 8004416:	dc04      	bgt.n	8004422 <Screen1+0x16e>
	  DrawIconIce(205 , 85);
 8004418:	2155      	movs	r1, #85	@ 0x55
 800441a:	20cd      	movs	r0, #205	@ 0xcd
 800441c:	f7ff fd92 	bl	8003f44 <DrawIconIce>
 8004420:	e003      	b.n	800442a <Screen1+0x176>
	}
	else {
	  DrawIconTree(205 , 85);
 8004422:	2155      	movs	r1, #85	@ 0x55
 8004424:	20cd      	movs	r0, #205	@ 0xcd
 8004426:	f7ff fda1 	bl	8003f6c <DrawIconTree>
	}


	// Ve icon do am va hien thi do am
	DrawIconWater(205 , 138);
 800442a:	218a      	movs	r1, #138	@ 0x8a
 800442c:	20cd      	movs	r0, #205	@ 0xcd
 800442e:	f7ff fdb1 	bl	8003f94 <DrawIconWater>
	TextHumidyti16 (140, 146 , current_humi);
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	2192      	movs	r1, #146	@ 0x92
 8004436:	208c      	movs	r0, #140	@ 0x8c
 8004438:	f7ff fbd0 	bl	8003bdc <TextHumidyti16>
	DrawIconHumidyti1(77, 130);
 800443c:	2182      	movs	r1, #130	@ 0x82
 800443e:	204d      	movs	r0, #77	@ 0x4d
 8004440:	f7ff fa94 	bl	800396c <DrawIconHumidyti1>

	// Hien thi nhiet do max min trong ngay
	WeatherDay(0, 190 , TempMax , TempMin , current_code , current_temp);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	21be      	movs	r1, #190	@ 0xbe
 8004452:	2000      	movs	r0, #0
 8004454:	f7fe fed8 	bl	8003208 <WeatherDay>

	// Hien thi sensor
	TextSensor(5, 245 , current_temp , current_humi);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	ee07 3a10 	vmov	s14, r3
 8004468:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800446c:	eef0 0a47 	vmov.f32	s1, s14
 8004470:	eeb0 0a67 	vmov.f32	s0, s15
 8004474:	21f5      	movs	r1, #245	@ 0xf5
 8004476:	2005      	movs	r0, #5
 8004478:	f7ff fcb4 	bl	8003de4 <TextSensor>
	TextCloudRate(159, 245, current_cloud);
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	21f5      	movs	r1, #245	@ 0xf5
 8004480:	209f      	movs	r0, #159	@ 0x9f
 8004482:	f7ff fd05 	bl	8003e90 <TextCloudRate>
	DrawIconClockTem(14 , 265);
 8004486:	f240 1109 	movw	r1, #265	@ 0x109
 800448a:	200e      	movs	r0, #14
 800448c:	f7ff fd96 	bl	8003fbc <DrawIconClockTem>
	DrawIconClockHumi(88, 265);
 8004490:	f240 1109 	movw	r1, #265	@ 0x109
 8004494:	2058      	movs	r0, #88	@ 0x58
 8004496:	f7ff fda5 	bl	8003fe4 <DrawIconClockHumi>
	DrawIconCloudRate(170, 265);
 800449a:	f240 1109 	movw	r1, #265	@ 0x109
 800449e:	20aa      	movs	r0, #170	@ 0xaa
 80044a0:	f7ff fdb4 	bl	800400c <DrawIconCloudRate>



}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <Screen2>:

void Screen2(int Max_temp[] , int Min_temp[] , int day_code[] , char day_name[][4] , int Wind_speed[] , char date [][6]){
 80044ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ae:	b08d      	sub	sp, #52	@ 0x34
 80044b0:	af04      	add	r7, sp, #16
 80044b2:	6178      	str	r0, [r7, #20]
 80044b4:	6139      	str	r1, [r7, #16]
 80044b6:	60fa      	str	r2, [r7, #12]
 80044b8:	60bb      	str	r3, [r7, #8]

	lcdFillRGB(COLOR_THEME_SKYBLUE_BASE);
 80044ba:	f249 507f 	movw	r0, #38271	@ 0x957f
 80044be:	f000 fb79 	bl	8004bb4 <lcdFillRGB>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 80044c2:	f249 517f 	movw	r1, #38271	@ 0x957f
 80044c6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80044ca:	f001 fa73 	bl	80059b4 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 80044ce:	4861      	ldr	r0, [pc, #388]	@ (8004654 <Screen2+0x1a8>)
 80044d0:	f001 fa60 	bl	8005994 <lcdSetTextFont>
	lcdSetCursor(28, 6);
 80044d4:	2106      	movs	r1, #6
 80044d6:	201c      	movs	r0, #28
 80044d8:	f001 faec 	bl	8005ab4 <lcdSetCursor>
	lcdPrintf("Forecast Days");
 80044dc:	485e      	ldr	r0, [pc, #376]	@ (8004658 <Screen2+0x1ac>)
 80044de:	f001 f9cd 	bl	800587c <lcdPrintf>


	  DrawIconDate(5, 65);
 80044e2:	2141      	movs	r1, #65	@ 0x41
 80044e4:	2005      	movs	r0, #5
 80044e6:	f7ff fa55 	bl	8003994 <DrawIconDate>
	  DrawIconWeather(55, 65);
 80044ea:	2141      	movs	r1, #65	@ 0x41
 80044ec:	2037      	movs	r0, #55	@ 0x37
 80044ee:	f7ff fa65 	bl	80039bc <DrawIconWeather>
	  DrawIconTem(120, 65);
 80044f2:	2141      	movs	r1, #65	@ 0x41
 80044f4:	2078      	movs	r0, #120	@ 0x78
 80044f6:	f7ff fa75 	bl	80039e4 <DrawIconTem>
	  DrawIconWind(195, 72);
 80044fa:	2148      	movs	r1, #72	@ 0x48
 80044fc:	20c3      	movs	r0, #195	@ 0xc3
 80044fe:	f7ff fa85 	bl	8003a0c <DrawIconWind>

	  lcdDrawLine(0, 65, 0, 319, COLOR_BLACK);
 8004502:	2300      	movs	r3, #0
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	f240 133f 	movw	r3, #319	@ 0x13f
 800450a:	2200      	movs	r2, #0
 800450c:	2141      	movs	r1, #65	@ 0x41
 800450e:	2000      	movs	r0, #0
 8004510:	f000 fc34 	bl	8004d7c <lcdDrawLine>
	  lcdDrawLine(239, 65, 239, 319, COLOR_BLACK);
 8004514:	2300      	movs	r3, #0
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	f240 133f 	movw	r3, #319	@ 0x13f
 800451c:	22ef      	movs	r2, #239	@ 0xef
 800451e:	2141      	movs	r1, #65	@ 0x41
 8004520:	20ef      	movs	r0, #239	@ 0xef
 8004522:	f000 fc2b 	bl	8004d7c <lcdDrawLine>
	  lcdDrawLine(50, 65, 50, 319, COLOR_BLACK);
 8004526:	2300      	movs	r3, #0
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	f240 133f 	movw	r3, #319	@ 0x13f
 800452e:	2232      	movs	r2, #50	@ 0x32
 8004530:	2141      	movs	r1, #65	@ 0x41
 8004532:	2032      	movs	r0, #50	@ 0x32
 8004534:	f000 fc22 	bl	8004d7c <lcdDrawLine>
	  lcdDrawLine(100, 65, 100, 319, COLOR_BLACK);
 8004538:	2300      	movs	r3, #0
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	f240 133f 	movw	r3, #319	@ 0x13f
 8004540:	2264      	movs	r2, #100	@ 0x64
 8004542:	2141      	movs	r1, #65	@ 0x41
 8004544:	2064      	movs	r0, #100	@ 0x64
 8004546:	f000 fc19 	bl	8004d7c <lcdDrawLine>
	  lcdDrawLine(180, 65, 180, 319, COLOR_BLACK);
 800454a:	2300      	movs	r3, #0
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	f240 133f 	movw	r3, #319	@ 0x13f
 8004552:	22b4      	movs	r2, #180	@ 0xb4
 8004554:	2141      	movs	r1, #65	@ 0x41
 8004556:	20b4      	movs	r0, #180	@ 0xb4
 8004558:	f000 fc10 	bl	8004d7c <lcdDrawLine>

	  lcdDrawLine(0, 65 , 239, 65  , COLOR_BLACK);
 800455c:	2300      	movs	r3, #0
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2341      	movs	r3, #65	@ 0x41
 8004562:	22ef      	movs	r2, #239	@ 0xef
 8004564:	2141      	movs	r1, #65	@ 0x41
 8004566:	2000      	movs	r0, #0
 8004568:	f000 fc08 	bl	8004d7c <lcdDrawLine>
	  lcdDrawLine(0, 108, 239, 108 , COLOR_BLACK);
 800456c:	2300      	movs	r3, #0
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	236c      	movs	r3, #108	@ 0x6c
 8004572:	22ef      	movs	r2, #239	@ 0xef
 8004574:	216c      	movs	r1, #108	@ 0x6c
 8004576:	2000      	movs	r0, #0
 8004578:	f000 fc00 	bl	8004d7c <lcdDrawLine>
	  lcdDrawLine(0, 143, 239, 143 , COLOR_BLACK);
 800457c:	2300      	movs	r3, #0
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	238f      	movs	r3, #143	@ 0x8f
 8004582:	22ef      	movs	r2, #239	@ 0xef
 8004584:	218f      	movs	r1, #143	@ 0x8f
 8004586:	2000      	movs	r0, #0
 8004588:	f000 fbf8 	bl	8004d7c <lcdDrawLine>
	  lcdDrawLine(0, 178, 239, 178 , COLOR_BLACK);
 800458c:	2300      	movs	r3, #0
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	23b2      	movs	r3, #178	@ 0xb2
 8004592:	22ef      	movs	r2, #239	@ 0xef
 8004594:	21b2      	movs	r1, #178	@ 0xb2
 8004596:	2000      	movs	r0, #0
 8004598:	f000 fbf0 	bl	8004d7c <lcdDrawLine>
	  lcdDrawLine(0, 213, 239, 213 , COLOR_BLACK);
 800459c:	2300      	movs	r3, #0
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	23d5      	movs	r3, #213	@ 0xd5
 80045a2:	22ef      	movs	r2, #239	@ 0xef
 80045a4:	21d5      	movs	r1, #213	@ 0xd5
 80045a6:	2000      	movs	r0, #0
 80045a8:	f000 fbe8 	bl	8004d7c <lcdDrawLine>
	  lcdDrawLine(0, 248, 239, 248 , COLOR_BLACK);
 80045ac:	2300      	movs	r3, #0
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	23f8      	movs	r3, #248	@ 0xf8
 80045b2:	22ef      	movs	r2, #239	@ 0xef
 80045b4:	21f8      	movs	r1, #248	@ 0xf8
 80045b6:	2000      	movs	r0, #0
 80045b8:	f000 fbe0 	bl	8004d7c <lcdDrawLine>
	  lcdDrawLine(0, 283, 239, 283 , COLOR_BLACK);
 80045bc:	2300      	movs	r3, #0
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	f240 131b 	movw	r3, #283	@ 0x11b
 80045c4:	22ef      	movs	r2, #239	@ 0xef
 80045c6:	f240 111b 	movw	r1, #283	@ 0x11b
 80045ca:	2000      	movs	r0, #0
 80045cc:	f000 fbd6 	bl	8004d7c <lcdDrawLine>
	  for (int i = 1 ; i < 7 ; i++)
 80045d0:	2301      	movs	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	e035      	b.n	8004642 <Screen2+0x196>
	  {

		  OneDay(7, 85 + i * 35, Min_temp[i]  , Max_temp[i] , Wind_speed[i] , day_name[i] , day_code[i] , date[i]);
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	00da      	lsls	r2, r3, #3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f103 0555 	add.w	r5, r3, #85	@ 0x55
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4413      	add	r3, r2
 80045ee:	681e      	ldr	r6, [r3, #0]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4413      	add	r3, r2
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004602:	4413      	add	r3, r2
 8004604:	6819      	ldr	r1, [r3, #0]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	18d0      	adds	r0, r2, r3
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	681c      	ldr	r4, [r3, #0]
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	4613      	mov	r3, r2
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	4413      	add	r3, r2
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	461a      	mov	r2, r3
 8004624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004626:	4413      	add	r3, r2
 8004628:	9303      	str	r3, [sp, #12]
 800462a:	9402      	str	r4, [sp, #8]
 800462c:	9001      	str	r0, [sp, #4]
 800462e:	9100      	str	r1, [sp, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4632      	mov	r2, r6
 8004634:	4629      	mov	r1, r5
 8004636:	2007      	movs	r0, #7
 8004638:	f7ff fd24 	bl	8004084 <OneDay>
	  for (int i = 1 ; i < 7 ; i++)
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	3301      	adds	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2b06      	cmp	r3, #6
 8004646:	ddc6      	ble.n	80045d6 <Screen2+0x12a>
	  }
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	3724      	adds	r7, #36	@ 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004652:	bf00      	nop
 8004654:	2000001c 	.word	0x2000001c
 8004658:	0800edbc 	.word	0x0800edbc

0800465c <Screen3>:
void Screen3(int choice)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af02      	add	r7, sp, #8
 8004662:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_THEME_SKYBLUE_BASE);
 8004664:	f249 507f 	movw	r0, #38271	@ 0x957f
 8004668:	f000 faa4 	bl	8004bb4 <lcdFillRGB>
	lcdSetTextFont(&Font24);
 800466c:	488f      	ldr	r0, [pc, #572]	@ (80048ac <Screen3+0x250>)
 800466e:	f001 f991 	bl	8005994 <lcdSetTextFont>
	lcdSetCursor(35, 6);
 8004672:	2106      	movs	r1, #6
 8004674:	2023      	movs	r0, #35	@ 0x23
 8004676:	f001 fa1d 	bl	8005ab4 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 800467a:	f249 517f 	movw	r1, #38271	@ 0x957f
 800467e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004682:	f001 f997 	bl	80059b4 <lcdSetTextColor>
	lcdPrintf("Chose City");
 8004686:	488a      	ldr	r0, [pc, #552]	@ (80048b0 <Screen3+0x254>)
 8004688:	f001 f8f8 	bl	800587c <lcdPrintf>
	lcdFillRoundRect(20,50, 200, 35, 6, COLOR_LIGHTGREY);
 800468c:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	2306      	movs	r3, #6
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	2323      	movs	r3, #35	@ 0x23
 8004698:	22c8      	movs	r2, #200	@ 0xc8
 800469a:	2132      	movs	r1, #50	@ 0x32
 800469c:	2014      	movs	r0, #20
 800469e:	f000 ff89 	bl	80055b4 <lcdFillRoundRect>
	lcdFillRoundRect(20,100, 200, 35, 6, COLOR_LIGHTGREY);
 80046a2:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	2306      	movs	r3, #6
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	2323      	movs	r3, #35	@ 0x23
 80046ae:	22c8      	movs	r2, #200	@ 0xc8
 80046b0:	2164      	movs	r1, #100	@ 0x64
 80046b2:	2014      	movs	r0, #20
 80046b4:	f000 ff7e 	bl	80055b4 <lcdFillRoundRect>
	lcdFillRoundRect(20,150, 200, 35, 6, COLOR_LIGHTGREY);
 80046b8:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	2306      	movs	r3, #6
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2323      	movs	r3, #35	@ 0x23
 80046c4:	22c8      	movs	r2, #200	@ 0xc8
 80046c6:	2196      	movs	r1, #150	@ 0x96
 80046c8:	2014      	movs	r0, #20
 80046ca:	f000 ff73 	bl	80055b4 <lcdFillRoundRect>
	lcdFillRoundRect(20,200, 200, 35, 6, COLOR_LIGHTGREY);
 80046ce:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80046d2:	9301      	str	r3, [sp, #4]
 80046d4:	2306      	movs	r3, #6
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	2323      	movs	r3, #35	@ 0x23
 80046da:	22c8      	movs	r2, #200	@ 0xc8
 80046dc:	21c8      	movs	r1, #200	@ 0xc8
 80046de:	2014      	movs	r0, #20
 80046e0:	f000 ff68 	bl	80055b4 <lcdFillRoundRect>
	lcdFillRoundRect(20,250, 200, 35, 6, COLOR_LIGHTGREY);
 80046e4:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	2306      	movs	r3, #6
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	2323      	movs	r3, #35	@ 0x23
 80046f0:	22c8      	movs	r2, #200	@ 0xc8
 80046f2:	21fa      	movs	r1, #250	@ 0xfa
 80046f4:	2014      	movs	r0, #20
 80046f6:	f000 ff5d 	bl	80055b4 <lcdFillRoundRect>

	lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80046fa:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80046fe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004702:	f001 f957 	bl	80059b4 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 8004706:	486b      	ldr	r0, [pc, #428]	@ (80048b4 <Screen3+0x258>)
 8004708:	f001 f944 	bl	8005994 <lcdSetTextFont>
	lcdSetCursor(25, 60);
 800470c:	213c      	movs	r1, #60	@ 0x3c
 800470e:	2019      	movs	r0, #25
 8004710:	f001 f9d0 	bl	8005ab4 <lcdSetCursor>
	lcdPrintf("TP.HCM");
 8004714:	4868      	ldr	r0, [pc, #416]	@ (80048b8 <Screen3+0x25c>)
 8004716:	f001 f8b1 	bl	800587c <lcdPrintf>



	lcdSetTextFont(&Font20);
 800471a:	4866      	ldr	r0, [pc, #408]	@ (80048b4 <Screen3+0x258>)
 800471c:	f001 f93a 	bl	8005994 <lcdSetTextFont>
	lcdSetCursor(25, 110);
 8004720:	216e      	movs	r1, #110	@ 0x6e
 8004722:	2019      	movs	r0, #25
 8004724:	f001 f9c6 	bl	8005ab4 <lcdSetCursor>
	lcdPrintf("Ha Noi");
 8004728:	4864      	ldr	r0, [pc, #400]	@ (80048bc <Screen3+0x260>)
 800472a:	f001 f8a7 	bl	800587c <lcdPrintf>


	lcdSetTextFont(&Font20);
 800472e:	4861      	ldr	r0, [pc, #388]	@ (80048b4 <Screen3+0x258>)
 8004730:	f001 f930 	bl	8005994 <lcdSetTextFont>
	lcdSetCursor(25, 160);
 8004734:	21a0      	movs	r1, #160	@ 0xa0
 8004736:	2019      	movs	r0, #25
 8004738:	f001 f9bc 	bl	8005ab4 <lcdSetCursor>
	lcdPrintf("Hai Phong");
 800473c:	4860      	ldr	r0, [pc, #384]	@ (80048c0 <Screen3+0x264>)
 800473e:	f001 f89d 	bl	800587c <lcdPrintf>


	lcdSetTextFont(&Font20);
 8004742:	485c      	ldr	r0, [pc, #368]	@ (80048b4 <Screen3+0x258>)
 8004744:	f001 f926 	bl	8005994 <lcdSetTextFont>
	lcdSetCursor(25, 210);
 8004748:	21d2      	movs	r1, #210	@ 0xd2
 800474a:	2019      	movs	r0, #25
 800474c:	f001 f9b2 	bl	8005ab4 <lcdSetCursor>
	lcdPrintf("Can Tho");
 8004750:	485c      	ldr	r0, [pc, #368]	@ (80048c4 <Screen3+0x268>)
 8004752:	f001 f893 	bl	800587c <lcdPrintf>

	lcdSetTextFont(&Font20);
 8004756:	4857      	ldr	r0, [pc, #348]	@ (80048b4 <Screen3+0x258>)
 8004758:	f001 f91c 	bl	8005994 <lcdSetTextFont>
	lcdSetCursor(25, 260);
 800475c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8004760:	2019      	movs	r0, #25
 8004762:	f001 f9a7 	bl	8005ab4 <lcdSetCursor>
	lcdPrintf("Da Nang");
 8004766:	4858      	ldr	r0, [pc, #352]	@ (80048c8 <Screen3+0x26c>)
 8004768:	f001 f888 	bl	800587c <lcdPrintf>

	if(choice == 1){
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d11b      	bne.n	80047aa <Screen3+0x14e>
		lcdFillRoundRect(20,50, 200, 35, 6, COLOR_GREEN);
 8004772:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	2306      	movs	r3, #6
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2323      	movs	r3, #35	@ 0x23
 800477e:	22c8      	movs	r2, #200	@ 0xc8
 8004780:	2132      	movs	r1, #50	@ 0x32
 8004782:	2014      	movs	r0, #20
 8004784:	f000 ff16 	bl	80055b4 <lcdFillRoundRect>
		lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 8004788:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800478c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004790:	f001 f910 	bl	80059b4 <lcdSetTextColor>
		lcdSetTextFont(&Font20);
 8004794:	4847      	ldr	r0, [pc, #284]	@ (80048b4 <Screen3+0x258>)
 8004796:	f001 f8fd 	bl	8005994 <lcdSetTextFont>
		lcdSetCursor(25, 60);
 800479a:	213c      	movs	r1, #60	@ 0x3c
 800479c:	2019      	movs	r0, #25
 800479e:	f001 f989 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("TP.HCM");
 80047a2:	4845      	ldr	r0, [pc, #276]	@ (80048b8 <Screen3+0x25c>)
 80047a4:	f001 f86a 	bl	800587c <lcdPrintf>
		lcdPrintf("Da Nang");
	}



}
 80047a8:	e07b      	b.n	80048a2 <Screen3+0x246>
	else if(choice == 2){
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d11b      	bne.n	80047e8 <Screen3+0x18c>
		lcdFillRoundRect(20,100, 200, 35, 6, COLOR_GREEN);
 80047b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	2306      	movs	r3, #6
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	2323      	movs	r3, #35	@ 0x23
 80047bc:	22c8      	movs	r2, #200	@ 0xc8
 80047be:	2164      	movs	r1, #100	@ 0x64
 80047c0:	2014      	movs	r0, #20
 80047c2:	f000 fef7 	bl	80055b4 <lcdFillRoundRect>
		lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 80047c6:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80047ca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80047ce:	f001 f8f1 	bl	80059b4 <lcdSetTextColor>
		lcdSetTextFont(&Font20);
 80047d2:	4838      	ldr	r0, [pc, #224]	@ (80048b4 <Screen3+0x258>)
 80047d4:	f001 f8de 	bl	8005994 <lcdSetTextFont>
		lcdSetCursor(25, 110);
 80047d8:	216e      	movs	r1, #110	@ 0x6e
 80047da:	2019      	movs	r0, #25
 80047dc:	f001 f96a 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("Ha Noi");
 80047e0:	4836      	ldr	r0, [pc, #216]	@ (80048bc <Screen3+0x260>)
 80047e2:	f001 f84b 	bl	800587c <lcdPrintf>
}
 80047e6:	e05c      	b.n	80048a2 <Screen3+0x246>
	else if(choice == 3){
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d11b      	bne.n	8004826 <Screen3+0x1ca>
		lcdFillRoundRect(20,150, 200, 35, 6, COLOR_GREEN);
 80047ee:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	2306      	movs	r3, #6
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	2323      	movs	r3, #35	@ 0x23
 80047fa:	22c8      	movs	r2, #200	@ 0xc8
 80047fc:	2196      	movs	r1, #150	@ 0x96
 80047fe:	2014      	movs	r0, #20
 8004800:	f000 fed8 	bl	80055b4 <lcdFillRoundRect>
		lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 8004804:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8004808:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800480c:	f001 f8d2 	bl	80059b4 <lcdSetTextColor>
		lcdSetTextFont(&Font20);
 8004810:	4828      	ldr	r0, [pc, #160]	@ (80048b4 <Screen3+0x258>)
 8004812:	f001 f8bf 	bl	8005994 <lcdSetTextFont>
		lcdSetCursor(25, 160);
 8004816:	21a0      	movs	r1, #160	@ 0xa0
 8004818:	2019      	movs	r0, #25
 800481a:	f001 f94b 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("Hai Phong");
 800481e:	4828      	ldr	r0, [pc, #160]	@ (80048c0 <Screen3+0x264>)
 8004820:	f001 f82c 	bl	800587c <lcdPrintf>
}
 8004824:	e03d      	b.n	80048a2 <Screen3+0x246>
	else if(choice == 4){
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b04      	cmp	r3, #4
 800482a:	d11b      	bne.n	8004864 <Screen3+0x208>
		lcdFillRoundRect(20,200, 200, 35, 6, COLOR_GREEN);
 800482c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	2306      	movs	r3, #6
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	2323      	movs	r3, #35	@ 0x23
 8004838:	22c8      	movs	r2, #200	@ 0xc8
 800483a:	21c8      	movs	r1, #200	@ 0xc8
 800483c:	2014      	movs	r0, #20
 800483e:	f000 feb9 	bl	80055b4 <lcdFillRoundRect>
		lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 8004842:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8004846:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800484a:	f001 f8b3 	bl	80059b4 <lcdSetTextColor>
		lcdSetTextFont(&Font20);
 800484e:	4819      	ldr	r0, [pc, #100]	@ (80048b4 <Screen3+0x258>)
 8004850:	f001 f8a0 	bl	8005994 <lcdSetTextFont>
		lcdSetCursor(25, 210);
 8004854:	21d2      	movs	r1, #210	@ 0xd2
 8004856:	2019      	movs	r0, #25
 8004858:	f001 f92c 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("Can Tho");
 800485c:	4819      	ldr	r0, [pc, #100]	@ (80048c4 <Screen3+0x268>)
 800485e:	f001 f80d 	bl	800587c <lcdPrintf>
}
 8004862:	e01e      	b.n	80048a2 <Screen3+0x246>
	else if(choice == 5){
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b05      	cmp	r3, #5
 8004868:	d11b      	bne.n	80048a2 <Screen3+0x246>
		lcdFillRoundRect(20,250, 200, 35, 6, COLOR_GREEN);
 800486a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	2306      	movs	r3, #6
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	2323      	movs	r3, #35	@ 0x23
 8004876:	22c8      	movs	r2, #200	@ 0xc8
 8004878:	21fa      	movs	r1, #250	@ 0xfa
 800487a:	2014      	movs	r0, #20
 800487c:	f000 fe9a 	bl	80055b4 <lcdFillRoundRect>
		lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 8004880:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8004884:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004888:	f001 f894 	bl	80059b4 <lcdSetTextColor>
		lcdSetTextFont(&Font20);
 800488c:	4809      	ldr	r0, [pc, #36]	@ (80048b4 <Screen3+0x258>)
 800488e:	f001 f881 	bl	8005994 <lcdSetTextFont>
		lcdSetCursor(25, 260);
 8004892:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8004896:	2019      	movs	r0, #25
 8004898:	f001 f90c 	bl	8005ab4 <lcdSetCursor>
		lcdPrintf("Da Nang");
 800489c:	480a      	ldr	r0, [pc, #40]	@ (80048c8 <Screen3+0x26c>)
 800489e:	f000 ffed 	bl	800587c <lcdPrintf>
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000024 	.word	0x20000024
 80048b0:	0800edcc 	.word	0x0800edcc
 80048b4:	2000001c 	.word	0x2000001c
 80048b8:	0800edd8 	.word	0x0800edd8
 80048bc:	0800ede0 	.word	0x0800ede0
 80048c0:	0800ede8 	.word	0x0800ede8
 80048c4:	0800edf4 	.word	0x0800edf4
 80048c8:	0800edfc 	.word	0x0800edfc

080048cc <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 80048d2:	2300      	movs	r3, #0
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	2301      	movs	r3, #1
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	2300      	movs	r3, #0
 80048dc:	2200      	movs	r2, #0
 80048de:	2101      	movs	r1, #1
 80048e0:	2000      	movs	r0, #0
 80048e2:	f001 f9a3 	bl	8005c2c <lcdBuildMemoryAccessControlConfig>
 80048e6:	4603      	mov	r3, r0
 80048e8:	461a      	mov	r2, r3
 80048ea:	4bae      	ldr	r3, [pc, #696]	@ (8004ba4 <lcdInit+0x2d8>)
 80048ec:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 80048ee:	2300      	movs	r3, #0
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	2301      	movs	r3, #1
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	2300      	movs	r3, #0
 80048f8:	2201      	movs	r2, #1
 80048fa:	2100      	movs	r1, #0
 80048fc:	2000      	movs	r0, #0
 80048fe:	f001 f995 	bl	8005c2c <lcdBuildMemoryAccessControlConfig>
 8004902:	4603      	mov	r3, r0
 8004904:	461a      	mov	r2, r3
 8004906:	4ba8      	ldr	r3, [pc, #672]	@ (8004ba8 <lcdInit+0x2dc>)
 8004908:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800490a:	2300      	movs	r3, #0
 800490c:	9301      	str	r3, [sp, #4]
 800490e:	2301      	movs	r3, #1
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	2300      	movs	r3, #0
 8004914:	2200      	movs	r2, #0
 8004916:	2100      	movs	r1, #0
 8004918:	2001      	movs	r0, #1
 800491a:	f001 f987 	bl	8005c2c <lcdBuildMemoryAccessControlConfig>
 800491e:	4603      	mov	r3, r0
 8004920:	461a      	mov	r2, r3
 8004922:	4ba2      	ldr	r3, [pc, #648]	@ (8004bac <lcdInit+0x2e0>)
 8004924:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8004926:	2300      	movs	r3, #0
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	2301      	movs	r3, #1
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	2300      	movs	r3, #0
 8004930:	2201      	movs	r2, #1
 8004932:	2101      	movs	r1, #1
 8004934:	2001      	movs	r0, #1
 8004936:	f001 f979 	bl	8005c2c <lcdBuildMemoryAccessControlConfig>
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	4b9c      	ldr	r3, [pc, #624]	@ (8004bb0 <lcdInit+0x2e4>)
 8004940:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 8004942:	f001 f949 	bl	8005bd8 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 8004946:	2028      	movs	r0, #40	@ 0x28
 8004948:	f001 f950 	bl	8005bec <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 800494c:	20cf      	movs	r0, #207	@ 0xcf
 800494e:	f001 f94d 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x00);
 8004952:	2000      	movs	r0, #0
 8004954:	f001 f95a 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x83);
 8004958:	2083      	movs	r0, #131	@ 0x83
 800495a:	f001 f957 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x30);
 800495e:	2030      	movs	r0, #48	@ 0x30
 8004960:	f001 f954 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(0xED);
 8004964:	20ed      	movs	r0, #237	@ 0xed
 8004966:	f001 f941 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x64);
 800496a:	2064      	movs	r0, #100	@ 0x64
 800496c:	f001 f94e 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x03);
 8004970:	2003      	movs	r0, #3
 8004972:	f001 f94b 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x12);
 8004976:	2012      	movs	r0, #18
 8004978:	f001 f948 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x81);
 800497c:	2081      	movs	r0, #129	@ 0x81
 800497e:	f001 f945 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(0xE8);
 8004982:	20e8      	movs	r0, #232	@ 0xe8
 8004984:	f001 f932 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x85);
 8004988:	2085      	movs	r0, #133	@ 0x85
 800498a:	f001 f93f 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x01);
 800498e:	2001      	movs	r0, #1
 8004990:	f001 f93c 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x79);
 8004994:	2079      	movs	r0, #121	@ 0x79
 8004996:	f001 f939 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(0xCB);
 800499a:	20cb      	movs	r0, #203	@ 0xcb
 800499c:	f001 f926 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x39);
 80049a0:	2039      	movs	r0, #57	@ 0x39
 80049a2:	f001 f933 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x2C);
 80049a6:	202c      	movs	r0, #44	@ 0x2c
 80049a8:	f001 f930 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x00);
 80049ac:	2000      	movs	r0, #0
 80049ae:	f001 f92d 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x34);
 80049b2:	2034      	movs	r0, #52	@ 0x34
 80049b4:	f001 f92a 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x02);
 80049b8:	2002      	movs	r0, #2
 80049ba:	f001 f927 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(0xF7);
 80049be:	20f7      	movs	r0, #247	@ 0xf7
 80049c0:	f001 f914 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x20);
 80049c4:	2020      	movs	r0, #32
 80049c6:	f001 f921 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(0xEA);
 80049ca:	20ea      	movs	r0, #234	@ 0xea
 80049cc:	f001 f90e 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x00);
 80049d0:	2000      	movs	r0, #0
 80049d2:	f001 f91b 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x00);
 80049d6:	2000      	movs	r0, #0
 80049d8:	f001 f918 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 80049dc:	20c0      	movs	r0, #192	@ 0xc0
 80049de:	f001 f905 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x26);
 80049e2:	2026      	movs	r0, #38	@ 0x26
 80049e4:	f001 f912 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 80049e8:	20c1      	movs	r0, #193	@ 0xc1
 80049ea:	f001 f8ff 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x11);
 80049ee:	2011      	movs	r0, #17
 80049f0:	f001 f90c 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 80049f4:	20c5      	movs	r0, #197	@ 0xc5
 80049f6:	f001 f8f9 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x35);
 80049fa:	2035      	movs	r0, #53	@ 0x35
 80049fc:	f001 f906 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x3E);
 8004a00:	203e      	movs	r0, #62	@ 0x3e
 8004a02:	f001 f903 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8004a06:	20c7      	movs	r0, #199	@ 0xc7
 8004a08:	f001 f8f0 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0xBE);
 8004a0c:	20be      	movs	r0, #190	@ 0xbe
 8004a0e:	f001 f8fd 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 8004a12:	2036      	movs	r0, #54	@ 0x36
 8004a14:	f001 f8ea 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8004a18:	4b62      	ldr	r3, [pc, #392]	@ (8004ba4 <lcdInit+0x2d8>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f001 f8f5 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 8004a22:	203a      	movs	r0, #58	@ 0x3a
 8004a24:	f001 f8e2 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x55);
 8004a28:	2055      	movs	r0, #85	@ 0x55
 8004a2a:	f001 f8ef 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 8004a2e:	20b1      	movs	r0, #177	@ 0xb1
 8004a30:	f001 f8dc 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x00);
 8004a34:	2000      	movs	r0, #0
 8004a36:	f001 f8e9 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x1B);
 8004a3a:	201b      	movs	r0, #27
 8004a3c:	f001 f8e6 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(0xF2);
 8004a40:	20f2      	movs	r0, #242	@ 0xf2
 8004a42:	f001 f8d3 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x08);
 8004a46:	2008      	movs	r0, #8
 8004a48:	f001 f8e0 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 8004a4c:	2026      	movs	r0, #38	@ 0x26
 8004a4e:	f001 f8cd 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x01);
 8004a52:	2001      	movs	r0, #1
 8004a54:	f001 f8da 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 8004a58:	20e0      	movs	r0, #224	@ 0xe0
 8004a5a:	f001 f8c7 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x1F);
 8004a5e:	201f      	movs	r0, #31
 8004a60:	f001 f8d4 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x1A);
 8004a64:	201a      	movs	r0, #26
 8004a66:	f001 f8d1 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x18);
 8004a6a:	2018      	movs	r0, #24
 8004a6c:	f001 f8ce 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x0A);
 8004a70:	200a      	movs	r0, #10
 8004a72:	f001 f8cb 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x0F);
 8004a76:	200f      	movs	r0, #15
 8004a78:	f001 f8c8 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x06);
 8004a7c:	2006      	movs	r0, #6
 8004a7e:	f001 f8c5 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x45);
 8004a82:	2045      	movs	r0, #69	@ 0x45
 8004a84:	f001 f8c2 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x87);
 8004a88:	2087      	movs	r0, #135	@ 0x87
 8004a8a:	f001 f8bf 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x32);
 8004a8e:	2032      	movs	r0, #50	@ 0x32
 8004a90:	f001 f8bc 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x0A);
 8004a94:	200a      	movs	r0, #10
 8004a96:	f001 f8b9 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x07);
 8004a9a:	2007      	movs	r0, #7
 8004a9c:	f001 f8b6 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x02);
 8004aa0:	2002      	movs	r0, #2
 8004aa2:	f001 f8b3 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x07);
 8004aa6:	2007      	movs	r0, #7
 8004aa8:	f001 f8b0 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x05);
 8004aac:	2005      	movs	r0, #5
 8004aae:	f001 f8ad 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x00);
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f001 f8aa 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8004ab8:	20e1      	movs	r0, #225	@ 0xe1
 8004aba:	f001 f897 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x00);
 8004abe:	2000      	movs	r0, #0
 8004ac0:	f001 f8a4 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x25);
 8004ac4:	2025      	movs	r0, #37	@ 0x25
 8004ac6:	f001 f8a1 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x27);
 8004aca:	2027      	movs	r0, #39	@ 0x27
 8004acc:	f001 f89e 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x05);
 8004ad0:	2005      	movs	r0, #5
 8004ad2:	f001 f89b 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x10);
 8004ad6:	2010      	movs	r0, #16
 8004ad8:	f001 f898 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x09);
 8004adc:	2009      	movs	r0, #9
 8004ade:	f001 f895 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x3A);
 8004ae2:	203a      	movs	r0, #58	@ 0x3a
 8004ae4:	f001 f892 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x78);
 8004ae8:	2078      	movs	r0, #120	@ 0x78
 8004aea:	f001 f88f 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x4D);
 8004aee:	204d      	movs	r0, #77	@ 0x4d
 8004af0:	f001 f88c 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x05);
 8004af4:	2005      	movs	r0, #5
 8004af6:	f001 f889 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x18);
 8004afa:	2018      	movs	r0, #24
 8004afc:	f001 f886 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x0D);
 8004b00:	200d      	movs	r0, #13
 8004b02:	f001 f883 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x38);
 8004b06:	2038      	movs	r0, #56	@ 0x38
 8004b08:	f001 f880 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x3A);
 8004b0c:	203a      	movs	r0, #58	@ 0x3a
 8004b0e:	f001 f87d 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x1F);
 8004b12:	201f      	movs	r0, #31
 8004b14:	f001 f87a 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8004b18:	202a      	movs	r0, #42	@ 0x2a
 8004b1a:	f001 f867 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x00);
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f001 f874 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x00);
 8004b24:	2000      	movs	r0, #0
 8004b26:	f001 f871 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x00);
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	f001 f86e 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0xEF);
 8004b30:	20ef      	movs	r0, #239	@ 0xef
 8004b32:	f001 f86b 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8004b36:	202b      	movs	r0, #43	@ 0x2b
 8004b38:	f001 f858 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x00);
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	f001 f865 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x00);
 8004b42:	2000      	movs	r0, #0
 8004b44:	f001 f862 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x01);
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f001 f85f 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x3F);
 8004b4e:	203f      	movs	r0, #63	@ 0x3f
 8004b50:	f001 f85c 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 8004b54:	20b7      	movs	r0, #183	@ 0xb7
 8004b56:	f001 f849 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x07);
 8004b5a:	2007      	movs	r0, #7
 8004b5c:	f001 f856 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 8004b60:	20b6      	movs	r0, #182	@ 0xb6
 8004b62:	f001 f843 	bl	8005bec <lcdWriteCommand>
  lcdWriteData(0x0A);
 8004b66:	200a      	movs	r0, #10
 8004b68:	f001 f850 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x82);
 8004b6c:	2082      	movs	r0, #130	@ 0x82
 8004b6e:	f001 f84d 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x27);
 8004b72:	2027      	movs	r0, #39	@ 0x27
 8004b74:	f001 f84a 	bl	8005c0c <lcdWriteData>
  lcdWriteData(0x00);
 8004b78:	2000      	movs	r0, #0
 8004b7a:	f001 f847 	bl	8005c0c <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8004b7e:	2011      	movs	r0, #17
 8004b80:	f001 f834 	bl	8005bec <lcdWriteCommand>
  HAL_Delay(100);
 8004b84:	2064      	movs	r0, #100	@ 0x64
 8004b86:	f003 f8f5 	bl	8007d74 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8004b8a:	2029      	movs	r0, #41	@ 0x29
 8004b8c:	f001 f82e 	bl	8005bec <lcdWriteCommand>
  HAL_Delay(100);
 8004b90:	2064      	movs	r0, #100	@ 0x64
 8004b92:	f003 f8ef 	bl	8007d74 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8004b96:	202c      	movs	r0, #44	@ 0x2c
 8004b98:	f001 f828 	bl	8005bec <lcdWriteCommand>
}
 8004b9c:	bf00      	nop
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20002a50 	.word	0x20002a50
 8004ba8:	20002a51 	.word	0x20002a51
 8004bac:	20002a52 	.word	0x20002a52
 8004bb0:	20002a53 	.word	0x20002a53

08004bb4 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8004bbe:	4b11      	ldr	r3, [pc, #68]	@ (8004c04 <lcdFillRGB+0x50>)
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c04 <lcdFillRGB+0x50>)
 8004bc8:	885b      	ldrh	r3, [r3, #2]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2100      	movs	r1, #0
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	f000 ff89 	bl	8005ae8 <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c04 <lcdFillRGB+0x50>)
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	4b09      	ldr	r3, [pc, #36]	@ (8004c04 <lcdFillRGB+0x50>)
 8004bde:	885b      	ldrh	r3, [r3, #2]
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
 8004be4:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8004be6:	e003      	b.n	8004bf0 <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 f80e 	bl	8005c0c <lcdWriteData>
  while(dimensions--)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1e5a      	subs	r2, r3, #1
 8004bf4:	60fa      	str	r2, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f6      	bne.n	8004be8 <lcdFillRGB+0x34>
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	bf00      	nop
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	2000002c 	.word	0x2000002c

08004c08 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	80fb      	strh	r3, [r7, #6]
 8004c12:	460b      	mov	r3, r1
 8004c14:	80bb      	strh	r3, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8004c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c4c <lcdDrawPixel+0x44>)
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	88fa      	ldrh	r2, [r7, #6]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d20f      	bcs.n	8004c44 <lcdDrawPixel+0x3c>
 8004c24:	4b09      	ldr	r3, [pc, #36]	@ (8004c4c <lcdDrawPixel+0x44>)
 8004c26:	885b      	ldrh	r3, [r3, #2]
 8004c28:	88ba      	ldrh	r2, [r7, #4]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d20a      	bcs.n	8004c44 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8004c2e:	88bb      	ldrh	r3, [r7, #4]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	88b9      	ldrh	r1, [r7, #4]
 8004c34:	88f8      	ldrh	r0, [r7, #6]
 8004c36:	f000 ff57 	bl	8005ae8 <lcdSetWindow>
    lcdWriteData(color);
 8004c3a:	887b      	ldrh	r3, [r7, #2]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 ffe5 	bl	8005c0c <lcdWriteData>
 8004c42:	e000      	b.n	8004c46 <lcdDrawPixel+0x3e>
        return;
 8004c44:	bf00      	nop
}
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	2000002c 	.word	0x2000002c

08004c50 <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4604      	mov	r4, r0
 8004c58:	4608      	mov	r0, r1
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4623      	mov	r3, r4
 8004c60:	80fb      	strh	r3, [r7, #6]
 8004c62:	4603      	mov	r3, r0
 8004c64:	80bb      	strh	r3, [r7, #4]
 8004c66:	460b      	mov	r3, r1
 8004c68:	807b      	strh	r3, [r7, #2]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8004c6e:	88ba      	ldrh	r2, [r7, #4]
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d205      	bcs.n	8004c82 <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	817b      	strh	r3, [r7, #10]
 8004c7a:	88bb      	ldrh	r3, [r7, #4]
 8004c7c:	80fb      	strh	r3, [r7, #6]
 8004c7e:	897b      	ldrh	r3, [r7, #10]
 8004c80:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8004c82:	4b15      	ldr	r3, [pc, #84]	@ (8004cd8 <lcdDrawHLine+0x88>)
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	88ba      	ldrh	r2, [r7, #4]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d303      	bcc.n	8004c94 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8004c8c:	4b12      	ldr	r3, [pc, #72]	@ (8004cd8 <lcdDrawHLine+0x88>)
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8004c94:	4b10      	ldr	r3, [pc, #64]	@ (8004cd8 <lcdDrawHLine+0x88>)
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	88fa      	ldrh	r2, [r7, #6]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d303      	bcc.n	8004ca6 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8004c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004cd8 <lcdDrawHLine+0x88>)
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8004ca6:	887b      	ldrh	r3, [r7, #2]
 8004ca8:	88ba      	ldrh	r2, [r7, #4]
 8004caa:	8879      	ldrh	r1, [r7, #2]
 8004cac:	88f8      	ldrh	r0, [r7, #6]
 8004cae:	f000 ff1b 	bl	8005ae8 <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	e006      	b.n	8004cc6 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8004cb8:	883b      	ldrh	r3, [r7, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 ffa6 	bl	8005c0c <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	88bb      	ldrh	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	ddf4      	ble.n	8004cb8 <lcdDrawHLine+0x68>
	}
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd90      	pop	{r4, r7, pc}
 8004cd8:	2000002c 	.word	0x2000002c

08004cdc <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8004cdc:	b590      	push	{r4, r7, lr}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4623      	mov	r3, r4
 8004cec:	80fb      	strh	r3, [r7, #6]
 8004cee:	4603      	mov	r3, r0
 8004cf0:	80bb      	strh	r3, [r7, #4]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	807b      	strh	r3, [r7, #2]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	88bb      	ldrh	r3, [r7, #4]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d205      	bcs.n	8004d0e <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8004d02:	88bb      	ldrh	r3, [r7, #4]
 8004d04:	817b      	strh	r3, [r7, #10]
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	80bb      	strh	r3, [r7, #4]
 8004d0a:	897b      	ldrh	r3, [r7, #10]
 8004d0c:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004d78 <lcdDrawVLine+0x9c>)
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d303      	bcc.n	8004d20 <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8004d18:	4b17      	ldr	r3, [pc, #92]	@ (8004d78 <lcdDrawVLine+0x9c>)
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8004d20:	4b15      	ldr	r3, [pc, #84]	@ (8004d78 <lcdDrawVLine+0x9c>)
 8004d22:	885b      	ldrh	r3, [r3, #2]
 8004d24:	88ba      	ldrh	r2, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d303      	bcc.n	8004d32 <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8004d2a:	4b13      	ldr	r3, [pc, #76]	@ (8004d78 <lcdDrawVLine+0x9c>)
 8004d2c:	885b      	ldrh	r3, [r3, #2]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8004d32:	4b11      	ldr	r3, [pc, #68]	@ (8004d78 <lcdDrawVLine+0x9c>)
 8004d34:	885b      	ldrh	r3, [r3, #2]
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d303      	bcc.n	8004d44 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8004d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d78 <lcdDrawVLine+0x9c>)
 8004d3e:	885b      	ldrh	r3, [r3, #2]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8004d44:	887b      	ldrh	r3, [r7, #2]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	88b9      	ldrh	r1, [r7, #4]
 8004d4a:	88f8      	ldrh	r0, [r7, #6]
 8004d4c:	f000 fecc 	bl	8005ae8 <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8004d50:	88bb      	ldrh	r3, [r7, #4]
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e006      	b.n	8004d64 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8004d56:	883b      	ldrh	r3, [r7, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 ff57 	bl	8005c0c <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3301      	adds	r3, #1
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	887b      	ldrh	r3, [r7, #2]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	ddf4      	ble.n	8004d56 <lcdDrawVLine+0x7a>
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd90      	pop	{r4, r7, pc}
 8004d76:	bf00      	nop
 8004d78:	2000002c 	.word	0x2000002c

08004d7c <lcdDrawLine>:
 * \param color	Color
 *
 * \return void
 */
void lcdDrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b089      	sub	sp, #36	@ 0x24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4604      	mov	r4, r0
 8004d84:	4608      	mov	r0, r1
 8004d86:	4611      	mov	r1, r2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	80fb      	strh	r3, [r7, #6]
 8004d8e:	4603      	mov	r3, r0
 8004d90:	80bb      	strh	r3, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	807b      	strh	r3, [r7, #2]
 8004d96:	4613      	mov	r3, r2
 8004d98:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8004d9a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004d9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004da8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004dac:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004db0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004db4:	1acb      	subs	r3, r1, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bfb8      	it	lt
 8004dba:	425b      	neglt	r3, r3
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	bfcc      	ite	gt
 8004dc0:	2301      	movgt	r3, #1
 8004dc2:	2300      	movle	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	837b      	strh	r3, [r7, #26]
	if (steep)
 8004dc8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00b      	beq.n	8004de8 <lcdDrawLine+0x6c>
	{
		swap(x1, y1);
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	833b      	strh	r3, [r7, #24]
 8004dd4:	88bb      	ldrh	r3, [r7, #4]
 8004dd6:	80fb      	strh	r3, [r7, #6]
 8004dd8:	8b3b      	ldrh	r3, [r7, #24]
 8004dda:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8004ddc:	887b      	ldrh	r3, [r7, #2]
 8004dde:	82fb      	strh	r3, [r7, #22]
 8004de0:	883b      	ldrh	r3, [r7, #0]
 8004de2:	807b      	strh	r3, [r7, #2]
 8004de4:	8afb      	ldrh	r3, [r7, #22]
 8004de6:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2)
 8004de8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004dec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	dd0b      	ble.n	8004e0c <lcdDrawLine+0x90>
	{
		swap(x1, x2);
 8004df4:	88fb      	ldrh	r3, [r7, #6]
 8004df6:	82bb      	strh	r3, [r7, #20]
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	80fb      	strh	r3, [r7, #6]
 8004dfc:	8abb      	ldrh	r3, [r7, #20]
 8004dfe:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8004e00:	88bb      	ldrh	r3, [r7, #4]
 8004e02:	827b      	strh	r3, [r7, #18]
 8004e04:	883b      	ldrh	r3, [r7, #0]
 8004e06:	80bb      	strh	r3, [r7, #4]
 8004e08:	8a7b      	ldrh	r3, [r7, #18]
 8004e0a:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 8004e16:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004e1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bfb8      	it	lt
 8004e24:	425b      	neglt	r3, r3
 8004e26:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8004e28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e2c:	0fda      	lsrs	r2, r3, #31
 8004e2e:	4413      	add	r3, r2
 8004e30:	105b      	asrs	r3, r3, #1
 8004e32:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2)
 8004e34:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004e38:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	da02      	bge.n	8004e46 <lcdDrawLine+0xca>
	{
		ystep = 1;
 8004e40:	2301      	movs	r3, #1
 8004e42:	83bb      	strh	r3, [r7, #28]
 8004e44:	e02d      	b.n	8004ea2 <lcdDrawLine+0x126>
	}
	else
	{
		ystep = -1;
 8004e46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e4a:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++)
 8004e4c:	e029      	b.n	8004ea2 <lcdDrawLine+0x126>
	{
		if (steep)
 8004e4e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d006      	beq.n	8004e64 <lcdDrawLine+0xe8>
		{
			lcdDrawPixel(y1, x1, color);
 8004e56:	88bb      	ldrh	r3, [r7, #4]
 8004e58:	88f9      	ldrh	r1, [r7, #6]
 8004e5a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fed3 	bl	8004c08 <lcdDrawPixel>
 8004e62:	e005      	b.n	8004e70 <lcdDrawLine+0xf4>
		}
		else
		{
			lcdDrawPixel(x1, y1, color);
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	88b9      	ldrh	r1, [r7, #4]
 8004e68:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff fecc 	bl	8004c08 <lcdDrawPixel>
		}
		err -= dy;
 8004e70:	8bfa      	ldrh	r2, [r7, #30]
 8004e72:	89fb      	ldrh	r3, [r7, #14]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 8004e7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da09      	bge.n	8004e96 <lcdDrawLine+0x11a>
		{
			y1 += ystep;
 8004e82:	88ba      	ldrh	r2, [r7, #4]
 8004e84:	8bbb      	ldrh	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8004e8c:	8bfa      	ldrh	r2, [r7, #30]
 8004e8e:	8a3b      	ldrh	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++)
 8004e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	80fb      	strh	r3, [r7, #6]
 8004ea2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ea6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	ddcf      	ble.n	8004e4e <lcdDrawLine+0xd2>
		}
	}
}
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	3724      	adds	r7, #36	@ 0x24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd90      	pop	{r4, r7, pc}

08004eb8 <lcdDrawRoundRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8004eb8:	b590      	push	{r4, r7, lr}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	80fb      	strh	r3, [r7, #6]
 8004eca:	4603      	mov	r3, r0
 8004ecc:	80bb      	strh	r3, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	807b      	strh	r3, [r7, #2]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdDrawHLine(x + r, x + w - r, y, color);
 8004ed6:	88fa      	ldrh	r2, [r7, #6]
 8004ed8:	8b3b      	ldrh	r3, [r7, #24]
 8004eda:	4413      	add	r3, r2
 8004edc:	b298      	uxth	r0, r3
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	887b      	ldrh	r3, [r7, #2]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	8b3b      	ldrh	r3, [r7, #24]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	b299      	uxth	r1, r3
 8004eec:	88ba      	ldrh	r2, [r7, #4]
 8004eee:	8bbb      	ldrh	r3, [r7, #28]
 8004ef0:	f7ff feae 	bl	8004c50 <lcdDrawHLine>
	lcdDrawHLine(x + r, x + w - r, y + h - 1, color);
 8004ef4:	88fa      	ldrh	r2, [r7, #6]
 8004ef6:	8b3b      	ldrh	r3, [r7, #24]
 8004ef8:	4413      	add	r3, r2
 8004efa:	b298      	uxth	r0, r3
 8004efc:	88fa      	ldrh	r2, [r7, #6]
 8004efe:	887b      	ldrh	r3, [r7, #2]
 8004f00:	4413      	add	r3, r2
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	8b3b      	ldrh	r3, [r7, #24]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	b299      	uxth	r1, r3
 8004f0a:	88ba      	ldrh	r2, [r7, #4]
 8004f0c:	883b      	ldrh	r3, [r7, #0]
 8004f0e:	4413      	add	r3, r2
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	8bbb      	ldrh	r3, [r7, #28]
 8004f18:	f7ff fe9a 	bl	8004c50 <lcdDrawHLine>
	lcdDrawVLine(x, y + r, y + h - r, color);
 8004f1c:	88f8      	ldrh	r0, [r7, #6]
 8004f1e:	88ba      	ldrh	r2, [r7, #4]
 8004f20:	8b3b      	ldrh	r3, [r7, #24]
 8004f22:	4413      	add	r3, r2
 8004f24:	b299      	uxth	r1, r3
 8004f26:	88ba      	ldrh	r2, [r7, #4]
 8004f28:	883b      	ldrh	r3, [r7, #0]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	8b3b      	ldrh	r3, [r7, #24]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	8bbb      	ldrh	r3, [r7, #28]
 8004f36:	f7ff fed1 	bl	8004cdc <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y + r, y + h - r, color);
 8004f3a:	88fa      	ldrh	r2, [r7, #6]
 8004f3c:	887b      	ldrh	r3, [r7, #2]
 8004f3e:	4413      	add	r3, r2
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b298      	uxth	r0, r3
 8004f46:	88ba      	ldrh	r2, [r7, #4]
 8004f48:	8b3b      	ldrh	r3, [r7, #24]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	b299      	uxth	r1, r3
 8004f4e:	88ba      	ldrh	r2, [r7, #4]
 8004f50:	883b      	ldrh	r3, [r7, #0]
 8004f52:	4413      	add	r3, r2
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	8b3b      	ldrh	r3, [r7, #24]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	8bbb      	ldrh	r3, [r7, #28]
 8004f5e:	f7ff febd 	bl	8004cdc <lcdDrawVLine>

	// draw four corners
	lcdDrawCircleHelper(x + r, y + r, r, 1, color);
 8004f62:	88fa      	ldrh	r2, [r7, #6]
 8004f64:	8b3b      	ldrh	r3, [r7, #24]
 8004f66:	4413      	add	r3, r2
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	b218      	sxth	r0, r3
 8004f6c:	88ba      	ldrh	r2, [r7, #4]
 8004f6e:	8b3b      	ldrh	r3, [r7, #24]
 8004f70:	4413      	add	r3, r2
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	b219      	sxth	r1, r3
 8004f76:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004f7a:	8bbb      	ldrh	r3, [r7, #28]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f000 f84b 	bl	800501a <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	887b      	ldrh	r3, [r7, #2]
 8004f88:	4413      	add	r3, r2
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	8b3b      	ldrh	r3, [r7, #24]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	b218      	sxth	r0, r3
 8004f98:	88ba      	ldrh	r2, [r7, #4]
 8004f9a:	8b3b      	ldrh	r3, [r7, #24]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	b219      	sxth	r1, r3
 8004fa2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004fa6:	8bbb      	ldrh	r3, [r7, #28]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	2302      	movs	r3, #2
 8004fac:	f000 f835 	bl	800501a <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8004fb0:	88fa      	ldrh	r2, [r7, #6]
 8004fb2:	887b      	ldrh	r3, [r7, #2]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	8b3b      	ldrh	r3, [r7, #24]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	b218      	sxth	r0, r3
 8004fc4:	88ba      	ldrh	r2, [r7, #4]
 8004fc6:	883b      	ldrh	r3, [r7, #0]
 8004fc8:	4413      	add	r3, r2
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	8b3b      	ldrh	r3, [r7, #24]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	b219      	sxth	r1, r3
 8004fd8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004fdc:	8bbb      	ldrh	r3, [r7, #28]
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f000 f81a 	bl	800501a <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8004fe6:	88fa      	ldrh	r2, [r7, #6]
 8004fe8:	8b3b      	ldrh	r3, [r7, #24]
 8004fea:	4413      	add	r3, r2
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	b218      	sxth	r0, r3
 8004ff0:	88ba      	ldrh	r2, [r7, #4]
 8004ff2:	883b      	ldrh	r3, [r7, #0]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	8b3b      	ldrh	r3, [r7, #24]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29b      	uxth	r3, r3
 8005002:	b219      	sxth	r1, r3
 8005004:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005008:	8bbb      	ldrh	r3, [r7, #28]
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2308      	movs	r3, #8
 800500e:	f000 f804 	bl	800501a <lcdDrawCircleHelper>
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	bd90      	pop	{r4, r7, pc}

0800501a <lcdDrawCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdDrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 800501a:	b590      	push	{r4, r7, lr}
 800501c:	b087      	sub	sp, #28
 800501e:	af00      	add	r7, sp, #0
 8005020:	4604      	mov	r4, r0
 8005022:	4608      	mov	r0, r1
 8005024:	4611      	mov	r1, r2
 8005026:	461a      	mov	r2, r3
 8005028:	4623      	mov	r3, r4
 800502a:	80fb      	strh	r3, [r7, #6]
 800502c:	4603      	mov	r3, r0
 800502e:	80bb      	strh	r3, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	807b      	strh	r3, [r7, #2]
 8005034:	4613      	mov	r3, r2
 8005036:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	f1c3 0301 	rsb	r3, r3, #1
 800503e:	b29b      	uxth	r3, r3
 8005040:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8005042:	2301      	movs	r3, #1
 8005044:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	461a      	mov	r2, r3
 800504a:	03d2      	lsls	r2, r2, #15
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	b29b      	uxth	r3, r3
 8005052:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8005058:	887b      	ldrh	r3, [r7, #2]
 800505a:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 800505c:	e095      	b.n	800518a <lcdDrawCircleHelper+0x170>
	{
		if (f >= 0)
 800505e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005062:	2b00      	cmp	r3, #0
 8005064:	db0e      	blt.n	8005084 <lcdDrawCircleHelper+0x6a>
		{
			y--;
 8005066:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29b      	uxth	r3, r3
 8005070:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8005072:	8a7b      	ldrh	r3, [r7, #18]
 8005074:	3302      	adds	r3, #2
 8005076:	b29b      	uxth	r3, r3
 8005078:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800507a:	8afa      	ldrh	r2, [r7, #22]
 800507c:	8a7b      	ldrh	r3, [r7, #18]
 800507e:	4413      	add	r3, r2
 8005080:	b29b      	uxth	r3, r3
 8005082:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8005084:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005088:	b29b      	uxth	r3, r3
 800508a:	3301      	adds	r3, #1
 800508c:	b29b      	uxth	r3, r3
 800508e:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8005090:	8abb      	ldrh	r3, [r7, #20]
 8005092:	3302      	adds	r3, #2
 8005094:	b29b      	uxth	r3, r3
 8005096:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8005098:	8afa      	ldrh	r2, [r7, #22]
 800509a:	8abb      	ldrh	r3, [r7, #20]
 800509c:	4413      	add	r3, r2
 800509e:	b29b      	uxth	r3, r3
 80050a0:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4)
 80050a2:	787b      	ldrb	r3, [r7, #1]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d017      	beq.n	80050dc <lcdDrawCircleHelper+0xc2>
		{
			lcdDrawPixel(x0 + x, y0 + y, color);
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	8a3b      	ldrh	r3, [r7, #16]
 80050b0:	4413      	add	r3, r2
 80050b2:	b298      	uxth	r0, r3
 80050b4:	88ba      	ldrh	r2, [r7, #4]
 80050b6:	89fb      	ldrh	r3, [r7, #14]
 80050b8:	4413      	add	r3, r2
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80050be:	4619      	mov	r1, r3
 80050c0:	f7ff fda2 	bl	8004c08 <lcdDrawPixel>
			lcdDrawPixel(x0 + y, y0 + x, color);
 80050c4:	88fa      	ldrh	r2, [r7, #6]
 80050c6:	89fb      	ldrh	r3, [r7, #14]
 80050c8:	4413      	add	r3, r2
 80050ca:	b298      	uxth	r0, r3
 80050cc:	88ba      	ldrh	r2, [r7, #4]
 80050ce:	8a3b      	ldrh	r3, [r7, #16]
 80050d0:	4413      	add	r3, r2
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80050d6:	4619      	mov	r1, r3
 80050d8:	f7ff fd96 	bl	8004c08 <lcdDrawPixel>
		}
		if (cornername & 0x2)
 80050dc:	787b      	ldrb	r3, [r7, #1]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d017      	beq.n	8005116 <lcdDrawCircleHelper+0xfc>
		{
			lcdDrawPixel(x0 + x, y0 - y, color);
 80050e6:	88fa      	ldrh	r2, [r7, #6]
 80050e8:	8a3b      	ldrh	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	b298      	uxth	r0, r3
 80050ee:	88ba      	ldrh	r2, [r7, #4]
 80050f0:	89fb      	ldrh	r3, [r7, #14]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80050f8:	4619      	mov	r1, r3
 80050fa:	f7ff fd85 	bl	8004c08 <lcdDrawPixel>
			lcdDrawPixel(x0 + y, y0 - x, color);
 80050fe:	88fa      	ldrh	r2, [r7, #6]
 8005100:	89fb      	ldrh	r3, [r7, #14]
 8005102:	4413      	add	r3, r2
 8005104:	b298      	uxth	r0, r3
 8005106:	88ba      	ldrh	r2, [r7, #4]
 8005108:	8a3b      	ldrh	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	b29b      	uxth	r3, r3
 800510e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005110:	4619      	mov	r1, r3
 8005112:	f7ff fd79 	bl	8004c08 <lcdDrawPixel>
		}
		if (cornername & 0x8)
 8005116:	787b      	ldrb	r3, [r7, #1]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d017      	beq.n	8005150 <lcdDrawCircleHelper+0x136>
		{
			lcdDrawPixel(x0 - y, y0 + x, color);
 8005120:	88fa      	ldrh	r2, [r7, #6]
 8005122:	89fb      	ldrh	r3, [r7, #14]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	b298      	uxth	r0, r3
 8005128:	88ba      	ldrh	r2, [r7, #4]
 800512a:	8a3b      	ldrh	r3, [r7, #16]
 800512c:	4413      	add	r3, r2
 800512e:	b29b      	uxth	r3, r3
 8005130:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005132:	4619      	mov	r1, r3
 8005134:	f7ff fd68 	bl	8004c08 <lcdDrawPixel>
			lcdDrawPixel(x0 - x, y0 + y, color);
 8005138:	88fa      	ldrh	r2, [r7, #6]
 800513a:	8a3b      	ldrh	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	b298      	uxth	r0, r3
 8005140:	88ba      	ldrh	r2, [r7, #4]
 8005142:	89fb      	ldrh	r3, [r7, #14]
 8005144:	4413      	add	r3, r2
 8005146:	b29b      	uxth	r3, r3
 8005148:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800514a:	4619      	mov	r1, r3
 800514c:	f7ff fd5c 	bl	8004c08 <lcdDrawPixel>
		}
		if (cornername & 0x1)
 8005150:	787b      	ldrb	r3, [r7, #1]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d017      	beq.n	800518a <lcdDrawCircleHelper+0x170>
		{
			lcdDrawPixel(x0 - y, y0 - x, color);
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	89fb      	ldrh	r3, [r7, #14]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	b298      	uxth	r0, r3
 8005162:	88ba      	ldrh	r2, [r7, #4]
 8005164:	8a3b      	ldrh	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	b29b      	uxth	r3, r3
 800516a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800516c:	4619      	mov	r1, r3
 800516e:	f7ff fd4b 	bl	8004c08 <lcdDrawPixel>
			lcdDrawPixel(x0 - x, y0 - y, color);
 8005172:	88fa      	ldrh	r2, [r7, #6]
 8005174:	8a3b      	ldrh	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	b298      	uxth	r0, r3
 800517a:	88ba      	ldrh	r2, [r7, #4]
 800517c:	89fb      	ldrh	r3, [r7, #14]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	b29b      	uxth	r3, r3
 8005182:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005184:	4619      	mov	r1, r3
 8005186:	f7ff fd3f 	bl	8004c08 <lcdDrawPixel>
	while (x < y)
 800518a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800518e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005192:	429a      	cmp	r2, r3
 8005194:	f6ff af63 	blt.w	800505e <lcdDrawCircleHelper+0x44>
		}
	}
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd90      	pop	{r4, r7, pc}

080051a2 <lcdDrawCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80051a2:	b590      	push	{r4, r7, lr}
 80051a4:	b087      	sub	sp, #28
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	4604      	mov	r4, r0
 80051aa:	4608      	mov	r0, r1
 80051ac:	4611      	mov	r1, r2
 80051ae:	461a      	mov	r2, r3
 80051b0:	4623      	mov	r3, r4
 80051b2:	80fb      	strh	r3, [r7, #6]
 80051b4:	4603      	mov	r3, r0
 80051b6:	80bb      	strh	r3, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	807b      	strh	r3, [r7, #2]
 80051bc:	4613      	mov	r3, r2
 80051be:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 80051c0:	887b      	ldrh	r3, [r7, #2]
 80051c2:	f1c3 0301 	rsb	r3, r3, #1
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80051ca:	2301      	movs	r3, #1
 80051cc:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80051ce:	887b      	ldrh	r3, [r7, #2]
 80051d0:	461a      	mov	r2, r3
 80051d2:	03d2      	lsls	r2, r2, #15
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	b29b      	uxth	r3, r3
 80051da:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80051e0:	887b      	ldrh	r3, [r7, #2]
 80051e2:	81fb      	strh	r3, [r7, #14]

	lcdDrawPixel(x0, y0 + r, color);
 80051e4:	88f8      	ldrh	r0, [r7, #6]
 80051e6:	88ba      	ldrh	r2, [r7, #4]
 80051e8:	887b      	ldrh	r3, [r7, #2]
 80051ea:	4413      	add	r3, r2
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	883a      	ldrh	r2, [r7, #0]
 80051f0:	4619      	mov	r1, r3
 80051f2:	f7ff fd09 	bl	8004c08 <lcdDrawPixel>
	lcdDrawPixel(x0, y0 - r, color);
 80051f6:	88f8      	ldrh	r0, [r7, #6]
 80051f8:	88ba      	ldrh	r2, [r7, #4]
 80051fa:	887b      	ldrh	r3, [r7, #2]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	b29b      	uxth	r3, r3
 8005200:	883a      	ldrh	r2, [r7, #0]
 8005202:	4619      	mov	r1, r3
 8005204:	f7ff fd00 	bl	8004c08 <lcdDrawPixel>
	lcdDrawPixel(x0 + r, y0, color);
 8005208:	88fa      	ldrh	r2, [r7, #6]
 800520a:	887b      	ldrh	r3, [r7, #2]
 800520c:	4413      	add	r3, r2
 800520e:	b29b      	uxth	r3, r3
 8005210:	88b9      	ldrh	r1, [r7, #4]
 8005212:	883a      	ldrh	r2, [r7, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fcf7 	bl	8004c08 <lcdDrawPixel>
	lcdDrawPixel(x0 - r, y0, color);
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	887b      	ldrh	r3, [r7, #2]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	b29b      	uxth	r3, r3
 8005222:	88b9      	ldrh	r1, [r7, #4]
 8005224:	883a      	ldrh	r2, [r7, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff fcee 	bl	8004c08 <lcdDrawPixel>

	while (x < y)
 800522c:	e081      	b.n	8005332 <lcdDrawCircle+0x190>
	{
		if (f >= 0)
 800522e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005232:	2b00      	cmp	r3, #0
 8005234:	db0e      	blt.n	8005254 <lcdDrawCircle+0xb2>
		{
			y--;
 8005236:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29b      	uxth	r3, r3
 8005240:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8005242:	8a7b      	ldrh	r3, [r7, #18]
 8005244:	3302      	adds	r3, #2
 8005246:	b29b      	uxth	r3, r3
 8005248:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800524a:	8afa      	ldrh	r2, [r7, #22]
 800524c:	8a7b      	ldrh	r3, [r7, #18]
 800524e:	4413      	add	r3, r2
 8005250:	b29b      	uxth	r3, r3
 8005252:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8005254:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005258:	b29b      	uxth	r3, r3
 800525a:	3301      	adds	r3, #1
 800525c:	b29b      	uxth	r3, r3
 800525e:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8005260:	8abb      	ldrh	r3, [r7, #20]
 8005262:	3302      	adds	r3, #2
 8005264:	b29b      	uxth	r3, r3
 8005266:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8005268:	8afa      	ldrh	r2, [r7, #22]
 800526a:	8abb      	ldrh	r3, [r7, #20]
 800526c:	4413      	add	r3, r2
 800526e:	b29b      	uxth	r3, r3
 8005270:	82fb      	strh	r3, [r7, #22]

		lcdDrawPixel(x0 + x, y0 + y, color);
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	8a3b      	ldrh	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	b298      	uxth	r0, r3
 800527a:	88ba      	ldrh	r2, [r7, #4]
 800527c:	89fb      	ldrh	r3, [r7, #14]
 800527e:	4413      	add	r3, r2
 8005280:	b29b      	uxth	r3, r3
 8005282:	883a      	ldrh	r2, [r7, #0]
 8005284:	4619      	mov	r1, r3
 8005286:	f7ff fcbf 	bl	8004c08 <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 + y, color);
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	8a3b      	ldrh	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	b298      	uxth	r0, r3
 8005292:	88ba      	ldrh	r2, [r7, #4]
 8005294:	89fb      	ldrh	r3, [r7, #14]
 8005296:	4413      	add	r3, r2
 8005298:	b29b      	uxth	r3, r3
 800529a:	883a      	ldrh	r2, [r7, #0]
 800529c:	4619      	mov	r1, r3
 800529e:	f7ff fcb3 	bl	8004c08 <lcdDrawPixel>
		lcdDrawPixel(x0 + x, y0 - y, color);
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	8a3b      	ldrh	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	b298      	uxth	r0, r3
 80052aa:	88ba      	ldrh	r2, [r7, #4]
 80052ac:	89fb      	ldrh	r3, [r7, #14]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	883a      	ldrh	r2, [r7, #0]
 80052b4:	4619      	mov	r1, r3
 80052b6:	f7ff fca7 	bl	8004c08 <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 - y, color);
 80052ba:	88fa      	ldrh	r2, [r7, #6]
 80052bc:	8a3b      	ldrh	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	b298      	uxth	r0, r3
 80052c2:	88ba      	ldrh	r2, [r7, #4]
 80052c4:	89fb      	ldrh	r3, [r7, #14]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	883a      	ldrh	r2, [r7, #0]
 80052cc:	4619      	mov	r1, r3
 80052ce:	f7ff fc9b 	bl	8004c08 <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 + x, color);
 80052d2:	88fa      	ldrh	r2, [r7, #6]
 80052d4:	89fb      	ldrh	r3, [r7, #14]
 80052d6:	4413      	add	r3, r2
 80052d8:	b298      	uxth	r0, r3
 80052da:	88ba      	ldrh	r2, [r7, #4]
 80052dc:	8a3b      	ldrh	r3, [r7, #16]
 80052de:	4413      	add	r3, r2
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	883a      	ldrh	r2, [r7, #0]
 80052e4:	4619      	mov	r1, r3
 80052e6:	f7ff fc8f 	bl	8004c08 <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 + x, color);
 80052ea:	88fa      	ldrh	r2, [r7, #6]
 80052ec:	89fb      	ldrh	r3, [r7, #14]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	b298      	uxth	r0, r3
 80052f2:	88ba      	ldrh	r2, [r7, #4]
 80052f4:	8a3b      	ldrh	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	883a      	ldrh	r2, [r7, #0]
 80052fc:	4619      	mov	r1, r3
 80052fe:	f7ff fc83 	bl	8004c08 <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 - x, color);
 8005302:	88fa      	ldrh	r2, [r7, #6]
 8005304:	89fb      	ldrh	r3, [r7, #14]
 8005306:	4413      	add	r3, r2
 8005308:	b298      	uxth	r0, r3
 800530a:	88ba      	ldrh	r2, [r7, #4]
 800530c:	8a3b      	ldrh	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	b29b      	uxth	r3, r3
 8005312:	883a      	ldrh	r2, [r7, #0]
 8005314:	4619      	mov	r1, r3
 8005316:	f7ff fc77 	bl	8004c08 <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 - x, color);
 800531a:	88fa      	ldrh	r2, [r7, #6]
 800531c:	89fb      	ldrh	r3, [r7, #14]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	b298      	uxth	r0, r3
 8005322:	88ba      	ldrh	r2, [r7, #4]
 8005324:	8a3b      	ldrh	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	b29b      	uxth	r3, r3
 800532a:	883a      	ldrh	r2, [r7, #0]
 800532c:	4619      	mov	r1, r3
 800532e:	f7ff fc6b 	bl	8004c08 <lcdDrawPixel>
	while (x < y)
 8005332:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800533a:	429a      	cmp	r2, r3
 800533c:	f6ff af77 	blt.w	800522e <lcdDrawCircle+0x8c>
	}
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	bd90      	pop	{r4, r7, pc}

0800534a <lcdFillCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdFillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800534a:	b590      	push	{r4, r7, lr}
 800534c:	b085      	sub	sp, #20
 800534e:	af02      	add	r7, sp, #8
 8005350:	4604      	mov	r4, r0
 8005352:	4608      	mov	r0, r1
 8005354:	4611      	mov	r1, r2
 8005356:	461a      	mov	r2, r3
 8005358:	4623      	mov	r3, r4
 800535a:	80fb      	strh	r3, [r7, #6]
 800535c:	4603      	mov	r3, r0
 800535e:	80bb      	strh	r3, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	807b      	strh	r3, [r7, #2]
 8005364:	4613      	mov	r3, r2
 8005366:	803b      	strh	r3, [r7, #0]
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 8005368:	88f8      	ldrh	r0, [r7, #6]
 800536a:	88ba      	ldrh	r2, [r7, #4]
 800536c:	887b      	ldrh	r3, [r7, #2]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	b299      	uxth	r1, r3
 8005372:	88ba      	ldrh	r2, [r7, #4]
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	4413      	add	r3, r2
 8005378:	b29b      	uxth	r3, r3
 800537a:	3301      	adds	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	883b      	ldrh	r3, [r7, #0]
 8005380:	f7ff fcac 	bl	8004cdc <lcdDrawVLine>
	lcdFillCircleHelper(x0, y0, r, 3, 0, color);
 8005384:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005388:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800538c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005390:	883b      	ldrh	r3, [r7, #0]
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	2300      	movs	r3, #0
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	2303      	movs	r3, #3
 800539a:	f000 f804 	bl	80053a6 <lcdFillCircleHelper>
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd90      	pop	{r4, r7, pc}

080053a6 <lcdFillCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 80053a6:	b590      	push	{r4, r7, lr}
 80053a8:	b087      	sub	sp, #28
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	4604      	mov	r4, r0
 80053ae:	4608      	mov	r0, r1
 80053b0:	4611      	mov	r1, r2
 80053b2:	461a      	mov	r2, r3
 80053b4:	4623      	mov	r3, r4
 80053b6:	80fb      	strh	r3, [r7, #6]
 80053b8:	4603      	mov	r3, r0
 80053ba:	80bb      	strh	r3, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	807b      	strh	r3, [r7, #2]
 80053c0:	4613      	mov	r3, r2
 80053c2:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80053c4:	887b      	ldrh	r3, [r7, #2]
 80053c6:	f1c3 0301 	rsb	r3, r3, #1
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80053ce:	2301      	movs	r3, #1
 80053d0:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80053d2:	887b      	ldrh	r3, [r7, #2]
 80053d4:	461a      	mov	r2, r3
 80053d6:	03d2      	lsls	r2, r2, #15
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	b29b      	uxth	r3, r3
 80053de:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80053e4:	887b      	ldrh	r3, [r7, #2]
 80053e6:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 80053e8:	e07b      	b.n	80054e2 <lcdFillCircleHelper+0x13c>
	{
		if (f >= 0)
 80053ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	db0e      	blt.n	8005410 <lcdFillCircleHelper+0x6a>
		{
			y--;
 80053f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80053fe:	8a7b      	ldrh	r3, [r7, #18]
 8005400:	3302      	adds	r3, #2
 8005402:	b29b      	uxth	r3, r3
 8005404:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8005406:	8afa      	ldrh	r2, [r7, #22]
 8005408:	8a7b      	ldrh	r3, [r7, #18]
 800540a:	4413      	add	r3, r2
 800540c:	b29b      	uxth	r3, r3
 800540e:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8005410:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005414:	b29b      	uxth	r3, r3
 8005416:	3301      	adds	r3, #1
 8005418:	b29b      	uxth	r3, r3
 800541a:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800541c:	8abb      	ldrh	r3, [r7, #20]
 800541e:	3302      	adds	r3, #2
 8005420:	b29b      	uxth	r3, r3
 8005422:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8005424:	8afa      	ldrh	r2, [r7, #22]
 8005426:	8abb      	ldrh	r3, [r7, #20]
 8005428:	4413      	add	r3, r2
 800542a:	b29b      	uxth	r3, r3
 800542c:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1)
 800542e:	787b      	ldrb	r3, [r7, #1]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d027      	beq.n	8005488 <lcdFillCircleHelper+0xe2>
		{
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 8005438:	88fa      	ldrh	r2, [r7, #6]
 800543a:	8a3b      	ldrh	r3, [r7, #16]
 800543c:	4413      	add	r3, r2
 800543e:	b298      	uxth	r0, r3
 8005440:	88ba      	ldrh	r2, [r7, #4]
 8005442:	89fb      	ldrh	r3, [r7, #14]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	b299      	uxth	r1, r3
 8005448:	88ba      	ldrh	r2, [r7, #4]
 800544a:	89fb      	ldrh	r3, [r7, #14]
 800544c:	4413      	add	r3, r2
 800544e:	b29a      	uxth	r2, r3
 8005450:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005452:	4413      	add	r3, r2
 8005454:	b29b      	uxth	r3, r3
 8005456:	3301      	adds	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800545c:	f7ff fc3e 	bl	8004cdc <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 8005460:	88fa      	ldrh	r2, [r7, #6]
 8005462:	89fb      	ldrh	r3, [r7, #14]
 8005464:	4413      	add	r3, r2
 8005466:	b298      	uxth	r0, r3
 8005468:	88ba      	ldrh	r2, [r7, #4]
 800546a:	8a3b      	ldrh	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	b299      	uxth	r1, r3
 8005470:	88ba      	ldrh	r2, [r7, #4]
 8005472:	8a3b      	ldrh	r3, [r7, #16]
 8005474:	4413      	add	r3, r2
 8005476:	b29a      	uxth	r2, r3
 8005478:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800547a:	4413      	add	r3, r2
 800547c:	b29b      	uxth	r3, r3
 800547e:	3301      	adds	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005484:	f7ff fc2a 	bl	8004cdc <lcdDrawVLine>
		}
		if (cornername & 0x2)
 8005488:	787b      	ldrb	r3, [r7, #1]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d027      	beq.n	80054e2 <lcdFillCircleHelper+0x13c>
		{
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 8005492:	88fa      	ldrh	r2, [r7, #6]
 8005494:	8a3b      	ldrh	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	b298      	uxth	r0, r3
 800549a:	88ba      	ldrh	r2, [r7, #4]
 800549c:	89fb      	ldrh	r3, [r7, #14]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	b299      	uxth	r1, r3
 80054a2:	88ba      	ldrh	r2, [r7, #4]
 80054a4:	89fb      	ldrh	r3, [r7, #14]
 80054a6:	4413      	add	r3, r2
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80054ac:	4413      	add	r3, r2
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3301      	adds	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80054b6:	f7ff fc11 	bl	8004cdc <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	89fb      	ldrh	r3, [r7, #14]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	b298      	uxth	r0, r3
 80054c2:	88ba      	ldrh	r2, [r7, #4]
 80054c4:	8a3b      	ldrh	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	b299      	uxth	r1, r3
 80054ca:	88ba      	ldrh	r2, [r7, #4]
 80054cc:	8a3b      	ldrh	r3, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80054d4:	4413      	add	r3, r2
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3301      	adds	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80054de:	f7ff fbfd 	bl	8004cdc <lcdDrawVLine>
	while (x < y)
 80054e2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80054e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	f6ff af7d 	blt.w	80053ea <lcdFillCircleHelper+0x44>
		}
	}
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd90      	pop	{r4, r7, pc}
	...

080054fc <lcdFillRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	461a      	mov	r2, r3
 800550a:	4623      	mov	r3, r4
 800550c:	80fb      	strh	r3, [r7, #6]
 800550e:	4603      	mov	r3, r0
 8005510:	80bb      	strh	r3, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	807b      	strh	r3, [r7, #2]
 8005516:	4613      	mov	r3, r2
 8005518:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 800551a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800551e:	4a24      	ldr	r2, [pc, #144]	@ (80055b0 <lcdFillRect+0xb4>)
 8005520:	8812      	ldrh	r2, [r2, #0]
 8005522:	4293      	cmp	r3, r2
 8005524:	da3f      	bge.n	80055a6 <lcdFillRect+0xaa>
 8005526:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800552a:	4a21      	ldr	r2, [pc, #132]	@ (80055b0 <lcdFillRect+0xb4>)
 800552c:	8852      	ldrh	r2, [r2, #2]
 800552e:	4293      	cmp	r3, r2
 8005530:	da39      	bge.n	80055a6 <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 8005532:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005536:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800553a:	4413      	add	r3, r2
 800553c:	4a1c      	ldr	r2, [pc, #112]	@ (80055b0 <lcdFillRect+0xb4>)
 800553e:	8812      	ldrh	r2, [r2, #0]
 8005540:	4293      	cmp	r3, r2
 8005542:	dd05      	ble.n	8005550 <lcdFillRect+0x54>
 8005544:	4b1a      	ldr	r3, [pc, #104]	@ (80055b0 <lcdFillRect+0xb4>)
 8005546:	881a      	ldrh	r2, [r3, #0]
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	b29b      	uxth	r3, r3
 800554e:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8005550:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005554:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005558:	4413      	add	r3, r2
 800555a:	4a15      	ldr	r2, [pc, #84]	@ (80055b0 <lcdFillRect+0xb4>)
 800555c:	8852      	ldrh	r2, [r2, #2]
 800555e:	4293      	cmp	r3, r2
 8005560:	dd05      	ble.n	800556e <lcdFillRect+0x72>
 8005562:	4b13      	ldr	r3, [pc, #76]	@ (80055b0 <lcdFillRect+0xb4>)
 8005564:	885a      	ldrh	r2, [r3, #2]
 8005566:	88bb      	ldrh	r3, [r7, #4]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	b29b      	uxth	r3, r3
 800556c:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 800556e:	88bb      	ldrh	r3, [r7, #4]
 8005570:	81fb      	strh	r3, [r7, #14]
 8005572:	e00e      	b.n	8005592 <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8005574:	88f8      	ldrh	r0, [r7, #6]
 8005576:	88fa      	ldrh	r2, [r7, #6]
 8005578:	887b      	ldrh	r3, [r7, #2]
 800557a:	4413      	add	r3, r2
 800557c:	b299      	uxth	r1, r3
 800557e:	89fa      	ldrh	r2, [r7, #14]
 8005580:	8c3b      	ldrh	r3, [r7, #32]
 8005582:	f7ff fb65 	bl	8004c50 <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 8005586:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800558a:	b29b      	uxth	r3, r3
 800558c:	3301      	adds	r3, #1
 800558e:	b29b      	uxth	r3, r3
 8005590:	81fb      	strh	r3, [r7, #14]
 8005592:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005596:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800559a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800559e:	440b      	add	r3, r1
 80055a0:	429a      	cmp	r2, r3
 80055a2:	dde7      	ble.n	8005574 <lcdFillRect+0x78>
 80055a4:	e000      	b.n	80055a8 <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80055a6:	bf00      	nop
	}
}
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd90      	pop	{r4, r7, pc}
 80055ae:	bf00      	nop
 80055b0:	2000002c 	.word	0x2000002c

080055b4 <lcdFillRoundRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80055b4:	b590      	push	{r4, r7, lr}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	4604      	mov	r4, r0
 80055bc:	4608      	mov	r0, r1
 80055be:	4611      	mov	r1, r2
 80055c0:	461a      	mov	r2, r3
 80055c2:	4623      	mov	r3, r4
 80055c4:	80fb      	strh	r3, [r7, #6]
 80055c6:	4603      	mov	r3, r0
 80055c8:	80bb      	strh	r3, [r7, #4]
 80055ca:	460b      	mov	r3, r1
 80055cc:	807b      	strh	r3, [r7, #2]
 80055ce:	4613      	mov	r3, r2
 80055d0:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdFillRect(x + r, y, w - 2 * r, h, color);
 80055d2:	88fa      	ldrh	r2, [r7, #6]
 80055d4:	8b3b      	ldrh	r3, [r7, #24]
 80055d6:	4413      	add	r3, r2
 80055d8:	b29b      	uxth	r3, r3
 80055da:	b218      	sxth	r0, r3
 80055dc:	887a      	ldrh	r2, [r7, #2]
 80055de:	8b3b      	ldrh	r3, [r7, #24]
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	b21a      	sxth	r2, r3
 80055ea:	f9b7 4000 	ldrsh.w	r4, [r7]
 80055ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80055f2:	8bbb      	ldrh	r3, [r7, #28]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	4623      	mov	r3, r4
 80055f8:	f7ff ff80 	bl	80054fc <lcdFillRect>

	// draw four corners
	lcdFillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 80055fc:	88fa      	ldrh	r2, [r7, #6]
 80055fe:	887b      	ldrh	r3, [r7, #2]
 8005600:	4413      	add	r3, r2
 8005602:	b29a      	uxth	r2, r3
 8005604:	8b3b      	ldrh	r3, [r7, #24]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29b      	uxth	r3, r3
 800560e:	b218      	sxth	r0, r3
 8005610:	88ba      	ldrh	r2, [r7, #4]
 8005612:	8b3b      	ldrh	r3, [r7, #24]
 8005614:	4413      	add	r3, r2
 8005616:	b29b      	uxth	r3, r3
 8005618:	b219      	sxth	r1, r3
 800561a:	883a      	ldrh	r2, [r7, #0]
 800561c:	8b3b      	ldrh	r3, [r7, #24]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	b29b      	uxth	r3, r3
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29b      	uxth	r3, r3
 800562a:	b21b      	sxth	r3, r3
 800562c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8005630:	8bba      	ldrh	r2, [r7, #28]
 8005632:	9201      	str	r2, [sp, #4]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	2301      	movs	r3, #1
 8005638:	4622      	mov	r2, r4
 800563a:	f7ff feb4 	bl	80053a6 <lcdFillCircleHelper>
	lcdFillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	8b3b      	ldrh	r3, [r7, #24]
 8005642:	4413      	add	r3, r2
 8005644:	b29b      	uxth	r3, r3
 8005646:	b218      	sxth	r0, r3
 8005648:	88ba      	ldrh	r2, [r7, #4]
 800564a:	8b3b      	ldrh	r3, [r7, #24]
 800564c:	4413      	add	r3, r2
 800564e:	b29b      	uxth	r3, r3
 8005650:	b219      	sxth	r1, r3
 8005652:	883a      	ldrh	r2, [r7, #0]
 8005654:	8b3b      	ldrh	r3, [r7, #24]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	b29b      	uxth	r3, r3
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29b      	uxth	r3, r3
 8005662:	b21b      	sxth	r3, r3
 8005664:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8005668:	8bba      	ldrh	r2, [r7, #28]
 800566a:	9201      	str	r2, [sp, #4]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	2302      	movs	r3, #2
 8005670:	4622      	mov	r2, r4
 8005672:	f7ff fe98 	bl	80053a6 <lcdFillCircleHelper>
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	bd90      	pop	{r4, r7, pc}
	...

08005680 <lcdDrawImage>:
        lcdDrawHLine(a, b + 1, y, color);
    }
}

void lcdDrawImage(uint16_t x, uint16_t y, GUI_CONST_STORAGE GUI_BITMAP* pBitmap)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	603a      	str	r2, [r7, #0]
 800568a:	80fb      	strh	r3, [r7, #6]
 800568c:	460b      	mov	r3, r1
 800568e:	80bb      	strh	r3, [r7, #4]
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8005690:	4b24      	ldr	r3, [pc, #144]	@ (8005724 <lcdDrawImage+0xa4>)
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	429a      	cmp	r2, r3
 8005698:	d23b      	bcs.n	8005712 <lcdDrawImage+0x92>
 800569a:	4b22      	ldr	r3, [pc, #136]	@ (8005724 <lcdDrawImage+0xa4>)
 800569c:	885b      	ldrh	r3, [r3, #2]
 800569e:	88ba      	ldrh	r2, [r7, #4]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d236      	bcs.n	8005712 <lcdDrawImage+0x92>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	8812      	ldrh	r2, [r2, #0]
 80056aa:	4413      	add	r3, r2
 80056ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005724 <lcdDrawImage+0xa4>)
 80056ae:	8812      	ldrh	r2, [r2, #0]
 80056b0:	4293      	cmp	r3, r2
 80056b2:	dc30      	bgt.n	8005716 <lcdDrawImage+0x96>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 80056b4:	88bb      	ldrh	r3, [r7, #4]
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	8852      	ldrh	r2, [r2, #2]
 80056ba:	4413      	add	r3, r2
 80056bc:	4a19      	ldr	r2, [pc, #100]	@ (8005724 <lcdDrawImage+0xa4>)
 80056be:	8852      	ldrh	r2, [r2, #2]
 80056c0:	4293      	cmp	r3, r2
 80056c2:	dc2a      	bgt.n	800571a <lcdDrawImage+0x9a>

	for (int i = 0; i < pBitmap->ySize; ++i)
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	e01c      	b.n	8005704 <lcdDrawImage+0x84>
	{
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	88bb      	ldrh	r3, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	b299      	uxth	r1, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	8892      	ldrh	r2, [r2, #4]
 80056dc:	4610      	mov	r0, r2
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	fb00 f202 	mul.w	r2, r0, r2
 80056e4:	441a      	add	r2, r3
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	889b      	ldrh	r3, [r3, #4]
 80056ea:	4618      	mov	r0, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	799b      	ldrb	r3, [r3, #6]
 80056f0:	08db      	lsrs	r3, r3, #3
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	fb90 f3f3 	sdiv	r3, r0, r3
 80056f8:	88f8      	ldrh	r0, [r7, #6]
 80056fa:	f000 fa41 	bl	8005b80 <lcdDrawPixels>
	for (int i = 0; i < pBitmap->ySize; ++i)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	885b      	ldrh	r3, [r3, #2]
 8005708:	461a      	mov	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4293      	cmp	r3, r2
 800570e:	dbdc      	blt.n	80056ca <lcdDrawImage+0x4a>
 8005710:	e004      	b.n	800571c <lcdDrawImage+0x9c>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8005712:	bf00      	nop
 8005714:	e002      	b.n	800571c <lcdDrawImage+0x9c>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8005716:	bf00      	nop
 8005718:	e000      	b.n	800571c <lcdDrawImage+0x9c>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 800571a:	bf00      	nop
	}
}
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	2000002c 	.word	0x2000002c

08005728 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8005728:	b590      	push	{r4, r7, lr}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	4604      	mov	r4, r0
 8005730:	4608      	mov	r0, r1
 8005732:	4611      	mov	r1, r2
 8005734:	461a      	mov	r2, r3
 8005736:	4623      	mov	r3, r4
 8005738:	80fb      	strh	r3, [r7, #6]
 800573a:	4603      	mov	r3, r0
 800573c:	80bb      	strh	r3, [r7, #4]
 800573e:	460b      	mov	r3, r1
 8005740:	70fb      	strb	r3, [r7, #3]
 8005742:	4613      	mov	r3, r2
 8005744:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8005746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800574a:	4a4a      	ldr	r2, [pc, #296]	@ (8005874 <lcdDrawChar+0x14c>)
 800574c:	8812      	ldrh	r2, [r2, #0]
 800574e:	4293      	cmp	r3, r2
 8005750:	f280 808c 	bge.w	800586c <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8005754:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005758:	4a46      	ldr	r2, [pc, #280]	@ (8005874 <lcdDrawChar+0x14c>)
 800575a:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 800575c:	4293      	cmp	r3, r2
 800575e:	f280 8085 	bge.w	800586c <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8005762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005766:	4a44      	ldr	r2, [pc, #272]	@ (8005878 <lcdDrawChar+0x150>)
 8005768:	6892      	ldr	r2, [r2, #8]
 800576a:	8892      	ldrh	r2, [r2, #4]
 800576c:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 800576e:	2b00      	cmp	r3, #0
 8005770:	db7c      	blt.n	800586c <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8005772:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005776:	4a40      	ldr	r2, [pc, #256]	@ (8005878 <lcdDrawChar+0x150>)
 8005778:	6892      	ldr	r2, [r2, #8]
 800577a:	88d2      	ldrh	r2, [r2, #6]
 800577c:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 800577e:	2b00      	cmp	r3, #0
 8005780:	db74      	blt.n	800586c <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8005782:	4b3d      	ldr	r3, [pc, #244]	@ (8005878 <lcdDrawChar+0x150>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	88db      	ldrh	r3, [r3, #6]
 8005788:	08db      	lsrs	r3, r3, #3
 800578a:	b29b      	uxth	r3, r3
 800578c:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8005792:	2300      	movs	r3, #0
 8005794:	73bb      	strb	r3, [r7, #14]
 8005796:	e061      	b.n	800585c <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8005798:	2300      	movs	r3, #0
 800579a:	733b      	strb	r3, [r7, #12]
 800579c:	e055      	b.n	800584a <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 800579e:	4b36      	ldr	r3, [pc, #216]	@ (8005878 <lcdDrawChar+0x150>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	78fa      	ldrb	r2, [r7, #3]
 80057a6:	3a20      	subs	r2, #32
 80057a8:	4933      	ldr	r1, [pc, #204]	@ (8005878 <lcdDrawChar+0x150>)
 80057aa:	6889      	ldr	r1, [r1, #8]
 80057ac:	88c9      	ldrh	r1, [r1, #6]
 80057ae:	fb01 f202 	mul.w	r2, r1, r2
 80057b2:	7ab9      	ldrb	r1, [r7, #10]
 80057b4:	fb02 f101 	mul.w	r1, r2, r1
 80057b8:	7bba      	ldrb	r2, [r7, #14]
 80057ba:	7ab8      	ldrb	r0, [r7, #10]
 80057bc:	fb00 f202 	mul.w	r2, r0, r2
 80057c0:	4411      	add	r1, r2
 80057c2:	7b3a      	ldrb	r2, [r7, #12]
 80057c4:	440a      	add	r2, r1
 80057c6:	4413      	add	r3, r2
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 80057cc:	2300      	movs	r3, #0
 80057ce:	72fb      	strb	r3, [r7, #11]
 80057d0:	e032      	b.n	8005838 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 80057d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	da12      	bge.n	8005800 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 80057da:	7afb      	ldrb	r3, [r7, #11]
 80057dc:	b29a      	uxth	r2, r3
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	4413      	add	r3, r2
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	4413      	add	r3, r2
 80057ea:	b298      	uxth	r0, r3
 80057ec:	7bbb      	ldrb	r3, [r7, #14]
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	88bb      	ldrh	r3, [r7, #4]
 80057f2:	4413      	add	r3, r2
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	883a      	ldrh	r2, [r7, #0]
 80057f8:	4619      	mov	r1, r3
 80057fa:	f7ff fa05 	bl	8004c08 <lcdDrawPixel>
 80057fe:	e015      	b.n	800582c <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8005800:	8c3a      	ldrh	r2, [r7, #32]
 8005802:	883b      	ldrh	r3, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d011      	beq.n	800582c <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8005808:	7afb      	ldrb	r3, [r7, #11]
 800580a:	b29a      	uxth	r2, r3
 800580c:	88fb      	ldrh	r3, [r7, #6]
 800580e:	4413      	add	r3, r2
 8005810:	b29a      	uxth	r2, r3
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	b29b      	uxth	r3, r3
 8005816:	4413      	add	r3, r2
 8005818:	b298      	uxth	r0, r3
 800581a:	7bbb      	ldrb	r3, [r7, #14]
 800581c:	b29a      	uxth	r2, r3
 800581e:	88bb      	ldrh	r3, [r7, #4]
 8005820:	4413      	add	r3, r2
 8005822:	b29b      	uxth	r3, r3
 8005824:	8c3a      	ldrh	r2, [r7, #32]
 8005826:	4619      	mov	r1, r3
 8005828:	f7ff f9ee 	bl	8004c08 <lcdDrawPixel>
				}
				line <<= 1;
 800582c:	7b7b      	ldrb	r3, [r7, #13]
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8005832:	7afb      	ldrb	r3, [r7, #11]
 8005834:	3301      	adds	r3, #1
 8005836:	72fb      	strb	r3, [r7, #11]
 8005838:	7afb      	ldrb	r3, [r7, #11]
 800583a:	2b07      	cmp	r3, #7
 800583c:	d9c9      	bls.n	80057d2 <lcdDrawChar+0xaa>
			}

			xP += 8;
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	3308      	adds	r3, #8
 8005842:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8005844:	7b3b      	ldrb	r3, [r7, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	733b      	strb	r3, [r7, #12]
 800584a:	7b3a      	ldrb	r2, [r7, #12]
 800584c:	7abb      	ldrb	r3, [r7, #10]
 800584e:	429a      	cmp	r2, r3
 8005850:	d3a5      	bcc.n	800579e <lcdDrawChar+0x76>
		}

		xP = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8005856:	7bbb      	ldrb	r3, [r7, #14]
 8005858:	3301      	adds	r3, #1
 800585a:	73bb      	strb	r3, [r7, #14]
 800585c:	7bbb      	ldrb	r3, [r7, #14]
 800585e:	b29a      	uxth	r2, r3
 8005860:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <lcdDrawChar+0x150>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	88db      	ldrh	r3, [r3, #6]
 8005866:	429a      	cmp	r2, r3
 8005868:	d396      	bcc.n	8005798 <lcdDrawChar+0x70>
 800586a:	e000      	b.n	800586e <lcdDrawChar+0x146>
		return;
 800586c:	bf00      	nop
	}
}
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	bd90      	pop	{r4, r7, pc}
 8005874:	2000002c 	.word	0x2000002c
 8005878:	20000034 	.word	0x20000034

0800587c <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 800587c:	b40f      	push	{r0, r1, r2, r3}
 800587e:	b590      	push	{r4, r7, lr}
 8005880:	b085      	sub	sp, #20
 8005882:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8005884:	f107 031c 	add.w	r3, r7, #28
 8005888:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	69b9      	ldr	r1, [r7, #24]
 800588e:	483d      	ldr	r0, [pc, #244]	@ (8005984 <lcdPrintf+0x108>)
 8005890:	f006 fcae 	bl	800c1f0 <vsiprintf>
	va_end(lst);

	p = buf;
 8005894:	4b3b      	ldr	r3, [pc, #236]	@ (8005984 <lcdPrintf+0x108>)
 8005896:	607b      	str	r3, [r7, #4]
	while (*p)
 8005898:	e067      	b.n	800596a <lcdPrintf+0xee>
	{
		if (*p == '\n')
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b0a      	cmp	r3, #10
 80058a0:	d10c      	bne.n	80058bc <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 80058a2:	4b39      	ldr	r3, [pc, #228]	@ (8005988 <lcdPrintf+0x10c>)
 80058a4:	885a      	ldrh	r2, [r3, #2]
 80058a6:	4b39      	ldr	r3, [pc, #228]	@ (800598c <lcdPrintf+0x110>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	88db      	ldrh	r3, [r3, #6]
 80058ac:	4413      	add	r3, r2
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	4b35      	ldr	r3, [pc, #212]	@ (8005988 <lcdPrintf+0x10c>)
 80058b2:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 80058b4:	4b34      	ldr	r3, [pc, #208]	@ (8005988 <lcdPrintf+0x10c>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	e04a      	b.n	8005952 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b0d      	cmp	r3, #13
 80058c2:	d046      	beq.n	8005952 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b09      	cmp	r3, #9
 80058ca:	d10b      	bne.n	80058e4 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 80058cc:	4b2e      	ldr	r3, [pc, #184]	@ (8005988 <lcdPrintf+0x10c>)
 80058ce:	881a      	ldrh	r2, [r3, #0]
 80058d0:	4b2e      	ldr	r3, [pc, #184]	@ (800598c <lcdPrintf+0x110>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	889b      	ldrh	r3, [r3, #4]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	b29b      	uxth	r3, r3
 80058da:	4413      	add	r3, r2
 80058dc:	b29a      	uxth	r2, r3
 80058de:	4b2a      	ldr	r3, [pc, #168]	@ (8005988 <lcdPrintf+0x10c>)
 80058e0:	801a      	strh	r2, [r3, #0]
 80058e2:	e036      	b.n	8005952 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 80058e4:	4b28      	ldr	r3, [pc, #160]	@ (8005988 <lcdPrintf+0x10c>)
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b218      	sxth	r0, r3
 80058ea:	4b27      	ldr	r3, [pc, #156]	@ (8005988 <lcdPrintf+0x10c>)
 80058ec:	885b      	ldrh	r3, [r3, #2]
 80058ee:	b219      	sxth	r1, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	4b25      	ldr	r3, [pc, #148]	@ (800598c <lcdPrintf+0x110>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	b29c      	uxth	r4, r3
 80058fa:	4b24      	ldr	r3, [pc, #144]	@ (800598c <lcdPrintf+0x110>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	4623      	mov	r3, r4
 8005904:	f7ff ff10 	bl	8005728 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8005908:	4b1f      	ldr	r3, [pc, #124]	@ (8005988 <lcdPrintf+0x10c>)
 800590a:	881a      	ldrh	r2, [r3, #0]
 800590c:	4b1f      	ldr	r3, [pc, #124]	@ (800598c <lcdPrintf+0x110>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	889b      	ldrh	r3, [r3, #4]
 8005912:	4413      	add	r3, r2
 8005914:	b29a      	uxth	r2, r3
 8005916:	4b1c      	ldr	r3, [pc, #112]	@ (8005988 <lcdPrintf+0x10c>)
 8005918:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 800591a:	4b1c      	ldr	r3, [pc, #112]	@ (800598c <lcdPrintf+0x110>)
 800591c:	7b1b      	ldrb	r3, [r3, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d017      	beq.n	8005952 <lcdPrintf+0xd6>
 8005922:	4b19      	ldr	r3, [pc, #100]	@ (8005988 <lcdPrintf+0x10c>)
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	4b19      	ldr	r3, [pc, #100]	@ (8005990 <lcdPrintf+0x114>)
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	4619      	mov	r1, r3
 800592e:	4b17      	ldr	r3, [pc, #92]	@ (800598c <lcdPrintf+0x110>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	889b      	ldrh	r3, [r3, #4]
 8005934:	1acb      	subs	r3, r1, r3
 8005936:	429a      	cmp	r2, r3
 8005938:	dd0b      	ble.n	8005952 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 800593a:	4b13      	ldr	r3, [pc, #76]	@ (8005988 <lcdPrintf+0x10c>)
 800593c:	885a      	ldrh	r2, [r3, #2]
 800593e:	4b13      	ldr	r3, [pc, #76]	@ (800598c <lcdPrintf+0x110>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	88db      	ldrh	r3, [r3, #6]
 8005944:	4413      	add	r3, r2
 8005946:	b29a      	uxth	r2, r3
 8005948:	4b0f      	ldr	r3, [pc, #60]	@ (8005988 <lcdPrintf+0x10c>)
 800594a:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 800594c:	4b0e      	ldr	r3, [pc, #56]	@ (8005988 <lcdPrintf+0x10c>)
 800594e:	2200      	movs	r2, #0
 8005950:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3301      	adds	r3, #1
 8005956:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8005958:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <lcdPrintf+0x10c>)
 800595a:	885a      	ldrh	r2, [r3, #2]
 800595c:	4b0c      	ldr	r3, [pc, #48]	@ (8005990 <lcdPrintf+0x114>)
 800595e:	885b      	ldrh	r3, [r3, #2]
 8005960:	429a      	cmp	r2, r3
 8005962:	d302      	bcc.n	800596a <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8005964:	4b08      	ldr	r3, [pc, #32]	@ (8005988 <lcdPrintf+0x10c>)
 8005966:	2200      	movs	r2, #0
 8005968:	805a      	strh	r2, [r3, #2]
	while (*p)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d193      	bne.n	800589a <lcdPrintf+0x1e>
		}
	}
}
 8005972:	bf00      	nop
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800597e:	b004      	add	sp, #16
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20002a54 	.word	0x20002a54
 8005988:	20002a4c 	.word	0x20002a4c
 800598c:	20000034 	.word	0x20000034
 8005990:	2000002c 	.word	0x2000002c

08005994 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 800599c:	4a04      	ldr	r2, [pc, #16]	@ (80059b0 <lcdSetTextFont+0x1c>)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6093      	str	r3, [r2, #8]
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000034 	.word	0x20000034

080059b4 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	460a      	mov	r2, r1
 80059be:	80fb      	strh	r3, [r7, #6]
 80059c0:	4613      	mov	r3, r2
 80059c2:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	4a05      	ldr	r2, [pc, #20]	@ (80059dc <lcdSetTextColor+0x28>)
 80059c8:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 80059ca:	88bb      	ldrh	r3, [r7, #4]
 80059cc:	4a03      	ldr	r2, [pc, #12]	@ (80059dc <lcdSetTextColor+0x28>)
 80059ce:	6053      	str	r3, [r2, #4]
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	20000034 	.word	0x20000034

080059e0 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 80059ea:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa0 <lcdSetOrientation+0xc0>)
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 80059f0:	2036      	movs	r0, #54	@ 0x36
 80059f2:	f000 f8fb 	bl	8005bec <lcdWriteCommand>

	switch (lcdProperties.orientation)
 80059f6:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa0 <lcdSetOrientation+0xc0>)
 80059f8:	791b      	ldrb	r3, [r3, #4]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d83e      	bhi.n	8005a7c <lcdSetOrientation+0x9c>
 80059fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005a04 <lcdSetOrientation+0x24>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a15 	.word	0x08005a15
 8005a08:	08005a49 	.word	0x08005a49
 8005a0c:	08005a2f 	.word	0x08005a2f
 8005a10:	08005a63 	.word	0x08005a63
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8005a14:	4b23      	ldr	r3, [pc, #140]	@ (8005aa4 <lcdSetOrientation+0xc4>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 f8f7 	bl	8005c0c <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8005a1e:	4b20      	ldr	r3, [pc, #128]	@ (8005aa0 <lcdSetOrientation+0xc0>)
 8005a20:	22f0      	movs	r2, #240	@ 0xf0
 8005a22:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8005a24:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa0 <lcdSetOrientation+0xc0>)
 8005a26:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005a2a:	805a      	strh	r2, [r3, #2]
			break;
 8005a2c:	e027      	b.n	8005a7e <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8005a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa8 <lcdSetOrientation+0xc8>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f8ea 	bl	8005c0c <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8005a38:	4b19      	ldr	r3, [pc, #100]	@ (8005aa0 <lcdSetOrientation+0xc0>)
 8005a3a:	22f0      	movs	r2, #240	@ 0xf0
 8005a3c:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8005a3e:	4b18      	ldr	r3, [pc, #96]	@ (8005aa0 <lcdSetOrientation+0xc0>)
 8005a40:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005a44:	805a      	strh	r2, [r3, #2]
			break;
 8005a46:	e01a      	b.n	8005a7e <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8005a48:	4b18      	ldr	r3, [pc, #96]	@ (8005aac <lcdSetOrientation+0xcc>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 f8dd 	bl	8005c0c <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8005a52:	4b13      	ldr	r3, [pc, #76]	@ (8005aa0 <lcdSetOrientation+0xc0>)
 8005a54:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005a58:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8005a5a:	4b11      	ldr	r3, [pc, #68]	@ (8005aa0 <lcdSetOrientation+0xc0>)
 8005a5c:	22f0      	movs	r2, #240	@ 0xf0
 8005a5e:	805a      	strh	r2, [r3, #2]
			break;
 8005a60:	e00d      	b.n	8005a7e <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8005a62:	4b13      	ldr	r3, [pc, #76]	@ (8005ab0 <lcdSetOrientation+0xd0>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f8d0 	bl	8005c0c <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8005a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa0 <lcdSetOrientation+0xc0>)
 8005a6e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005a72:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8005a74:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa0 <lcdSetOrientation+0xc0>)
 8005a76:	22f0      	movs	r2, #240	@ 0xf0
 8005a78:	805a      	strh	r2, [r3, #2]
			break;
 8005a7a:	e000      	b.n	8005a7e <lcdSetOrientation+0x9e>
		default:
			break;
 8005a7c:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8005a7e:	4b08      	ldr	r3, [pc, #32]	@ (8005aa0 <lcdSetOrientation+0xc0>)
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	4b06      	ldr	r3, [pc, #24]	@ (8005aa0 <lcdSetOrientation+0xc0>)
 8005a88:	885b      	ldrh	r3, [r3, #2]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2100      	movs	r1, #0
 8005a90:	2000      	movs	r0, #0
 8005a92:	f000 f829 	bl	8005ae8 <lcdSetWindow>
}
 8005a96:	bf00      	nop
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	2000002c 	.word	0x2000002c
 8005aa4:	20002a50 	.word	0x20002a50
 8005aa8:	20002a52 	.word	0x20002a52
 8005aac:	20002a51 	.word	0x20002a51
 8005ab0:	20002a53 	.word	0x20002a53

08005ab4 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	460a      	mov	r2, r1
 8005abe:	80fb      	strh	r3, [r7, #6]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8005ac4:	4a07      	ldr	r2, [pc, #28]	@ (8005ae4 <lcdSetCursor+0x30>)
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8005aca:	4a06      	ldr	r2, [pc, #24]	@ (8005ae4 <lcdSetCursor+0x30>)
 8005acc:	88bb      	ldrh	r3, [r7, #4]
 8005ace:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8005ad0:	88bb      	ldrh	r3, [r7, #4]
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	88b9      	ldrh	r1, [r7, #4]
 8005ad6:	88f8      	ldrh	r0, [r7, #6]
 8005ad8:	f000 f806 	bl	8005ae8 <lcdSetWindow>
}
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20002a4c 	.word	0x20002a4c

08005ae8 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8005ae8:	b590      	push	{r4, r7, lr}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4604      	mov	r4, r0
 8005af0:	4608      	mov	r0, r1
 8005af2:	4611      	mov	r1, r2
 8005af4:	461a      	mov	r2, r3
 8005af6:	4623      	mov	r3, r4
 8005af8:	80fb      	strh	r3, [r7, #6]
 8005afa:	4603      	mov	r3, r0
 8005afc:	80bb      	strh	r3, [r7, #4]
 8005afe:	460b      	mov	r3, r1
 8005b00:	807b      	strh	r3, [r7, #2]
 8005b02:	4613      	mov	r3, r2
 8005b04:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8005b06:	202a      	movs	r0, #42	@ 0x2a
 8005b08:	f000 f870 	bl	8005bec <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	0a1b      	lsrs	r3, r3, #8
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f87a 	bl	8005c0c <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 f874 	bl	8005c0c <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8005b24:	887b      	ldrh	r3, [r7, #2]
 8005b26:	0a1b      	lsrs	r3, r3, #8
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f86e 	bl	8005c0c <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f868 	bl	8005c0c <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8005b3c:	202b      	movs	r0, #43	@ 0x2b
 8005b3e:	f000 f855 	bl	8005bec <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 8005b42:	88bb      	ldrh	r3, [r7, #4]
 8005b44:	0a1b      	lsrs	r3, r3, #8
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 f85f 	bl	8005c0c <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 8005b4e:	88bb      	ldrh	r3, [r7, #4]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f859 	bl	8005c0c <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8005b5a:	883b      	ldrh	r3, [r7, #0]
 8005b5c:	0a1b      	lsrs	r3, r3, #8
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 f853 	bl	8005c0c <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 8005b66:	883b      	ldrh	r3, [r7, #0]
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 f84d 	bl	8005c0c <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8005b72:	202c      	movs	r0, #44	@ 0x2c
 8005b74:	f000 f83a 	bl	8005bec <lcdWriteCommand>
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd90      	pop	{r4, r7, pc}

08005b80 <lcdDrawPixels>:
}

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60ba      	str	r2, [r7, #8]
 8005b88:	607b      	str	r3, [r7, #4]
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	81fb      	strh	r3, [r7, #14]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	81bb      	strh	r3, [r7, #12]
  uint32_t i = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]

  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8005b96:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd4 <lcdDrawPixels+0x54>)
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <lcdDrawPixels+0x54>)
 8005ba0:	885b      	ldrh	r3, [r3, #2]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	89b9      	ldrh	r1, [r7, #12]
 8005ba8:	89f8      	ldrh	r0, [r7, #14]
 8005baa:	f7ff ff9d 	bl	8005ae8 <lcdSetWindow>

  do
  {
    lcdWriteData(data[i++]);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	617a      	str	r2, [r7, #20]
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4413      	add	r3, r2
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 f825 	bl	8005c0c <lcdWriteData>
  }
  while (i < dataLength);
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d3f1      	bcc.n	8005bae <lcdDrawPixels+0x2e>
}
 8005bca:	bf00      	nop
 8005bcc:	bf00      	nop
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	2000002c 	.word	0x2000002c

08005bd8 <lcdReset>:

static void lcdReset(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8005bdc:	2001      	movs	r0, #1
 8005bde:	f000 f805 	bl	8005bec <lcdWriteCommand>
	HAL_Delay(50);
 8005be2:	2032      	movs	r0, #50	@ 0x32
 8005be4:	f002 f8c6 	bl	8007d74 <HAL_Delay>
}
 8005be8:	bf00      	nop
 8005bea:	bd80      	pop	{r7, pc}

08005bec <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8005bf6:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8005bfa:	79fa      	ldrb	r2, [r7, #7]
 8005bfc:	b292      	uxth	r2, r2
 8005bfe:	801a      	strh	r2, [r3, #0]
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8005c16:	4a04      	ldr	r2, [pc, #16]	@ (8005c28 <lcdWriteData+0x1c>)
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	8013      	strh	r3, [r2, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	60080000 	.word	0x60080000

08005c2c <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8005c2c:	b490      	push	{r4, r7}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4604      	mov	r4, r0
 8005c34:	4608      	mov	r0, r1
 8005c36:	4611      	mov	r1, r2
 8005c38:	461a      	mov	r2, r3
 8005c3a:	4623      	mov	r3, r4
 8005c3c:	71fb      	strb	r3, [r7, #7]
 8005c3e:	4603      	mov	r3, r0
 8005c40:	71bb      	strb	r3, [r7, #6]
 8005c42:	460b      	mov	r3, r1
 8005c44:	717b      	strb	r3, [r7, #5]
 8005c46:	4613      	mov	r3, r2
 8005c48:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8005c4e:	7f3b      	ldrb	r3, [r7, #28]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <lcdBuildMemoryAccessControlConfig+0x30>
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	f043 0304 	orr.w	r3, r3, #4
 8005c5a:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8005c5c:	7e3b      	ldrb	r3, [r7, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <lcdBuildMemoryAccessControlConfig+0x3e>
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	f043 0308 	orr.w	r3, r3, #8
 8005c68:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8005c6a:	793b      	ldrb	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <lcdBuildMemoryAccessControlConfig+0x4c>
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	f043 0310 	orr.w	r3, r3, #16
 8005c76:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8005c78:	797b      	ldrb	r3, [r7, #5]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <lcdBuildMemoryAccessControlConfig+0x5a>
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	f043 0320 	orr.w	r3, r3, #32
 8005c84:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8005c86:	79bb      	ldrb	r3, [r7, #6]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <lcdBuildMemoryAccessControlConfig+0x68>
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c92:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <lcdBuildMemoryAccessControlConfig+0x76>
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ca0:	73fb      	strb	r3, [r7, #15]
  return value;
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc90      	pop	{r4, r7}
 8005cac:	4770      	bx	lr
	...

08005cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cb2:	b08b      	sub	sp, #44	@ 0x2c
 8005cb4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005cb6:	f001 ffeb 	bl	8007c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005cba:	f000 fd41 	bl	8006740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005cbe:	f000 fea5 	bl	8006a0c <MX_GPIO_Init>
  MX_FSMC_Init();
 8005cc2:	f000 ff2d 	bl	8006b20 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8005cc6:	f000 fe77 	bl	80069b8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8005cca:	f000 fda3 	bl	8006814 <MX_SPI2_Init>
  MX_TIM2_Init();
 8005cce:	f000 fdd7 	bl	8006880 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005cd2:	f000 fe23 	bl	800691c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LCD_BL_ON();
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	2102      	movs	r1, #2
 8005cda:	4888      	ldr	r0, [pc, #544]	@ (8005efc <main+0x24c>)
 8005cdc:	f002 fbc6 	bl	800846c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 8005ce0:	4887      	ldr	r0, [pc, #540]	@ (8005f00 <main+0x250>)
 8005ce2:	f003 fc1b 	bl	800951c <HAL_TIM_Base_Start_IT>
  TouchCalibrate();
 8005ce6:	f001 ff7b 	bl	8007be0 <TouchCalibrate>

  lcdInit();
 8005cea:	f7fe fdef 	bl	80048cc <lcdInit>
  int i = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	607b      	str	r3, [r7, #4]

  lcdSetOrientation(i%4);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	425a      	negs	r2, r3
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	f002 0203 	and.w	r2, r2, #3
 8005cfe:	bf58      	it	pl
 8005d00:	4253      	negpl	r3, r2
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff fe6b 	bl	80059e0 <lcdSetOrientation>
  lcdFillRGB(COLOR_BLACK);
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	f7fe ff52 	bl	8004bb4 <lcdFillRGB>

  Send_AT_Commands(&huart1);
 8005d10:	487c      	ldr	r0, [pc, #496]	@ (8005f04 <main+0x254>)
 8005d12:	f000 ffd7 	bl	8006cc4 <Send_AT_Commands>

  int current = 1;
 8005d16:	2301      	movs	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
  bool updated = true;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	72fb      	strb	r3, [r7, #11]
  int16_t tx , ty;
  processWeather(uart_rx_buffer);
 8005d1e:	487a      	ldr	r0, [pc, #488]	@ (8005f08 <main+0x258>)
 8005d20:	f001 f8f4 	bl	8006f0c <processWeather>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (readDHT && current == 1)
 8005d24:	4b79      	ldr	r3, [pc, #484]	@ (8005f0c <main+0x25c>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d017      	beq.n	8005d5e <main+0xae>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d114      	bne.n	8005d5e <main+0xae>
	  {
		  readDHT = false; // Xóa c�?
 8005d34:	4b75      	ldr	r3, [pc, #468]	@ (8005f0c <main+0x25c>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
		  DHT_ReadData(&temperature, &humidity);
 8005d3a:	4975      	ldr	r1, [pc, #468]	@ (8005f10 <main+0x260>)
 8005d3c:	4875      	ldr	r0, [pc, #468]	@ (8005f14 <main+0x264>)
 8005d3e:	f7fb faf3 	bl	8001328 <DHT_ReadData>
		  TextSensor(5, 245, temperature, humidity);
 8005d42:	4b74      	ldr	r3, [pc, #464]	@ (8005f14 <main+0x264>)
 8005d44:	edd3 7a00 	vldr	s15, [r3]
 8005d48:	4b71      	ldr	r3, [pc, #452]	@ (8005f10 <main+0x260>)
 8005d4a:	ed93 7a00 	vldr	s14, [r3]
 8005d4e:	eef0 0a47 	vmov.f32	s1, s14
 8005d52:	eeb0 0a67 	vmov.f32	s0, s15
 8005d56:	21f5      	movs	r1, #245	@ 0xf5
 8005d58:	2005      	movs	r0, #5
 8005d5a:	f7fe f843 	bl	8003de4 <TextSensor>
	  }
	  if(choice != choiceTmp && current == 1){
 8005d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8005f18 <main+0x268>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b6e      	ldr	r3, [pc, #440]	@ (8005f1c <main+0x26c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d009      	beq.n	8005d7e <main+0xce>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d106      	bne.n	8005d7e <main+0xce>
		  Recall = true;
 8005d70:	4b6b      	ldr	r3, [pc, #428]	@ (8005f20 <main+0x270>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	701a      	strb	r2, [r3, #0]
		  choiceTmp = choice;
 8005d76:	4b68      	ldr	r3, [pc, #416]	@ (8005f18 <main+0x268>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a68      	ldr	r2, [pc, #416]	@ (8005f1c <main+0x26c>)
 8005d7c:	6013      	str	r3, [r2, #0]
	  }

	  if (current == 1){
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d17a      	bne.n	8005e7a <main+0x1ca>
		  if (updated == true){
 8005d84:	7afb      	ldrb	r3, [r7, #11]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d021      	beq.n	8005dce <main+0x11e>
			  Screen1(temp_max[0] , temp_min[0] , current_temp ,  current_humi , current_code ,current_cloud ,current_time ,current_date ,choice);
 8005d8a:	4b66      	ldr	r3, [pc, #408]	@ (8005f24 <main+0x274>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	4b65      	ldr	r3, [pc, #404]	@ (8005f28 <main+0x278>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681c      	ldr	r4, [r3, #0]
 8005d96:	4b65      	ldr	r3, [pc, #404]	@ (8005f2c <main+0x27c>)
 8005d98:	681d      	ldr	r5, [r3, #0]
 8005d9a:	4b65      	ldr	r3, [pc, #404]	@ (8005f30 <main+0x280>)
 8005d9c:	681e      	ldr	r6, [r3, #0]
 8005d9e:	4b65      	ldr	r3, [pc, #404]	@ (8005f34 <main+0x284>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a65      	ldr	r2, [pc, #404]	@ (8005f38 <main+0x288>)
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	495c      	ldr	r1, [pc, #368]	@ (8005f18 <main+0x268>)
 8005da8:	6809      	ldr	r1, [r1, #0]
 8005daa:	9104      	str	r1, [sp, #16]
 8005dac:	4963      	ldr	r1, [pc, #396]	@ (8005f3c <main+0x28c>)
 8005dae:	9103      	str	r1, [sp, #12]
 8005db0:	4963      	ldr	r1, [pc, #396]	@ (8005f40 <main+0x290>)
 8005db2:	9102      	str	r1, [sp, #8]
 8005db4:	9201      	str	r2, [sp, #4]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	4633      	mov	r3, r6
 8005dba:	462a      	mov	r2, r5
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	f7fe fa79 	bl	80042b4 <Screen1>
			  HAL_Delay(1000);
 8005dc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005dc6:	f001 ffd5 	bl	8007d74 <HAL_Delay>
			  updated = false;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	72fb      	strb	r3, [r7, #11]
		  }
		  if (TouchGetCalibratedPoint(&tx, &ty)){
 8005dce:	463a      	mov	r2, r7
 8005dd0:	1cbb      	adds	r3, r7, #2
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 febd 	bl	8007b54 <TouchGetCalibratedPoint>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01e      	beq.n	8005e1e <main+0x16e>
			  lcdDrawCircle(tx, ty, 2, COLOR_BLUE);
 8005de0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005de4:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005de8:	231f      	movs	r3, #31
 8005dea:	2202      	movs	r2, #2
 8005dec:	f7ff f9d9 	bl	80051a2 <lcdDrawCircle>
			  if (tx >= 199 && tx <= 239 && ty >= 25 && ty <= 65){
 8005df0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005df4:	2bc6      	cmp	r3, #198	@ 0xc6
 8005df6:	dd12      	ble.n	8005e1e <main+0x16e>
 8005df8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dfc:	2bef      	cmp	r3, #239	@ 0xef
 8005dfe:	dc0e      	bgt.n	8005e1e <main+0x16e>
 8005e00:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005e04:	2b18      	cmp	r3, #24
 8005e06:	dd0a      	ble.n	8005e1e <main+0x16e>
 8005e08:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005e0c:	2b41      	cmp	r3, #65	@ 0x41
 8005e0e:	dc06      	bgt.n	8005e1e <main+0x16e>
				  current = 2;
 8005e10:	2302      	movs	r3, #2
 8005e12:	60fb      	str	r3, [r7, #12]
				  updated = true;
 8005e14:	2301      	movs	r3, #1
 8005e16:	72fb      	strb	r3, [r7, #11]
				  HAL_Delay(200);
 8005e18:	20c8      	movs	r0, #200	@ 0xc8
 8005e1a:	f001 ffab 	bl	8007d74 <HAL_Delay>
			  }
		  }
		  if (TouchGetCalibratedPoint(&tx, &ty)){
 8005e1e:	463a      	mov	r2, r7
 8005e20:	1cbb      	adds	r3, r7, #2
 8005e22:	4611      	mov	r1, r2
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 fe95 	bl	8007b54 <TouchGetCalibratedPoint>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 841d 	beq.w	800666c <main+0x9bc>
			  lcdDrawCircle(tx, ty, 2, COLOR_BLUE);
 8005e32:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005e36:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005e3a:	231f      	movs	r3, #31
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	f7ff f9b0 	bl	80051a2 <lcdDrawCircle>
			  if (tx >= 158 && tx <= 198 && ty >= 25 && ty <= 65){
 8005e42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e46:	2b9d      	cmp	r3, #157	@ 0x9d
 8005e48:	f340 8410 	ble.w	800666c <main+0x9bc>
 8005e4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e50:	2bc6      	cmp	r3, #198	@ 0xc6
 8005e52:	f300 840b 	bgt.w	800666c <main+0x9bc>
 8005e56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005e5a:	2b18      	cmp	r3, #24
 8005e5c:	f340 8406 	ble.w	800666c <main+0x9bc>
 8005e60:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005e64:	2b41      	cmp	r3, #65	@ 0x41
 8005e66:	f300 8401 	bgt.w	800666c <main+0x9bc>
				  current = 3;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	60fb      	str	r3, [r7, #12]
				  updated = true;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	72fb      	strb	r3, [r7, #11]
				  HAL_Delay(200);
 8005e72:	20c8      	movs	r0, #200	@ 0xc8
 8005e74:	f001 ff7e 	bl	8007d74 <HAL_Delay>
 8005e78:	e3f8      	b.n	800666c <main+0x9bc>
			  }
		  }
	  }
	  else if (current == 2){
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d169      	bne.n	8005f54 <main+0x2a4>
		  if (updated == true){
 8005e80:	7afb      	ldrb	r3, [r7, #11]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d013      	beq.n	8005eae <main+0x1fe>
			  Screen2(temp_max, temp_min, day_code, day_name, wind_speed, Date);
 8005e86:	4b27      	ldr	r3, [pc, #156]	@ (8005f24 <main+0x274>)
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	4b27      	ldr	r3, [pc, #156]	@ (8005f28 <main+0x278>)
 8005e8c:	6819      	ldr	r1, [r3, #0]
 8005e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f44 <main+0x294>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b2d      	ldr	r3, [pc, #180]	@ (8005f48 <main+0x298>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4c2d      	ldr	r4, [pc, #180]	@ (8005f4c <main+0x29c>)
 8005e98:	9401      	str	r4, [sp, #4]
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8005f50 <main+0x2a0>)
 8005e9e:	f7fe fb05 	bl	80044ac <Screen2>
			  HAL_Delay(1000);
 8005ea2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005ea6:	f001 ff65 	bl	8007d74 <HAL_Delay>
			  updated = false;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	72fb      	strb	r3, [r7, #11]
		  }
		  if (TouchGetCalibratedPoint(&tx, &ty)){
 8005eae:	463a      	mov	r2, r7
 8005eb0:	1cbb      	adds	r3, r7, #2
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f001 fe4d 	bl	8007b54 <TouchGetCalibratedPoint>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 83d5 	beq.w	800666c <main+0x9bc>
			  if (tx >= 180 && tx <= 230 && ty >= 10 && ty <= 100){
 8005ec2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ec6:	2bb3      	cmp	r3, #179	@ 0xb3
 8005ec8:	f340 83d0 	ble.w	800666c <main+0x9bc>
 8005ecc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ed0:	2be6      	cmp	r3, #230	@ 0xe6
 8005ed2:	f300 83cb 	bgt.w	800666c <main+0x9bc>
 8005ed6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005eda:	2b09      	cmp	r3, #9
 8005edc:	f340 83c6 	ble.w	800666c <main+0x9bc>
 8005ee0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005ee4:	2b64      	cmp	r3, #100	@ 0x64
 8005ee6:	f300 83c1 	bgt.w	800666c <main+0x9bc>
				  current = 1;
 8005eea:	2301      	movs	r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]
				  updated = true;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	72fb      	strb	r3, [r7, #11]
				  HAL_Delay(100);
 8005ef2:	2064      	movs	r0, #100	@ 0x64
 8005ef4:	f001 ff3e 	bl	8007d74 <HAL_Delay>
 8005ef8:	e3b8      	b.n	800666c <main+0x9bc>
 8005efa:	bf00      	nop
 8005efc:	40020400 	.word	0x40020400
 8005f00:	200033ac 	.word	0x200033ac
 8005f04:	2000343c 	.word	0x2000343c
 8005f08:	20002b54 	.word	0x20002b54
 8005f0c:	200034d8 	.word	0x200034d8
 8005f10:	20000048 	.word	0x20000048
 8005f14:	20000044 	.word	0x20000044
 8005f18:	2000004c 	.word	0x2000004c
 8005f1c:	20000050 	.word	0x20000050
 8005f20:	200034d9 	.word	0x200034d9
 8005f24:	200034dc 	.word	0x200034dc
 8005f28:	200034e0 	.word	0x200034e0
 8005f2c:	20003548 	.word	0x20003548
 8005f30:	2000354c 	.word	0x2000354c
 8005f34:	20003550 	.word	0x20003550
 8005f38:	20003554 	.word	0x20003554
 8005f3c:	2000353c 	.word	0x2000353c
 8005f40:	20003534 	.word	0x20003534
 8005f44:	200034e8 	.word	0x200034e8
 8005f48:	200034e4 	.word	0x200034e4
 8005f4c:	20003508 	.word	0x20003508
 8005f50:	200034ec 	.word	0x200034ec
			  }
		  }
	  }
	  else if (current == 3){
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	f040 8388 	bne.w	800666c <main+0x9bc>
		  if (updated == true){
 8005f5c:	7afb      	ldrb	r3, [r7, #11]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00e      	beq.n	8005f80 <main+0x2d0>
			  Screen3(choice);
 8005f62:	4bd6      	ldr	r3, [pc, #856]	@ (80062bc <main+0x60c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fe fb78 	bl	800465c <Screen3>
			  HAL_Delay(1000);
 8005f6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f70:	f001 ff00 	bl	8007d74 <HAL_Delay>
			  updated = false;
 8005f74:	2300      	movs	r3, #0
 8005f76:	72fb      	strb	r3, [r7, #11]
			  choiceTmp=choice;
 8005f78:	4bd0      	ldr	r3, [pc, #832]	@ (80062bc <main+0x60c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4ad0      	ldr	r2, [pc, #832]	@ (80062c0 <main+0x610>)
 8005f7e:	6013      	str	r3, [r2, #0]
		  }
		  if (TouchGetCalibratedPoint(&tx, &ty)){
 8005f80:	463a      	mov	r2, r7
 8005f82:	1cbb      	adds	r3, r7, #2
 8005f84:	4611      	mov	r1, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f001 fde4 	bl	8007b54 <TouchGetCalibratedPoint>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d016      	beq.n	8005fc0 <main+0x310>
			  if (tx >= 180 && tx <= 230 && ty >= 10 && ty <= 100){
 8005f92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f96:	2bb3      	cmp	r3, #179	@ 0xb3
 8005f98:	dd12      	ble.n	8005fc0 <main+0x310>
 8005f9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f9e:	2be6      	cmp	r3, #230	@ 0xe6
 8005fa0:	dc0e      	bgt.n	8005fc0 <main+0x310>
 8005fa2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005fa6:	2b09      	cmp	r3, #9
 8005fa8:	dd0a      	ble.n	8005fc0 <main+0x310>
 8005faa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005fae:	2b64      	cmp	r3, #100	@ 0x64
 8005fb0:	dc06      	bgt.n	8005fc0 <main+0x310>
				  current = 1;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
				  updated = true;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	72fb      	strb	r3, [r7, #11]
				  HAL_Delay(100);
 8005fba:	2064      	movs	r0, #100	@ 0x64
 8005fbc:	f001 feda 	bl	8007d74 <HAL_Delay>
			  }
		  }
		  if (TouchGetCalibratedPoint(&tx, &ty)){
 8005fc0:	463a      	mov	r2, r7
 8005fc2:	1cbb      	adds	r3, r7, #2
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f001 fdc4 	bl	8007b54 <TouchGetCalibratedPoint>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 834c 	beq.w	800666c <main+0x9bc>
			  if (tx >= 20 && tx <= 220 && ty >= 50 && ty <= 85){
 8005fd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fd8:	2b13      	cmp	r3, #19
 8005fda:	f340 809d 	ble.w	8006118 <main+0x468>
 8005fde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fe2:	2bdc      	cmp	r3, #220	@ 0xdc
 8005fe4:	f300 8098 	bgt.w	8006118 <main+0x468>
 8005fe8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005fec:	2b31      	cmp	r3, #49	@ 0x31
 8005fee:	f340 8093 	ble.w	8006118 <main+0x468>
 8005ff2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005ff6:	2b55      	cmp	r3, #85	@ 0x55
 8005ff8:	f300 808e 	bgt.w	8006118 <main+0x468>
				  choice = 1;
 8005ffc:	4baf      	ldr	r3, [pc, #700]	@ (80062bc <main+0x60c>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	601a      	str	r2, [r3, #0]
				  lcdFillRoundRect(20,50, 200, 35, 6, COLOR_GREEN);
 8006002:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8006006:	9301      	str	r3, [sp, #4]
 8006008:	2306      	movs	r3, #6
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	2323      	movs	r3, #35	@ 0x23
 800600e:	22c8      	movs	r2, #200	@ 0xc8
 8006010:	2132      	movs	r1, #50	@ 0x32
 8006012:	2014      	movs	r0, #20
 8006014:	f7ff face 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 8006018:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800601c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006020:	f7ff fcc8 	bl	80059b4 <lcdSetTextColor>
				  lcdSetTextFont(&Font20);
 8006024:	48a7      	ldr	r0, [pc, #668]	@ (80062c4 <main+0x614>)
 8006026:	f7ff fcb5 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 60);
 800602a:	213c      	movs	r1, #60	@ 0x3c
 800602c:	2019      	movs	r0, #25
 800602e:	f7ff fd41 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("TP.HCM");
 8006032:	48a5      	ldr	r0, [pc, #660]	@ (80062c8 <main+0x618>)
 8006034:	f7ff fc22 	bl	800587c <lcdPrintf>
				  //
				  lcdFillRoundRect(20,100, 200, 35, 6, COLOR_LIGHTGREY);
 8006038:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	2306      	movs	r3, #6
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	2323      	movs	r3, #35	@ 0x23
 8006044:	22c8      	movs	r2, #200	@ 0xc8
 8006046:	2164      	movs	r1, #100	@ 0x64
 8006048:	2014      	movs	r0, #20
 800604a:	f7ff fab3 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800604e:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006052:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006056:	f7ff fcad 	bl	80059b4 <lcdSetTextColor>
				  lcdSetTextFont(&Font20);
 800605a:	489a      	ldr	r0, [pc, #616]	@ (80062c4 <main+0x614>)
 800605c:	f7ff fc9a 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 110);
 8006060:	216e      	movs	r1, #110	@ 0x6e
 8006062:	2019      	movs	r0, #25
 8006064:	f7ff fd26 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Ha Noi");
 8006068:	4898      	ldr	r0, [pc, #608]	@ (80062cc <main+0x61c>)
 800606a:	f7ff fc07 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800606e:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006072:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006076:	f7ff fc9d 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,150, 200, 35, 6, COLOR_LIGHTGREY);
 800607a:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	2306      	movs	r3, #6
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	2323      	movs	r3, #35	@ 0x23
 8006086:	22c8      	movs	r2, #200	@ 0xc8
 8006088:	2196      	movs	r1, #150	@ 0x96
 800608a:	2014      	movs	r0, #20
 800608c:	f7ff fa92 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 8006090:	488c      	ldr	r0, [pc, #560]	@ (80062c4 <main+0x614>)
 8006092:	f7ff fc7f 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 160);
 8006096:	21a0      	movs	r1, #160	@ 0xa0
 8006098:	2019      	movs	r0, #25
 800609a:	f7ff fd0b 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Hai Phong");
 800609e:	488c      	ldr	r0, [pc, #560]	@ (80062d0 <main+0x620>)
 80060a0:	f7ff fbec 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80060a4:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80060a8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80060ac:	f7ff fc82 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,200, 200, 35, 6, COLOR_LIGHTGREY);
 80060b0:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	2306      	movs	r3, #6
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	2323      	movs	r3, #35	@ 0x23
 80060bc:	22c8      	movs	r2, #200	@ 0xc8
 80060be:	21c8      	movs	r1, #200	@ 0xc8
 80060c0:	2014      	movs	r0, #20
 80060c2:	f7ff fa77 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 80060c6:	487f      	ldr	r0, [pc, #508]	@ (80062c4 <main+0x614>)
 80060c8:	f7ff fc64 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 210);
 80060cc:	21d2      	movs	r1, #210	@ 0xd2
 80060ce:	2019      	movs	r0, #25
 80060d0:	f7ff fcf0 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Can Tho");
 80060d4:	487f      	ldr	r0, [pc, #508]	@ (80062d4 <main+0x624>)
 80060d6:	f7ff fbd1 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80060da:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80060de:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80060e2:	f7ff fc67 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,250, 200, 35, 6, COLOR_LIGHTGREY);
 80060e6:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	2306      	movs	r3, #6
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	2323      	movs	r3, #35	@ 0x23
 80060f2:	22c8      	movs	r2, #200	@ 0xc8
 80060f4:	21fa      	movs	r1, #250	@ 0xfa
 80060f6:	2014      	movs	r0, #20
 80060f8:	f7ff fa5c 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 80060fc:	4871      	ldr	r0, [pc, #452]	@ (80062c4 <main+0x614>)
 80060fe:	f7ff fc49 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 260);
 8006102:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8006106:	2019      	movs	r0, #25
 8006108:	f7ff fcd4 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Da Nang");
 800610c:	4872      	ldr	r0, [pc, #456]	@ (80062d8 <main+0x628>)
 800610e:	f7ff fbb5 	bl	800587c <lcdPrintf>
				  HAL_Delay(200);
 8006112:	20c8      	movs	r0, #200	@ 0xc8
 8006114:	f001 fe2e 	bl	8007d74 <HAL_Delay>
			  }
			  if (tx >= 20 && tx <= 220 && ty >= 100 && ty <= 135){
 8006118:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800611c:	2b13      	cmp	r3, #19
 800611e:	f340 809d 	ble.w	800625c <main+0x5ac>
 8006122:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006126:	2bdc      	cmp	r3, #220	@ 0xdc
 8006128:	f300 8098 	bgt.w	800625c <main+0x5ac>
 800612c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006130:	2b63      	cmp	r3, #99	@ 0x63
 8006132:	f340 8093 	ble.w	800625c <main+0x5ac>
 8006136:	f9b7 3000 	ldrsh.w	r3, [r7]
 800613a:	2b87      	cmp	r3, #135	@ 0x87
 800613c:	f300 808e 	bgt.w	800625c <main+0x5ac>
				  choice = 2;
 8006140:	4b5e      	ldr	r3, [pc, #376]	@ (80062bc <main+0x60c>)
 8006142:	2202      	movs	r2, #2
 8006144:	601a      	str	r2, [r3, #0]
				  lcdFillRoundRect(20,50, 200, 35, 6, COLOR_LIGHTGREY);
 8006146:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	2306      	movs	r3, #6
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	2323      	movs	r3, #35	@ 0x23
 8006152:	22c8      	movs	r2, #200	@ 0xc8
 8006154:	2132      	movs	r1, #50	@ 0x32
 8006156:	2014      	movs	r0, #20
 8006158:	f7ff fa2c 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800615c:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006160:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006164:	f7ff fc26 	bl	80059b4 <lcdSetTextColor>
				  lcdSetTextFont(&Font20);
 8006168:	4856      	ldr	r0, [pc, #344]	@ (80062c4 <main+0x614>)
 800616a:	f7ff fc13 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 60);
 800616e:	213c      	movs	r1, #60	@ 0x3c
 8006170:	2019      	movs	r0, #25
 8006172:	f7ff fc9f 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("TP.HCM");
 8006176:	4854      	ldr	r0, [pc, #336]	@ (80062c8 <main+0x618>)
 8006178:	f7ff fb80 	bl	800587c <lcdPrintf>
				  //
				  lcdFillRoundRect(20,100, 200, 35, 6, COLOR_GREEN);
 800617c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	2306      	movs	r3, #6
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	2323      	movs	r3, #35	@ 0x23
 8006188:	22c8      	movs	r2, #200	@ 0xc8
 800618a:	2164      	movs	r1, #100	@ 0x64
 800618c:	2014      	movs	r0, #20
 800618e:	f7ff fa11 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 8006192:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8006196:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800619a:	f7ff fc0b 	bl	80059b4 <lcdSetTextColor>
				  lcdSetTextFont(&Font20);
 800619e:	4849      	ldr	r0, [pc, #292]	@ (80062c4 <main+0x614>)
 80061a0:	f7ff fbf8 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 110);
 80061a4:	216e      	movs	r1, #110	@ 0x6e
 80061a6:	2019      	movs	r0, #25
 80061a8:	f7ff fc84 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Ha Noi");
 80061ac:	4847      	ldr	r0, [pc, #284]	@ (80062cc <main+0x61c>)
 80061ae:	f7ff fb65 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80061b2:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80061b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80061ba:	f7ff fbfb 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,150, 200, 35, 6, COLOR_LIGHTGREY);
 80061be:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	2306      	movs	r3, #6
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	2323      	movs	r3, #35	@ 0x23
 80061ca:	22c8      	movs	r2, #200	@ 0xc8
 80061cc:	2196      	movs	r1, #150	@ 0x96
 80061ce:	2014      	movs	r0, #20
 80061d0:	f7ff f9f0 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 80061d4:	483b      	ldr	r0, [pc, #236]	@ (80062c4 <main+0x614>)
 80061d6:	f7ff fbdd 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 160);
 80061da:	21a0      	movs	r1, #160	@ 0xa0
 80061dc:	2019      	movs	r0, #25
 80061de:	f7ff fc69 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Hai Phong");
 80061e2:	483b      	ldr	r0, [pc, #236]	@ (80062d0 <main+0x620>)
 80061e4:	f7ff fb4a 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80061e8:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80061ec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80061f0:	f7ff fbe0 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,200, 200, 35, 6, COLOR_LIGHTGREY);
 80061f4:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	2306      	movs	r3, #6
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	2323      	movs	r3, #35	@ 0x23
 8006200:	22c8      	movs	r2, #200	@ 0xc8
 8006202:	21c8      	movs	r1, #200	@ 0xc8
 8006204:	2014      	movs	r0, #20
 8006206:	f7ff f9d5 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 800620a:	482e      	ldr	r0, [pc, #184]	@ (80062c4 <main+0x614>)
 800620c:	f7ff fbc2 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 210);
 8006210:	21d2      	movs	r1, #210	@ 0xd2
 8006212:	2019      	movs	r0, #25
 8006214:	f7ff fc4e 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Can Tho");
 8006218:	482e      	ldr	r0, [pc, #184]	@ (80062d4 <main+0x624>)
 800621a:	f7ff fb2f 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800621e:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006222:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006226:	f7ff fbc5 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,250, 200, 35, 6, COLOR_LIGHTGREY);
 800622a:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	2306      	movs	r3, #6
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	2323      	movs	r3, #35	@ 0x23
 8006236:	22c8      	movs	r2, #200	@ 0xc8
 8006238:	21fa      	movs	r1, #250	@ 0xfa
 800623a:	2014      	movs	r0, #20
 800623c:	f7ff f9ba 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 8006240:	4820      	ldr	r0, [pc, #128]	@ (80062c4 <main+0x614>)
 8006242:	f7ff fba7 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 260);
 8006246:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800624a:	2019      	movs	r0, #25
 800624c:	f7ff fc32 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Da Nang");
 8006250:	4821      	ldr	r0, [pc, #132]	@ (80062d8 <main+0x628>)
 8006252:	f7ff fb13 	bl	800587c <lcdPrintf>
				  HAL_Delay(200);
 8006256:	20c8      	movs	r0, #200	@ 0xc8
 8006258:	f001 fd8c 	bl	8007d74 <HAL_Delay>
			  }
			  if (tx >= 20 && tx <= 220 && ty >= 150 && ty <= 185){
 800625c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006260:	2b13      	cmp	r3, #19
 8006262:	f340 80ae 	ble.w	80063c2 <main+0x712>
 8006266:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800626a:	2bdc      	cmp	r3, #220	@ 0xdc
 800626c:	f300 80a9 	bgt.w	80063c2 <main+0x712>
 8006270:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006274:	2b95      	cmp	r3, #149	@ 0x95
 8006276:	f340 80a4 	ble.w	80063c2 <main+0x712>
 800627a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800627e:	2bb9      	cmp	r3, #185	@ 0xb9
 8006280:	f300 809f 	bgt.w	80063c2 <main+0x712>
				  choice = 3;
 8006284:	4b0d      	ldr	r3, [pc, #52]	@ (80062bc <main+0x60c>)
 8006286:	2203      	movs	r2, #3
 8006288:	601a      	str	r2, [r3, #0]
				  lcdFillRoundRect(20,50, 200, 35, 6, COLOR_LIGHTGREY);
 800628a:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	2306      	movs	r3, #6
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	2323      	movs	r3, #35	@ 0x23
 8006296:	22c8      	movs	r2, #200	@ 0xc8
 8006298:	2132      	movs	r1, #50	@ 0x32
 800629a:	2014      	movs	r0, #20
 800629c:	f7ff f98a 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80062a0:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80062a4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80062a8:	f7ff fb84 	bl	80059b4 <lcdSetTextColor>
				  lcdSetTextFont(&Font20);
 80062ac:	4805      	ldr	r0, [pc, #20]	@ (80062c4 <main+0x614>)
 80062ae:	f7ff fb71 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 60);
 80062b2:	213c      	movs	r1, #60	@ 0x3c
 80062b4:	2019      	movs	r0, #25
 80062b6:	f7ff fbfd 	bl	8005ab4 <lcdSetCursor>
 80062ba:	e00f      	b.n	80062dc <main+0x62c>
 80062bc:	2000004c 	.word	0x2000004c
 80062c0:	20000050 	.word	0x20000050
 80062c4:	2000001c 	.word	0x2000001c
 80062c8:	0800ee04 	.word	0x0800ee04
 80062cc:	0800ee0c 	.word	0x0800ee0c
 80062d0:	0800ee14 	.word	0x0800ee14
 80062d4:	0800ee20 	.word	0x0800ee20
 80062d8:	0800ee28 	.word	0x0800ee28
				  lcdPrintf("TP.HCM");
 80062dc:	48db      	ldr	r0, [pc, #876]	@ (800664c <main+0x99c>)
 80062de:	f7ff facd 	bl	800587c <lcdPrintf>
				  //
				  lcdFillRoundRect(20,100, 200, 35, 6, COLOR_LIGHTGREY);
 80062e2:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	2306      	movs	r3, #6
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	2323      	movs	r3, #35	@ 0x23
 80062ee:	22c8      	movs	r2, #200	@ 0xc8
 80062f0:	2164      	movs	r1, #100	@ 0x64
 80062f2:	2014      	movs	r0, #20
 80062f4:	f7ff f95e 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80062f8:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80062fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006300:	f7ff fb58 	bl	80059b4 <lcdSetTextColor>
				  lcdSetTextFont(&Font20);
 8006304:	48d2      	ldr	r0, [pc, #840]	@ (8006650 <main+0x9a0>)
 8006306:	f7ff fb45 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 110);
 800630a:	216e      	movs	r1, #110	@ 0x6e
 800630c:	2019      	movs	r0, #25
 800630e:	f7ff fbd1 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Ha Noi");
 8006312:	48d0      	ldr	r0, [pc, #832]	@ (8006654 <main+0x9a4>)
 8006314:	f7ff fab2 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 8006318:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800631c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006320:	f7ff fb48 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,150, 200, 35, 6, COLOR_GREEN);
 8006324:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	2306      	movs	r3, #6
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	2323      	movs	r3, #35	@ 0x23
 8006330:	22c8      	movs	r2, #200	@ 0xc8
 8006332:	2196      	movs	r1, #150	@ 0x96
 8006334:	2014      	movs	r0, #20
 8006336:	f7ff f93d 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 800633a:	48c5      	ldr	r0, [pc, #788]	@ (8006650 <main+0x9a0>)
 800633c:	f7ff fb2a 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 160);
 8006340:	21a0      	movs	r1, #160	@ 0xa0
 8006342:	2019      	movs	r0, #25
 8006344:	f7ff fbb6 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Hai Phong");
 8006348:	48c3      	ldr	r0, [pc, #780]	@ (8006658 <main+0x9a8>)
 800634a:	f7ff fa97 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800634e:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006352:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006356:	f7ff fb2d 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,200, 200, 35, 6, COLOR_LIGHTGREY);
 800635a:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	2306      	movs	r3, #6
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	2323      	movs	r3, #35	@ 0x23
 8006366:	22c8      	movs	r2, #200	@ 0xc8
 8006368:	21c8      	movs	r1, #200	@ 0xc8
 800636a:	2014      	movs	r0, #20
 800636c:	f7ff f922 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 8006370:	48b7      	ldr	r0, [pc, #732]	@ (8006650 <main+0x9a0>)
 8006372:	f7ff fb0f 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 210);
 8006376:	21d2      	movs	r1, #210	@ 0xd2
 8006378:	2019      	movs	r0, #25
 800637a:	f7ff fb9b 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Can Tho");
 800637e:	48b7      	ldr	r0, [pc, #732]	@ (800665c <main+0x9ac>)
 8006380:	f7ff fa7c 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8006384:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006388:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800638c:	f7ff fb12 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,250, 200, 35, 6, COLOR_LIGHTGREY);
 8006390:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	2306      	movs	r3, #6
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	2323      	movs	r3, #35	@ 0x23
 800639c:	22c8      	movs	r2, #200	@ 0xc8
 800639e:	21fa      	movs	r1, #250	@ 0xfa
 80063a0:	2014      	movs	r0, #20
 80063a2:	f7ff f907 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 80063a6:	48aa      	ldr	r0, [pc, #680]	@ (8006650 <main+0x9a0>)
 80063a8:	f7ff faf4 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 260);
 80063ac:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80063b0:	2019      	movs	r0, #25
 80063b2:	f7ff fb7f 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Da Nang");
 80063b6:	48aa      	ldr	r0, [pc, #680]	@ (8006660 <main+0x9b0>)
 80063b8:	f7ff fa60 	bl	800587c <lcdPrintf>
				  HAL_Delay(200);
 80063bc:	20c8      	movs	r0, #200	@ 0xc8
 80063be:	f001 fcd9 	bl	8007d74 <HAL_Delay>
			  			  }
			  if (tx >= 20 && tx <= 220 && ty >= 200 && ty <= 235){
 80063c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80063c6:	2b13      	cmp	r3, #19
 80063c8:	f340 809d 	ble.w	8006506 <main+0x856>
 80063cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80063d0:	2bdc      	cmp	r3, #220	@ 0xdc
 80063d2:	f300 8098 	bgt.w	8006506 <main+0x856>
 80063d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80063da:	2bc7      	cmp	r3, #199	@ 0xc7
 80063dc:	f340 8093 	ble.w	8006506 <main+0x856>
 80063e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80063e4:	2beb      	cmp	r3, #235	@ 0xeb
 80063e6:	f300 808e 	bgt.w	8006506 <main+0x856>
				  choice = 4;
 80063ea:	4b9e      	ldr	r3, [pc, #632]	@ (8006664 <main+0x9b4>)
 80063ec:	2204      	movs	r2, #4
 80063ee:	601a      	str	r2, [r3, #0]
				  lcdFillRoundRect(20,50, 200, 35, 6, COLOR_LIGHTGREY);
 80063f0:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	2306      	movs	r3, #6
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	2323      	movs	r3, #35	@ 0x23
 80063fc:	22c8      	movs	r2, #200	@ 0xc8
 80063fe:	2132      	movs	r1, #50	@ 0x32
 8006400:	2014      	movs	r0, #20
 8006402:	f7ff f8d7 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8006406:	f24c 6118 	movw	r1, #50712	@ 0xc618
 800640a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800640e:	f7ff fad1 	bl	80059b4 <lcdSetTextColor>
				  lcdSetTextFont(&Font20);
 8006412:	488f      	ldr	r0, [pc, #572]	@ (8006650 <main+0x9a0>)
 8006414:	f7ff fabe 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 60);
 8006418:	213c      	movs	r1, #60	@ 0x3c
 800641a:	2019      	movs	r0, #25
 800641c:	f7ff fb4a 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("TP.HCM");
 8006420:	488a      	ldr	r0, [pc, #552]	@ (800664c <main+0x99c>)
 8006422:	f7ff fa2b 	bl	800587c <lcdPrintf>
				  //
				  lcdFillRoundRect(20,100, 200, 35, 6, COLOR_LIGHTGREY);
 8006426:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	2306      	movs	r3, #6
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	2323      	movs	r3, #35	@ 0x23
 8006432:	22c8      	movs	r2, #200	@ 0xc8
 8006434:	2164      	movs	r1, #100	@ 0x64
 8006436:	2014      	movs	r0, #20
 8006438:	f7ff f8bc 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800643c:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006440:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006444:	f7ff fab6 	bl	80059b4 <lcdSetTextColor>
				  lcdSetTextFont(&Font20);
 8006448:	4881      	ldr	r0, [pc, #516]	@ (8006650 <main+0x9a0>)
 800644a:	f7ff faa3 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 110);
 800644e:	216e      	movs	r1, #110	@ 0x6e
 8006450:	2019      	movs	r0, #25
 8006452:	f7ff fb2f 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Ha Noi");
 8006456:	487f      	ldr	r0, [pc, #508]	@ (8006654 <main+0x9a4>)
 8006458:	f7ff fa10 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800645c:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006460:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006464:	f7ff faa6 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,150, 200, 35, 6, COLOR_LIGHTGREY);
 8006468:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	2306      	movs	r3, #6
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	2323      	movs	r3, #35	@ 0x23
 8006474:	22c8      	movs	r2, #200	@ 0xc8
 8006476:	2196      	movs	r1, #150	@ 0x96
 8006478:	2014      	movs	r0, #20
 800647a:	f7ff f89b 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 800647e:	4874      	ldr	r0, [pc, #464]	@ (8006650 <main+0x9a0>)
 8006480:	f7ff fa88 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 160);
 8006484:	21a0      	movs	r1, #160	@ 0xa0
 8006486:	2019      	movs	r0, #25
 8006488:	f7ff fb14 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Hai Phong");
 800648c:	4872      	ldr	r0, [pc, #456]	@ (8006658 <main+0x9a8>)
 800648e:	f7ff f9f5 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 8006492:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8006496:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800649a:	f7ff fa8b 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,200, 200, 35, 6, COLOR_GREEN);
 800649e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	2306      	movs	r3, #6
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	2323      	movs	r3, #35	@ 0x23
 80064aa:	22c8      	movs	r2, #200	@ 0xc8
 80064ac:	21c8      	movs	r1, #200	@ 0xc8
 80064ae:	2014      	movs	r0, #20
 80064b0:	f7ff f880 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 80064b4:	4866      	ldr	r0, [pc, #408]	@ (8006650 <main+0x9a0>)
 80064b6:	f7ff fa6d 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 210);
 80064ba:	21d2      	movs	r1, #210	@ 0xd2
 80064bc:	2019      	movs	r0, #25
 80064be:	f7ff faf9 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Can Tho");
 80064c2:	4866      	ldr	r0, [pc, #408]	@ (800665c <main+0x9ac>)
 80064c4:	f7ff f9da 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80064c8:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80064cc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80064d0:	f7ff fa70 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,250, 200, 35, 6, COLOR_LIGHTGREY);
 80064d4:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	2306      	movs	r3, #6
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	2323      	movs	r3, #35	@ 0x23
 80064e0:	22c8      	movs	r2, #200	@ 0xc8
 80064e2:	21fa      	movs	r1, #250	@ 0xfa
 80064e4:	2014      	movs	r0, #20
 80064e6:	f7ff f865 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 80064ea:	4859      	ldr	r0, [pc, #356]	@ (8006650 <main+0x9a0>)
 80064ec:	f7ff fa52 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 260);
 80064f0:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80064f4:	2019      	movs	r0, #25
 80064f6:	f7ff fadd 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Da Nang");
 80064fa:	4859      	ldr	r0, [pc, #356]	@ (8006660 <main+0x9b0>)
 80064fc:	f7ff f9be 	bl	800587c <lcdPrintf>
				  HAL_Delay(200);
 8006500:	20c8      	movs	r0, #200	@ 0xc8
 8006502:	f001 fc37 	bl	8007d74 <HAL_Delay>
			  			  }
			  if (tx >= 20 && tx <= 220 && ty >= 250 && ty <= 285){
 8006506:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800650a:	2b13      	cmp	r3, #19
 800650c:	f340 80ae 	ble.w	800666c <main+0x9bc>
 8006510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006514:	2bdc      	cmp	r3, #220	@ 0xdc
 8006516:	f300 80a9 	bgt.w	800666c <main+0x9bc>
 800651a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800651e:	2bf9      	cmp	r3, #249	@ 0xf9
 8006520:	f340 80a4 	ble.w	800666c <main+0x9bc>
 8006524:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006528:	f5b3 7f8f 	cmp.w	r3, #286	@ 0x11e
 800652c:	f280 809e 	bge.w	800666c <main+0x9bc>
				  choice = 5;
 8006530:	4b4c      	ldr	r3, [pc, #304]	@ (8006664 <main+0x9b4>)
 8006532:	2205      	movs	r2, #5
 8006534:	601a      	str	r2, [r3, #0]
				  lcdFillRoundRect(20,50, 200, 35, 6, COLOR_LIGHTGREY);
 8006536:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	2306      	movs	r3, #6
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	2323      	movs	r3, #35	@ 0x23
 8006542:	22c8      	movs	r2, #200	@ 0xc8
 8006544:	2132      	movs	r1, #50	@ 0x32
 8006546:	2014      	movs	r0, #20
 8006548:	f7ff f834 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800654c:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006550:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006554:	f7ff fa2e 	bl	80059b4 <lcdSetTextColor>
				  lcdSetTextFont(&Font20);
 8006558:	483d      	ldr	r0, [pc, #244]	@ (8006650 <main+0x9a0>)
 800655a:	f7ff fa1b 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 60);
 800655e:	213c      	movs	r1, #60	@ 0x3c
 8006560:	2019      	movs	r0, #25
 8006562:	f7ff faa7 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("TP.HCM");
 8006566:	4839      	ldr	r0, [pc, #228]	@ (800664c <main+0x99c>)
 8006568:	f7ff f988 	bl	800587c <lcdPrintf>
				  //
				  lcdFillRoundRect(20,100, 200, 35, 6, COLOR_LIGHTGREY);
 800656c:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	2306      	movs	r3, #6
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	2323      	movs	r3, #35	@ 0x23
 8006578:	22c8      	movs	r2, #200	@ 0xc8
 800657a:	2164      	movs	r1, #100	@ 0x64
 800657c:	2014      	movs	r0, #20
 800657e:	f7ff f819 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8006582:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006586:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800658a:	f7ff fa13 	bl	80059b4 <lcdSetTextColor>
				  lcdSetTextFont(&Font20);
 800658e:	4830      	ldr	r0, [pc, #192]	@ (8006650 <main+0x9a0>)
 8006590:	f7ff fa00 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 110);
 8006594:	216e      	movs	r1, #110	@ 0x6e
 8006596:	2019      	movs	r0, #25
 8006598:	f7ff fa8c 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Ha Noi");
 800659c:	482d      	ldr	r0, [pc, #180]	@ (8006654 <main+0x9a4>)
 800659e:	f7ff f96d 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80065a2:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80065a6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80065aa:	f7ff fa03 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,150, 200, 35, 6, COLOR_LIGHTGREY);
 80065ae:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80065b2:	9301      	str	r3, [sp, #4]
 80065b4:	2306      	movs	r3, #6
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	2323      	movs	r3, #35	@ 0x23
 80065ba:	22c8      	movs	r2, #200	@ 0xc8
 80065bc:	2196      	movs	r1, #150	@ 0x96
 80065be:	2014      	movs	r0, #20
 80065c0:	f7fe fff8 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 80065c4:	4822      	ldr	r0, [pc, #136]	@ (8006650 <main+0x9a0>)
 80065c6:	f7ff f9e5 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 160);
 80065ca:	21a0      	movs	r1, #160	@ 0xa0
 80065cc:	2019      	movs	r0, #25
 80065ce:	f7ff fa71 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Hai Phong");
 80065d2:	4821      	ldr	r0, [pc, #132]	@ (8006658 <main+0x9a8>)
 80065d4:	f7ff f952 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80065d8:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80065dc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80065e0:	f7ff f9e8 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,200, 200, 35, 6, COLOR_LIGHTGREY);
 80065e4:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	2306      	movs	r3, #6
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	2323      	movs	r3, #35	@ 0x23
 80065f0:	22c8      	movs	r2, #200	@ 0xc8
 80065f2:	21c8      	movs	r1, #200	@ 0xc8
 80065f4:	2014      	movs	r0, #20
 80065f6:	f7fe ffdd 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 80065fa:	4815      	ldr	r0, [pc, #84]	@ (8006650 <main+0x9a0>)
 80065fc:	f7ff f9ca 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 210);
 8006600:	21d2      	movs	r1, #210	@ 0xd2
 8006602:	2019      	movs	r0, #25
 8006604:	f7ff fa56 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Can Tho");
 8006608:	4814      	ldr	r0, [pc, #80]	@ (800665c <main+0x9ac>)
 800660a:	f7ff f937 	bl	800587c <lcdPrintf>
				  //
				  lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 800660e:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8006612:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006616:	f7ff f9cd 	bl	80059b4 <lcdSetTextColor>
				  lcdFillRoundRect(20,250, 200, 35, 6, COLOR_GREEN);
 800661a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	2306      	movs	r3, #6
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	2323      	movs	r3, #35	@ 0x23
 8006626:	22c8      	movs	r2, #200	@ 0xc8
 8006628:	21fa      	movs	r1, #250	@ 0xfa
 800662a:	2014      	movs	r0, #20
 800662c:	f7fe ffc2 	bl	80055b4 <lcdFillRoundRect>
				  lcdSetTextFont(&Font20);
 8006630:	4807      	ldr	r0, [pc, #28]	@ (8006650 <main+0x9a0>)
 8006632:	f7ff f9af 	bl	8005994 <lcdSetTextFont>
				  lcdSetCursor(25, 260);
 8006636:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800663a:	2019      	movs	r0, #25
 800663c:	f7ff fa3a 	bl	8005ab4 <lcdSetCursor>
				  lcdPrintf("Da Nang");
 8006640:	4807      	ldr	r0, [pc, #28]	@ (8006660 <main+0x9b0>)
 8006642:	f7ff f91b 	bl	800587c <lcdPrintf>
				  HAL_Delay(200);
 8006646:	20c8      	movs	r0, #200	@ 0xc8
 8006648:	e00e      	b.n	8006668 <main+0x9b8>
 800664a:	bf00      	nop
 800664c:	0800ee04 	.word	0x0800ee04
 8006650:	2000001c 	.word	0x2000001c
 8006654:	0800ee0c 	.word	0x0800ee0c
 8006658:	0800ee14 	.word	0x0800ee14
 800665c:	0800ee20 	.word	0x0800ee20
 8006660:	0800ee28 	.word	0x0800ee28
 8006664:	2000004c 	.word	0x2000004c
 8006668:	f001 fb84 	bl	8007d74 <HAL_Delay>
			  }
		  }
	  }
	  if(Recall){
 800666c:	4b24      	ldr	r3, [pc, #144]	@ (8006700 <main+0xa50>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	f43f ab56 	beq.w	8005d24 <main+0x74>
		  Resend_AT_Commands(&huart1);
 8006678:	4822      	ldr	r0, [pc, #136]	@ (8006704 <main+0xa54>)
 800667a:	f000 fb95 	bl	8006da8 <Resend_AT_Commands>
		  processWeather(uart_rx_buffer);
 800667e:	4822      	ldr	r0, [pc, #136]	@ (8006708 <main+0xa58>)
 8006680:	f000 fc44 	bl	8006f0c <processWeather>
		  if (current == 1){
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d11b      	bne.n	80066c2 <main+0xa12>
			  Screen1(temp_max[0] , temp_min[0] , current_temp ,  current_humi , current_code ,current_cloud ,current_time ,current_date , choice);
 800668a:	4b20      	ldr	r3, [pc, #128]	@ (800670c <main+0xa5c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	4b1f      	ldr	r3, [pc, #124]	@ (8006710 <main+0xa60>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681c      	ldr	r4, [r3, #0]
 8006696:	4b1f      	ldr	r3, [pc, #124]	@ (8006714 <main+0xa64>)
 8006698:	681d      	ldr	r5, [r3, #0]
 800669a:	4b1f      	ldr	r3, [pc, #124]	@ (8006718 <main+0xa68>)
 800669c:	681e      	ldr	r6, [r3, #0]
 800669e:	4b1f      	ldr	r3, [pc, #124]	@ (800671c <main+0xa6c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006720 <main+0xa70>)
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	491f      	ldr	r1, [pc, #124]	@ (8006724 <main+0xa74>)
 80066a8:	6809      	ldr	r1, [r1, #0]
 80066aa:	9104      	str	r1, [sp, #16]
 80066ac:	491e      	ldr	r1, [pc, #120]	@ (8006728 <main+0xa78>)
 80066ae:	9103      	str	r1, [sp, #12]
 80066b0:	491e      	ldr	r1, [pc, #120]	@ (800672c <main+0xa7c>)
 80066b2:	9102      	str	r1, [sp, #8]
 80066b4:	9201      	str	r2, [sp, #4]
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	4633      	mov	r3, r6
 80066ba:	462a      	mov	r2, r5
 80066bc:	4621      	mov	r1, r4
 80066be:	f7fd fdf9 	bl	80042b4 <Screen1>
		  }
		  if (current == 2){
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d10d      	bne.n	80066e4 <main+0xa34>
			  Screen2(temp_max, temp_min, day_code, day_name, wind_speed, Date);
 80066c8:	4b10      	ldr	r3, [pc, #64]	@ (800670c <main+0xa5c>)
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	4b10      	ldr	r3, [pc, #64]	@ (8006710 <main+0xa60>)
 80066ce:	6819      	ldr	r1, [r3, #0]
 80066d0:	4b17      	ldr	r3, [pc, #92]	@ (8006730 <main+0xa80>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4b17      	ldr	r3, [pc, #92]	@ (8006734 <main+0xa84>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4c17      	ldr	r4, [pc, #92]	@ (8006738 <main+0xa88>)
 80066da:	9401      	str	r4, [sp, #4]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	4b17      	ldr	r3, [pc, #92]	@ (800673c <main+0xa8c>)
 80066e0:	f7fd fee4 	bl	80044ac <Screen2>
		  }
		  if (current == 3){
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d104      	bne.n	80066f4 <main+0xa44>
			  Screen3(choice);
 80066ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006724 <main+0xa74>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fd ffb4 	bl	800465c <Screen3>
		  }
		  Recall = false;
 80066f4:	4b02      	ldr	r3, [pc, #8]	@ (8006700 <main+0xa50>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	701a      	strb	r2, [r3, #0]
	  if (readDHT && current == 1)
 80066fa:	f7ff bb13 	b.w	8005d24 <main+0x74>
 80066fe:	bf00      	nop
 8006700:	200034d9 	.word	0x200034d9
 8006704:	2000343c 	.word	0x2000343c
 8006708:	20002b54 	.word	0x20002b54
 800670c:	200034dc 	.word	0x200034dc
 8006710:	200034e0 	.word	0x200034e0
 8006714:	20003548 	.word	0x20003548
 8006718:	2000354c 	.word	0x2000354c
 800671c:	20003550 	.word	0x20003550
 8006720:	20003554 	.word	0x20003554
 8006724:	2000004c 	.word	0x2000004c
 8006728:	2000353c 	.word	0x2000353c
 800672c:	20003534 	.word	0x20003534
 8006730:	200034e8 	.word	0x200034e8
 8006734:	200034e4 	.word	0x200034e4
 8006738:	20003508 	.word	0x20003508
 800673c:	200034ec 	.word	0x200034ec

08006740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b094      	sub	sp, #80	@ 0x50
 8006744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006746:	f107 0320 	add.w	r3, r7, #32
 800674a:	2230      	movs	r2, #48	@ 0x30
 800674c:	2100      	movs	r1, #0
 800674e:	4618      	mov	r0, r3
 8006750:	f005 fd58 	bl	800c204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006754:	f107 030c 	add.w	r3, r7, #12
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	605a      	str	r2, [r3, #4]
 800675e:	609a      	str	r2, [r3, #8]
 8006760:	60da      	str	r2, [r3, #12]
 8006762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006764:	2300      	movs	r3, #0
 8006766:	60bb      	str	r3, [r7, #8]
 8006768:	4b28      	ldr	r3, [pc, #160]	@ (800680c <SystemClock_Config+0xcc>)
 800676a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676c:	4a27      	ldr	r2, [pc, #156]	@ (800680c <SystemClock_Config+0xcc>)
 800676e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006772:	6413      	str	r3, [r2, #64]	@ 0x40
 8006774:	4b25      	ldr	r3, [pc, #148]	@ (800680c <SystemClock_Config+0xcc>)
 8006776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800677c:	60bb      	str	r3, [r7, #8]
 800677e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006780:	2300      	movs	r3, #0
 8006782:	607b      	str	r3, [r7, #4]
 8006784:	4b22      	ldr	r3, [pc, #136]	@ (8006810 <SystemClock_Config+0xd0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a21      	ldr	r2, [pc, #132]	@ (8006810 <SystemClock_Config+0xd0>)
 800678a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	4b1f      	ldr	r3, [pc, #124]	@ (8006810 <SystemClock_Config+0xd0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006798:	607b      	str	r3, [r7, #4]
 800679a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800679c:	2301      	movs	r3, #1
 800679e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80067a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80067a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80067a6:	2302      	movs	r3, #2
 80067a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80067aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80067ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80067b0:	2304      	movs	r3, #4
 80067b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80067b4:	23a8      	movs	r3, #168	@ 0xa8
 80067b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80067b8:	2302      	movs	r3, #2
 80067ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80067bc:	2304      	movs	r3, #4
 80067be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80067c0:	f107 0320 	add.w	r3, r7, #32
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 fe6b 	bl	80084a0 <HAL_RCC_OscConfig>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80067d0:	f000 fde6 	bl	80073a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80067d4:	230f      	movs	r3, #15
 80067d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80067d8:	2302      	movs	r3, #2
 80067da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80067e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80067e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80067e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80067ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80067ec:	f107 030c 	add.w	r3, r7, #12
 80067f0:	2105      	movs	r1, #5
 80067f2:	4618      	mov	r0, r3
 80067f4:	f002 f8cc 	bl	8008990 <HAL_RCC_ClockConfig>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80067fe:	f000 fdcf 	bl	80073a0 <Error_Handler>
  }
}
 8006802:	bf00      	nop
 8006804:	3750      	adds	r7, #80	@ 0x50
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40023800 	.word	0x40023800
 8006810:	40007000 	.word	0x40007000

08006814 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006818:	4b17      	ldr	r3, [pc, #92]	@ (8006878 <MX_SPI2_Init+0x64>)
 800681a:	4a18      	ldr	r2, [pc, #96]	@ (800687c <MX_SPI2_Init+0x68>)
 800681c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800681e:	4b16      	ldr	r3, [pc, #88]	@ (8006878 <MX_SPI2_Init+0x64>)
 8006820:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006824:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006826:	4b14      	ldr	r3, [pc, #80]	@ (8006878 <MX_SPI2_Init+0x64>)
 8006828:	2200      	movs	r2, #0
 800682a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800682c:	4b12      	ldr	r3, [pc, #72]	@ (8006878 <MX_SPI2_Init+0x64>)
 800682e:	2200      	movs	r2, #0
 8006830:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006832:	4b11      	ldr	r3, [pc, #68]	@ (8006878 <MX_SPI2_Init+0x64>)
 8006834:	2200      	movs	r2, #0
 8006836:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006838:	4b0f      	ldr	r3, [pc, #60]	@ (8006878 <MX_SPI2_Init+0x64>)
 800683a:	2200      	movs	r2, #0
 800683c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800683e:	4b0e      	ldr	r3, [pc, #56]	@ (8006878 <MX_SPI2_Init+0x64>)
 8006840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006844:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006846:	4b0c      	ldr	r3, [pc, #48]	@ (8006878 <MX_SPI2_Init+0x64>)
 8006848:	2228      	movs	r2, #40	@ 0x28
 800684a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800684c:	4b0a      	ldr	r3, [pc, #40]	@ (8006878 <MX_SPI2_Init+0x64>)
 800684e:	2200      	movs	r2, #0
 8006850:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006852:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <MX_SPI2_Init+0x64>)
 8006854:	2200      	movs	r2, #0
 8006856:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006858:	4b07      	ldr	r3, [pc, #28]	@ (8006878 <MX_SPI2_Init+0x64>)
 800685a:	2200      	movs	r2, #0
 800685c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800685e:	4b06      	ldr	r3, [pc, #24]	@ (8006878 <MX_SPI2_Init+0x64>)
 8006860:	220a      	movs	r2, #10
 8006862:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006864:	4804      	ldr	r0, [pc, #16]	@ (8006878 <MX_SPI2_Init+0x64>)
 8006866:	f002 fab3 	bl	8008dd0 <HAL_SPI_Init>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006870:	f000 fd96 	bl	80073a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006874:	bf00      	nop
 8006876:	bd80      	pop	{r7, pc}
 8006878:	20003354 	.word	0x20003354
 800687c:	40003800 	.word	0x40003800

08006880 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006886:	f107 0308 	add.w	r3, r7, #8
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	605a      	str	r2, [r3, #4]
 8006890:	609a      	str	r2, [r3, #8]
 8006892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006894:	463b      	mov	r3, r7
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800689c:	4b1e      	ldr	r3, [pc, #120]	@ (8006918 <MX_TIM2_Init+0x98>)
 800689e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80068a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8499;
 80068a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006918 <MX_TIM2_Init+0x98>)
 80068a6:	f242 1233 	movw	r2, #8499	@ 0x2133
 80068aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006918 <MX_TIM2_Init+0x98>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80068b2:	4b19      	ldr	r3, [pc, #100]	@ (8006918 <MX_TIM2_Init+0x98>)
 80068b4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80068b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068ba:	4b17      	ldr	r3, [pc, #92]	@ (8006918 <MX_TIM2_Init+0x98>)
 80068bc:	2200      	movs	r2, #0
 80068be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068c0:	4b15      	ldr	r3, [pc, #84]	@ (8006918 <MX_TIM2_Init+0x98>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80068c6:	4814      	ldr	r0, [pc, #80]	@ (8006918 <MX_TIM2_Init+0x98>)
 80068c8:	f002 fdd8 	bl	800947c <HAL_TIM_Base_Init>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80068d2:	f000 fd65 	bl	80073a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80068da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80068dc:	f107 0308 	add.w	r3, r7, #8
 80068e0:	4619      	mov	r1, r3
 80068e2:	480d      	ldr	r0, [pc, #52]	@ (8006918 <MX_TIM2_Init+0x98>)
 80068e4:	f002 ff7a 	bl	80097dc <HAL_TIM_ConfigClockSource>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80068ee:	f000 fd57 	bl	80073a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068f2:	2300      	movs	r3, #0
 80068f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068f6:	2300      	movs	r3, #0
 80068f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80068fa:	463b      	mov	r3, r7
 80068fc:	4619      	mov	r1, r3
 80068fe:	4806      	ldr	r0, [pc, #24]	@ (8006918 <MX_TIM2_Init+0x98>)
 8006900:	f003 f9a2 	bl	8009c48 <HAL_TIMEx_MasterConfigSynchronization>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800690a:	f000 fd49 	bl	80073a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800690e:	bf00      	nop
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	200033ac 	.word	0x200033ac

0800691c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006922:	f107 0308 	add.w	r3, r7, #8
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	605a      	str	r2, [r3, #4]
 800692c:	609a      	str	r2, [r3, #8]
 800692e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006930:	463b      	mov	r3, r7
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006938:	4b1d      	ldr	r3, [pc, #116]	@ (80069b0 <MX_TIM3_Init+0x94>)
 800693a:	4a1e      	ldr	r2, [pc, #120]	@ (80069b4 <MX_TIM3_Init+0x98>)
 800693c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800693e:	4b1c      	ldr	r3, [pc, #112]	@ (80069b0 <MX_TIM3_Init+0x94>)
 8006940:	2200      	movs	r2, #0
 8006942:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006944:	4b1a      	ldr	r3, [pc, #104]	@ (80069b0 <MX_TIM3_Init+0x94>)
 8006946:	2200      	movs	r2, #0
 8006948:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800694a:	4b19      	ldr	r3, [pc, #100]	@ (80069b0 <MX_TIM3_Init+0x94>)
 800694c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006950:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006952:	4b17      	ldr	r3, [pc, #92]	@ (80069b0 <MX_TIM3_Init+0x94>)
 8006954:	2200      	movs	r2, #0
 8006956:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006958:	4b15      	ldr	r3, [pc, #84]	@ (80069b0 <MX_TIM3_Init+0x94>)
 800695a:	2200      	movs	r2, #0
 800695c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800695e:	4814      	ldr	r0, [pc, #80]	@ (80069b0 <MX_TIM3_Init+0x94>)
 8006960:	f002 fd8c 	bl	800947c <HAL_TIM_Base_Init>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800696a:	f000 fd19 	bl	80073a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800696e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006972:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006974:	f107 0308 	add.w	r3, r7, #8
 8006978:	4619      	mov	r1, r3
 800697a:	480d      	ldr	r0, [pc, #52]	@ (80069b0 <MX_TIM3_Init+0x94>)
 800697c:	f002 ff2e 	bl	80097dc <HAL_TIM_ConfigClockSource>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8006986:	f000 fd0b 	bl	80073a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800698a:	2300      	movs	r3, #0
 800698c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800698e:	2300      	movs	r3, #0
 8006990:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006992:	463b      	mov	r3, r7
 8006994:	4619      	mov	r1, r3
 8006996:	4806      	ldr	r0, [pc, #24]	@ (80069b0 <MX_TIM3_Init+0x94>)
 8006998:	f003 f956 	bl	8009c48 <HAL_TIMEx_MasterConfigSynchronization>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80069a2:	f000 fcfd 	bl	80073a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80069a6:	bf00      	nop
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	200033f4 	.word	0x200033f4
 80069b4:	40000400 	.word	0x40000400

080069b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80069bc:	4b11      	ldr	r3, [pc, #68]	@ (8006a04 <MX_USART1_UART_Init+0x4c>)
 80069be:	4a12      	ldr	r2, [pc, #72]	@ (8006a08 <MX_USART1_UART_Init+0x50>)
 80069c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80069c2:	4b10      	ldr	r3, [pc, #64]	@ (8006a04 <MX_USART1_UART_Init+0x4c>)
 80069c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80069c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80069ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006a04 <MX_USART1_UART_Init+0x4c>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80069d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006a04 <MX_USART1_UART_Init+0x4c>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80069d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <MX_USART1_UART_Init+0x4c>)
 80069d8:	2200      	movs	r2, #0
 80069da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80069dc:	4b09      	ldr	r3, [pc, #36]	@ (8006a04 <MX_USART1_UART_Init+0x4c>)
 80069de:	220c      	movs	r2, #12
 80069e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069e2:	4b08      	ldr	r3, [pc, #32]	@ (8006a04 <MX_USART1_UART_Init+0x4c>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80069e8:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <MX_USART1_UART_Init+0x4c>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80069ee:	4805      	ldr	r0, [pc, #20]	@ (8006a04 <MX_USART1_UART_Init+0x4c>)
 80069f0:	f003 f9ba 	bl	8009d68 <HAL_UART_Init>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80069fa:	f000 fcd1 	bl	80073a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80069fe:	bf00      	nop
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	2000343c 	.word	0x2000343c
 8006a08:	40011000 	.word	0x40011000

08006a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08c      	sub	sp, #48	@ 0x30
 8006a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a12:	f107 031c 	add.w	r3, r7, #28
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	605a      	str	r2, [r3, #4]
 8006a1c:	609a      	str	r2, [r3, #8]
 8006a1e:	60da      	str	r2, [r3, #12]
 8006a20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a22:	2300      	movs	r3, #0
 8006a24:	61bb      	str	r3, [r7, #24]
 8006a26:	4b3b      	ldr	r3, [pc, #236]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2a:	4a3a      	ldr	r2, [pc, #232]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a32:	4b38      	ldr	r3, [pc, #224]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	4b34      	ldr	r3, [pc, #208]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a46:	4a33      	ldr	r2, [pc, #204]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a48:	f043 0304 	orr.w	r3, r3, #4
 8006a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a4e:	4b31      	ldr	r3, [pc, #196]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a62:	4a2c      	ldr	r2, [pc, #176]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a64:	f043 0302 	orr.w	r3, r3, #2
 8006a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	4b26      	ldr	r3, [pc, #152]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7e:	4a25      	ldr	r2, [pc, #148]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a80:	f043 0310 	orr.w	r3, r3, #16
 8006a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a86:	4b23      	ldr	r3, [pc, #140]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8a:	f003 0310 	and.w	r3, r3, #16
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a92:	2300      	movs	r3, #0
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	4b1f      	ldr	r3, [pc, #124]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006a9c:	f043 0308 	orr.w	r3, r3, #8
 8006aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa6:	f003 0308 	and.w	r3, r3, #8
 8006aaa:	60bb      	str	r3, [r7, #8]
 8006aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aae:	2300      	movs	r3, #0
 8006ab0:	607b      	str	r3, [r7, #4]
 8006ab2:	4b18      	ldr	r3, [pc, #96]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab6:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006ab8:	f043 0301 	orr.w	r3, r3, #1
 8006abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006abe:	4b15      	ldr	r3, [pc, #84]	@ (8006b14 <MX_GPIO_Init+0x108>)
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	607b      	str	r3, [r7, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);
 8006aca:	2200      	movs	r2, #0
 8006acc:	f241 0102 	movw	r1, #4098	@ 0x1002
 8006ad0:	4811      	ldr	r0, [pc, #68]	@ (8006b18 <MX_GPIO_Init+0x10c>)
 8006ad2:	f001 fccb 	bl	800846c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TC_PEN_Pin */
  GPIO_InitStruct.Pin = TC_PEN_Pin;
 8006ad6:	2320      	movs	r3, #32
 8006ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ada:	2300      	movs	r3, #0
 8006adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TC_PEN_GPIO_Port, &GPIO_InitStruct);
 8006ae2:	f107 031c 	add.w	r3, r7, #28
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	480c      	ldr	r0, [pc, #48]	@ (8006b1c <MX_GPIO_Init+0x110>)
 8006aea:	f001 fb0b 	bl	8008104 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|TOUCH_CS_Pin;
 8006aee:	f241 0302 	movw	r3, #4098	@ 0x1002
 8006af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006af4:	2301      	movs	r3, #1
 8006af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006afc:	2300      	movs	r3, #0
 8006afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b00:	f107 031c 	add.w	r3, r7, #28
 8006b04:	4619      	mov	r1, r3
 8006b06:	4804      	ldr	r0, [pc, #16]	@ (8006b18 <MX_GPIO_Init+0x10c>)
 8006b08:	f001 fafc 	bl	8008104 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006b0c:	bf00      	nop
 8006b0e:	3730      	adds	r7, #48	@ 0x30
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40023800 	.word	0x40023800
 8006b18:	40020400 	.word	0x40020400
 8006b1c:	40020800 	.word	0x40020800

08006b20 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8006b26:	1d3b      	adds	r3, r7, #4
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	605a      	str	r2, [r3, #4]
 8006b2e:	609a      	str	r2, [r3, #8]
 8006b30:	60da      	str	r2, [r3, #12]
 8006b32:	611a      	str	r2, [r3, #16]
 8006b34:	615a      	str	r2, [r3, #20]
 8006b36:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8006b38:	4b27      	ldr	r3, [pc, #156]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b3a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8006b3e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8006b40:	4b25      	ldr	r3, [pc, #148]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b42:	4a26      	ldr	r2, [pc, #152]	@ (8006bdc <MX_FSMC_Init+0xbc>)
 8006b44:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8006b46:	4b24      	ldr	r3, [pc, #144]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006b4c:	4b22      	ldr	r3, [pc, #136]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8006b52:	4b21      	ldr	r3, [pc, #132]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8006b58:	4b1f      	ldr	r3, [pc, #124]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8006b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8006b64:	4b1c      	ldr	r3, [pc, #112]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8006b70:	4b19      	ldr	r3, [pc, #100]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8006b76:	4b18      	ldr	r3, [pc, #96]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006b7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8006b7e:	4b16      	ldr	r3, [pc, #88]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8006b84:	4b14      	ldr	r3, [pc, #80]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8006b8a:	4b13      	ldr	r3, [pc, #76]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8006b90:	4b11      	ldr	r3, [pc, #68]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8006b96:	4b10      	ldr	r3, [pc, #64]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8006ba0:	230f      	movs	r3, #15
 8006ba2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8006ba4:	2305      	movs	r3, #5
 8006ba6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8006bac:	2310      	movs	r3, #16
 8006bae:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8006bb0:	2311      	movs	r3, #17
 8006bb2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8006bb8:	1d3b      	adds	r3, r7, #4
 8006bba:	2200      	movs	r2, #0
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4806      	ldr	r0, [pc, #24]	@ (8006bd8 <MX_FSMC_Init+0xb8>)
 8006bc0:	f002 fc14 	bl	80093ec <HAL_SRAM_Init>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8006bca:	f000 fbe9 	bl	80073a0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8006bce:	bf00      	nop
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20003484 	.word	0x20003484
 8006bdc:	a0000104 	.word	0xa0000104

08006be0 <HAL_TIM_PeriodElapsedCallback>:
// Hàm xử lý ngắt của bộ định th�?i


// Hàm callback khi ngắt xảy ra
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf0:	d120      	bne.n	8006c34 <HAL_TIM_PeriodElapsedCallback+0x54>
    {
    	count++;
 8006bf2:	4b13      	ldr	r3, [pc, #76]	@ (8006c40 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	4a11      	ldr	r2, [pc, #68]	@ (8006c40 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006bfa:	6013      	str	r3, [r2, #0]
    	if (count % 5 == 0){
 8006bfc:	4b10      	ldr	r3, [pc, #64]	@ (8006c40 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006bfe:	6819      	ldr	r1, [r3, #0]
 8006c00:	4b10      	ldr	r3, [pc, #64]	@ (8006c44 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8006c02:	fb83 2301 	smull	r2, r3, r3, r1
 8006c06:	105a      	asrs	r2, r3, #1
 8006c08:	17cb      	asrs	r3, r1, #31
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	1aca      	subs	r2, r1, r3
 8006c14:	2a00      	cmp	r2, #0
 8006c16:	d102      	bne.n	8006c1e <HAL_TIM_PeriodElapsedCallback+0x3e>
        	readDHT = true; // �?ặt c�? để báo hiệu cần đ�?c dữ liệu
 8006c18:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
		}
    	if (count == 300){
 8006c1e:	4b08      	ldr	r3, [pc, #32]	@ (8006c40 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006c26:	d105      	bne.n	8006c34 <HAL_TIM_PeriodElapsedCallback+0x54>
    		//call API
    		Recall = true;
 8006c28:	4b08      	ldr	r3, [pc, #32]	@ (8006c4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	701a      	strb	r2, [r3, #0]
    		count = 0;
 8006c2e:	4b04      	ldr	r3, [pc, #16]	@ (8006c40 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]
    	}
    }
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	200034d4 	.word	0x200034d4
 8006c44:	66666667 	.word	0x66666667
 8006c48:	200034d8 	.word	0x200034d8
 8006c4c:	200034d9 	.word	0x200034d9

08006c50 <Send_AT_Command>:
void Send_AT_Command(UART_HandleTypeDef *huart, const char *command, uint32_t timeout) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
    // Gửi lệnh qua UART

    HAL_UART_Transmit(huart, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8006c5c:	68b8      	ldr	r0, [r7, #8]
 8006c5e:	f7f9 fac1 	bl	80001e4 <strlen>
 8006c62:	4603      	mov	r3, r0
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f003 f8cb 	bl	8009e08 <HAL_UART_Transmit>

    // Ch�? phản hồi từ ESP
    memset(uart_rx_buffer, 0, UART_BUFFER_SIZE); // Xóa buffer
 8006c72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c76:	2100      	movs	r1, #0
 8006c78:	480f      	ldr	r0, [pc, #60]	@ (8006cb8 <Send_AT_Command+0x68>)
 8006c7a:	f005 fac3 	bl	800c204 <memset>
    HAL_UART_Receive(huart, uart_rx_buffer, UART_BUFFER_SIZE, timeout);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c84:	490c      	ldr	r1, [pc, #48]	@ (8006cb8 <Send_AT_Command+0x68>)
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f003 f949 	bl	8009f1e <HAL_UART_Receive>

    // Hiển thị phản hồi lên màn hình
    lcdSetCursor(5,250);
 8006c8c:	21fa      	movs	r1, #250	@ 0xfa
 8006c8e:	2005      	movs	r0, #5
 8006c90:	f7fe ff10 	bl	8005ab4 <lcdSetCursor>
    Screen0();
 8006c94:	f7fd fafe 	bl	8004294 <Screen0>
    lcdSetTextColor(COLOR_BLACK, COLOR_THEME_SKYBLUE_BASE);
 8006c98:	f249 517f 	movw	r1, #38271	@ 0x957f
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f7fe fe89 	bl	80059b4 <lcdSetTextColor>
    lcdSetTextFont(&Font16);
 8006ca2:	4806      	ldr	r0, [pc, #24]	@ (8006cbc <Send_AT_Command+0x6c>)
 8006ca4:	f7fe fe76 	bl	8005994 <lcdSetTextFont>
    lcdPrintf("ESP: %s\n", uart_rx_buffer);
 8006ca8:	4903      	ldr	r1, [pc, #12]	@ (8006cb8 <Send_AT_Command+0x68>)
 8006caa:	4805      	ldr	r0, [pc, #20]	@ (8006cc0 <Send_AT_Command+0x70>)
 8006cac:	f7fe fde6 	bl	800587c <lcdPrintf>
}
 8006cb0:	bf00      	nop
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	20002b54 	.word	0x20002b54
 8006cbc:	20000014 	.word	0x20000014
 8006cc0:	0800ee30 	.word	0x0800ee30

08006cc4 <Send_AT_Commands>:

void Send_AT_Commands(UART_HandleTypeDef *huart) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
    // Gửi từng lệnh AT và xử lý phản hồi

    Send_AT_Command(huart, "AT\r\n", 3000 );
 8006ccc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006cd0:	492a      	ldr	r1, [pc, #168]	@ (8006d7c <Send_AT_Commands+0xb8>)
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff ffbc 	bl	8006c50 <Send_AT_Command>
    Send_AT_Command(huart, "AT+CWMODE=3\r\n", 3000 );
 8006cd8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006cdc:	4928      	ldr	r1, [pc, #160]	@ (8006d80 <Send_AT_Commands+0xbc>)
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7ff ffb6 	bl	8006c50 <Send_AT_Command>
    Send_AT_Command(huart, "AT+CWJAP=\"RedmiTurbo3\",\"88888888\"\r\n", 9000 );
 8006ce4:	f242 3228 	movw	r2, #9000	@ 0x2328
 8006ce8:	4926      	ldr	r1, [pc, #152]	@ (8006d84 <Send_AT_Commands+0xc0>)
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff ffb0 	bl	8006c50 <Send_AT_Command>
    Send_AT_Command(huart, "AT+CIPSTART=\"TCP\",\"api.open-meteo.com\",80\r\n", 3000 );
 8006cf0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006cf4:	4924      	ldr	r1, [pc, #144]	@ (8006d88 <Send_AT_Commands+0xc4>)
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff ffaa 	bl	8006c50 <Send_AT_Command>
    Send_AT_Command(huart, "AT+CIPSEND=279\r\n", 3000);
 8006cfc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006d00:	4922      	ldr	r1, [pc, #136]	@ (8006d8c <Send_AT_Commands+0xc8>)
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff ffa4 	bl	8006c50 <Send_AT_Command>

    // Gửi yêu cầu GET cuối cùng
    if (choice == 1){
 8006d08:	4b21      	ldr	r3, [pc, #132]	@ (8006d90 <Send_AT_Commands+0xcc>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d106      	bne.n	8006d1e <Send_AT_Commands+0x5a>
    	Send_AT_Command(huart, ATCommand1, 5000);
 8006d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d14:	491f      	ldr	r1, [pc, #124]	@ (8006d94 <Send_AT_Commands+0xd0>)
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff ff9a 	bl	8006c50 <Send_AT_Command>
	}
    else if(choice == 5){
		Send_AT_Command(huart, ATCommand5, 5000);
	}

}
 8006d1c:	e02a      	b.n	8006d74 <Send_AT_Commands+0xb0>
    else if(choice == 2){
 8006d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006d90 <Send_AT_Commands+0xcc>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d106      	bne.n	8006d34 <Send_AT_Commands+0x70>
    	Send_AT_Command(huart, ATCommand2, 5000);
 8006d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d2a:	491b      	ldr	r1, [pc, #108]	@ (8006d98 <Send_AT_Commands+0xd4>)
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff ff8f 	bl	8006c50 <Send_AT_Command>
}
 8006d32:	e01f      	b.n	8006d74 <Send_AT_Commands+0xb0>
    else if(choice == 3){
 8006d34:	4b16      	ldr	r3, [pc, #88]	@ (8006d90 <Send_AT_Commands+0xcc>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d106      	bne.n	8006d4a <Send_AT_Commands+0x86>
		Send_AT_Command(huart, ATCommand3, 5000);
 8006d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d40:	4916      	ldr	r1, [pc, #88]	@ (8006d9c <Send_AT_Commands+0xd8>)
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff ff84 	bl	8006c50 <Send_AT_Command>
}
 8006d48:	e014      	b.n	8006d74 <Send_AT_Commands+0xb0>
    else if(choice == 4){
 8006d4a:	4b11      	ldr	r3, [pc, #68]	@ (8006d90 <Send_AT_Commands+0xcc>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d106      	bne.n	8006d60 <Send_AT_Commands+0x9c>
		Send_AT_Command(huart, ATCommand4, 5000);
 8006d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d56:	4912      	ldr	r1, [pc, #72]	@ (8006da0 <Send_AT_Commands+0xdc>)
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff ff79 	bl	8006c50 <Send_AT_Command>
}
 8006d5e:	e009      	b.n	8006d74 <Send_AT_Commands+0xb0>
    else if(choice == 5){
 8006d60:	4b0b      	ldr	r3, [pc, #44]	@ (8006d90 <Send_AT_Commands+0xcc>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b05      	cmp	r3, #5
 8006d66:	d105      	bne.n	8006d74 <Send_AT_Commands+0xb0>
		Send_AT_Command(huart, ATCommand5, 5000);
 8006d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d6c:	490d      	ldr	r1, [pc, #52]	@ (8006da4 <Send_AT_Commands+0xe0>)
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff ff6e 	bl	8006c50 <Send_AT_Command>
}
 8006d74:	bf00      	nop
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	0800ee3c 	.word	0x0800ee3c
 8006d80:	0800ee44 	.word	0x0800ee44
 8006d84:	0800ee54 	.word	0x0800ee54
 8006d88:	0800ee78 	.word	0x0800ee78
 8006d8c:	0800eea4 	.word	0x0800eea4
 8006d90:	2000004c 	.word	0x2000004c
 8006d94:	20000054 	.word	0x20000054
 8006d98:	20000854 	.word	0x20000854
 8006d9c:	20001054 	.word	0x20001054
 8006da0:	20001854 	.word	0x20001854
 8006da4:	20002054 	.word	0x20002054

08006da8 <Resend_AT_Commands>:
void Resend_AT_Commands(UART_HandleTypeDef *huart){
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
	Send_AT_Command(huart, "AT+CIPSTART=\"TCP\",\"api.open-meteo.com\",80\r\n", 3000 );
 8006db0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006db4:	4921      	ldr	r1, [pc, #132]	@ (8006e3c <Resend_AT_Commands+0x94>)
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff ff4a 	bl	8006c50 <Send_AT_Command>
	Send_AT_Command(huart, "AT+CIPSEND=279\r\n", 3000);
 8006dbc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006dc0:	491f      	ldr	r1, [pc, #124]	@ (8006e40 <Resend_AT_Commands+0x98>)
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7ff ff44 	bl	8006c50 <Send_AT_Command>

	// Gửi yêu cầu GET cuối cùng
	if (choice == 1){
 8006dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8006e44 <Resend_AT_Commands+0x9c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d106      	bne.n	8006dde <Resend_AT_Commands+0x36>
		Send_AT_Command(huart, ATCommand1, 5000);
 8006dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dd4:	491c      	ldr	r1, [pc, #112]	@ (8006e48 <Resend_AT_Commands+0xa0>)
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff ff3a 	bl	8006c50 <Send_AT_Command>
		Send_AT_Command(huart, ATCommand4, 5000);
	}
	else if(choice == 5){
		Send_AT_Command(huart, ATCommand5, 5000);
	}
}
 8006ddc:	e02a      	b.n	8006e34 <Resend_AT_Commands+0x8c>
	else if(choice == 2){
 8006dde:	4b19      	ldr	r3, [pc, #100]	@ (8006e44 <Resend_AT_Commands+0x9c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d106      	bne.n	8006df4 <Resend_AT_Commands+0x4c>
		Send_AT_Command(huart, ATCommand2, 5000);
 8006de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dea:	4918      	ldr	r1, [pc, #96]	@ (8006e4c <Resend_AT_Commands+0xa4>)
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff ff2f 	bl	8006c50 <Send_AT_Command>
}
 8006df2:	e01f      	b.n	8006e34 <Resend_AT_Commands+0x8c>
	else if(choice == 3){
 8006df4:	4b13      	ldr	r3, [pc, #76]	@ (8006e44 <Resend_AT_Commands+0x9c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d106      	bne.n	8006e0a <Resend_AT_Commands+0x62>
		Send_AT_Command(huart, ATCommand3, 5000);
 8006dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e00:	4913      	ldr	r1, [pc, #76]	@ (8006e50 <Resend_AT_Commands+0xa8>)
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff ff24 	bl	8006c50 <Send_AT_Command>
}
 8006e08:	e014      	b.n	8006e34 <Resend_AT_Commands+0x8c>
	else if(choice == 4){
 8006e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e44 <Resend_AT_Commands+0x9c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d106      	bne.n	8006e20 <Resend_AT_Commands+0x78>
		Send_AT_Command(huart, ATCommand4, 5000);
 8006e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e16:	490f      	ldr	r1, [pc, #60]	@ (8006e54 <Resend_AT_Commands+0xac>)
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff ff19 	bl	8006c50 <Send_AT_Command>
}
 8006e1e:	e009      	b.n	8006e34 <Resend_AT_Commands+0x8c>
	else if(choice == 5){
 8006e20:	4b08      	ldr	r3, [pc, #32]	@ (8006e44 <Resend_AT_Commands+0x9c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b05      	cmp	r3, #5
 8006e26:	d105      	bne.n	8006e34 <Resend_AT_Commands+0x8c>
		Send_AT_Command(huart, ATCommand5, 5000);
 8006e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e2c:	490a      	ldr	r1, [pc, #40]	@ (8006e58 <Resend_AT_Commands+0xb0>)
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff ff0e 	bl	8006c50 <Send_AT_Command>
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	0800ee78 	.word	0x0800ee78
 8006e40:	0800eea4 	.word	0x0800eea4
 8006e44:	2000004c 	.word	0x2000004c
 8006e48:	20000054 	.word	0x20000054
 8006e4c:	20000854 	.word	0x20000854
 8006e50:	20001054 	.word	0x20001054
 8006e54:	20001854 	.word	0x20001854
 8006e58:	20002054 	.word	0x20002054

08006e5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) { // Kiểm tra UART đúng
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a06      	ldr	r2, [pc, #24]	@ (8006e84 <HAL_UART_RxCpltCallback+0x28>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d105      	bne.n	8006e7a <HAL_UART_RxCpltCallback+0x1e>
        // Xử lý dữ liệu nhận được ở đây

        // Tiếp tục nhận dữ liệu
        HAL_UART_Receive_IT(huart, uart_rx_buffer, UART_BUFFER_SIZE);
 8006e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e72:	4905      	ldr	r1, [pc, #20]	@ (8006e88 <HAL_UART_RxCpltCallback+0x2c>)
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f003 f8e9 	bl	800a04c <HAL_UART_Receive_IT>
    }
}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40011000 	.word	0x40011000
 8006e88:	20002b54 	.word	0x20002b54

08006e8c <extractJsonObject>:
char* extractJsonObject(const char *jsonString) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
    const char *start = strstr(jsonString, "\"current\":{\"t");
 8006e94:	491c      	ldr	r1, [pc, #112]	@ (8006f08 <extractJsonObject+0x7c>)
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f005 fa0a 	bl	800c2b0 <strstr>
 8006e9c:	6178      	str	r0, [r7, #20]
    const char *end = strrchr(jsonString, '}');
 8006e9e:	217d      	movs	r1, #125	@ 0x7d
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f005 f9ef 	bl	800c284 <strrchr>
 8006ea6:	6138      	str	r0, [r7, #16]
    if (start && end && end > start) {
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d027      	beq.n	8006efe <extractJsonObject+0x72>
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d024      	beq.n	8006efe <extractJsonObject+0x72>
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d920      	bls.n	8006efe <extractJsonObject+0x72>
        size_t length = end - start + 1;
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]
        char *result = (char *)malloc(length + 2); // Allocate extra space for the '{' character
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3302      	adds	r3, #2
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f004 f912 	bl	800b0f4 <malloc>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	60bb      	str	r3, [r7, #8]
        if (result) {
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d011      	beq.n	8006efe <extractJsonObject+0x72>
            result[0] = '{'; // Add '{' at the beginning
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	227b      	movs	r2, #123	@ 0x7b
 8006ede:	701a      	strb	r2, [r3, #0]
            strncpy(result + 1, start, length); // Copy the rest of the string
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	6979      	ldr	r1, [r7, #20]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f005 f9b8 	bl	800c25e <strncpy>
            result[length + 1] = '\0'; // Null-terminate the string
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
            return result;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	e000      	b.n	8006f00 <extractJsonObject+0x74>
        }
    }
    return NULL;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	0800eeb8 	.word	0x0800eeb8

08006f0c <processWeather>:


void processWeather( char *jsonString) {
 8006f0c:	b590      	push	{r4, r7, lr}
 8006f0e:	b0a3      	sub	sp, #140	@ 0x8c
 8006f10:	af04      	add	r7, sp, #16
 8006f12:	6078      	str	r0, [r7, #4]

	jsonString = extractJsonObject(jsonString);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff ffb9 	bl	8006e8c <extractJsonObject>
 8006f1a:	6078      	str	r0, [r7, #4]

    cJSON *json = cJSON_Parse(jsonString);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7fa ffab 	bl	8001e78 <cJSON_Parse>
 8006f22:	6738      	str	r0, [r7, #112]	@ 0x70

    if (json == NULL) {
 8006f24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10c      	bne.n	8006f44 <processWeather+0x38>
        lcdSetCursor(10, 10);
 8006f2a:	210a      	movs	r1, #10
 8006f2c:	200a      	movs	r0, #10
 8006f2e:	f7fe fdc1 	bl	8005ab4 <lcdSetCursor>
        lcdSetTextColor(COLOR_RED, COLOR_BLACK);
 8006f32:	2100      	movs	r1, #0
 8006f34:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8006f38:	f7fe fd3c 	bl	80059b4 <lcdSetTextColor>
        lcdPrintf("Error parsing JSON!");
 8006f3c:	4873      	ldr	r0, [pc, #460]	@ (800710c <processWeather+0x200>)
 8006f3e:	f7fe fc9d 	bl	800587c <lcdPrintf>
        return;
 8006f42:	e209      	b.n	8007358 <processWeather+0x44c>
    }

    // Get daily forecast information
    cJSON *daily = cJSON_GetObjectItem(json, "daily");
 8006f44:	4972      	ldr	r1, [pc, #456]	@ (8007110 <processWeather+0x204>)
 8006f46:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006f48:	f7fb fb00 	bl	800254c <cJSON_GetObjectItem>
 8006f4c:	66f8      	str	r0, [r7, #108]	@ 0x6c
    cJSON *current = cJSON_GetObjectItem(json, "current");
 8006f4e:	4971      	ldr	r1, [pc, #452]	@ (8007114 <processWeather+0x208>)
 8006f50:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006f52:	f7fb fafb 	bl	800254c <cJSON_GetObjectItem>
 8006f56:	66b8      	str	r0, [r7, #104]	@ 0x68
    if (!daily) {
 8006f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10f      	bne.n	8006f7e <processWeather+0x72>
        lcdSetCursor(10, 10);
 8006f5e:	210a      	movs	r1, #10
 8006f60:	200a      	movs	r0, #10
 8006f62:	f7fe fda7 	bl	8005ab4 <lcdSetCursor>
        lcdSetTextColor(COLOR_RED, COLOR_BLACK);
 8006f66:	2100      	movs	r1, #0
 8006f68:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8006f6c:	f7fe fd22 	bl	80059b4 <lcdSetTextColor>
        lcdPrintf("Error: Missing 'daily' object!");
 8006f70:	4869      	ldr	r0, [pc, #420]	@ (8007118 <processWeather+0x20c>)
 8006f72:	f7fe fc83 	bl	800587c <lcdPrintf>
        cJSON_Delete(json);
 8006f76:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006f78:	f7fa fa9e 	bl	80014b8 <cJSON_Delete>
        return;
 8006f7c:	e1ec      	b.n	8007358 <processWeather+0x44c>
    }

    cJSON *dates = cJSON_GetObjectItem(daily, "time");
 8006f7e:	4967      	ldr	r1, [pc, #412]	@ (800711c <processWeather+0x210>)
 8006f80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f82:	f7fb fae3 	bl	800254c <cJSON_GetObjectItem>
 8006f86:	6678      	str	r0, [r7, #100]	@ 0x64
    cJSON *temp_max_json = cJSON_GetObjectItem(daily, "temperature_2m_max");
 8006f88:	4965      	ldr	r1, [pc, #404]	@ (8007120 <processWeather+0x214>)
 8006f8a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f8c:	f7fb fade 	bl	800254c <cJSON_GetObjectItem>
 8006f90:	6638      	str	r0, [r7, #96]	@ 0x60
    cJSON *temp_min_json = cJSON_GetObjectItem(daily, "temperature_2m_min");
 8006f92:	4964      	ldr	r1, [pc, #400]	@ (8007124 <processWeather+0x218>)
 8006f94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f96:	f7fb fad9 	bl	800254c <cJSON_GetObjectItem>
 8006f9a:	65f8      	str	r0, [r7, #92]	@ 0x5c
    cJSON *weather_code = cJSON_GetObjectItem(daily, "weather_code");
 8006f9c:	4962      	ldr	r1, [pc, #392]	@ (8007128 <processWeather+0x21c>)
 8006f9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006fa0:	f7fb fad4 	bl	800254c <cJSON_GetObjectItem>
 8006fa4:	65b8      	str	r0, [r7, #88]	@ 0x58
    cJSON *wind_speed_json = cJSON_GetObjectItem(daily, "wind_speed_10m_max");
 8006fa6:	4961      	ldr	r1, [pc, #388]	@ (800712c <processWeather+0x220>)
 8006fa8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006faa:	f7fb facf 	bl	800254c <cJSON_GetObjectItem>
 8006fae:	6578      	str	r0, [r7, #84]	@ 0x54

    //"time":"2024-12-24T17:30","interval":900,"temperature_2m":26.0,"relative_humidity_2m":65,"weather_code":3,"cloud_cover":98};



    char * Tmp =  cJSON_GetObjectItem(current , "time")->valuestring;
 8006fb0:	495a      	ldr	r1, [pc, #360]	@ (800711c <processWeather+0x210>)
 8006fb2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8006fb4:	f7fb faca 	bl	800254c <cJSON_GetObjectItem>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	653b      	str	r3, [r7, #80]	@ 0x50
    int year, month, day, hour , minute;
	char  tmp[17];
	sscanf(Tmp, "%d-%d-%dT%d:%d", &year, &month, &day , &hour ,&minute);
 8006fbe:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8006fc2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8006fc6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4955      	ldr	r1, [pc, #340]	@ (8007130 <processWeather+0x224>)
 8006fdc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006fde:	f005 f881 	bl	800c0e4 <siscanf>
	snprintf(tmp, sizeof(tmp), "%02d-%02d-%02d", day, month , year);
 8006fe2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fe8:	f107 0020 	add.w	r0, r7, #32
 8006fec:	9201      	str	r2, [sp, #4]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4a50      	ldr	r2, [pc, #320]	@ (8007134 <processWeather+0x228>)
 8006ff4:	2111      	movs	r1, #17
 8006ff6:	f005 f841 	bl	800c07c <sniprintf>
	strncpy(current_date, tmp, sizeof(current_date) - 1);
 8006ffa:	f107 0320 	add.w	r3, r7, #32
 8006ffe:	220a      	movs	r2, #10
 8007000:	4619      	mov	r1, r3
 8007002:	484d      	ldr	r0, [pc, #308]	@ (8007138 <processWeather+0x22c>)
 8007004:	f005 f92b 	bl	800c25e <strncpy>
	current_date[sizeof(current_date) - 1] = '\0';
 8007008:	4b4b      	ldr	r3, [pc, #300]	@ (8007138 <processWeather+0x22c>)
 800700a:	2200      	movs	r2, #0
 800700c:	729a      	strb	r2, [r3, #10]

	snprintf(tmp, sizeof(tmp), "%02d:%02d", hour, minute);
 800700e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007012:	f107 0020 	add.w	r0, r7, #32
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	4613      	mov	r3, r2
 800701a:	4a48      	ldr	r2, [pc, #288]	@ (800713c <processWeather+0x230>)
 800701c:	2111      	movs	r1, #17
 800701e:	f005 f82d 	bl	800c07c <sniprintf>
	strncpy(current_time, tmp, sizeof(current_time) - 1);
 8007022:	f107 0320 	add.w	r3, r7, #32
 8007026:	2205      	movs	r2, #5
 8007028:	4619      	mov	r1, r3
 800702a:	4845      	ldr	r0, [pc, #276]	@ (8007140 <processWeather+0x234>)
 800702c:	f005 f917 	bl	800c25e <strncpy>
	current_time[sizeof(current_time) - 1] = '\0';
 8007030:	4b43      	ldr	r3, [pc, #268]	@ (8007140 <processWeather+0x234>)
 8007032:	2200      	movs	r2, #0
 8007034:	715a      	strb	r2, [r3, #5]

    current_temp =  cJSON_GetObjectItem(current , "temperature_2m")->valueint;
 8007036:	4943      	ldr	r1, [pc, #268]	@ (8007144 <processWeather+0x238>)
 8007038:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800703a:	f7fb fa87 	bl	800254c <cJSON_GetObjectItem>
 800703e:	4603      	mov	r3, r0
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	4a41      	ldr	r2, [pc, #260]	@ (8007148 <processWeather+0x23c>)
 8007044:	6013      	str	r3, [r2, #0]

	current_humi =  cJSON_GetObjectItem(current , "relative_humidity_2m")->valueint;
 8007046:	4941      	ldr	r1, [pc, #260]	@ (800714c <processWeather+0x240>)
 8007048:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800704a:	f7fb fa7f 	bl	800254c <cJSON_GetObjectItem>
 800704e:	4603      	mov	r3, r0
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	4a3f      	ldr	r2, [pc, #252]	@ (8007150 <processWeather+0x244>)
 8007054:	6013      	str	r3, [r2, #0]

	current_code =  cJSON_GetObjectItem(current , "weather_code")->valueint;
 8007056:	4934      	ldr	r1, [pc, #208]	@ (8007128 <processWeather+0x21c>)
 8007058:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800705a:	f7fb fa77 	bl	800254c <cJSON_GetObjectItem>
 800705e:	4603      	mov	r3, r0
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	4a3c      	ldr	r2, [pc, #240]	@ (8007154 <processWeather+0x248>)
 8007064:	6013      	str	r3, [r2, #0]

	current_cloud =  cJSON_GetObjectItem(current , "cloud_cover")->valueint;
 8007066:	493c      	ldr	r1, [pc, #240]	@ (8007158 <processWeather+0x24c>)
 8007068:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800706a:	f7fb fa6f 	bl	800254c <cJSON_GetObjectItem>
 800706e:	4603      	mov	r3, r0
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	4a3a      	ldr	r2, [pc, #232]	@ (800715c <processWeather+0x250>)
 8007074:	6013      	str	r3, [r2, #0]

    // Allocate memory for global variables
    int num_days = cJSON_GetArraySize(dates);
 8007076:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8007078:	f7fb f9c8 	bl	800240c <cJSON_GetArraySize>
 800707c:	64f8      	str	r0, [r7, #76]	@ 0x4c
    temp_max = (int *)malloc(num_days * sizeof(int));
 800707e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4618      	mov	r0, r3
 8007084:	f004 f836 	bl	800b0f4 <malloc>
 8007088:	4603      	mov	r3, r0
 800708a:	461a      	mov	r2, r3
 800708c:	4b34      	ldr	r3, [pc, #208]	@ (8007160 <processWeather+0x254>)
 800708e:	601a      	str	r2, [r3, #0]
    temp_min = (int *)malloc(num_days * sizeof(int));
 8007090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4618      	mov	r0, r3
 8007096:	f004 f82d 	bl	800b0f4 <malloc>
 800709a:	4603      	mov	r3, r0
 800709c:	461a      	mov	r2, r3
 800709e:	4b31      	ldr	r3, [pc, #196]	@ (8007164 <processWeather+0x258>)
 80070a0:	601a      	str	r2, [r3, #0]
    wind_speed = (int *)malloc(num_days * sizeof(int));
 80070a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f004 f824 	bl	800b0f4 <malloc>
 80070ac:	4603      	mov	r3, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	4b2d      	ldr	r3, [pc, #180]	@ (8007168 <processWeather+0x25c>)
 80070b2:	601a      	str	r2, [r3, #0]
    day_code = (int *)malloc(num_days * sizeof(int));
 80070b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f004 f81b 	bl	800b0f4 <malloc>
 80070be:	4603      	mov	r3, r0
 80070c0:	461a      	mov	r2, r3
 80070c2:	4b2a      	ldr	r3, [pc, #168]	@ (800716c <processWeather+0x260>)
 80070c4:	601a      	str	r2, [r3, #0]
    if (!temp_max || !temp_min || !wind_speed || !day_code) {
 80070c6:	4b26      	ldr	r3, [pc, #152]	@ (8007160 <processWeather+0x254>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00b      	beq.n	80070e6 <processWeather+0x1da>
 80070ce:	4b25      	ldr	r3, [pc, #148]	@ (8007164 <processWeather+0x258>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d007      	beq.n	80070e6 <processWeather+0x1da>
 80070d6:	4b24      	ldr	r3, [pc, #144]	@ (8007168 <processWeather+0x25c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <processWeather+0x1da>
 80070de:	4b23      	ldr	r3, [pc, #140]	@ (800716c <processWeather+0x260>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10f      	bne.n	8007106 <processWeather+0x1fa>
        lcdSetCursor(10, 10);
 80070e6:	210a      	movs	r1, #10
 80070e8:	200a      	movs	r0, #10
 80070ea:	f7fe fce3 	bl	8005ab4 <lcdSetCursor>
        lcdSetTextColor(COLOR_RED, COLOR_BLACK);
 80070ee:	2100      	movs	r1, #0
 80070f0:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80070f4:	f7fe fc5e 	bl	80059b4 <lcdSetTextColor>
        lcdPrintf("Error allocating memory!");
 80070f8:	481d      	ldr	r0, [pc, #116]	@ (8007170 <processWeather+0x264>)
 80070fa:	f7fe fbbf 	bl	800587c <lcdPrintf>
        cJSON_Delete(json);
 80070fe:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8007100:	f7fa f9da 	bl	80014b8 <cJSON_Delete>
        return;
 8007104:	e128      	b.n	8007358 <processWeather+0x44c>
    }

    // Convert dates and extract weather data
    for (int i = 0; i < num_days; i++) {
 8007106:	2300      	movs	r3, #0
 8007108:	677b      	str	r3, [r7, #116]	@ 0x74
 800710a:	e11d      	b.n	8007348 <processWeather+0x43c>
 800710c:	0800eec8 	.word	0x0800eec8
 8007110:	0800eedc 	.word	0x0800eedc
 8007114:	0800eee4 	.word	0x0800eee4
 8007118:	0800eeec 	.word	0x0800eeec
 800711c:	0800ef0c 	.word	0x0800ef0c
 8007120:	0800ef14 	.word	0x0800ef14
 8007124:	0800ef28 	.word	0x0800ef28
 8007128:	0800ef3c 	.word	0x0800ef3c
 800712c:	0800ef4c 	.word	0x0800ef4c
 8007130:	0800ef60 	.word	0x0800ef60
 8007134:	0800ef70 	.word	0x0800ef70
 8007138:	2000353c 	.word	0x2000353c
 800713c:	0800ef80 	.word	0x0800ef80
 8007140:	20003534 	.word	0x20003534
 8007144:	0800ef8c 	.word	0x0800ef8c
 8007148:	20003548 	.word	0x20003548
 800714c:	0800ef9c 	.word	0x0800ef9c
 8007150:	2000354c 	.word	0x2000354c
 8007154:	20003550 	.word	0x20003550
 8007158:	0800efb4 	.word	0x0800efb4
 800715c:	20003554 	.word	0x20003554
 8007160:	200034dc 	.word	0x200034dc
 8007164:	200034e0 	.word	0x200034e0
 8007168:	200034e4 	.word	0x200034e4
 800716c:	200034e8 	.word	0x200034e8
 8007170:	0800efc0 	.word	0x0800efc0
        char *date = cJSON_GetArrayItem(dates, i)->valuestring;
 8007174:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8007176:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8007178:	f7fb f98c 	bl	8002494 <cJSON_GetArrayItem>
 800717c:	4603      	mov	r3, r0
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	64bb      	str	r3, [r7, #72]	@ 0x48
        temp_max[i] = (int)cJSON_GetArrayItem(temp_max_json, i)->valuedouble;
 8007182:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8007184:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8007186:	f7fb f985 	bl	8002494 <cJSON_GetArrayItem>
 800718a:	4603      	mov	r3, r0
 800718c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007190:	4973      	ldr	r1, [pc, #460]	@ (8007360 <processWeather+0x454>)
 8007192:	6808      	ldr	r0, [r1, #0]
 8007194:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8007196:	0089      	lsls	r1, r1, #2
 8007198:	1844      	adds	r4, r0, r1
 800719a:	4610      	mov	r0, r2
 800719c:	4619      	mov	r1, r3
 800719e:	f7f9 fcd5 	bl	8000b4c <__aeabi_d2iz>
 80071a2:	4603      	mov	r3, r0
 80071a4:	6023      	str	r3, [r4, #0]
        temp_min[i] = (int)cJSON_GetArrayItem(temp_min_json, i)->valuedouble;
 80071a6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80071a8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80071aa:	f7fb f973 	bl	8002494 <cJSON_GetArrayItem>
 80071ae:	4603      	mov	r3, r0
 80071b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80071b4:	496b      	ldr	r1, [pc, #428]	@ (8007364 <processWeather+0x458>)
 80071b6:	6808      	ldr	r0, [r1, #0]
 80071b8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80071ba:	0089      	lsls	r1, r1, #2
 80071bc:	1844      	adds	r4, r0, r1
 80071be:	4610      	mov	r0, r2
 80071c0:	4619      	mov	r1, r3
 80071c2:	f7f9 fcc3 	bl	8000b4c <__aeabi_d2iz>
 80071c6:	4603      	mov	r3, r0
 80071c8:	6023      	str	r3, [r4, #0]
        wind_speed[i] = (int)cJSON_GetArrayItem(wind_speed_json, i)->valuedouble;
 80071ca:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80071cc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80071ce:	f7fb f961 	bl	8002494 <cJSON_GetArrayItem>
 80071d2:	4603      	mov	r3, r0
 80071d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80071d8:	4963      	ldr	r1, [pc, #396]	@ (8007368 <processWeather+0x45c>)
 80071da:	6808      	ldr	r0, [r1, #0]
 80071dc:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80071de:	0089      	lsls	r1, r1, #2
 80071e0:	1844      	adds	r4, r0, r1
 80071e2:	4610      	mov	r0, r2
 80071e4:	4619      	mov	r1, r3
 80071e6:	f7f9 fcb1 	bl	8000b4c <__aeabi_d2iz>
 80071ea:	4603      	mov	r3, r0
 80071ec:	6023      	str	r3, [r4, #0]
        day_code[i] = cJSON_GetArrayItem(weather_code, i)->valueint;
 80071ee:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80071f0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80071f2:	f7fb f94f 	bl	8002494 <cJSON_GetArrayItem>
 80071f6:	4601      	mov	r1, r0
 80071f8:	4b5c      	ldr	r3, [pc, #368]	@ (800736c <processWeather+0x460>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	694a      	ldr	r2, [r1, #20]
 8007204:	601a      	str	r2, [r3, #0]

        // Extract month and day from date string
        int year, month, days;
        char tmp[6];
        sscanf(date, "%d-%d-%d", &year, &month, &days);
 8007206:	f107 0118 	add.w	r1, r7, #24
 800720a:	f107 021c 	add.w	r2, r7, #28
 800720e:	f107 0314 	add.w	r3, r7, #20
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	460b      	mov	r3, r1
 8007216:	4956      	ldr	r1, [pc, #344]	@ (8007370 <processWeather+0x464>)
 8007218:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800721a:	f004 ff63 	bl	800c0e4 <siscanf>
        snprintf(tmp, sizeof(tmp), "%02d-%02d", days, month);
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	f107 000c 	add.w	r0, r7, #12
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	4613      	mov	r3, r2
 800722a:	4a52      	ldr	r2, [pc, #328]	@ (8007374 <processWeather+0x468>)
 800722c:	2106      	movs	r1, #6
 800722e:	f004 ff25 	bl	800c07c <sniprintf>
        strncat(Date[i], tmp, sizeof(Date[i]) - strlen(Date[i]) - 1);
 8007232:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007234:	4613      	mov	r3, r2
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	4413      	add	r3, r2
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	4a4e      	ldr	r2, [pc, #312]	@ (8007378 <processWeather+0x46c>)
 800723e:	189c      	adds	r4, r3, r2
 8007240:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007242:	4613      	mov	r3, r2
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	4413      	add	r3, r2
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	4a4b      	ldr	r2, [pc, #300]	@ (8007378 <processWeather+0x46c>)
 800724c:	4413      	add	r3, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f7f8 ffc8 	bl	80001e4 <strlen>
 8007254:	4603      	mov	r3, r0
 8007256:	f1c3 0205 	rsb	r2, r3, #5
 800725a:	f107 030c 	add.w	r3, r7, #12
 800725e:	4619      	mov	r1, r3
 8007260:	4620      	mov	r0, r4
 8007262:	f004 ffd7 	bl	800c214 <strncat>

        // Convert day index to day name
        char day[4];
        switch ((i + 2) % 7) {
 8007266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007268:	1c9a      	adds	r2, r3, #2
 800726a:	4b44      	ldr	r3, [pc, #272]	@ (800737c <processWeather+0x470>)
 800726c:	fb83 1302 	smull	r1, r3, r3, r2
 8007270:	4413      	add	r3, r2
 8007272:	1099      	asrs	r1, r3, #2
 8007274:	17d3      	asrs	r3, r2, #31
 8007276:	1ac9      	subs	r1, r1, r3
 8007278:	460b      	mov	r3, r1
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	1a5b      	subs	r3, r3, r1
 800727e:	1ad1      	subs	r1, r2, r3
 8007280:	2906      	cmp	r1, #6
 8007282:	d849      	bhi.n	8007318 <processWeather+0x40c>
 8007284:	a301      	add	r3, pc, #4	@ (adr r3, 800728c <processWeather+0x380>)
 8007286:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800728a:	bf00      	nop
 800728c:	080072a9 	.word	0x080072a9
 8007290:	080072b9 	.word	0x080072b9
 8007294:	080072c9 	.word	0x080072c9
 8007298:	080072d9 	.word	0x080072d9
 800729c:	080072e9 	.word	0x080072e9
 80072a0:	080072f9 	.word	0x080072f9
 80072a4:	08007309 	.word	0x08007309
            case 0: snprintf(day, sizeof(day), "Sun"); break;
 80072a8:	f107 0308 	add.w	r3, r7, #8
 80072ac:	4a34      	ldr	r2, [pc, #208]	@ (8007380 <processWeather+0x474>)
 80072ae:	2104      	movs	r1, #4
 80072b0:	4618      	mov	r0, r3
 80072b2:	f004 fee3 	bl	800c07c <sniprintf>
 80072b6:	e030      	b.n	800731a <processWeather+0x40e>
            case 1: snprintf(day, sizeof(day), "Mon"); break;
 80072b8:	f107 0308 	add.w	r3, r7, #8
 80072bc:	4a31      	ldr	r2, [pc, #196]	@ (8007384 <processWeather+0x478>)
 80072be:	2104      	movs	r1, #4
 80072c0:	4618      	mov	r0, r3
 80072c2:	f004 fedb 	bl	800c07c <sniprintf>
 80072c6:	e028      	b.n	800731a <processWeather+0x40e>
            case 2: snprintf(day, sizeof(day), "Tue"); break;
 80072c8:	f107 0308 	add.w	r3, r7, #8
 80072cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007388 <processWeather+0x47c>)
 80072ce:	2104      	movs	r1, #4
 80072d0:	4618      	mov	r0, r3
 80072d2:	f004 fed3 	bl	800c07c <sniprintf>
 80072d6:	e020      	b.n	800731a <processWeather+0x40e>
            case 3: snprintf(day, sizeof(day), "Wed"); break;
 80072d8:	f107 0308 	add.w	r3, r7, #8
 80072dc:	4a2b      	ldr	r2, [pc, #172]	@ (800738c <processWeather+0x480>)
 80072de:	2104      	movs	r1, #4
 80072e0:	4618      	mov	r0, r3
 80072e2:	f004 fecb 	bl	800c07c <sniprintf>
 80072e6:	e018      	b.n	800731a <processWeather+0x40e>
            case 4: snprintf(day, sizeof(day), "Thu"); break;
 80072e8:	f107 0308 	add.w	r3, r7, #8
 80072ec:	4a28      	ldr	r2, [pc, #160]	@ (8007390 <processWeather+0x484>)
 80072ee:	2104      	movs	r1, #4
 80072f0:	4618      	mov	r0, r3
 80072f2:	f004 fec3 	bl	800c07c <sniprintf>
 80072f6:	e010      	b.n	800731a <processWeather+0x40e>
            case 5: snprintf(day, sizeof(day), "Fri"); break;
 80072f8:	f107 0308 	add.w	r3, r7, #8
 80072fc:	4a25      	ldr	r2, [pc, #148]	@ (8007394 <processWeather+0x488>)
 80072fe:	2104      	movs	r1, #4
 8007300:	4618      	mov	r0, r3
 8007302:	f004 febb 	bl	800c07c <sniprintf>
 8007306:	e008      	b.n	800731a <processWeather+0x40e>
            case 6: snprintf(day, sizeof(day), "Sat"); break;
 8007308:	f107 0308 	add.w	r3, r7, #8
 800730c:	4a22      	ldr	r2, [pc, #136]	@ (8007398 <processWeather+0x48c>)
 800730e:	2104      	movs	r1, #4
 8007310:	4618      	mov	r0, r3
 8007312:	f004 feb3 	bl	800c07c <sniprintf>
 8007316:	e000      	b.n	800731a <processWeather+0x40e>
            default: break;
 8007318:	bf00      	nop
        }
        strncat(day_name[i], day, sizeof(day_name[i]) - strlen(day_name[i]) - 1);
 800731a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4a1f      	ldr	r2, [pc, #124]	@ (800739c <processWeather+0x490>)
 8007320:	189c      	adds	r4, r3, r2
 8007322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4a1d      	ldr	r2, [pc, #116]	@ (800739c <processWeather+0x490>)
 8007328:	4413      	add	r3, r2
 800732a:	4618      	mov	r0, r3
 800732c:	f7f8 ff5a 	bl	80001e4 <strlen>
 8007330:	4603      	mov	r3, r0
 8007332:	f1c3 0203 	rsb	r2, r3, #3
 8007336:	f107 0308 	add.w	r3, r7, #8
 800733a:	4619      	mov	r1, r3
 800733c:	4620      	mov	r0, r4
 800733e:	f004 ff69 	bl	800c214 <strncat>
    for (int i = 0; i < num_days; i++) {
 8007342:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007344:	3301      	adds	r3, #1
 8007346:	677b      	str	r3, [r7, #116]	@ 0x74
 8007348:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800734a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800734c:	429a      	cmp	r2, r3
 800734e:	f6ff af11 	blt.w	8007174 <processWeather+0x268>
    }

    // Clean up memory
    cJSON_Delete(json);
 8007352:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8007354:	f7fa f8b0 	bl	80014b8 <cJSON_Delete>
}
 8007358:	377c      	adds	r7, #124	@ 0x7c
 800735a:	46bd      	mov	sp, r7
 800735c:	bd90      	pop	{r4, r7, pc}
 800735e:	bf00      	nop
 8007360:	200034dc 	.word	0x200034dc
 8007364:	200034e0 	.word	0x200034e0
 8007368:	200034e4 	.word	0x200034e4
 800736c:	200034e8 	.word	0x200034e8
 8007370:	0800efdc 	.word	0x0800efdc
 8007374:	0800efe8 	.word	0x0800efe8
 8007378:	20003508 	.word	0x20003508
 800737c:	92492493 	.word	0x92492493
 8007380:	0800eff4 	.word	0x0800eff4
 8007384:	0800eff8 	.word	0x0800eff8
 8007388:	0800effc 	.word	0x0800effc
 800738c:	0800f000 	.word	0x0800f000
 8007390:	0800f004 	.word	0x0800f004
 8007394:	0800f008 	.word	0x0800f008
 8007398:	0800f00c 	.word	0x0800f00c
 800739c:	200034ec 	.word	0x200034ec

080073a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80073a4:	b672      	cpsid	i
}
 80073a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80073a8:	bf00      	nop
 80073aa:	e7fd      	b.n	80073a8 <Error_Handler+0x8>

080073ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073b2:	2300      	movs	r3, #0
 80073b4:	607b      	str	r3, [r7, #4]
 80073b6:	4b10      	ldr	r3, [pc, #64]	@ (80073f8 <HAL_MspInit+0x4c>)
 80073b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ba:	4a0f      	ldr	r2, [pc, #60]	@ (80073f8 <HAL_MspInit+0x4c>)
 80073bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80073c2:	4b0d      	ldr	r3, [pc, #52]	@ (80073f8 <HAL_MspInit+0x4c>)
 80073c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073ca:	607b      	str	r3, [r7, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80073ce:	2300      	movs	r3, #0
 80073d0:	603b      	str	r3, [r7, #0]
 80073d2:	4b09      	ldr	r3, [pc, #36]	@ (80073f8 <HAL_MspInit+0x4c>)
 80073d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d6:	4a08      	ldr	r2, [pc, #32]	@ (80073f8 <HAL_MspInit+0x4c>)
 80073d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80073de:	4b06      	ldr	r3, [pc, #24]	@ (80073f8 <HAL_MspInit+0x4c>)
 80073e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	40023800 	.word	0x40023800

080073fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	@ 0x28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007404:	f107 0314 	add.w	r3, r7, #20
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	605a      	str	r2, [r3, #4]
 800740e:	609a      	str	r2, [r3, #8]
 8007410:	60da      	str	r2, [r3, #12]
 8007412:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a19      	ldr	r2, [pc, #100]	@ (8007480 <HAL_SPI_MspInit+0x84>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d12c      	bne.n	8007478 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800741e:	2300      	movs	r3, #0
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	4b18      	ldr	r3, [pc, #96]	@ (8007484 <HAL_SPI_MspInit+0x88>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007426:	4a17      	ldr	r2, [pc, #92]	@ (8007484 <HAL_SPI_MspInit+0x88>)
 8007428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800742c:	6413      	str	r3, [r2, #64]	@ 0x40
 800742e:	4b15      	ldr	r3, [pc, #84]	@ (8007484 <HAL_SPI_MspInit+0x88>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007436:	613b      	str	r3, [r7, #16]
 8007438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	4b11      	ldr	r3, [pc, #68]	@ (8007484 <HAL_SPI_MspInit+0x88>)
 8007440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007442:	4a10      	ldr	r2, [pc, #64]	@ (8007484 <HAL_SPI_MspInit+0x88>)
 8007444:	f043 0302 	orr.w	r3, r3, #2
 8007448:	6313      	str	r3, [r2, #48]	@ 0x30
 800744a:	4b0e      	ldr	r3, [pc, #56]	@ (8007484 <HAL_SPI_MspInit+0x88>)
 800744c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007456:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800745a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800745c:	2302      	movs	r3, #2
 800745e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007460:	2300      	movs	r3, #0
 8007462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007464:	2303      	movs	r3, #3
 8007466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007468:	2305      	movs	r3, #5
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800746c:	f107 0314 	add.w	r3, r7, #20
 8007470:	4619      	mov	r1, r3
 8007472:	4805      	ldr	r0, [pc, #20]	@ (8007488 <HAL_SPI_MspInit+0x8c>)
 8007474:	f000 fe46 	bl	8008104 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8007478:	bf00      	nop
 800747a:	3728      	adds	r7, #40	@ 0x28
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	40003800 	.word	0x40003800
 8007484:	40023800 	.word	0x40023800
 8007488:	40020400 	.word	0x40020400

0800748c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800749c:	d116      	bne.n	80074cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	4b1a      	ldr	r3, [pc, #104]	@ (800750c <HAL_TIM_Base_MspInit+0x80>)
 80074a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a6:	4a19      	ldr	r2, [pc, #100]	@ (800750c <HAL_TIM_Base_MspInit+0x80>)
 80074a8:	f043 0301 	orr.w	r3, r3, #1
 80074ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80074ae:	4b17      	ldr	r3, [pc, #92]	@ (800750c <HAL_TIM_Base_MspInit+0x80>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80074ba:	2200      	movs	r2, #0
 80074bc:	2100      	movs	r1, #0
 80074be:	201c      	movs	r0, #28
 80074c0:	f000 fd57 	bl	8007f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80074c4:	201c      	movs	r0, #28
 80074c6:	f000 fd70 	bl	8007faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80074ca:	e01a      	b.n	8007502 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a0f      	ldr	r2, [pc, #60]	@ (8007510 <HAL_TIM_Base_MspInit+0x84>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d115      	bne.n	8007502 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80074d6:	2300      	movs	r3, #0
 80074d8:	60bb      	str	r3, [r7, #8]
 80074da:	4b0c      	ldr	r3, [pc, #48]	@ (800750c <HAL_TIM_Base_MspInit+0x80>)
 80074dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074de:	4a0b      	ldr	r2, [pc, #44]	@ (800750c <HAL_TIM_Base_MspInit+0x80>)
 80074e0:	f043 0302 	orr.w	r3, r3, #2
 80074e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80074e6:	4b09      	ldr	r3, [pc, #36]	@ (800750c <HAL_TIM_Base_MspInit+0x80>)
 80074e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	60bb      	str	r3, [r7, #8]
 80074f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80074f2:	2200      	movs	r2, #0
 80074f4:	2100      	movs	r1, #0
 80074f6:	201d      	movs	r0, #29
 80074f8:	f000 fd3b 	bl	8007f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80074fc:	201d      	movs	r0, #29
 80074fe:	f000 fd54 	bl	8007faa <HAL_NVIC_EnableIRQ>
}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	40023800 	.word	0x40023800
 8007510:	40000400 	.word	0x40000400

08007514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	@ 0x28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800751c:	f107 0314 	add.w	r3, r7, #20
 8007520:	2200      	movs	r2, #0
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	605a      	str	r2, [r3, #4]
 8007526:	609a      	str	r2, [r3, #8]
 8007528:	60da      	str	r2, [r3, #12]
 800752a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a1d      	ldr	r2, [pc, #116]	@ (80075a8 <HAL_UART_MspInit+0x94>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d134      	bne.n	80075a0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007536:	2300      	movs	r3, #0
 8007538:	613b      	str	r3, [r7, #16]
 800753a:	4b1c      	ldr	r3, [pc, #112]	@ (80075ac <HAL_UART_MspInit+0x98>)
 800753c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753e:	4a1b      	ldr	r2, [pc, #108]	@ (80075ac <HAL_UART_MspInit+0x98>)
 8007540:	f043 0310 	orr.w	r3, r3, #16
 8007544:	6453      	str	r3, [r2, #68]	@ 0x44
 8007546:	4b19      	ldr	r3, [pc, #100]	@ (80075ac <HAL_UART_MspInit+0x98>)
 8007548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800754a:	f003 0310 	and.w	r3, r3, #16
 800754e:	613b      	str	r3, [r7, #16]
 8007550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	4b15      	ldr	r3, [pc, #84]	@ (80075ac <HAL_UART_MspInit+0x98>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755a:	4a14      	ldr	r2, [pc, #80]	@ (80075ac <HAL_UART_MspInit+0x98>)
 800755c:	f043 0301 	orr.w	r3, r3, #1
 8007560:	6313      	str	r3, [r2, #48]	@ 0x30
 8007562:	4b12      	ldr	r3, [pc, #72]	@ (80075ac <HAL_UART_MspInit+0x98>)
 8007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800756e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8007572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007574:	2302      	movs	r3, #2
 8007576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007578:	2300      	movs	r3, #0
 800757a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800757c:	2303      	movs	r3, #3
 800757e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007580:	2307      	movs	r3, #7
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007584:	f107 0314 	add.w	r3, r7, #20
 8007588:	4619      	mov	r1, r3
 800758a:	4809      	ldr	r0, [pc, #36]	@ (80075b0 <HAL_UART_MspInit+0x9c>)
 800758c:	f000 fdba 	bl	8008104 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007590:	2200      	movs	r2, #0
 8007592:	2100      	movs	r1, #0
 8007594:	2025      	movs	r0, #37	@ 0x25
 8007596:	f000 fcec 	bl	8007f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800759a:	2025      	movs	r0, #37	@ 0x25
 800759c:	f000 fd05 	bl	8007faa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80075a0:	bf00      	nop
 80075a2:	3728      	adds	r7, #40	@ 0x28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40011000 	.word	0x40011000
 80075ac:	40023800 	.word	0x40023800
 80075b0:	40020000 	.word	0x40020000

080075b4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80075ba:	1d3b      	adds	r3, r7, #4
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	605a      	str	r2, [r3, #4]
 80075c2:	609a      	str	r2, [r3, #8]
 80075c4:	60da      	str	r2, [r3, #12]
 80075c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80075c8:	4b1c      	ldr	r3, [pc, #112]	@ (800763c <HAL_FSMC_MspInit+0x88>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d131      	bne.n	8007634 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80075d0:	4b1a      	ldr	r3, [pc, #104]	@ (800763c <HAL_FSMC_MspInit+0x88>)
 80075d2:	2201      	movs	r2, #1
 80075d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80075d6:	2300      	movs	r3, #0
 80075d8:	603b      	str	r3, [r7, #0]
 80075da:	4b19      	ldr	r3, [pc, #100]	@ (8007640 <HAL_FSMC_MspInit+0x8c>)
 80075dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075de:	4a18      	ldr	r2, [pc, #96]	@ (8007640 <HAL_FSMC_MspInit+0x8c>)
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	6393      	str	r3, [r2, #56]	@ 0x38
 80075e6:	4b16      	ldr	r3, [pc, #88]	@ (8007640 <HAL_FSMC_MspInit+0x8c>)
 80075e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80075f2:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80075f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075f8:	2302      	movs	r3, #2
 80075fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007600:	2303      	movs	r3, #3
 8007602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8007604:	230c      	movs	r3, #12
 8007606:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007608:	1d3b      	adds	r3, r7, #4
 800760a:	4619      	mov	r1, r3
 800760c:	480d      	ldr	r0, [pc, #52]	@ (8007644 <HAL_FSMC_MspInit+0x90>)
 800760e:	f000 fd79 	bl	8008104 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8007612:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 8007616:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007618:	2302      	movs	r3, #2
 800761a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007620:	2303      	movs	r3, #3
 8007622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8007624:	230c      	movs	r3, #12
 8007626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007628:	1d3b      	adds	r3, r7, #4
 800762a:	4619      	mov	r1, r3
 800762c:	4806      	ldr	r0, [pc, #24]	@ (8007648 <HAL_FSMC_MspInit+0x94>)
 800762e:	f000 fd69 	bl	8008104 <HAL_GPIO_Init>
 8007632:	e000      	b.n	8007636 <HAL_FSMC_MspInit+0x82>
    return;
 8007634:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20003558 	.word	0x20003558
 8007640:	40023800 	.word	0x40023800
 8007644:	40021000 	.word	0x40021000
 8007648:	40020c00 	.word	0x40020c00

0800764c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8007654:	f7ff ffae 	bl	80075b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007660:	b480      	push	{r7}
 8007662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007664:	bf00      	nop
 8007666:	e7fd      	b.n	8007664 <NMI_Handler+0x4>

08007668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800766c:	bf00      	nop
 800766e:	e7fd      	b.n	800766c <HardFault_Handler+0x4>

08007670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007674:	bf00      	nop
 8007676:	e7fd      	b.n	8007674 <MemManage_Handler+0x4>

08007678 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800767c:	bf00      	nop
 800767e:	e7fd      	b.n	800767c <BusFault_Handler+0x4>

08007680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007684:	bf00      	nop
 8007686:	e7fd      	b.n	8007684 <UsageFault_Handler+0x4>

08007688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800768c:	bf00      	nop
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007696:	b480      	push	{r7}
 8007698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800769a:	bf00      	nop
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80076a8:	bf00      	nop
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076b6:	f000 fb3d 	bl	8007d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076ba:	bf00      	nop
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80076c4:	4802      	ldr	r0, [pc, #8]	@ (80076d0 <TIM2_IRQHandler+0x10>)
 80076c6:	f001 ff99 	bl	80095fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	200033ac 	.word	0x200033ac

080076d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80076d8:	4802      	ldr	r0, [pc, #8]	@ (80076e4 <TIM3_IRQHandler+0x10>)
 80076da:	f001 ff8f 	bl	80095fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80076de:	bf00      	nop
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	200033f4 	.word	0x200033f4

080076e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80076ec:	4802      	ldr	r0, [pc, #8]	@ (80076f8 <USART1_IRQHandler+0x10>)
 80076ee:	f002 fcd3 	bl	800a098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80076f2:	bf00      	nop
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	2000343c 	.word	0x2000343c

080076fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
  return 1;
 8007700:	2301      	movs	r3, #1
}
 8007702:	4618      	mov	r0, r3
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <_kill>:

int _kill(int pid, int sig)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007716:	f004 fe37 	bl	800c388 <__errno>
 800771a:	4603      	mov	r3, r0
 800771c:	2216      	movs	r2, #22
 800771e:	601a      	str	r2, [r3, #0]
  return -1;
 8007720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <_exit>:

void _exit (int status)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007734:	f04f 31ff 	mov.w	r1, #4294967295
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff ffe7 	bl	800770c <_kill>
  while (1) {}    /* Make sure we hang here */
 800773e:	bf00      	nop
 8007740:	e7fd      	b.n	800773e <_exit+0x12>

08007742 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b086      	sub	sp, #24
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800774e:	2300      	movs	r3, #0
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	e00a      	b.n	800776a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007754:	f3af 8000 	nop.w
 8007758:	4601      	mov	r1, r0
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	60ba      	str	r2, [r7, #8]
 8007760:	b2ca      	uxtb	r2, r1
 8007762:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	3301      	adds	r3, #1
 8007768:	617b      	str	r3, [r7, #20]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	429a      	cmp	r2, r3
 8007770:	dbf0      	blt.n	8007754 <_read+0x12>
  }

  return len;
 8007772:	687b      	ldr	r3, [r7, #4]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	e009      	b.n	80077a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	60ba      	str	r2, [r7, #8]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	4618      	mov	r0, r3
 8007798:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	3301      	adds	r3, #1
 80077a0:	617b      	str	r3, [r7, #20]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	dbf1      	blt.n	800778e <_write+0x12>
  }
  return len;
 80077aa:	687b      	ldr	r3, [r7, #4]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <_close>:

int _close(int file)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80077bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80077dc:	605a      	str	r2, [r3, #4]
  return 0;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <_isatty>:

int _isatty(int file)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80077f4:	2301      	movs	r3, #1
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007802:	b480      	push	{r7}
 8007804:	b085      	sub	sp, #20
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007824:	4a14      	ldr	r2, [pc, #80]	@ (8007878 <_sbrk+0x5c>)
 8007826:	4b15      	ldr	r3, [pc, #84]	@ (800787c <_sbrk+0x60>)
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007830:	4b13      	ldr	r3, [pc, #76]	@ (8007880 <_sbrk+0x64>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d102      	bne.n	800783e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007838:	4b11      	ldr	r3, [pc, #68]	@ (8007880 <_sbrk+0x64>)
 800783a:	4a12      	ldr	r2, [pc, #72]	@ (8007884 <_sbrk+0x68>)
 800783c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800783e:	4b10      	ldr	r3, [pc, #64]	@ (8007880 <_sbrk+0x64>)
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4413      	add	r3, r2
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	429a      	cmp	r2, r3
 800784a:	d207      	bcs.n	800785c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800784c:	f004 fd9c 	bl	800c388 <__errno>
 8007850:	4603      	mov	r3, r0
 8007852:	220c      	movs	r2, #12
 8007854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007856:	f04f 33ff 	mov.w	r3, #4294967295
 800785a:	e009      	b.n	8007870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800785c:	4b08      	ldr	r3, [pc, #32]	@ (8007880 <_sbrk+0x64>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007862:	4b07      	ldr	r3, [pc, #28]	@ (8007880 <_sbrk+0x64>)
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4413      	add	r3, r2
 800786a:	4a05      	ldr	r2, [pc, #20]	@ (8007880 <_sbrk+0x64>)
 800786c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800786e:	68fb      	ldr	r3, [r7, #12]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	20020000 	.word	0x20020000
 800787c:	00000400 	.word	0x00000400
 8007880:	2000355c 	.word	0x2000355c
 8007884:	200036d0 	.word	0x200036d0

08007888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800788c:	4b06      	ldr	r3, [pc, #24]	@ (80078a8 <SystemInit+0x20>)
 800788e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007892:	4a05      	ldr	r2, [pc, #20]	@ (80078a8 <SystemInit+0x20>)
 8007894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800789c:	bf00      	nop
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	e000ed00 	.word	0xe000ed00

080078ac <SpiTransfer>:
//static void DrawCross(int16_t x, int16_t y, int16_t length);
static uint8_t SpiTransfer(uint8_t byte);
static bool GetPointRaw(uint16_t* x, uint16_t* y);

static uint8_t SpiTransfer(uint8_t byte)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	4603      	mov	r3, r0
 80078b4:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	(void)HAL_SPI_TransmitReceive(&hspi2, &byte, &result, 1U, 1000U);
 80078b6:	f107 020f 	add.w	r2, r7, #15
 80078ba:	1df9      	adds	r1, r7, #7
 80078bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	2301      	movs	r3, #1
 80078c4:	4803      	ldr	r0, [pc, #12]	@ (80078d4 <SpiTransfer+0x28>)
 80078c6:	f001 fb0c 	bl	8008ee2 <HAL_SPI_TransmitReceive>

	return (result);
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20003354 	.word	0x20003354

080078d8 <GetPointRaw>:
//    lcdSetCursor(50,150);
//	lcdPrintf("Touch centre of cross");
//}

static bool GetPointRaw(uint16_t* x, uint16_t* y)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b090      	sub	sp, #64	@ 0x40
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
	uint16_t x_raw;
	uint16_t y_raw;
	uint16_t databuffer[2][MW_HAL_TOUCH_READ_POINTS_COUNT];
	uint8_t touch_count;

	if (!TouchIsTouched())
 80078e2:	f000 f921 	bl	8007b28 <TouchIsTouched>
 80078e6:	4603      	mov	r3, r0
 80078e8:	f083 0301 	eor.w	r3, r3, #1
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <GetPointRaw+0x1e>
	{
		return false;
 80078f2:	2300      	movs	r3, #0
 80078f4:	e111      	b.n	8007b1a <GetPointRaw+0x242>
	}

	// get set of readings
	CS_ON;
 80078f6:	2200      	movs	r2, #0
 80078f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80078fc:	4889      	ldr	r0, [pc, #548]	@ (8007b24 <GetPointRaw+0x24c>)
 80078fe:	f000 fdb5 	bl	800846c <HAL_GPIO_WritePin>
	touch_count = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	do
	{
		SpiTransfer(COMMAND_READ_X);
 8007908:	20d0      	movs	r0, #208	@ 0xd0
 800790a:	f7ff ffcf 	bl	80078ac <SpiTransfer>
		x_raw = (uint16_t)SpiTransfer(0U) << 8;
 800790e:	2000      	movs	r0, #0
 8007910:	f7ff ffcc 	bl	80078ac <SpiTransfer>
 8007914:	4603      	mov	r3, r0
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	877b      	strh	r3, [r7, #58]	@ 0x3a
		x_raw |= (uint16_t)SpiTransfer(0U);
 800791a:	2000      	movs	r0, #0
 800791c:	f7ff ffc6 	bl	80078ac <SpiTransfer>
 8007920:	4603      	mov	r3, r0
 8007922:	461a      	mov	r2, r3
 8007924:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007926:	4313      	orrs	r3, r2
 8007928:	877b      	strh	r3, [r7, #58]	@ 0x3a
		x_raw >>= 3;
 800792a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800792c:	08db      	lsrs	r3, r3, #3
 800792e:	877b      	strh	r3, [r7, #58]	@ 0x3a

		SpiTransfer(COMMAND_READ_Y);
 8007930:	2090      	movs	r0, #144	@ 0x90
 8007932:	f7ff ffbb 	bl	80078ac <SpiTransfer>
		y_raw = (uint16_t)SpiTransfer(0U) << 8;
 8007936:	2000      	movs	r0, #0
 8007938:	f7ff ffb8 	bl	80078ac <SpiTransfer>
 800793c:	4603      	mov	r3, r0
 800793e:	021b      	lsls	r3, r3, #8
 8007940:	873b      	strh	r3, [r7, #56]	@ 0x38
		y_raw |= (uint16_t)SpiTransfer(0U);
 8007942:	2000      	movs	r0, #0
 8007944:	f7ff ffb2 	bl	80078ac <SpiTransfer>
 8007948:	4603      	mov	r3, r0
 800794a:	461a      	mov	r2, r3
 800794c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800794e:	4313      	orrs	r3, r2
 8007950:	873b      	strh	r3, [r7, #56]	@ 0x38
		y_raw >>= 3;
 8007952:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007954:	08db      	lsrs	r3, r3, #3
 8007956:	873b      	strh	r3, [r7, #56]	@ 0x38

		databuffer[0][touch_count] = x_raw;
 8007958:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	3340      	adds	r3, #64	@ 0x40
 8007960:	443b      	add	r3, r7
 8007962:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007964:	f823 2c34 	strh.w	r2, [r3, #-52]
		databuffer[1][touch_count] = y_raw;
 8007968:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800796c:	330a      	adds	r3, #10
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	3340      	adds	r3, #64	@ 0x40
 8007972:	443b      	add	r3, r7
 8007974:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8007976:	f823 2c34 	strh.w	r2, [r3, #-52]
		touch_count++;
 800797a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800797e:	3301      	adds	r3, #1
 8007980:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	}
	while (TouchIsTouched() == true && touch_count < MW_HAL_TOUCH_READ_POINTS_COUNT);
 8007984:	f000 f8d0 	bl	8007b28 <TouchIsTouched>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <GetPointRaw+0xbe>
 800798e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007992:	2b09      	cmp	r3, #9
 8007994:	d9b8      	bls.n	8007908 <GetPointRaw+0x30>
	CS_OFF;
 8007996:	2201      	movs	r2, #1
 8007998:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800799c:	4861      	ldr	r0, [pc, #388]	@ (8007b24 <GetPointRaw+0x24c>)
 800799e:	f000 fd65 	bl	800846c <HAL_GPIO_WritePin>

	// check that the touch was held down during all the readings
	if (touch_count != MW_HAL_TOUCH_READ_POINTS_COUNT)
 80079a2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80079a6:	2b0a      	cmp	r3, #10
 80079a8:	d001      	beq.n	80079ae <GetPointRaw+0xd6>
	{
		return (false);
 80079aa:	2300      	movs	r3, #0
 80079ac:	e0b5      	b.n	8007b1a <GetPointRaw+0x242>
	}

	// sort the x readings
	do
	{
		sorted = true;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 80079b4:	2300      	movs	r3, #0
 80079b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80079ba:	e039      	b.n	8007a30 <GetPointRaw+0x158>
		{
			if(databuffer[0][i] > databuffer[0][i + 1U])
 80079bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	3340      	adds	r3, #64	@ 0x40
 80079c4:	443b      	add	r3, r7
 80079c6:	f833 2c34 	ldrh.w	r2, [r3, #-52]
 80079ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80079ce:	3301      	adds	r3, #1
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	3340      	adds	r3, #64	@ 0x40
 80079d4:	443b      	add	r3, r7
 80079d6:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d923      	bls.n	8007a26 <GetPointRaw+0x14e>
			{
				swap_value = databuffer[0][i + 1U];
 80079de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80079e2:	3301      	adds	r3, #1
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	3340      	adds	r3, #64	@ 0x40
 80079e8:	443b      	add	r3, r7
 80079ea:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 80079ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
				databuffer[0][i + 1U] = databuffer[0][i];
 80079f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80079f4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80079f8:	3201      	adds	r2, #1
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	3340      	adds	r3, #64	@ 0x40
 80079fe:	443b      	add	r3, r7
 8007a00:	f833 1c34 	ldrh.w	r1, [r3, #-52]
 8007a04:	0053      	lsls	r3, r2, #1
 8007a06:	3340      	adds	r3, #64	@ 0x40
 8007a08:	443b      	add	r3, r7
 8007a0a:	460a      	mov	r2, r1
 8007a0c:	f823 2c34 	strh.w	r2, [r3, #-52]
				databuffer[0][i] = swap_value;
 8007a10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	3340      	adds	r3, #64	@ 0x40
 8007a18:	443b      	add	r3, r7
 8007a1a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007a1c:	f823 2c34 	strh.w	r2, [r3, #-52]
				sorted = false;
 8007a20:	2300      	movs	r3, #0
 8007a22:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8007a26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007a30:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007a34:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d3be      	bcc.n	80079bc <GetPointRaw+0xe4>
			}
		}
	}
	while (!sorted);
 8007a3e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007a42:	f083 0301 	eor.w	r3, r3, #1
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1b0      	bne.n	80079ae <GetPointRaw+0xd6>

	// sort the y readings
	do
	{
		sorted = true;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8007a52:	2300      	movs	r3, #0
 8007a54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007a58:	e040      	b.n	8007adc <GetPointRaw+0x204>
		{
			if (databuffer[1][i] > databuffer[1][i + 1U])
 8007a5a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a5e:	330a      	adds	r3, #10
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	3340      	adds	r3, #64	@ 0x40
 8007a64:	443b      	add	r3, r7
 8007a66:	f833 2c34 	ldrh.w	r2, [r3, #-52]
 8007a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a6e:	3301      	adds	r3, #1
 8007a70:	330a      	adds	r3, #10
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	3340      	adds	r3, #64	@ 0x40
 8007a76:	443b      	add	r3, r7
 8007a78:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d928      	bls.n	8007ad2 <GetPointRaw+0x1fa>
			{
				swap_value = databuffer[1][i + 1U];
 8007a80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a84:	3301      	adds	r3, #1
 8007a86:	330a      	adds	r3, #10
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	3340      	adds	r3, #64	@ 0x40
 8007a8c:	443b      	add	r3, r7
 8007a8e:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8007a92:	86fb      	strh	r3, [r7, #54]	@ 0x36
				databuffer[1][i + 1U] = databuffer[1][i];
 8007a94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a98:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007a9c:	3201      	adds	r2, #1
 8007a9e:	330a      	adds	r3, #10
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	3340      	adds	r3, #64	@ 0x40
 8007aa4:	443b      	add	r3, r7
 8007aa6:	f833 1c34 	ldrh.w	r1, [r3, #-52]
 8007aaa:	f102 030a 	add.w	r3, r2, #10
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	3340      	adds	r3, #64	@ 0x40
 8007ab2:	443b      	add	r3, r7
 8007ab4:	460a      	mov	r2, r1
 8007ab6:	f823 2c34 	strh.w	r2, [r3, #-52]
				databuffer[1][i] = swap_value;
 8007aba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007abe:	330a      	adds	r3, #10
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	3340      	adds	r3, #64	@ 0x40
 8007ac4:	443b      	add	r3, r7
 8007ac6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007ac8:	f823 2c34 	strh.w	r2, [r3, #-52]
				sorted = false;
 8007acc:	2300      	movs	r3, #0
 8007ace:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8007ad2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007adc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007ae0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d3b7      	bcc.n	8007a5a <GetPointRaw+0x182>
			}
		}
	}
	while (!sorted);
 8007aea:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007aee:	f083 0301 	eor.w	r3, r3, #1
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1a9      	bne.n	8007a4c <GetPointRaw+0x174>

	// take averaged middle 2 readings
	*x = (databuffer[0][4] + databuffer[0][5]) / 2U;
 8007af8:	8abb      	ldrh	r3, [r7, #20]
 8007afa:	461a      	mov	r2, r3
 8007afc:	8afb      	ldrh	r3, [r7, #22]
 8007afe:	4413      	add	r3, r2
 8007b00:	085b      	lsrs	r3, r3, #1
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	801a      	strh	r2, [r3, #0]
	*y = (databuffer[1][4] + databuffer[1][5]) / 2U;
 8007b08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007b0e:	4413      	add	r3, r2
 8007b10:	085b      	lsrs	r3, r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	801a      	strh	r2, [r3, #0]

	return (true);
 8007b18:	2301      	movs	r3, #1
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3740      	adds	r7, #64	@ 0x40
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	40020400 	.word	0x40020400

08007b28 <TouchIsTouched>:

bool TouchIsTouched(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
	GPIO_PinState pin_state = HAL_GPIO_ReadPin(TOUCH_IRQ_PORT, TOUCH_IRQ_PIN);
 8007b2e:	2120      	movs	r1, #32
 8007b30:	4807      	ldr	r0, [pc, #28]	@ (8007b50 <TouchIsTouched+0x28>)
 8007b32:	f000 fc83 	bl	800843c <HAL_GPIO_ReadPin>
 8007b36:	4603      	mov	r3, r0
 8007b38:	71fb      	strb	r3, [r7, #7]
	return pin_state == GPIO_PIN_RESET;
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bf0c      	ite	eq
 8007b40:	2301      	moveq	r3, #1
 8007b42:	2300      	movne	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	40020800 	.word	0x40020800

08007b54 <TouchGetCalibratedPoint>:

bool TouchGetCalibratedPoint(int16_t* x, int16_t* y)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
	POINT_T display_point;
	uint16_t raw_x;
	uint16_t raw_y;

	// get raw reading
 	if (GetPointRaw(&raw_x, &raw_y) == false)
 8007b5e:	f107 020c 	add.w	r2, r7, #12
 8007b62:	f107 030e 	add.w	r3, r7, #14
 8007b66:	4611      	mov	r1, r2
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7ff feb5 	bl	80078d8 <GetPointRaw>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	f083 0301 	eor.w	r3, r3, #1
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <TouchGetCalibratedPoint+0x2a>
	{
		return false;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e02a      	b.n	8007bd4 <TouchGetCalibratedPoint+0x80>
	}

	raw_point.x = (INT_32)raw_x;
 8007b7e:	89fb      	ldrh	r3, [r7, #14]
 8007b80:	61bb      	str	r3, [r7, #24]
	raw_point.y = (INT_32)raw_y;
 8007b82:	89bb      	ldrh	r3, [r7, #12]
 8007b84:	61fb      	str	r3, [r7, #28]

	// apply calibration matrix
	(void)getDisplayPoint(&display_point, &raw_point, &matrix);
 8007b86:	f107 0118 	add.w	r1, r7, #24
 8007b8a:	f107 0310 	add.w	r3, r7, #16
 8007b8e:	4a13      	ldr	r2, [pc, #76]	@ (8007bdc <TouchGetCalibratedPoint+0x88>)
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fa fe28 	bl	80027e6 <getDisplayPoint>

	// range check results
	if (display_point.x > 239)
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2bef      	cmp	r3, #239	@ 0xef
 8007b9a:	dd01      	ble.n	8007ba0 <TouchGetCalibratedPoint+0x4c>
	{
		display_point.x = 239;
 8007b9c:	23ef      	movs	r3, #239	@ 0xef
 8007b9e:	613b      	str	r3, [r7, #16]
	}
	if (display_point.y > 319)
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007ba6:	db02      	blt.n	8007bae <TouchGetCalibratedPoint+0x5a>
	{
		display_point.y = 319;
 8007ba8:	f240 133f 	movw	r3, #319	@ 0x13f
 8007bac:	617b      	str	r3, [r7, #20]
	}

	if (display_point.x < 0)
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	da01      	bge.n	8007bb8 <TouchGetCalibratedPoint+0x64>
	{
		display_point.x = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	613b      	str	r3, [r7, #16]
	}
	if (display_point.y < 0)
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da01      	bge.n	8007bc2 <TouchGetCalibratedPoint+0x6e>
	{
		display_point.y = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]
	}

	*x = (int16_t)display_point.x;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	b21a      	sxth	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)display_point.y;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	b21a      	sxth	r2, r3
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	801a      	strh	r2, [r3, #0]

	return true;
 8007bd2:	2301      	movs	r3, #1
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3720      	adds	r7, #32
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	20003560 	.word	0x20003560

08007be0 <TouchCalibrate>:

void TouchCalibrate(void)
{
 8007be0:	b5b0      	push	{r4, r5, r7, lr}
 8007be2:	b08c      	sub	sp, #48	@ 0x30
 8007be4:	af00      	add	r7, sp, #0
//	uint16_t x;
//	uint16_t y;
	POINT_T raw_points[3];
	POINT_T display_points[3] = {{40, 40}, {200, 40}, {200, 280}};
 8007be6:	4b13      	ldr	r3, [pc, #76]	@ (8007c34 <TouchCalibrate+0x54>)
 8007be8:	463c      	mov	r4, r7
 8007bea:	461d      	mov	r5, r3
 8007bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bf0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007bf4:	e884 0003 	stmia.w	r4, {r0, r1}

	raw_points[0].x = 2970;
 8007bf8:	f640 339a 	movw	r3, #2970	@ 0xb9a
 8007bfc:	61bb      	str	r3, [r7, #24]
	raw_points[0].y = 670;
 8007bfe:	f240 239e 	movw	r3, #670	@ 0x29e
 8007c02:	61fb      	str	r3, [r7, #28]



    /* second point */

	raw_points[1].x = 865;
 8007c04:	f240 3361 	movw	r3, #865	@ 0x361
 8007c08:	623b      	str	r3, [r7, #32]
	raw_points[1].y = 711;
 8007c0a:	f240 23c7 	movw	r3, #711	@ 0x2c7
 8007c0e:	627b      	str	r3, [r7, #36]	@ 0x24




	raw_points[2].x = 789;
 8007c10:	f240 3315 	movw	r3, #789	@ 0x315
 8007c14:	62bb      	str	r3, [r7, #40]	@ 0x28
	raw_points[2].y = 3239;
 8007c16:	f640 43a7 	movw	r3, #3239	@ 0xca7
 8007c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c



	(void)setCalibrationMatrix(display_points, raw_points, &matrix);
 8007c1c:	f107 0118 	add.w	r1, r7, #24
 8007c20:	463b      	mov	r3, r7
 8007c22:	4a05      	ldr	r2, [pc, #20]	@ (8007c38 <TouchCalibrate+0x58>)
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fa fca0 	bl	800256a <setCalibrationMatrix>
}
 8007c2a:	bf00      	nop
 8007c2c:	3730      	adds	r7, #48	@ 0x30
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bdb0      	pop	{r4, r5, r7, pc}
 8007c32:	bf00      	nop
 8007c34:	0800f010 	.word	0x0800f010
 8007c38:	20003560 	.word	0x20003560

08007c3c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8007c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007c74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007c40:	f7ff fe22 	bl	8007888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007c44:	480c      	ldr	r0, [pc, #48]	@ (8007c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007c46:	490d      	ldr	r1, [pc, #52]	@ (8007c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007c48:	4a0d      	ldr	r2, [pc, #52]	@ (8007c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007c4c:	e002      	b.n	8007c54 <LoopCopyDataInit>

08007c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007c52:	3304      	adds	r3, #4

08007c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007c58:	d3f9      	bcc.n	8007c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8007c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c60:	e001      	b.n	8007c66 <LoopFillZerobss>

08007c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c64:	3204      	adds	r2, #4

08007c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c68:	d3fb      	bcc.n	8007c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007c6a:	f004 fb93 	bl	800c394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c6e:	f7fe f81f 	bl	8005cb0 <main>
  bx  lr    
 8007c72:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8007c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c7c:	20002a28 	.word	0x20002a28
  ldr r2, =_sidata
 8007c80:	080254c4 	.word	0x080254c4
  ldr r2, =_sbss
 8007c84:	20002a28 	.word	0x20002a28
  ldr r4, =_ebss
 8007c88:	200036cc 	.word	0x200036cc

08007c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c8c:	e7fe      	b.n	8007c8c <ADC_IRQHandler>
	...

08007c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007c94:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd0 <HAL_Init+0x40>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a0d      	ldr	r2, [pc, #52]	@ (8007cd0 <HAL_Init+0x40>)
 8007c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd0 <HAL_Init+0x40>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8007cd0 <HAL_Init+0x40>)
 8007ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007cac:	4b08      	ldr	r3, [pc, #32]	@ (8007cd0 <HAL_Init+0x40>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a07      	ldr	r2, [pc, #28]	@ (8007cd0 <HAL_Init+0x40>)
 8007cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007cb8:	2003      	movs	r0, #3
 8007cba:	f000 f94f 	bl	8007f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007cbe:	200f      	movs	r0, #15
 8007cc0:	f000 f808 	bl	8007cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007cc4:	f7ff fb72 	bl	80073ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	40023c00 	.word	0x40023c00

08007cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007cdc:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <HAL_InitTick+0x54>)
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	4b12      	ldr	r3, [pc, #72]	@ (8007d2c <HAL_InitTick+0x58>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f967 	bl	8007fc6 <HAL_SYSTICK_Config>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e00e      	b.n	8007d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b0f      	cmp	r3, #15
 8007d06:	d80a      	bhi.n	8007d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d08:	2200      	movs	r2, #0
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	f000 f92f 	bl	8007f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007d14:	4a06      	ldr	r2, [pc, #24]	@ (8007d30 <HAL_InitTick+0x5c>)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e000      	b.n	8007d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20002854 	.word	0x20002854
 8007d2c:	2000285c 	.word	0x2000285c
 8007d30:	20002858 	.word	0x20002858

08007d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d34:	b480      	push	{r7}
 8007d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d38:	4b06      	ldr	r3, [pc, #24]	@ (8007d54 <HAL_IncTick+0x20>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4b06      	ldr	r3, [pc, #24]	@ (8007d58 <HAL_IncTick+0x24>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4413      	add	r3, r2
 8007d44:	4a04      	ldr	r2, [pc, #16]	@ (8007d58 <HAL_IncTick+0x24>)
 8007d46:	6013      	str	r3, [r2, #0]
}
 8007d48:	bf00      	nop
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	2000285c 	.word	0x2000285c
 8007d58:	2000357c 	.word	0x2000357c

08007d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8007d60:	4b03      	ldr	r3, [pc, #12]	@ (8007d70 <HAL_GetTick+0x14>)
 8007d62:	681b      	ldr	r3, [r3, #0]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	2000357c 	.word	0x2000357c

08007d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d7c:	f7ff ffee 	bl	8007d5c <HAL_GetTick>
 8007d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8c:	d005      	beq.n	8007d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8007db8 <HAL_Delay+0x44>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4413      	add	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007d9a:	bf00      	nop
 8007d9c:	f7ff ffde 	bl	8007d5c <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d8f7      	bhi.n	8007d9c <HAL_Delay+0x28>
  {
  }
}
 8007dac:	bf00      	nop
 8007dae:	bf00      	nop
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	2000285c 	.word	0x2000285c

08007dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8007e00 <__NVIC_SetPriorityGrouping+0x44>)
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007dd8:	4013      	ands	r3, r2
 8007dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007dee:	4a04      	ldr	r2, [pc, #16]	@ (8007e00 <__NVIC_SetPriorityGrouping+0x44>)
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	60d3      	str	r3, [r2, #12]
}
 8007df4:	bf00      	nop
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	e000ed00 	.word	0xe000ed00

08007e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e08:	4b04      	ldr	r3, [pc, #16]	@ (8007e1c <__NVIC_GetPriorityGrouping+0x18>)
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	0a1b      	lsrs	r3, r3, #8
 8007e0e:	f003 0307 	and.w	r3, r3, #7
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	e000ed00 	.word	0xe000ed00

08007e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	db0b      	blt.n	8007e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	f003 021f 	and.w	r2, r3, #31
 8007e38:	4907      	ldr	r1, [pc, #28]	@ (8007e58 <__NVIC_EnableIRQ+0x38>)
 8007e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e3e:	095b      	lsrs	r3, r3, #5
 8007e40:	2001      	movs	r0, #1
 8007e42:	fa00 f202 	lsl.w	r2, r0, r2
 8007e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	e000e100 	.word	0xe000e100

08007e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	db0a      	blt.n	8007e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	490c      	ldr	r1, [pc, #48]	@ (8007ea8 <__NVIC_SetPriority+0x4c>)
 8007e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e7a:	0112      	lsls	r2, r2, #4
 8007e7c:	b2d2      	uxtb	r2, r2
 8007e7e:	440b      	add	r3, r1
 8007e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e84:	e00a      	b.n	8007e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	4908      	ldr	r1, [pc, #32]	@ (8007eac <__NVIC_SetPriority+0x50>)
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	3b04      	subs	r3, #4
 8007e94:	0112      	lsls	r2, r2, #4
 8007e96:	b2d2      	uxtb	r2, r2
 8007e98:	440b      	add	r3, r1
 8007e9a:	761a      	strb	r2, [r3, #24]
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	e000e100 	.word	0xe000e100
 8007eac:	e000ed00 	.word	0xe000ed00

08007eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b089      	sub	sp, #36	@ 0x24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	f1c3 0307 	rsb	r3, r3, #7
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	bf28      	it	cs
 8007ece:	2304      	movcs	r3, #4
 8007ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	2b06      	cmp	r3, #6
 8007ed8:	d902      	bls.n	8007ee0 <NVIC_EncodePriority+0x30>
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	3b03      	subs	r3, #3
 8007ede:	e000      	b.n	8007ee2 <NVIC_EncodePriority+0x32>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	fa02 f303 	lsl.w	r3, r2, r3
 8007eee:	43da      	mvns	r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	401a      	ands	r2, r3
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	fa01 f303 	lsl.w	r3, r1, r3
 8007f02:	43d9      	mvns	r1, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f08:	4313      	orrs	r3, r2
         );
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3724      	adds	r7, #36	@ 0x24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
	...

08007f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f28:	d301      	bcc.n	8007f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e00f      	b.n	8007f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8007f58 <SysTick_Config+0x40>)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f36:	210f      	movs	r1, #15
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	f7ff ff8e 	bl	8007e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f40:	4b05      	ldr	r3, [pc, #20]	@ (8007f58 <SysTick_Config+0x40>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f46:	4b04      	ldr	r3, [pc, #16]	@ (8007f58 <SysTick_Config+0x40>)
 8007f48:	2207      	movs	r2, #7
 8007f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	e000e010 	.word	0xe000e010

08007f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff ff29 	bl	8007dbc <__NVIC_SetPriorityGrouping>
}
 8007f6a:	bf00      	nop
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b086      	sub	sp, #24
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	4603      	mov	r3, r0
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	607a      	str	r2, [r7, #4]
 8007f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f84:	f7ff ff3e 	bl	8007e04 <__NVIC_GetPriorityGrouping>
 8007f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	6978      	ldr	r0, [r7, #20]
 8007f90:	f7ff ff8e 	bl	8007eb0 <NVIC_EncodePriority>
 8007f94:	4602      	mov	r2, r0
 8007f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff ff5d 	bl	8007e5c <__NVIC_SetPriority>
}
 8007fa2:	bf00      	nop
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7ff ff31 	bl	8007e20 <__NVIC_EnableIRQ>
}
 8007fbe:	bf00      	nop
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b082      	sub	sp, #8
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7ff ffa2 	bl	8007f18 <SysTick_Config>
 8007fd4:	4603      	mov	r3, r0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007fec:	f7ff feb6 	bl	8007d5c <HAL_GetTick>
 8007ff0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d008      	beq.n	8008010 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2280      	movs	r2, #128	@ 0x80
 8008002:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e052      	b.n	80080b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 0216 	bic.w	r2, r2, #22
 800801e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695a      	ldr	r2, [r3, #20]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800802e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008034:	2b00      	cmp	r3, #0
 8008036:	d103      	bne.n	8008040 <HAL_DMA_Abort+0x62>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800803c:	2b00      	cmp	r3, #0
 800803e:	d007      	beq.n	8008050 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0208 	bic.w	r2, r2, #8
 800804e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0201 	bic.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008060:	e013      	b.n	800808a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008062:	f7ff fe7b 	bl	8007d5c <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	2b05      	cmp	r3, #5
 800806e:	d90c      	bls.n	800808a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2220      	movs	r2, #32
 8008074:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2203      	movs	r2, #3
 800807a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e015      	b.n	80080b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1e4      	bne.n	8008062 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800809c:	223f      	movs	r2, #63	@ 0x3f
 800809e:	409a      	lsls	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d004      	beq.n	80080dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2280      	movs	r2, #128	@ 0x80
 80080d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e00c      	b.n	80080f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2205      	movs	r2, #5
 80080e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0201 	bic.w	r2, r2, #1
 80080f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
	...

08008104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008104:	b480      	push	{r7}
 8008106:	b089      	sub	sp, #36	@ 0x24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800810e:	2300      	movs	r3, #0
 8008110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008112:	2300      	movs	r3, #0
 8008114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008116:	2300      	movs	r3, #0
 8008118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800811a:	2300      	movs	r3, #0
 800811c:	61fb      	str	r3, [r7, #28]
 800811e:	e16b      	b.n	80083f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008120:	2201      	movs	r2, #1
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	fa02 f303 	lsl.w	r3, r2, r3
 8008128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	4013      	ands	r3, r2
 8008132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	429a      	cmp	r2, r3
 800813a:	f040 815a 	bne.w	80083f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	2b01      	cmp	r3, #1
 8008148:	d005      	beq.n	8008156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008152:	2b02      	cmp	r3, #2
 8008154:	d130      	bne.n	80081b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	2203      	movs	r2, #3
 8008162:	fa02 f303 	lsl.w	r3, r2, r3
 8008166:	43db      	mvns	r3, r3
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	4013      	ands	r3, r2
 800816c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	fa02 f303 	lsl.w	r3, r2, r3
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	4313      	orrs	r3, r2
 800817e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800818c:	2201      	movs	r2, #1
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	fa02 f303 	lsl.w	r3, r2, r3
 8008194:	43db      	mvns	r3, r3
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	4013      	ands	r3, r2
 800819a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	091b      	lsrs	r3, r3, #4
 80081a2:	f003 0201 	and.w	r2, r3, #1
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f003 0303 	and.w	r3, r3, #3
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d017      	beq.n	80081f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	2203      	movs	r2, #3
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	43db      	mvns	r3, r3
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	4013      	ands	r3, r2
 80081da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	fa02 f303 	lsl.w	r3, r2, r3
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d123      	bne.n	8008248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	08da      	lsrs	r2, r3, #3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3208      	adds	r2, #8
 8008208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	f003 0307 	and.w	r3, r3, #7
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	220f      	movs	r2, #15
 8008218:	fa02 f303 	lsl.w	r3, r2, r3
 800821c:	43db      	mvns	r3, r3
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	4013      	ands	r3, r2
 8008222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	691a      	ldr	r2, [r3, #16]
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f003 0307 	and.w	r3, r3, #7
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	fa02 f303 	lsl.w	r3, r2, r3
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	4313      	orrs	r3, r2
 8008238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	08da      	lsrs	r2, r3, #3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3208      	adds	r2, #8
 8008242:	69b9      	ldr	r1, [r7, #24]
 8008244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	2203      	movs	r2, #3
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	43db      	mvns	r3, r3
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	4013      	ands	r3, r2
 800825e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f003 0203 	and.w	r2, r3, #3
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	4313      	orrs	r3, r2
 8008274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 80b4 	beq.w	80083f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	4b60      	ldr	r3, [pc, #384]	@ (8008410 <HAL_GPIO_Init+0x30c>)
 8008290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008292:	4a5f      	ldr	r2, [pc, #380]	@ (8008410 <HAL_GPIO_Init+0x30c>)
 8008294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008298:	6453      	str	r3, [r2, #68]	@ 0x44
 800829a:	4b5d      	ldr	r3, [pc, #372]	@ (8008410 <HAL_GPIO_Init+0x30c>)
 800829c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800829e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082a6:	4a5b      	ldr	r2, [pc, #364]	@ (8008414 <HAL_GPIO_Init+0x310>)
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	089b      	lsrs	r3, r3, #2
 80082ac:	3302      	adds	r3, #2
 80082ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	220f      	movs	r2, #15
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	43db      	mvns	r3, r3
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	4013      	ands	r3, r2
 80082c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a52      	ldr	r2, [pc, #328]	@ (8008418 <HAL_GPIO_Init+0x314>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d02b      	beq.n	800832a <HAL_GPIO_Init+0x226>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a51      	ldr	r2, [pc, #324]	@ (800841c <HAL_GPIO_Init+0x318>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d025      	beq.n	8008326 <HAL_GPIO_Init+0x222>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a50      	ldr	r2, [pc, #320]	@ (8008420 <HAL_GPIO_Init+0x31c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d01f      	beq.n	8008322 <HAL_GPIO_Init+0x21e>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a4f      	ldr	r2, [pc, #316]	@ (8008424 <HAL_GPIO_Init+0x320>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d019      	beq.n	800831e <HAL_GPIO_Init+0x21a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a4e      	ldr	r2, [pc, #312]	@ (8008428 <HAL_GPIO_Init+0x324>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d013      	beq.n	800831a <HAL_GPIO_Init+0x216>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a4d      	ldr	r2, [pc, #308]	@ (800842c <HAL_GPIO_Init+0x328>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d00d      	beq.n	8008316 <HAL_GPIO_Init+0x212>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a4c      	ldr	r2, [pc, #304]	@ (8008430 <HAL_GPIO_Init+0x32c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d007      	beq.n	8008312 <HAL_GPIO_Init+0x20e>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a4b      	ldr	r2, [pc, #300]	@ (8008434 <HAL_GPIO_Init+0x330>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d101      	bne.n	800830e <HAL_GPIO_Init+0x20a>
 800830a:	2307      	movs	r3, #7
 800830c:	e00e      	b.n	800832c <HAL_GPIO_Init+0x228>
 800830e:	2308      	movs	r3, #8
 8008310:	e00c      	b.n	800832c <HAL_GPIO_Init+0x228>
 8008312:	2306      	movs	r3, #6
 8008314:	e00a      	b.n	800832c <HAL_GPIO_Init+0x228>
 8008316:	2305      	movs	r3, #5
 8008318:	e008      	b.n	800832c <HAL_GPIO_Init+0x228>
 800831a:	2304      	movs	r3, #4
 800831c:	e006      	b.n	800832c <HAL_GPIO_Init+0x228>
 800831e:	2303      	movs	r3, #3
 8008320:	e004      	b.n	800832c <HAL_GPIO_Init+0x228>
 8008322:	2302      	movs	r3, #2
 8008324:	e002      	b.n	800832c <HAL_GPIO_Init+0x228>
 8008326:	2301      	movs	r3, #1
 8008328:	e000      	b.n	800832c <HAL_GPIO_Init+0x228>
 800832a:	2300      	movs	r3, #0
 800832c:	69fa      	ldr	r2, [r7, #28]
 800832e:	f002 0203 	and.w	r2, r2, #3
 8008332:	0092      	lsls	r2, r2, #2
 8008334:	4093      	lsls	r3, r2
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	4313      	orrs	r3, r2
 800833a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800833c:	4935      	ldr	r1, [pc, #212]	@ (8008414 <HAL_GPIO_Init+0x310>)
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	089b      	lsrs	r3, r3, #2
 8008342:	3302      	adds	r3, #2
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800834a:	4b3b      	ldr	r3, [pc, #236]	@ (8008438 <HAL_GPIO_Init+0x334>)
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	43db      	mvns	r3, r3
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	4013      	ands	r3, r2
 8008358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	4313      	orrs	r3, r2
 800836c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800836e:	4a32      	ldr	r2, [pc, #200]	@ (8008438 <HAL_GPIO_Init+0x334>)
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008374:	4b30      	ldr	r3, [pc, #192]	@ (8008438 <HAL_GPIO_Init+0x334>)
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	43db      	mvns	r3, r3
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	4013      	ands	r3, r2
 8008382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008398:	4a27      	ldr	r2, [pc, #156]	@ (8008438 <HAL_GPIO_Init+0x334>)
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800839e:	4b26      	ldr	r3, [pc, #152]	@ (8008438 <HAL_GPIO_Init+0x334>)
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	43db      	mvns	r3, r3
 80083a8:	69ba      	ldr	r2, [r7, #24]
 80083aa:	4013      	ands	r3, r2
 80083ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	4313      	orrs	r3, r2
 80083c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80083c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008438 <HAL_GPIO_Init+0x334>)
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80083c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008438 <HAL_GPIO_Init+0x334>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	43db      	mvns	r3, r3
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	4013      	ands	r3, r2
 80083d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80083ec:	4a12      	ldr	r2, [pc, #72]	@ (8008438 <HAL_GPIO_Init+0x334>)
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	3301      	adds	r3, #1
 80083f6:	61fb      	str	r3, [r7, #28]
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	2b0f      	cmp	r3, #15
 80083fc:	f67f ae90 	bls.w	8008120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008400:	bf00      	nop
 8008402:	bf00      	nop
 8008404:	3724      	adds	r7, #36	@ 0x24
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	40023800 	.word	0x40023800
 8008414:	40013800 	.word	0x40013800
 8008418:	40020000 	.word	0x40020000
 800841c:	40020400 	.word	0x40020400
 8008420:	40020800 	.word	0x40020800
 8008424:	40020c00 	.word	0x40020c00
 8008428:	40021000 	.word	0x40021000
 800842c:	40021400 	.word	0x40021400
 8008430:	40021800 	.word	0x40021800
 8008434:	40021c00 	.word	0x40021c00
 8008438:	40013c00 	.word	0x40013c00

0800843c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	887b      	ldrh	r3, [r7, #2]
 800844e:	4013      	ands	r3, r2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008454:	2301      	movs	r3, #1
 8008456:	73fb      	strb	r3, [r7, #15]
 8008458:	e001      	b.n	800845e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	807b      	strh	r3, [r7, #2]
 8008478:	4613      	mov	r3, r2
 800847a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800847c:	787b      	ldrb	r3, [r7, #1]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008482:	887a      	ldrh	r2, [r7, #2]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008488:	e003      	b.n	8008492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800848a:	887b      	ldrh	r3, [r7, #2]
 800848c:	041a      	lsls	r2, r3, #16
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	619a      	str	r2, [r3, #24]
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
	...

080084a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e267      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d075      	beq.n	80085aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80084be:	4b88      	ldr	r3, [pc, #544]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f003 030c 	and.w	r3, r3, #12
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d00c      	beq.n	80084e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084ca:	4b85      	ldr	r3, [pc, #532]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80084d2:	2b08      	cmp	r3, #8
 80084d4:	d112      	bne.n	80084fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084d6:	4b82      	ldr	r3, [pc, #520]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084e2:	d10b      	bne.n	80084fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084e4:	4b7e      	ldr	r3, [pc, #504]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d05b      	beq.n	80085a8 <HAL_RCC_OscConfig+0x108>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d157      	bne.n	80085a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e242      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008504:	d106      	bne.n	8008514 <HAL_RCC_OscConfig+0x74>
 8008506:	4b76      	ldr	r3, [pc, #472]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a75      	ldr	r2, [pc, #468]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 800850c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	e01d      	b.n	8008550 <HAL_RCC_OscConfig+0xb0>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800851c:	d10c      	bne.n	8008538 <HAL_RCC_OscConfig+0x98>
 800851e:	4b70      	ldr	r3, [pc, #448]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a6f      	ldr	r2, [pc, #444]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 8008524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	4b6d      	ldr	r3, [pc, #436]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a6c      	ldr	r2, [pc, #432]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 8008530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	e00b      	b.n	8008550 <HAL_RCC_OscConfig+0xb0>
 8008538:	4b69      	ldr	r3, [pc, #420]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a68      	ldr	r2, [pc, #416]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 800853e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008542:	6013      	str	r3, [r2, #0]
 8008544:	4b66      	ldr	r3, [pc, #408]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a65      	ldr	r2, [pc, #404]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 800854a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800854e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d013      	beq.n	8008580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008558:	f7ff fc00 	bl	8007d5c <HAL_GetTick>
 800855c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800855e:	e008      	b.n	8008572 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008560:	f7ff fbfc 	bl	8007d5c <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b64      	cmp	r3, #100	@ 0x64
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e207      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008572:	4b5b      	ldr	r3, [pc, #364]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f0      	beq.n	8008560 <HAL_RCC_OscConfig+0xc0>
 800857e:	e014      	b.n	80085aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008580:	f7ff fbec 	bl	8007d5c <HAL_GetTick>
 8008584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008586:	e008      	b.n	800859a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008588:	f7ff fbe8 	bl	8007d5c <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b64      	cmp	r3, #100	@ 0x64
 8008594:	d901      	bls.n	800859a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e1f3      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800859a:	4b51      	ldr	r3, [pc, #324]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1f0      	bne.n	8008588 <HAL_RCC_OscConfig+0xe8>
 80085a6:	e000      	b.n	80085aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d063      	beq.n	800867e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80085b6:	4b4a      	ldr	r3, [pc, #296]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f003 030c 	and.w	r3, r3, #12
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085c2:	4b47      	ldr	r3, [pc, #284]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80085ca:	2b08      	cmp	r3, #8
 80085cc:	d11c      	bne.n	8008608 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085ce:	4b44      	ldr	r3, [pc, #272]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d116      	bne.n	8008608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085da:	4b41      	ldr	r3, [pc, #260]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d005      	beq.n	80085f2 <HAL_RCC_OscConfig+0x152>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d001      	beq.n	80085f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e1c7      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085f2:	4b3b      	ldr	r3, [pc, #236]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4937      	ldr	r1, [pc, #220]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 8008602:	4313      	orrs	r3, r2
 8008604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008606:	e03a      	b.n	800867e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d020      	beq.n	8008652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008610:	4b34      	ldr	r3, [pc, #208]	@ (80086e4 <HAL_RCC_OscConfig+0x244>)
 8008612:	2201      	movs	r2, #1
 8008614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008616:	f7ff fba1 	bl	8007d5c <HAL_GetTick>
 800861a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800861c:	e008      	b.n	8008630 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800861e:	f7ff fb9d 	bl	8007d5c <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e1a8      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008630:	4b2b      	ldr	r3, [pc, #172]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0f0      	beq.n	800861e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800863c:	4b28      	ldr	r3, [pc, #160]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	4925      	ldr	r1, [pc, #148]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 800864c:	4313      	orrs	r3, r2
 800864e:	600b      	str	r3, [r1, #0]
 8008650:	e015      	b.n	800867e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008652:	4b24      	ldr	r3, [pc, #144]	@ (80086e4 <HAL_RCC_OscConfig+0x244>)
 8008654:	2200      	movs	r2, #0
 8008656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008658:	f7ff fb80 	bl	8007d5c <HAL_GetTick>
 800865c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800865e:	e008      	b.n	8008672 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008660:	f7ff fb7c 	bl	8007d5c <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d901      	bls.n	8008672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e187      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008672:	4b1b      	ldr	r3, [pc, #108]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1f0      	bne.n	8008660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	2b00      	cmp	r3, #0
 8008688:	d036      	beq.n	80086f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d016      	beq.n	80086c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008692:	4b15      	ldr	r3, [pc, #84]	@ (80086e8 <HAL_RCC_OscConfig+0x248>)
 8008694:	2201      	movs	r2, #1
 8008696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008698:	f7ff fb60 	bl	8007d5c <HAL_GetTick>
 800869c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800869e:	e008      	b.n	80086b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086a0:	f7ff fb5c 	bl	8007d5c <HAL_GetTick>
 80086a4:	4602      	mov	r2, r0
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d901      	bls.n	80086b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e167      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086b2:	4b0b      	ldr	r3, [pc, #44]	@ (80086e0 <HAL_RCC_OscConfig+0x240>)
 80086b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086b6:	f003 0302 	and.w	r3, r3, #2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0f0      	beq.n	80086a0 <HAL_RCC_OscConfig+0x200>
 80086be:	e01b      	b.n	80086f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086c0:	4b09      	ldr	r3, [pc, #36]	@ (80086e8 <HAL_RCC_OscConfig+0x248>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086c6:	f7ff fb49 	bl	8007d5c <HAL_GetTick>
 80086ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086cc:	e00e      	b.n	80086ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086ce:	f7ff fb45 	bl	8007d5c <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d907      	bls.n	80086ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e150      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
 80086e0:	40023800 	.word	0x40023800
 80086e4:	42470000 	.word	0x42470000
 80086e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086ec:	4b88      	ldr	r3, [pc, #544]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 80086ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1ea      	bne.n	80086ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 8097 	beq.w	8008834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008706:	2300      	movs	r3, #0
 8008708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800870a:	4b81      	ldr	r3, [pc, #516]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 800870c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10f      	bne.n	8008736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008716:	2300      	movs	r3, #0
 8008718:	60bb      	str	r3, [r7, #8]
 800871a:	4b7d      	ldr	r3, [pc, #500]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 800871c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871e:	4a7c      	ldr	r2, [pc, #496]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 8008720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008724:	6413      	str	r3, [r2, #64]	@ 0x40
 8008726:	4b7a      	ldr	r3, [pc, #488]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 8008728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800872e:	60bb      	str	r3, [r7, #8]
 8008730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008732:	2301      	movs	r3, #1
 8008734:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008736:	4b77      	ldr	r3, [pc, #476]	@ (8008914 <HAL_RCC_OscConfig+0x474>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800873e:	2b00      	cmp	r3, #0
 8008740:	d118      	bne.n	8008774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008742:	4b74      	ldr	r3, [pc, #464]	@ (8008914 <HAL_RCC_OscConfig+0x474>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a73      	ldr	r2, [pc, #460]	@ (8008914 <HAL_RCC_OscConfig+0x474>)
 8008748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800874c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800874e:	f7ff fb05 	bl	8007d5c <HAL_GetTick>
 8008752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008754:	e008      	b.n	8008768 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008756:	f7ff fb01 	bl	8007d5c <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	2b02      	cmp	r3, #2
 8008762:	d901      	bls.n	8008768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e10c      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008768:	4b6a      	ldr	r3, [pc, #424]	@ (8008914 <HAL_RCC_OscConfig+0x474>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008770:	2b00      	cmp	r3, #0
 8008772:	d0f0      	beq.n	8008756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d106      	bne.n	800878a <HAL_RCC_OscConfig+0x2ea>
 800877c:	4b64      	ldr	r3, [pc, #400]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 800877e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008780:	4a63      	ldr	r2, [pc, #396]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 8008782:	f043 0301 	orr.w	r3, r3, #1
 8008786:	6713      	str	r3, [r2, #112]	@ 0x70
 8008788:	e01c      	b.n	80087c4 <HAL_RCC_OscConfig+0x324>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	2b05      	cmp	r3, #5
 8008790:	d10c      	bne.n	80087ac <HAL_RCC_OscConfig+0x30c>
 8008792:	4b5f      	ldr	r3, [pc, #380]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 8008794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008796:	4a5e      	ldr	r2, [pc, #376]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 8008798:	f043 0304 	orr.w	r3, r3, #4
 800879c:	6713      	str	r3, [r2, #112]	@ 0x70
 800879e:	4b5c      	ldr	r3, [pc, #368]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 80087a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087a2:	4a5b      	ldr	r2, [pc, #364]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 80087a4:	f043 0301 	orr.w	r3, r3, #1
 80087a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80087aa:	e00b      	b.n	80087c4 <HAL_RCC_OscConfig+0x324>
 80087ac:	4b58      	ldr	r3, [pc, #352]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 80087ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087b0:	4a57      	ldr	r2, [pc, #348]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 80087b2:	f023 0301 	bic.w	r3, r3, #1
 80087b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80087b8:	4b55      	ldr	r3, [pc, #340]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 80087ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087bc:	4a54      	ldr	r2, [pc, #336]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 80087be:	f023 0304 	bic.w	r3, r3, #4
 80087c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d015      	beq.n	80087f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087cc:	f7ff fac6 	bl	8007d5c <HAL_GetTick>
 80087d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087d2:	e00a      	b.n	80087ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087d4:	f7ff fac2 	bl	8007d5c <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d901      	bls.n	80087ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e0cb      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087ea:	4b49      	ldr	r3, [pc, #292]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 80087ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0ee      	beq.n	80087d4 <HAL_RCC_OscConfig+0x334>
 80087f6:	e014      	b.n	8008822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087f8:	f7ff fab0 	bl	8007d5c <HAL_GetTick>
 80087fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087fe:	e00a      	b.n	8008816 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008800:	f7ff faac 	bl	8007d5c <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800880e:	4293      	cmp	r3, r2
 8008810:	d901      	bls.n	8008816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e0b5      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008816:	4b3e      	ldr	r3, [pc, #248]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 8008818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1ee      	bne.n	8008800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d105      	bne.n	8008834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008828:	4b39      	ldr	r3, [pc, #228]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 800882a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882c:	4a38      	ldr	r2, [pc, #224]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 800882e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008832:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 80a1 	beq.w	8008980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800883e:	4b34      	ldr	r3, [pc, #208]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 030c 	and.w	r3, r3, #12
 8008846:	2b08      	cmp	r3, #8
 8008848:	d05c      	beq.n	8008904 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	2b02      	cmp	r3, #2
 8008850:	d141      	bne.n	80088d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008852:	4b31      	ldr	r3, [pc, #196]	@ (8008918 <HAL_RCC_OscConfig+0x478>)
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008858:	f7ff fa80 	bl	8007d5c <HAL_GetTick>
 800885c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800885e:	e008      	b.n	8008872 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008860:	f7ff fa7c 	bl	8007d5c <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	2b02      	cmp	r3, #2
 800886c:	d901      	bls.n	8008872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e087      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008872:	4b27      	ldr	r3, [pc, #156]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1f0      	bne.n	8008860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	69da      	ldr	r2, [r3, #28]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	431a      	orrs	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888c:	019b      	lsls	r3, r3, #6
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008894:	085b      	lsrs	r3, r3, #1
 8008896:	3b01      	subs	r3, #1
 8008898:	041b      	lsls	r3, r3, #16
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a0:	061b      	lsls	r3, r3, #24
 80088a2:	491b      	ldr	r1, [pc, #108]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008918 <HAL_RCC_OscConfig+0x478>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088ae:	f7ff fa55 	bl	8007d5c <HAL_GetTick>
 80088b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088b4:	e008      	b.n	80088c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088b6:	f7ff fa51 	bl	8007d5c <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d901      	bls.n	80088c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e05c      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088c8:	4b11      	ldr	r3, [pc, #68]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0f0      	beq.n	80088b6 <HAL_RCC_OscConfig+0x416>
 80088d4:	e054      	b.n	8008980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088d6:	4b10      	ldr	r3, [pc, #64]	@ (8008918 <HAL_RCC_OscConfig+0x478>)
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088dc:	f7ff fa3e 	bl	8007d5c <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088e2:	e008      	b.n	80088f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088e4:	f7ff fa3a 	bl	8007d5c <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e045      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088f6:	4b06      	ldr	r3, [pc, #24]	@ (8008910 <HAL_RCC_OscConfig+0x470>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1f0      	bne.n	80088e4 <HAL_RCC_OscConfig+0x444>
 8008902:	e03d      	b.n	8008980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d107      	bne.n	800891c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e038      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
 8008910:	40023800 	.word	0x40023800
 8008914:	40007000 	.word	0x40007000
 8008918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800891c:	4b1b      	ldr	r3, [pc, #108]	@ (800898c <HAL_RCC_OscConfig+0x4ec>)
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d028      	beq.n	800897c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008934:	429a      	cmp	r2, r3
 8008936:	d121      	bne.n	800897c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008942:	429a      	cmp	r2, r3
 8008944:	d11a      	bne.n	800897c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800894c:	4013      	ands	r3, r2
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008954:	4293      	cmp	r3, r2
 8008956:	d111      	bne.n	800897c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008962:	085b      	lsrs	r3, r3, #1
 8008964:	3b01      	subs	r3, #1
 8008966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008968:	429a      	cmp	r2, r3
 800896a:	d107      	bne.n	800897c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008978:	429a      	cmp	r2, r3
 800897a:	d001      	beq.n	8008980 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e000      	b.n	8008982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	40023800 	.word	0x40023800

08008990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e0cc      	b.n	8008b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089a4:	4b68      	ldr	r3, [pc, #416]	@ (8008b48 <HAL_RCC_ClockConfig+0x1b8>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d90c      	bls.n	80089cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089b2:	4b65      	ldr	r3, [pc, #404]	@ (8008b48 <HAL_RCC_ClockConfig+0x1b8>)
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	b2d2      	uxtb	r2, r2
 80089b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ba:	4b63      	ldr	r3, [pc, #396]	@ (8008b48 <HAL_RCC_ClockConfig+0x1b8>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 0307 	and.w	r3, r3, #7
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d001      	beq.n	80089cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e0b8      	b.n	8008b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d020      	beq.n	8008a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d005      	beq.n	80089f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089e4:	4b59      	ldr	r3, [pc, #356]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	4a58      	ldr	r2, [pc, #352]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 80089ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80089ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0308 	and.w	r3, r3, #8
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089fc:	4b53      	ldr	r3, [pc, #332]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	4a52      	ldr	r2, [pc, #328]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a08:	4b50      	ldr	r3, [pc, #320]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	494d      	ldr	r1, [pc, #308]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d044      	beq.n	8008ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d107      	bne.n	8008a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a2e:	4b47      	ldr	r3, [pc, #284]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d119      	bne.n	8008a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e07f      	b.n	8008b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d003      	beq.n	8008a4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d107      	bne.n	8008a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d109      	bne.n	8008a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e06f      	b.n	8008b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e067      	b.n	8008b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a6e:	4b37      	ldr	r3, [pc, #220]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f023 0203 	bic.w	r2, r3, #3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	4934      	ldr	r1, [pc, #208]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a80:	f7ff f96c 	bl	8007d5c <HAL_GetTick>
 8008a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a86:	e00a      	b.n	8008a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a88:	f7ff f968 	bl	8007d5c <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d901      	bls.n	8008a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e04f      	b.n	8008b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f003 020c 	and.w	r2, r3, #12
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d1eb      	bne.n	8008a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ab0:	4b25      	ldr	r3, [pc, #148]	@ (8008b48 <HAL_RCC_ClockConfig+0x1b8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d20c      	bcs.n	8008ad8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008abe:	4b22      	ldr	r3, [pc, #136]	@ (8008b48 <HAL_RCC_ClockConfig+0x1b8>)
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	b2d2      	uxtb	r2, r2
 8008ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ac6:	4b20      	ldr	r3, [pc, #128]	@ (8008b48 <HAL_RCC_ClockConfig+0x1b8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0307 	and.w	r3, r3, #7
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d001      	beq.n	8008ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e032      	b.n	8008b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d008      	beq.n	8008af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ae4:	4b19      	ldr	r3, [pc, #100]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	4916      	ldr	r1, [pc, #88]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0308 	and.w	r3, r3, #8
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d009      	beq.n	8008b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b02:	4b12      	ldr	r3, [pc, #72]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	490e      	ldr	r1, [pc, #56]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008b16:	f000 f821 	bl	8008b5c <HAL_RCC_GetSysClockFreq>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b4c <HAL_RCC_ClockConfig+0x1bc>)
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	091b      	lsrs	r3, r3, #4
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	490a      	ldr	r1, [pc, #40]	@ (8008b50 <HAL_RCC_ClockConfig+0x1c0>)
 8008b28:	5ccb      	ldrb	r3, [r1, r3]
 8008b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b2e:	4a09      	ldr	r2, [pc, #36]	@ (8008b54 <HAL_RCC_ClockConfig+0x1c4>)
 8008b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008b32:	4b09      	ldr	r3, [pc, #36]	@ (8008b58 <HAL_RCC_ClockConfig+0x1c8>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff f8cc 	bl	8007cd4 <HAL_InitTick>

  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	40023c00 	.word	0x40023c00
 8008b4c:	40023800 	.word	0x40023800
 8008b50:	08022f38 	.word	0x08022f38
 8008b54:	20002854 	.word	0x20002854
 8008b58:	20002858 	.word	0x20002858

08008b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b60:	b094      	sub	sp, #80	@ 0x50
 8008b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b74:	4b79      	ldr	r3, [pc, #484]	@ (8008d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f003 030c 	and.w	r3, r3, #12
 8008b7c:	2b08      	cmp	r3, #8
 8008b7e:	d00d      	beq.n	8008b9c <HAL_RCC_GetSysClockFreq+0x40>
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	f200 80e1 	bhi.w	8008d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <HAL_RCC_GetSysClockFreq+0x34>
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d003      	beq.n	8008b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8008b8e:	e0db      	b.n	8008d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b90:	4b73      	ldr	r3, [pc, #460]	@ (8008d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8008b92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b94:	e0db      	b.n	8008d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b96:	4b73      	ldr	r3, [pc, #460]	@ (8008d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8008b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b9a:	e0d8      	b.n	8008d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8008d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ba4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8008d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d063      	beq.n	8008c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8008d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	099b      	lsrs	r3, r3, #6
 8008bb8:	2200      	movs	r2, #0
 8008bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008bbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008bce:	4622      	mov	r2, r4
 8008bd0:	462b      	mov	r3, r5
 8008bd2:	f04f 0000 	mov.w	r0, #0
 8008bd6:	f04f 0100 	mov.w	r1, #0
 8008bda:	0159      	lsls	r1, r3, #5
 8008bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008be0:	0150      	lsls	r0, r2, #5
 8008be2:	4602      	mov	r2, r0
 8008be4:	460b      	mov	r3, r1
 8008be6:	4621      	mov	r1, r4
 8008be8:	1a51      	subs	r1, r2, r1
 8008bea:	6139      	str	r1, [r7, #16]
 8008bec:	4629      	mov	r1, r5
 8008bee:	eb63 0301 	sbc.w	r3, r3, r1
 8008bf2:	617b      	str	r3, [r7, #20]
 8008bf4:	f04f 0200 	mov.w	r2, #0
 8008bf8:	f04f 0300 	mov.w	r3, #0
 8008bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c00:	4659      	mov	r1, fp
 8008c02:	018b      	lsls	r3, r1, #6
 8008c04:	4651      	mov	r1, sl
 8008c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c0a:	4651      	mov	r1, sl
 8008c0c:	018a      	lsls	r2, r1, #6
 8008c0e:	4651      	mov	r1, sl
 8008c10:	ebb2 0801 	subs.w	r8, r2, r1
 8008c14:	4659      	mov	r1, fp
 8008c16:	eb63 0901 	sbc.w	r9, r3, r1
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	f04f 0300 	mov.w	r3, #0
 8008c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c2e:	4690      	mov	r8, r2
 8008c30:	4699      	mov	r9, r3
 8008c32:	4623      	mov	r3, r4
 8008c34:	eb18 0303 	adds.w	r3, r8, r3
 8008c38:	60bb      	str	r3, [r7, #8]
 8008c3a:	462b      	mov	r3, r5
 8008c3c:	eb49 0303 	adc.w	r3, r9, r3
 8008c40:	60fb      	str	r3, [r7, #12]
 8008c42:	f04f 0200 	mov.w	r2, #0
 8008c46:	f04f 0300 	mov.w	r3, #0
 8008c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c4e:	4629      	mov	r1, r5
 8008c50:	024b      	lsls	r3, r1, #9
 8008c52:	4621      	mov	r1, r4
 8008c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c58:	4621      	mov	r1, r4
 8008c5a:	024a      	lsls	r2, r1, #9
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c62:	2200      	movs	r2, #0
 8008c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c6c:	f7f7 ffb6 	bl	8000bdc <__aeabi_uldivmod>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4613      	mov	r3, r2
 8008c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c78:	e058      	b.n	8008d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c7a:	4b38      	ldr	r3, [pc, #224]	@ (8008d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	099b      	lsrs	r3, r3, #6
 8008c80:	2200      	movs	r2, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	4611      	mov	r1, r2
 8008c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c8a:	623b      	str	r3, [r7, #32]
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008c94:	4642      	mov	r2, r8
 8008c96:	464b      	mov	r3, r9
 8008c98:	f04f 0000 	mov.w	r0, #0
 8008c9c:	f04f 0100 	mov.w	r1, #0
 8008ca0:	0159      	lsls	r1, r3, #5
 8008ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ca6:	0150      	lsls	r0, r2, #5
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4641      	mov	r1, r8
 8008cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8008cb8:	f04f 0200 	mov.w	r2, #0
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8008cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8008cd4:	f04f 0200 	mov.w	r2, #0
 8008cd8:	f04f 0300 	mov.w	r3, #0
 8008cdc:	00eb      	lsls	r3, r5, #3
 8008cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ce2:	00e2      	lsls	r2, r4, #3
 8008ce4:	4614      	mov	r4, r2
 8008ce6:	461d      	mov	r5, r3
 8008ce8:	4643      	mov	r3, r8
 8008cea:	18e3      	adds	r3, r4, r3
 8008cec:	603b      	str	r3, [r7, #0]
 8008cee:	464b      	mov	r3, r9
 8008cf0:	eb45 0303 	adc.w	r3, r5, r3
 8008cf4:	607b      	str	r3, [r7, #4]
 8008cf6:	f04f 0200 	mov.w	r2, #0
 8008cfa:	f04f 0300 	mov.w	r3, #0
 8008cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d02:	4629      	mov	r1, r5
 8008d04:	028b      	lsls	r3, r1, #10
 8008d06:	4621      	mov	r1, r4
 8008d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	028a      	lsls	r2, r1, #10
 8008d10:	4610      	mov	r0, r2
 8008d12:	4619      	mov	r1, r3
 8008d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d16:	2200      	movs	r2, #0
 8008d18:	61bb      	str	r3, [r7, #24]
 8008d1a:	61fa      	str	r2, [r7, #28]
 8008d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d20:	f7f7 ff5c 	bl	8000bdc <__aeabi_uldivmod>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4613      	mov	r3, r2
 8008d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	0c1b      	lsrs	r3, r3, #16
 8008d32:	f003 0303 	and.w	r3, r3, #3
 8008d36:	3301      	adds	r3, #1
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008d3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d46:	e002      	b.n	8008d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d48:	4b05      	ldr	r3, [pc, #20]	@ (8008d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3750      	adds	r7, #80	@ 0x50
 8008d54:	46bd      	mov	sp, r7
 8008d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d5a:	bf00      	nop
 8008d5c:	40023800 	.word	0x40023800
 8008d60:	00f42400 	.word	0x00f42400
 8008d64:	007a1200 	.word	0x007a1200

08008d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d6c:	4b03      	ldr	r3, [pc, #12]	@ (8008d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20002854 	.word	0x20002854

08008d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d84:	f7ff fff0 	bl	8008d68 <HAL_RCC_GetHCLKFreq>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	4b05      	ldr	r3, [pc, #20]	@ (8008da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	0a9b      	lsrs	r3, r3, #10
 8008d90:	f003 0307 	and.w	r3, r3, #7
 8008d94:	4903      	ldr	r1, [pc, #12]	@ (8008da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d96:	5ccb      	ldrb	r3, [r1, r3]
 8008d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	40023800 	.word	0x40023800
 8008da4:	08022f48 	.word	0x08022f48

08008da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008dac:	f7ff ffdc 	bl	8008d68 <HAL_RCC_GetHCLKFreq>
 8008db0:	4602      	mov	r2, r0
 8008db2:	4b05      	ldr	r3, [pc, #20]	@ (8008dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	0b5b      	lsrs	r3, r3, #13
 8008db8:	f003 0307 	and.w	r3, r3, #7
 8008dbc:	4903      	ldr	r1, [pc, #12]	@ (8008dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008dbe:	5ccb      	ldrb	r3, [r1, r3]
 8008dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	40023800 	.word	0x40023800
 8008dcc:	08022f48 	.word	0x08022f48

08008dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e07b      	b.n	8008eda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d108      	bne.n	8008dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008df2:	d009      	beq.n	8008e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	61da      	str	r2, [r3, #28]
 8008dfa:	e005      	b.n	8008e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d106      	bne.n	8008e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7fe faea 	bl	80073fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008e50:	431a      	orrs	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	431a      	orrs	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e82:	431a      	orrs	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a1b      	ldr	r3, [r3, #32]
 8008e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e8c:	ea42 0103 	orr.w	r1, r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	0c1b      	lsrs	r3, r3, #16
 8008ea6:	f003 0104 	and.w	r1, r3, #4
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eae:	f003 0210 	and.w	r2, r3, #16
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69da      	ldr	r2, [r3, #28]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ec8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b08a      	sub	sp, #40	@ 0x28
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
 8008eee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ef4:	f7fe ff32 	bl	8007d5c <HAL_GetTick>
 8008ef8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f00:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008f08:	887b      	ldrh	r3, [r7, #2]
 8008f0a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f0c:	7ffb      	ldrb	r3, [r7, #31]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d00c      	beq.n	8008f2c <HAL_SPI_TransmitReceive+0x4a>
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f18:	d106      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x46>
 8008f22:	7ffb      	ldrb	r3, [r7, #31]
 8008f24:	2b04      	cmp	r3, #4
 8008f26:	d001      	beq.n	8008f2c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8008f28:	2302      	movs	r3, #2
 8008f2a:	e17f      	b.n	800922c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d005      	beq.n	8008f3e <HAL_SPI_TransmitReceive+0x5c>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <HAL_SPI_TransmitReceive+0x5c>
 8008f38:	887b      	ldrh	r3, [r7, #2]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e174      	b.n	800922c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_SPI_TransmitReceive+0x6e>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e16d      	b.n	800922c <HAL_SPI_TransmitReceive+0x34a>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d003      	beq.n	8008f6c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2205      	movs	r2, #5
 8008f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	887a      	ldrh	r2, [r7, #2]
 8008f7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	887a      	ldrh	r2, [r7, #2]
 8008f82:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	887a      	ldrh	r2, [r7, #2]
 8008f8e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	887a      	ldrh	r2, [r7, #2]
 8008f94:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fac:	2b40      	cmp	r3, #64	@ 0x40
 8008fae:	d007      	beq.n	8008fc0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fc8:	d17e      	bne.n	80090c8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <HAL_SPI_TransmitReceive+0xf6>
 8008fd2:	8afb      	ldrh	r3, [r7, #22]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d16c      	bne.n	80090b2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fdc:	881a      	ldrh	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fe8:	1c9a      	adds	r2, r3, #2
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ffc:	e059      	b.n	80090b2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	f003 0302 	and.w	r3, r3, #2
 8009008:	2b02      	cmp	r3, #2
 800900a:	d11b      	bne.n	8009044 <HAL_SPI_TransmitReceive+0x162>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009010:	b29b      	uxth	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d016      	beq.n	8009044 <HAL_SPI_TransmitReceive+0x162>
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	2b01      	cmp	r3, #1
 800901a:	d113      	bne.n	8009044 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009020:	881a      	ldrh	r2, [r3, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800902c:	1c9a      	adds	r2, r3, #2
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009036:	b29b      	uxth	r3, r3
 8009038:	3b01      	subs	r3, #1
 800903a:	b29a      	uxth	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009040:	2300      	movs	r3, #0
 8009042:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b01      	cmp	r3, #1
 8009050:	d119      	bne.n	8009086 <HAL_SPI_TransmitReceive+0x1a4>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009056:	b29b      	uxth	r3, r3
 8009058:	2b00      	cmp	r3, #0
 800905a:	d014      	beq.n	8009086 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68da      	ldr	r2, [r3, #12]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009066:	b292      	uxth	r2, r2
 8009068:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800906e:	1c9a      	adds	r2, r3, #2
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009078:	b29b      	uxth	r3, r3
 800907a:	3b01      	subs	r3, #1
 800907c:	b29a      	uxth	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009082:	2301      	movs	r3, #1
 8009084:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009086:	f7fe fe69 	bl	8007d5c <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009092:	429a      	cmp	r2, r3
 8009094:	d80d      	bhi.n	80090b2 <HAL_SPI_TransmitReceive+0x1d0>
 8009096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909c:	d009      	beq.n	80090b2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e0bc      	b.n	800922c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1a0      	bne.n	8008ffe <HAL_SPI_TransmitReceive+0x11c>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d19b      	bne.n	8008ffe <HAL_SPI_TransmitReceive+0x11c>
 80090c6:	e082      	b.n	80091ce <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <HAL_SPI_TransmitReceive+0x1f4>
 80090d0:	8afb      	ldrh	r3, [r7, #22]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d171      	bne.n	80091ba <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	330c      	adds	r3, #12
 80090e0:	7812      	ldrb	r2, [r2, #0]
 80090e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	3b01      	subs	r3, #1
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090fc:	e05d      	b.n	80091ba <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b02      	cmp	r3, #2
 800910a:	d11c      	bne.n	8009146 <HAL_SPI_TransmitReceive+0x264>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009110:	b29b      	uxth	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d017      	beq.n	8009146 <HAL_SPI_TransmitReceive+0x264>
 8009116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009118:	2b01      	cmp	r3, #1
 800911a:	d114      	bne.n	8009146 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	330c      	adds	r3, #12
 8009126:	7812      	ldrb	r2, [r2, #0]
 8009128:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009138:	b29b      	uxth	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	b29a      	uxth	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b01      	cmp	r3, #1
 8009152:	d119      	bne.n	8009188 <HAL_SPI_TransmitReceive+0x2a6>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009158:	b29b      	uxth	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d014      	beq.n	8009188 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009168:	b2d2      	uxtb	r2, r2
 800916a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800917a:	b29b      	uxth	r3, r3
 800917c:	3b01      	subs	r3, #1
 800917e:	b29a      	uxth	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009184:	2301      	movs	r3, #1
 8009186:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009188:	f7fe fde8 	bl	8007d5c <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009194:	429a      	cmp	r2, r3
 8009196:	d803      	bhi.n	80091a0 <HAL_SPI_TransmitReceive+0x2be>
 8009198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919e:	d102      	bne.n	80091a6 <HAL_SPI_TransmitReceive+0x2c4>
 80091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d109      	bne.n	80091ba <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e038      	b.n	800922c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d19c      	bne.n	80090fe <HAL_SPI_TransmitReceive+0x21c>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d197      	bne.n	80090fe <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091ce:	6a3a      	ldr	r2, [r7, #32]
 80091d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 f8b6 	bl	8009344 <SPI_EndRxTxTransaction>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d008      	beq.n	80091f0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2220      	movs	r2, #32
 80091e2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e01d      	b.n	800922c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091f8:	2300      	movs	r3, #0
 80091fa:	613b      	str	r3, [r7, #16]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	613b      	str	r3, [r7, #16]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	613b      	str	r3, [r7, #16]
 800920c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e000      	b.n	800922c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800922a:	2300      	movs	r3, #0
  }
}
 800922c:	4618      	mov	r0, r3
 800922e:	3728      	adds	r7, #40	@ 0x28
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	4613      	mov	r3, r2
 8009242:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009244:	f7fe fd8a 	bl	8007d5c <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	1a9b      	subs	r3, r3, r2
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	4413      	add	r3, r2
 8009252:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009254:	f7fe fd82 	bl	8007d5c <HAL_GetTick>
 8009258:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800925a:	4b39      	ldr	r3, [pc, #228]	@ (8009340 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	015b      	lsls	r3, r3, #5
 8009260:	0d1b      	lsrs	r3, r3, #20
 8009262:	69fa      	ldr	r2, [r7, #28]
 8009264:	fb02 f303 	mul.w	r3, r2, r3
 8009268:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800926a:	e054      	b.n	8009316 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009272:	d050      	beq.n	8009316 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009274:	f7fe fd72 	bl	8007d5c <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	69fa      	ldr	r2, [r7, #28]
 8009280:	429a      	cmp	r2, r3
 8009282:	d902      	bls.n	800928a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d13d      	bne.n	8009306 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009298:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092a2:	d111      	bne.n	80092c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092ac:	d004      	beq.n	80092b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092b6:	d107      	bne.n	80092c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d0:	d10f      	bne.n	80092f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e017      	b.n	8009336 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800930c:	2300      	movs	r3, #0
 800930e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	3b01      	subs	r3, #1
 8009314:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4013      	ands	r3, r2
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	429a      	cmp	r2, r3
 8009324:	bf0c      	ite	eq
 8009326:	2301      	moveq	r3, #1
 8009328:	2300      	movne	r3, #0
 800932a:	b2db      	uxtb	r3, r3
 800932c:	461a      	mov	r2, r3
 800932e:	79fb      	ldrb	r3, [r7, #7]
 8009330:	429a      	cmp	r2, r3
 8009332:	d19b      	bne.n	800926c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3720      	adds	r7, #32
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20002854 	.word	0x20002854

08009344 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af02      	add	r7, sp, #8
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2201      	movs	r2, #1
 8009358:	2102      	movs	r1, #2
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7ff ff6a 	bl	8009234 <SPI_WaitFlagStateUntilTimeout>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d007      	beq.n	8009376 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800936a:	f043 0220 	orr.w	r2, r3, #32
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	e032      	b.n	80093dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009376:	4b1b      	ldr	r3, [pc, #108]	@ (80093e4 <SPI_EndRxTxTransaction+0xa0>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a1b      	ldr	r2, [pc, #108]	@ (80093e8 <SPI_EndRxTxTransaction+0xa4>)
 800937c:	fba2 2303 	umull	r2, r3, r2, r3
 8009380:	0d5b      	lsrs	r3, r3, #21
 8009382:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009386:	fb02 f303 	mul.w	r3, r2, r3
 800938a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009394:	d112      	bne.n	80093bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	2200      	movs	r2, #0
 800939e:	2180      	movs	r1, #128	@ 0x80
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f7ff ff47 	bl	8009234 <SPI_WaitFlagStateUntilTimeout>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d016      	beq.n	80093da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b0:	f043 0220 	orr.w	r2, r3, #32
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e00f      	b.n	80093dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00a      	beq.n	80093d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093d2:	2b80      	cmp	r3, #128	@ 0x80
 80093d4:	d0f2      	beq.n	80093bc <SPI_EndRxTxTransaction+0x78>
 80093d6:	e000      	b.n	80093da <SPI_EndRxTxTransaction+0x96>
        break;
 80093d8:	bf00      	nop
  }

  return HAL_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3718      	adds	r7, #24
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	20002854 	.word	0x20002854
 80093e8:	165e9f81 	.word	0x165e9f81

080093ec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e038      	b.n	8009474 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d106      	bne.n	800941c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f7fe f918 	bl	800764c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3308      	adds	r3, #8
 8009424:	4619      	mov	r1, r3
 8009426:	4610      	mov	r0, r2
 8009428:	f001 fd8c 	bl	800af44 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6818      	ldr	r0, [r3, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	461a      	mov	r2, r3
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	f001 fdee 	bl	800b018 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6858      	ldr	r0, [r3, #4]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	f001 fe1b 	bl	800b084 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	6892      	ldr	r2, [r2, #8]
 8009456:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	6892      	ldr	r2, [r2, #8]
 8009462:	f041 0101 	orr.w	r1, r1, #1
 8009466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e041      	b.n	8009512 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d106      	bne.n	80094a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7fd fff2 	bl	800748c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3304      	adds	r3, #4
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f000 fa7e 	bl	80099bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b01      	cmp	r3, #1
 800952e:	d001      	beq.n	8009534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e04e      	b.n	80095d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2202      	movs	r2, #2
 8009538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f042 0201 	orr.w	r2, r2, #1
 800954a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a23      	ldr	r2, [pc, #140]	@ (80095e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d022      	beq.n	800959c <HAL_TIM_Base_Start_IT+0x80>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800955e:	d01d      	beq.n	800959c <HAL_TIM_Base_Start_IT+0x80>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a1f      	ldr	r2, [pc, #124]	@ (80095e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d018      	beq.n	800959c <HAL_TIM_Base_Start_IT+0x80>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a1e      	ldr	r2, [pc, #120]	@ (80095e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d013      	beq.n	800959c <HAL_TIM_Base_Start_IT+0x80>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a1c      	ldr	r2, [pc, #112]	@ (80095ec <HAL_TIM_Base_Start_IT+0xd0>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d00e      	beq.n	800959c <HAL_TIM_Base_Start_IT+0x80>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a1b      	ldr	r2, [pc, #108]	@ (80095f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d009      	beq.n	800959c <HAL_TIM_Base_Start_IT+0x80>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a19      	ldr	r2, [pc, #100]	@ (80095f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d004      	beq.n	800959c <HAL_TIM_Base_Start_IT+0x80>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a18      	ldr	r2, [pc, #96]	@ (80095f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d111      	bne.n	80095c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	f003 0307 	and.w	r3, r3, #7
 80095a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b06      	cmp	r3, #6
 80095ac:	d010      	beq.n	80095d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f042 0201 	orr.w	r2, r2, #1
 80095bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095be:	e007      	b.n	80095d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0201 	orr.w	r2, r2, #1
 80095ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	40010000 	.word	0x40010000
 80095e4:	40000400 	.word	0x40000400
 80095e8:	40000800 	.word	0x40000800
 80095ec:	40000c00 	.word	0x40000c00
 80095f0:	40010400 	.word	0x40010400
 80095f4:	40014000 	.word	0x40014000
 80095f8:	40001800 	.word	0x40001800

080095fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d020      	beq.n	8009660 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f003 0302 	and.w	r3, r3, #2
 8009624:	2b00      	cmp	r3, #0
 8009626:	d01b      	beq.n	8009660 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f06f 0202 	mvn.w	r2, #2
 8009630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f999 	bl	800997e <HAL_TIM_IC_CaptureCallback>
 800964c:	e005      	b.n	800965a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f98b 	bl	800996a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f99c 	bl	8009992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	f003 0304 	and.w	r3, r3, #4
 8009666:	2b00      	cmp	r3, #0
 8009668:	d020      	beq.n	80096ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d01b      	beq.n	80096ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f06f 0204 	mvn.w	r2, #4
 800967c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2202      	movs	r2, #2
 8009682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f973 	bl	800997e <HAL_TIM_IC_CaptureCallback>
 8009698:	e005      	b.n	80096a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f965 	bl	800996a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f976 	bl	8009992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	f003 0308 	and.w	r3, r3, #8
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d020      	beq.n	80096f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f003 0308 	and.w	r3, r3, #8
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01b      	beq.n	80096f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f06f 0208 	mvn.w	r2, #8
 80096c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2204      	movs	r2, #4
 80096ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	f003 0303 	and.w	r3, r3, #3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f94d 	bl	800997e <HAL_TIM_IC_CaptureCallback>
 80096e4:	e005      	b.n	80096f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f93f 	bl	800996a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f950 	bl	8009992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f003 0310 	and.w	r3, r3, #16
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d020      	beq.n	8009744 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b00      	cmp	r3, #0
 800970a:	d01b      	beq.n	8009744 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f06f 0210 	mvn.w	r2, #16
 8009714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2208      	movs	r2, #8
 800971a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f927 	bl	800997e <HAL_TIM_IC_CaptureCallback>
 8009730:	e005      	b.n	800973e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f919 	bl	800996a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f92a 	bl	8009992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00c      	beq.n	8009768 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b00      	cmp	r3, #0
 8009756:	d007      	beq.n	8009768 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f06f 0201 	mvn.w	r2, #1
 8009760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7fd fa3c 	bl	8006be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00c      	beq.n	800978c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009778:	2b00      	cmp	r3, #0
 800977a:	d007      	beq.n	800978c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fae4 	bl	8009d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00c      	beq.n	80097b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800979c:	2b00      	cmp	r3, #0
 800979e:	d007      	beq.n	80097b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80097a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f8fb 	bl	80099a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00c      	beq.n	80097d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f003 0320 	and.w	r3, r3, #32
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d007      	beq.n	80097d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f06f 0220 	mvn.w	r2, #32
 80097cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fab6 	bl	8009d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097d4:	bf00      	nop
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d101      	bne.n	80097f8 <HAL_TIM_ConfigClockSource+0x1c>
 80097f4:	2302      	movs	r3, #2
 80097f6:	e0b4      	b.n	8009962 <HAL_TIM_ConfigClockSource+0x186>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800981e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009830:	d03e      	beq.n	80098b0 <HAL_TIM_ConfigClockSource+0xd4>
 8009832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009836:	f200 8087 	bhi.w	8009948 <HAL_TIM_ConfigClockSource+0x16c>
 800983a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800983e:	f000 8086 	beq.w	800994e <HAL_TIM_ConfigClockSource+0x172>
 8009842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009846:	d87f      	bhi.n	8009948 <HAL_TIM_ConfigClockSource+0x16c>
 8009848:	2b70      	cmp	r3, #112	@ 0x70
 800984a:	d01a      	beq.n	8009882 <HAL_TIM_ConfigClockSource+0xa6>
 800984c:	2b70      	cmp	r3, #112	@ 0x70
 800984e:	d87b      	bhi.n	8009948 <HAL_TIM_ConfigClockSource+0x16c>
 8009850:	2b60      	cmp	r3, #96	@ 0x60
 8009852:	d050      	beq.n	80098f6 <HAL_TIM_ConfigClockSource+0x11a>
 8009854:	2b60      	cmp	r3, #96	@ 0x60
 8009856:	d877      	bhi.n	8009948 <HAL_TIM_ConfigClockSource+0x16c>
 8009858:	2b50      	cmp	r3, #80	@ 0x50
 800985a:	d03c      	beq.n	80098d6 <HAL_TIM_ConfigClockSource+0xfa>
 800985c:	2b50      	cmp	r3, #80	@ 0x50
 800985e:	d873      	bhi.n	8009948 <HAL_TIM_ConfigClockSource+0x16c>
 8009860:	2b40      	cmp	r3, #64	@ 0x40
 8009862:	d058      	beq.n	8009916 <HAL_TIM_ConfigClockSource+0x13a>
 8009864:	2b40      	cmp	r3, #64	@ 0x40
 8009866:	d86f      	bhi.n	8009948 <HAL_TIM_ConfigClockSource+0x16c>
 8009868:	2b30      	cmp	r3, #48	@ 0x30
 800986a:	d064      	beq.n	8009936 <HAL_TIM_ConfigClockSource+0x15a>
 800986c:	2b30      	cmp	r3, #48	@ 0x30
 800986e:	d86b      	bhi.n	8009948 <HAL_TIM_ConfigClockSource+0x16c>
 8009870:	2b20      	cmp	r3, #32
 8009872:	d060      	beq.n	8009936 <HAL_TIM_ConfigClockSource+0x15a>
 8009874:	2b20      	cmp	r3, #32
 8009876:	d867      	bhi.n	8009948 <HAL_TIM_ConfigClockSource+0x16c>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d05c      	beq.n	8009936 <HAL_TIM_ConfigClockSource+0x15a>
 800987c:	2b10      	cmp	r3, #16
 800987e:	d05a      	beq.n	8009936 <HAL_TIM_ConfigClockSource+0x15a>
 8009880:	e062      	b.n	8009948 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009892:	f000 f9b9 	bl	8009c08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80098a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	609a      	str	r2, [r3, #8]
      break;
 80098ae:	e04f      	b.n	8009950 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098c0:	f000 f9a2 	bl	8009c08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689a      	ldr	r2, [r3, #8]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098d2:	609a      	str	r2, [r3, #8]
      break;
 80098d4:	e03c      	b.n	8009950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098e2:	461a      	mov	r2, r3
 80098e4:	f000 f916 	bl	8009b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2150      	movs	r1, #80	@ 0x50
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 f96f 	bl	8009bd2 <TIM_ITRx_SetConfig>
      break;
 80098f4:	e02c      	b.n	8009950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009902:	461a      	mov	r2, r3
 8009904:	f000 f935 	bl	8009b72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2160      	movs	r1, #96	@ 0x60
 800990e:	4618      	mov	r0, r3
 8009910:	f000 f95f 	bl	8009bd2 <TIM_ITRx_SetConfig>
      break;
 8009914:	e01c      	b.n	8009950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009922:	461a      	mov	r2, r3
 8009924:	f000 f8f6 	bl	8009b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2140      	movs	r1, #64	@ 0x40
 800992e:	4618      	mov	r0, r3
 8009930:	f000 f94f 	bl	8009bd2 <TIM_ITRx_SetConfig>
      break;
 8009934:	e00c      	b.n	8009950 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4619      	mov	r1, r3
 8009940:	4610      	mov	r0, r2
 8009942:	f000 f946 	bl	8009bd2 <TIM_ITRx_SetConfig>
      break;
 8009946:	e003      	b.n	8009950 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	73fb      	strb	r3, [r7, #15]
      break;
 800994c:	e000      	b.n	8009950 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800994e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009960:	7bfb      	ldrb	r3, [r7, #15]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800997e:	b480      	push	{r7}
 8009980:	b083      	sub	sp, #12
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009986:	bf00      	nop
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009992:	b480      	push	{r7}
 8009994:	b083      	sub	sp, #12
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800999a:	bf00      	nop
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b083      	sub	sp, #12
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099ae:	bf00      	nop
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
	...

080099bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a46      	ldr	r2, [pc, #280]	@ (8009ae8 <TIM_Base_SetConfig+0x12c>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d013      	beq.n	80099fc <TIM_Base_SetConfig+0x40>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099da:	d00f      	beq.n	80099fc <TIM_Base_SetConfig+0x40>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a43      	ldr	r2, [pc, #268]	@ (8009aec <TIM_Base_SetConfig+0x130>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d00b      	beq.n	80099fc <TIM_Base_SetConfig+0x40>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a42      	ldr	r2, [pc, #264]	@ (8009af0 <TIM_Base_SetConfig+0x134>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d007      	beq.n	80099fc <TIM_Base_SetConfig+0x40>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a41      	ldr	r2, [pc, #260]	@ (8009af4 <TIM_Base_SetConfig+0x138>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d003      	beq.n	80099fc <TIM_Base_SetConfig+0x40>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a40      	ldr	r2, [pc, #256]	@ (8009af8 <TIM_Base_SetConfig+0x13c>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d108      	bne.n	8009a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a35      	ldr	r2, [pc, #212]	@ (8009ae8 <TIM_Base_SetConfig+0x12c>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d02b      	beq.n	8009a6e <TIM_Base_SetConfig+0xb2>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a1c:	d027      	beq.n	8009a6e <TIM_Base_SetConfig+0xb2>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a32      	ldr	r2, [pc, #200]	@ (8009aec <TIM_Base_SetConfig+0x130>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d023      	beq.n	8009a6e <TIM_Base_SetConfig+0xb2>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a31      	ldr	r2, [pc, #196]	@ (8009af0 <TIM_Base_SetConfig+0x134>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d01f      	beq.n	8009a6e <TIM_Base_SetConfig+0xb2>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a30      	ldr	r2, [pc, #192]	@ (8009af4 <TIM_Base_SetConfig+0x138>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d01b      	beq.n	8009a6e <TIM_Base_SetConfig+0xb2>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a2f      	ldr	r2, [pc, #188]	@ (8009af8 <TIM_Base_SetConfig+0x13c>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d017      	beq.n	8009a6e <TIM_Base_SetConfig+0xb2>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a2e      	ldr	r2, [pc, #184]	@ (8009afc <TIM_Base_SetConfig+0x140>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d013      	beq.n	8009a6e <TIM_Base_SetConfig+0xb2>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a2d      	ldr	r2, [pc, #180]	@ (8009b00 <TIM_Base_SetConfig+0x144>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d00f      	beq.n	8009a6e <TIM_Base_SetConfig+0xb2>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a2c      	ldr	r2, [pc, #176]	@ (8009b04 <TIM_Base_SetConfig+0x148>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d00b      	beq.n	8009a6e <TIM_Base_SetConfig+0xb2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a2b      	ldr	r2, [pc, #172]	@ (8009b08 <TIM_Base_SetConfig+0x14c>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d007      	beq.n	8009a6e <TIM_Base_SetConfig+0xb2>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a2a      	ldr	r2, [pc, #168]	@ (8009b0c <TIM_Base_SetConfig+0x150>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d003      	beq.n	8009a6e <TIM_Base_SetConfig+0xb2>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a29      	ldr	r2, [pc, #164]	@ (8009b10 <TIM_Base_SetConfig+0x154>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d108      	bne.n	8009a80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	695b      	ldr	r3, [r3, #20]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a10      	ldr	r2, [pc, #64]	@ (8009ae8 <TIM_Base_SetConfig+0x12c>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d003      	beq.n	8009ab4 <TIM_Base_SetConfig+0xf8>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a12      	ldr	r2, [pc, #72]	@ (8009af8 <TIM_Base_SetConfig+0x13c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d103      	bne.n	8009abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	691a      	ldr	r2, [r3, #16]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d105      	bne.n	8009ada <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	f023 0201 	bic.w	r2, r3, #1
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	611a      	str	r2, [r3, #16]
  }
}
 8009ada:	bf00      	nop
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	40010000 	.word	0x40010000
 8009aec:	40000400 	.word	0x40000400
 8009af0:	40000800 	.word	0x40000800
 8009af4:	40000c00 	.word	0x40000c00
 8009af8:	40010400 	.word	0x40010400
 8009afc:	40014000 	.word	0x40014000
 8009b00:	40014400 	.word	0x40014400
 8009b04:	40014800 	.word	0x40014800
 8009b08:	40001800 	.word	0x40001800
 8009b0c:	40001c00 	.word	0x40001c00
 8009b10:	40002000 	.word	0x40002000

08009b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6a1b      	ldr	r3, [r3, #32]
 8009b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	f023 0201 	bic.w	r2, r3, #1
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f023 030a 	bic.w	r3, r3, #10
 8009b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	621a      	str	r2, [r3, #32]
}
 8009b66:	bf00      	nop
 8009b68:	371c      	adds	r7, #28
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b087      	sub	sp, #28
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6a1b      	ldr	r3, [r3, #32]
 8009b88:	f023 0210 	bic.w	r2, r3, #16
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	031b      	lsls	r3, r3, #12
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009bae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	011b      	lsls	r3, r3, #4
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	621a      	str	r2, [r3, #32]
}
 8009bc6:	bf00      	nop
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	f043 0307 	orr.w	r3, r3, #7
 8009bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	609a      	str	r2, [r3, #8]
}
 8009bfc:	bf00      	nop
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	021a      	lsls	r2, r3, #8
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	609a      	str	r2, [r3, #8]
}
 8009c3c:	bf00      	nop
 8009c3e:	371c      	adds	r7, #28
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d101      	bne.n	8009c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	e05a      	b.n	8009d16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a21      	ldr	r2, [pc, #132]	@ (8009d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d022      	beq.n	8009cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cac:	d01d      	beq.n	8009cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8009d28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d018      	beq.n	8009cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8009d2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d013      	beq.n	8009cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8009d30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d00e      	beq.n	8009cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a18      	ldr	r2, [pc, #96]	@ (8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d009      	beq.n	8009cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a17      	ldr	r2, [pc, #92]	@ (8009d38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d004      	beq.n	8009cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a15      	ldr	r2, [pc, #84]	@ (8009d3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d10c      	bne.n	8009d04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	40010000 	.word	0x40010000
 8009d28:	40000400 	.word	0x40000400
 8009d2c:	40000800 	.word	0x40000800
 8009d30:	40000c00 	.word	0x40000c00
 8009d34:	40010400 	.word	0x40010400
 8009d38:	40014000 	.word	0x40014000
 8009d3c:	40001800 	.word	0x40001800

08009d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d101      	bne.n	8009d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e042      	b.n	8009e00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d106      	bne.n	8009d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7fd fbc0 	bl	8007514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2224      	movs	r2, #36	@ 0x24
 8009d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68da      	ldr	r2, [r3, #12]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fe55 	bl	800aa5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	691a      	ldr	r2, [r3, #16]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	695a      	ldr	r2, [r3, #20]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68da      	ldr	r2, [r3, #12]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2220      	movs	r2, #32
 8009dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2220      	movs	r2, #32
 8009df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08a      	sub	sp, #40	@ 0x28
 8009e0c:	af02      	add	r7, sp, #8
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	603b      	str	r3, [r7, #0]
 8009e14:	4613      	mov	r3, r2
 8009e16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b20      	cmp	r3, #32
 8009e26:	d175      	bne.n	8009f14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d002      	beq.n	8009e34 <HAL_UART_Transmit+0x2c>
 8009e2e:	88fb      	ldrh	r3, [r7, #6]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d101      	bne.n	8009e38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e06e      	b.n	8009f16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2221      	movs	r2, #33	@ 0x21
 8009e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e46:	f7fd ff89 	bl	8007d5c <HAL_GetTick>
 8009e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	88fa      	ldrh	r2, [r7, #6]
 8009e50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	88fa      	ldrh	r2, [r7, #6]
 8009e56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e60:	d108      	bne.n	8009e74 <HAL_UART_Transmit+0x6c>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d104      	bne.n	8009e74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	61bb      	str	r3, [r7, #24]
 8009e72:	e003      	b.n	8009e7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009e7c:	e02e      	b.n	8009edc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2200      	movs	r2, #0
 8009e86:	2180      	movs	r1, #128	@ 0x80
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f000 fbb7 	bl	800a5fc <UART_WaitOnFlagUntilTimeout>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d005      	beq.n	8009ea0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2220      	movs	r2, #32
 8009e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e03a      	b.n	8009f16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10b      	bne.n	8009ebe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009eb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	3302      	adds	r3, #2
 8009eba:	61bb      	str	r3, [r7, #24]
 8009ebc:	e007      	b.n	8009ece <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	781a      	ldrb	r2, [r3, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1cb      	bne.n	8009e7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2200      	movs	r2, #0
 8009eee:	2140      	movs	r1, #64	@ 0x40
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 fb83 	bl	800a5fc <UART_WaitOnFlagUntilTimeout>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d005      	beq.n	8009f08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2220      	movs	r2, #32
 8009f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e006      	b.n	8009f16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009f10:	2300      	movs	r3, #0
 8009f12:	e000      	b.n	8009f16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009f14:	2302      	movs	r3, #2
  }
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3720      	adds	r7, #32
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b08a      	sub	sp, #40	@ 0x28
 8009f22:	af02      	add	r7, sp, #8
 8009f24:	60f8      	str	r0, [r7, #12]
 8009f26:	60b9      	str	r1, [r7, #8]
 8009f28:	603b      	str	r3, [r7, #0]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b20      	cmp	r3, #32
 8009f3c:	f040 8081 	bne.w	800a042 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <HAL_UART_Receive+0x2e>
 8009f46:	88fb      	ldrh	r3, [r7, #6]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e079      	b.n	800a044 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2222      	movs	r2, #34	@ 0x22
 8009f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f64:	f7fd fefa 	bl	8007d5c <HAL_GetTick>
 8009f68:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	88fa      	ldrh	r2, [r7, #6]
 8009f6e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	88fa      	ldrh	r2, [r7, #6]
 8009f74:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f7e:	d108      	bne.n	8009f92 <HAL_UART_Receive+0x74>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d104      	bne.n	8009f92 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	61bb      	str	r3, [r7, #24]
 8009f90:	e003      	b.n	8009f9a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f96:	2300      	movs	r3, #0
 8009f98:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009f9a:	e047      	b.n	800a02c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2120      	movs	r1, #32
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f000 fb28 	bl	800a5fc <UART_WaitOnFlagUntilTimeout>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d005      	beq.n	8009fbe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2220      	movs	r2, #32
 8009fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8009fba:	2303      	movs	r3, #3
 8009fbc:	e042      	b.n	800a044 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10c      	bne.n	8009fde <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	3302      	adds	r3, #2
 8009fda:	61bb      	str	r3, [r7, #24]
 8009fdc:	e01f      	b.n	800a01e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fe6:	d007      	beq.n	8009ff8 <HAL_UART_Receive+0xda>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10a      	bne.n	800a006 <HAL_UART_Receive+0xe8>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d106      	bne.n	800a006 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	701a      	strb	r2, [r3, #0]
 800a004:	e008      	b.n	800a018 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a012:	b2da      	uxtb	r2, r3
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	3301      	adds	r3, #1
 800a01c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a022:	b29b      	uxth	r3, r3
 800a024:	3b01      	subs	r3, #1
 800a026:	b29a      	uxth	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a030:	b29b      	uxth	r3, r3
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1b2      	bne.n	8009f9c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2220      	movs	r2, #32
 800a03a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	e000      	b.n	800a044 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a042:	2302      	movs	r3, #2
  }
}
 800a044:	4618      	mov	r0, r3
 800a046:	3720      	adds	r7, #32
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	4613      	mov	r3, r2
 800a058:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a060:	b2db      	uxtb	r3, r3
 800a062:	2b20      	cmp	r3, #32
 800a064:	d112      	bne.n	800a08c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <HAL_UART_Receive_IT+0x26>
 800a06c:	88fb      	ldrh	r3, [r7, #6]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e00b      	b.n	800a08e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a07c:	88fb      	ldrh	r3, [r7, #6]
 800a07e:	461a      	mov	r2, r3
 800a080:	68b9      	ldr	r1, [r7, #8]
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 fb13 	bl	800a6ae <UART_Start_Receive_IT>
 800a088:	4603      	mov	r3, r0
 800a08a:	e000      	b.n	800a08e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a08c:	2302      	movs	r3, #2
  }
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b0ba      	sub	sp, #232	@ 0xe8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ce:	f003 030f 	and.w	r3, r3, #15
 800a0d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a0d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10f      	bne.n	800a0fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0e2:	f003 0320 	and.w	r3, r3, #32
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d009      	beq.n	800a0fe <HAL_UART_IRQHandler+0x66>
 800a0ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0ee:	f003 0320 	and.w	r3, r3, #32
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fbf2 	bl	800a8e0 <UART_Receive_IT>
      return;
 800a0fc:	e25b      	b.n	800a5b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a0fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 80de 	beq.w	800a2c4 <HAL_UART_IRQHandler+0x22c>
 800a108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a10c:	f003 0301 	and.w	r3, r3, #1
 800a110:	2b00      	cmp	r3, #0
 800a112:	d106      	bne.n	800a122 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a118:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 80d1 	beq.w	800a2c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a126:	f003 0301 	and.w	r3, r3, #1
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00b      	beq.n	800a146 <HAL_UART_IRQHandler+0xae>
 800a12e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a136:	2b00      	cmp	r3, #0
 800a138:	d005      	beq.n	800a146 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a13e:	f043 0201 	orr.w	r2, r3, #1
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00b      	beq.n	800a16a <HAL_UART_IRQHandler+0xd2>
 800a152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a156:	f003 0301 	and.w	r3, r3, #1
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d005      	beq.n	800a16a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a162:	f043 0202 	orr.w	r2, r3, #2
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a16a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a16e:	f003 0302 	and.w	r3, r3, #2
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00b      	beq.n	800a18e <HAL_UART_IRQHandler+0xf6>
 800a176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a17a:	f003 0301 	and.w	r3, r3, #1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d005      	beq.n	800a18e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a186:	f043 0204 	orr.w	r2, r3, #4
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a192:	f003 0308 	and.w	r3, r3, #8
 800a196:	2b00      	cmp	r3, #0
 800a198:	d011      	beq.n	800a1be <HAL_UART_IRQHandler+0x126>
 800a19a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a19e:	f003 0320 	and.w	r3, r3, #32
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d105      	bne.n	800a1b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a1a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d005      	beq.n	800a1be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1b6:	f043 0208 	orr.w	r2, r3, #8
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 81f2 	beq.w	800a5ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1cc:	f003 0320 	and.w	r3, r3, #32
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d008      	beq.n	800a1e6 <HAL_UART_IRQHandler+0x14e>
 800a1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1d8:	f003 0320 	and.w	r3, r3, #32
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d002      	beq.n	800a1e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fb7d 	bl	800a8e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f0:	2b40      	cmp	r3, #64	@ 0x40
 800a1f2:	bf0c      	ite	eq
 800a1f4:	2301      	moveq	r3, #1
 800a1f6:	2300      	movne	r3, #0
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a202:	f003 0308 	and.w	r3, r3, #8
 800a206:	2b00      	cmp	r3, #0
 800a208:	d103      	bne.n	800a212 <HAL_UART_IRQHandler+0x17a>
 800a20a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d04f      	beq.n	800a2b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa85 	bl	800a722 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a222:	2b40      	cmp	r3, #64	@ 0x40
 800a224:	d141      	bne.n	800a2aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3314      	adds	r3, #20
 800a22c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a23c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a240:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3314      	adds	r3, #20
 800a24e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a252:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a256:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a25e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a262:	e841 2300 	strex	r3, r2, [r1]
 800a266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a26a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1d9      	bne.n	800a226 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a276:	2b00      	cmp	r3, #0
 800a278:	d013      	beq.n	800a2a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a27e:	4a7e      	ldr	r2, [pc, #504]	@ (800a478 <HAL_UART_IRQHandler+0x3e0>)
 800a280:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a286:	4618      	mov	r0, r3
 800a288:	f7fd ff19 	bl	80080be <HAL_DMA_Abort_IT>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d016      	beq.n	800a2c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a29c:	4610      	mov	r0, r2
 800a29e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2a0:	e00e      	b.n	800a2c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f994 	bl	800a5d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2a8:	e00a      	b.n	800a2c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f990 	bl	800a5d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b0:	e006      	b.n	800a2c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f98c 	bl	800a5d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a2be:	e175      	b.n	800a5ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2c0:	bf00      	nop
    return;
 800a2c2:	e173      	b.n	800a5ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	f040 814f 	bne.w	800a56c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a2ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2d2:	f003 0310 	and.w	r3, r3, #16
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f000 8148 	beq.w	800a56c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2e0:	f003 0310 	and.w	r3, r3, #16
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 8141 	beq.w	800a56c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60bb      	str	r3, [r7, #8]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	60bb      	str	r3, [r7, #8]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	60bb      	str	r3, [r7, #8]
 800a2fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a30a:	2b40      	cmp	r3, #64	@ 0x40
 800a30c:	f040 80b6 	bne.w	800a47c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a31c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 8145 	beq.w	800a5b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a32a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a32e:	429a      	cmp	r2, r3
 800a330:	f080 813e 	bcs.w	800a5b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a33a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a346:	f000 8088 	beq.w	800a45a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	330c      	adds	r3, #12
 800a350:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a354:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a358:	e853 3f00 	ldrex	r3, [r3]
 800a35c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a360:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	330c      	adds	r3, #12
 800a372:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a376:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a37a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a382:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a386:	e841 2300 	strex	r3, r2, [r1]
 800a38a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a38e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1d9      	bne.n	800a34a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3314      	adds	r3, #20
 800a39c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3a0:	e853 3f00 	ldrex	r3, [r3]
 800a3a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a3a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a3a8:	f023 0301 	bic.w	r3, r3, #1
 800a3ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3314      	adds	r3, #20
 800a3b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a3ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a3be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a3c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a3c6:	e841 2300 	strex	r3, r2, [r1]
 800a3ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a3cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1e1      	bne.n	800a396 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	3314      	adds	r3, #20
 800a3d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a3dc:	e853 3f00 	ldrex	r3, [r3]
 800a3e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a3e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3314      	adds	r3, #20
 800a3f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a3f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a3f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a3fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a404:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e3      	bne.n	800a3d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2220      	movs	r2, #32
 800a40e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	330c      	adds	r3, #12
 800a41e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a422:	e853 3f00 	ldrex	r3, [r3]
 800a426:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a42a:	f023 0310 	bic.w	r3, r3, #16
 800a42e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	330c      	adds	r3, #12
 800a438:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a43c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a43e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a440:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a442:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a444:	e841 2300 	strex	r3, r2, [r1]
 800a448:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a44a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1e3      	bne.n	800a418 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a454:	4618      	mov	r0, r3
 800a456:	f7fd fdc2 	bl	8007fde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2202      	movs	r2, #2
 800a45e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a468:	b29b      	uxth	r3, r3
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f8b7 	bl	800a5e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a476:	e09b      	b.n	800a5b0 <HAL_UART_IRQHandler+0x518>
 800a478:	0800a7e9 	.word	0x0800a7e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a484:	b29b      	uxth	r3, r3
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a490:	b29b      	uxth	r3, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	f000 808e 	beq.w	800a5b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 8089 	beq.w	800a5b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	330c      	adds	r3, #12
 800a4a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ac:	e853 3f00 	ldrex	r3, [r3]
 800a4b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	330c      	adds	r3, #12
 800a4c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a4c6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a4c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4ce:	e841 2300 	strex	r3, r2, [r1]
 800a4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1e3      	bne.n	800a4a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	3314      	adds	r3, #20
 800a4e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e4:	e853 3f00 	ldrex	r3, [r3]
 800a4e8:	623b      	str	r3, [r7, #32]
   return(result);
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	f023 0301 	bic.w	r3, r3, #1
 800a4f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3314      	adds	r3, #20
 800a4fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a4fe:	633a      	str	r2, [r7, #48]	@ 0x30
 800a500:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a502:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a506:	e841 2300 	strex	r3, r2, [r1]
 800a50a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1e3      	bne.n	800a4da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2220      	movs	r2, #32
 800a516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	330c      	adds	r3, #12
 800a526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	e853 3f00 	ldrex	r3, [r3]
 800a52e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f023 0310 	bic.w	r3, r3, #16
 800a536:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	330c      	adds	r3, #12
 800a540:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a544:	61fa      	str	r2, [r7, #28]
 800a546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a548:	69b9      	ldr	r1, [r7, #24]
 800a54a:	69fa      	ldr	r2, [r7, #28]
 800a54c:	e841 2300 	strex	r3, r2, [r1]
 800a550:	617b      	str	r3, [r7, #20]
   return(result);
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1e3      	bne.n	800a520 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2202      	movs	r2, #2
 800a55c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a55e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a562:	4619      	mov	r1, r3
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f83d 	bl	800a5e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a56a:	e023      	b.n	800a5b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a574:	2b00      	cmp	r3, #0
 800a576:	d009      	beq.n	800a58c <HAL_UART_IRQHandler+0x4f4>
 800a578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a57c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a580:	2b00      	cmp	r3, #0
 800a582:	d003      	beq.n	800a58c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f943 	bl	800a810 <UART_Transmit_IT>
    return;
 800a58a:	e014      	b.n	800a5b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a58c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00e      	beq.n	800a5b6 <HAL_UART_IRQHandler+0x51e>
 800a598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a59c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d008      	beq.n	800a5b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f983 	bl	800a8b0 <UART_EndTransmit_IT>
    return;
 800a5aa:	e004      	b.n	800a5b6 <HAL_UART_IRQHandler+0x51e>
    return;
 800a5ac:	bf00      	nop
 800a5ae:	e002      	b.n	800a5b6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a5b0:	bf00      	nop
 800a5b2:	e000      	b.n	800a5b6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a5b4:	bf00      	nop
  }
}
 800a5b6:	37e8      	adds	r7, #232	@ 0xe8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	603b      	str	r3, [r7, #0]
 800a608:	4613      	mov	r3, r2
 800a60a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a60c:	e03b      	b.n	800a686 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a614:	d037      	beq.n	800a686 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a616:	f7fd fba1 	bl	8007d5c <HAL_GetTick>
 800a61a:	4602      	mov	r2, r0
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	6a3a      	ldr	r2, [r7, #32]
 800a622:	429a      	cmp	r2, r3
 800a624:	d302      	bcc.n	800a62c <UART_WaitOnFlagUntilTimeout+0x30>
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d101      	bne.n	800a630 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a62c:	2303      	movs	r3, #3
 800a62e:	e03a      	b.n	800a6a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	f003 0304 	and.w	r3, r3, #4
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d023      	beq.n	800a686 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	2b80      	cmp	r3, #128	@ 0x80
 800a642:	d020      	beq.n	800a686 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2b40      	cmp	r3, #64	@ 0x40
 800a648:	d01d      	beq.n	800a686 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0308 	and.w	r3, r3, #8
 800a654:	2b08      	cmp	r3, #8
 800a656:	d116      	bne.n	800a686 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	617b      	str	r3, [r7, #20]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	617b      	str	r3, [r7, #20]
 800a66c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 f857 	bl	800a722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2208      	movs	r2, #8
 800a678:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e00f      	b.n	800a6a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	4013      	ands	r3, r2
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	429a      	cmp	r2, r3
 800a694:	bf0c      	ite	eq
 800a696:	2301      	moveq	r3, #1
 800a698:	2300      	movne	r3, #0
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	461a      	mov	r2, r3
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d0b4      	beq.n	800a60e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b085      	sub	sp, #20
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	88fa      	ldrh	r2, [r7, #6]
 800a6c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	88fa      	ldrh	r2, [r7, #6]
 800a6cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2222      	movs	r2, #34	@ 0x22
 800a6d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d007      	beq.n	800a6f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68da      	ldr	r2, [r3, #12]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a6f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	695a      	ldr	r2, [r3, #20]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f042 0201 	orr.w	r2, r2, #1
 800a702:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68da      	ldr	r2, [r3, #12]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f042 0220 	orr.w	r2, r2, #32
 800a712:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a722:	b480      	push	{r7}
 800a724:	b095      	sub	sp, #84	@ 0x54
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	330c      	adds	r3, #12
 800a730:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a734:	e853 3f00 	ldrex	r3, [r3]
 800a738:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	330c      	adds	r3, #12
 800a748:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a74a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a74c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a750:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a752:	e841 2300 	strex	r3, r2, [r1]
 800a756:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1e5      	bne.n	800a72a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3314      	adds	r3, #20
 800a764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	e853 3f00 	ldrex	r3, [r3]
 800a76c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	f023 0301 	bic.w	r3, r3, #1
 800a774:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	3314      	adds	r3, #20
 800a77c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a77e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a780:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a784:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a786:	e841 2300 	strex	r3, r2, [r1]
 800a78a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1e5      	bne.n	800a75e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a796:	2b01      	cmp	r3, #1
 800a798:	d119      	bne.n	800a7ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	330c      	adds	r3, #12
 800a7a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	e853 3f00 	ldrex	r3, [r3]
 800a7a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f023 0310 	bic.w	r3, r3, #16
 800a7b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	330c      	adds	r3, #12
 800a7b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7ba:	61ba      	str	r2, [r7, #24]
 800a7bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7be:	6979      	ldr	r1, [r7, #20]
 800a7c0:	69ba      	ldr	r2, [r7, #24]
 800a7c2:	e841 2300 	strex	r3, r2, [r1]
 800a7c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1e5      	bne.n	800a79a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2220      	movs	r2, #32
 800a7d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a7dc:	bf00      	nop
 800a7de:	3754      	adds	r7, #84	@ 0x54
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7ff fee4 	bl	800a5d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a808:	bf00      	nop
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b21      	cmp	r3, #33	@ 0x21
 800a822:	d13e      	bne.n	800a8a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a82c:	d114      	bne.n	800a858 <UART_Transmit_IT+0x48>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d110      	bne.n	800a858 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a1b      	ldr	r3, [r3, #32]
 800a83a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	881b      	ldrh	r3, [r3, #0]
 800a840:	461a      	mov	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a84a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a1b      	ldr	r3, [r3, #32]
 800a850:	1c9a      	adds	r2, r3, #2
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	621a      	str	r2, [r3, #32]
 800a856:	e008      	b.n	800a86a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	1c59      	adds	r1, r3, #1
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	6211      	str	r1, [r2, #32]
 800a862:	781a      	ldrb	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a86e:	b29b      	uxth	r3, r3
 800a870:	3b01      	subs	r3, #1
 800a872:	b29b      	uxth	r3, r3
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	4619      	mov	r1, r3
 800a878:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10f      	bne.n	800a89e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68da      	ldr	r2, [r3, #12]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a88c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68da      	ldr	r2, [r3, #12]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a89c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e000      	b.n	800a8a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a8a2:	2302      	movs	r3, #2
  }
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68da      	ldr	r2, [r3, #12]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2220      	movs	r2, #32
 800a8cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff fe73 	bl	800a5bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08c      	sub	sp, #48	@ 0x30
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b22      	cmp	r3, #34	@ 0x22
 800a8f2:	f040 80ae 	bne.w	800aa52 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8fe:	d117      	bne.n	800a930 <UART_Receive_IT+0x50>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d113      	bne.n	800a930 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a908:	2300      	movs	r3, #0
 800a90a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a910:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	b29b      	uxth	r3, r3
 800a91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a91e:	b29a      	uxth	r2, r3
 800a920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a922:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a928:	1c9a      	adds	r2, r3, #2
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a92e:	e026      	b.n	800a97e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a934:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a936:	2300      	movs	r3, #0
 800a938:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a942:	d007      	beq.n	800a954 <UART_Receive_IT+0x74>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10a      	bne.n	800a962 <UART_Receive_IT+0x82>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d106      	bne.n	800a962 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95e:	701a      	strb	r2, [r3, #0]
 800a960:	e008      	b.n	800a974 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a972:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a978:	1c5a      	adds	r2, r3, #1
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a982:	b29b      	uxth	r3, r3
 800a984:	3b01      	subs	r3, #1
 800a986:	b29b      	uxth	r3, r3
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	4619      	mov	r1, r3
 800a98c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d15d      	bne.n	800aa4e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68da      	ldr	r2, [r3, #12]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0220 	bic.w	r2, r2, #32
 800a9a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68da      	ldr	r2, [r3, #12]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a9b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	695a      	ldr	r2, [r3, #20]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f022 0201 	bic.w	r2, r2, #1
 800a9c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2220      	movs	r2, #32
 800a9c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d135      	bne.n	800aa44 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	330c      	adds	r3, #12
 800a9e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	e853 3f00 	ldrex	r3, [r3]
 800a9ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	f023 0310 	bic.w	r3, r3, #16
 800a9f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	330c      	adds	r3, #12
 800a9fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9fe:	623a      	str	r2, [r7, #32]
 800aa00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa02:	69f9      	ldr	r1, [r7, #28]
 800aa04:	6a3a      	ldr	r2, [r7, #32]
 800aa06:	e841 2300 	strex	r3, r2, [r1]
 800aa0a:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1e5      	bne.n	800a9de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 0310 	and.w	r3, r3, #16
 800aa1c:	2b10      	cmp	r3, #16
 800aa1e:	d10a      	bne.n	800aa36 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa20:	2300      	movs	r3, #0
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7ff fdd1 	bl	800a5e4 <HAL_UARTEx_RxEventCallback>
 800aa42:	e002      	b.n	800aa4a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7fc fa09 	bl	8006e5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	e002      	b.n	800aa54 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e000      	b.n	800aa54 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800aa52:	2302      	movs	r3, #2
  }
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3730      	adds	r7, #48	@ 0x30
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa60:	b0c0      	sub	sp, #256	@ 0x100
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aa74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa78:	68d9      	ldr	r1, [r3, #12]
 800aa7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	ea40 0301 	orr.w	r3, r0, r1
 800aa84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa8a:	689a      	ldr	r2, [r3, #8]
 800aa8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	431a      	orrs	r2, r3
 800aa94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	431a      	orrs	r2, r3
 800aa9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aaa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aab4:	f021 010c 	bic.w	r1, r1, #12
 800aab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aac2:	430b      	orrs	r3, r1
 800aac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800aad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aad6:	6999      	ldr	r1, [r3, #24]
 800aad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	ea40 0301 	orr.w	r3, r0, r1
 800aae2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	4b8f      	ldr	r3, [pc, #572]	@ (800ad28 <UART_SetConfig+0x2cc>)
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d005      	beq.n	800aafc <UART_SetConfig+0xa0>
 800aaf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	4b8d      	ldr	r3, [pc, #564]	@ (800ad2c <UART_SetConfig+0x2d0>)
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d104      	bne.n	800ab06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aafc:	f7fe f954 	bl	8008da8 <HAL_RCC_GetPCLK2Freq>
 800ab00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ab04:	e003      	b.n	800ab0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab06:	f7fe f93b 	bl	8008d80 <HAL_RCC_GetPCLK1Freq>
 800ab0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab18:	f040 810c 	bne.w	800ad34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab20:	2200      	movs	r2, #0
 800ab22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ab26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ab2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ab2e:	4622      	mov	r2, r4
 800ab30:	462b      	mov	r3, r5
 800ab32:	1891      	adds	r1, r2, r2
 800ab34:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ab36:	415b      	adcs	r3, r3
 800ab38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ab3e:	4621      	mov	r1, r4
 800ab40:	eb12 0801 	adds.w	r8, r2, r1
 800ab44:	4629      	mov	r1, r5
 800ab46:	eb43 0901 	adc.w	r9, r3, r1
 800ab4a:	f04f 0200 	mov.w	r2, #0
 800ab4e:	f04f 0300 	mov.w	r3, #0
 800ab52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab5e:	4690      	mov	r8, r2
 800ab60:	4699      	mov	r9, r3
 800ab62:	4623      	mov	r3, r4
 800ab64:	eb18 0303 	adds.w	r3, r8, r3
 800ab68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ab6c:	462b      	mov	r3, r5
 800ab6e:	eb49 0303 	adc.w	r3, r9, r3
 800ab72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ab76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ab86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	18db      	adds	r3, r3, r3
 800ab8e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab90:	4613      	mov	r3, r2
 800ab92:	eb42 0303 	adc.w	r3, r2, r3
 800ab96:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ab9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800aba0:	f7f6 f81c 	bl	8000bdc <__aeabi_uldivmod>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	4b61      	ldr	r3, [pc, #388]	@ (800ad30 <UART_SetConfig+0x2d4>)
 800abaa:	fba3 2302 	umull	r2, r3, r3, r2
 800abae:	095b      	lsrs	r3, r3, #5
 800abb0:	011c      	lsls	r4, r3, #4
 800abb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800abb6:	2200      	movs	r2, #0
 800abb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800abbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800abc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800abc4:	4642      	mov	r2, r8
 800abc6:	464b      	mov	r3, r9
 800abc8:	1891      	adds	r1, r2, r2
 800abca:	64b9      	str	r1, [r7, #72]	@ 0x48
 800abcc:	415b      	adcs	r3, r3
 800abce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800abd4:	4641      	mov	r1, r8
 800abd6:	eb12 0a01 	adds.w	sl, r2, r1
 800abda:	4649      	mov	r1, r9
 800abdc:	eb43 0b01 	adc.w	fp, r3, r1
 800abe0:	f04f 0200 	mov.w	r2, #0
 800abe4:	f04f 0300 	mov.w	r3, #0
 800abe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800abec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800abf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abf4:	4692      	mov	sl, r2
 800abf6:	469b      	mov	fp, r3
 800abf8:	4643      	mov	r3, r8
 800abfa:	eb1a 0303 	adds.w	r3, sl, r3
 800abfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac02:	464b      	mov	r3, r9
 800ac04:	eb4b 0303 	adc.w	r3, fp, r3
 800ac08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ac0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ac1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ac20:	460b      	mov	r3, r1
 800ac22:	18db      	adds	r3, r3, r3
 800ac24:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac26:	4613      	mov	r3, r2
 800ac28:	eb42 0303 	adc.w	r3, r2, r3
 800ac2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ac32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ac36:	f7f5 ffd1 	bl	8000bdc <__aeabi_uldivmod>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	4611      	mov	r1, r2
 800ac40:	4b3b      	ldr	r3, [pc, #236]	@ (800ad30 <UART_SetConfig+0x2d4>)
 800ac42:	fba3 2301 	umull	r2, r3, r3, r1
 800ac46:	095b      	lsrs	r3, r3, #5
 800ac48:	2264      	movs	r2, #100	@ 0x64
 800ac4a:	fb02 f303 	mul.w	r3, r2, r3
 800ac4e:	1acb      	subs	r3, r1, r3
 800ac50:	00db      	lsls	r3, r3, #3
 800ac52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ac56:	4b36      	ldr	r3, [pc, #216]	@ (800ad30 <UART_SetConfig+0x2d4>)
 800ac58:	fba3 2302 	umull	r2, r3, r3, r2
 800ac5c:	095b      	lsrs	r3, r3, #5
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ac64:	441c      	add	r4, r3
 800ac66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ac74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ac78:	4642      	mov	r2, r8
 800ac7a:	464b      	mov	r3, r9
 800ac7c:	1891      	adds	r1, r2, r2
 800ac7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ac80:	415b      	adcs	r3, r3
 800ac82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ac88:	4641      	mov	r1, r8
 800ac8a:	1851      	adds	r1, r2, r1
 800ac8c:	6339      	str	r1, [r7, #48]	@ 0x30
 800ac8e:	4649      	mov	r1, r9
 800ac90:	414b      	adcs	r3, r1
 800ac92:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac94:	f04f 0200 	mov.w	r2, #0
 800ac98:	f04f 0300 	mov.w	r3, #0
 800ac9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800aca0:	4659      	mov	r1, fp
 800aca2:	00cb      	lsls	r3, r1, #3
 800aca4:	4651      	mov	r1, sl
 800aca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acaa:	4651      	mov	r1, sl
 800acac:	00ca      	lsls	r2, r1, #3
 800acae:	4610      	mov	r0, r2
 800acb0:	4619      	mov	r1, r3
 800acb2:	4603      	mov	r3, r0
 800acb4:	4642      	mov	r2, r8
 800acb6:	189b      	adds	r3, r3, r2
 800acb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800acbc:	464b      	mov	r3, r9
 800acbe:	460a      	mov	r2, r1
 800acc0:	eb42 0303 	adc.w	r3, r2, r3
 800acc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800acc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800acd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800acd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800acdc:	460b      	mov	r3, r1
 800acde:	18db      	adds	r3, r3, r3
 800ace0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ace2:	4613      	mov	r3, r2
 800ace4:	eb42 0303 	adc.w	r3, r2, r3
 800ace8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800acee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800acf2:	f7f5 ff73 	bl	8000bdc <__aeabi_uldivmod>
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ad30 <UART_SetConfig+0x2d4>)
 800acfc:	fba3 1302 	umull	r1, r3, r3, r2
 800ad00:	095b      	lsrs	r3, r3, #5
 800ad02:	2164      	movs	r1, #100	@ 0x64
 800ad04:	fb01 f303 	mul.w	r3, r1, r3
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	00db      	lsls	r3, r3, #3
 800ad0c:	3332      	adds	r3, #50	@ 0x32
 800ad0e:	4a08      	ldr	r2, [pc, #32]	@ (800ad30 <UART_SetConfig+0x2d4>)
 800ad10:	fba2 2303 	umull	r2, r3, r2, r3
 800ad14:	095b      	lsrs	r3, r3, #5
 800ad16:	f003 0207 	and.w	r2, r3, #7
 800ad1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4422      	add	r2, r4
 800ad22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad24:	e106      	b.n	800af34 <UART_SetConfig+0x4d8>
 800ad26:	bf00      	nop
 800ad28:	40011000 	.word	0x40011000
 800ad2c:	40011400 	.word	0x40011400
 800ad30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ad3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ad42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ad46:	4642      	mov	r2, r8
 800ad48:	464b      	mov	r3, r9
 800ad4a:	1891      	adds	r1, r2, r2
 800ad4c:	6239      	str	r1, [r7, #32]
 800ad4e:	415b      	adcs	r3, r3
 800ad50:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad56:	4641      	mov	r1, r8
 800ad58:	1854      	adds	r4, r2, r1
 800ad5a:	4649      	mov	r1, r9
 800ad5c:	eb43 0501 	adc.w	r5, r3, r1
 800ad60:	f04f 0200 	mov.w	r2, #0
 800ad64:	f04f 0300 	mov.w	r3, #0
 800ad68:	00eb      	lsls	r3, r5, #3
 800ad6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad6e:	00e2      	lsls	r2, r4, #3
 800ad70:	4614      	mov	r4, r2
 800ad72:	461d      	mov	r5, r3
 800ad74:	4643      	mov	r3, r8
 800ad76:	18e3      	adds	r3, r4, r3
 800ad78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad7c:	464b      	mov	r3, r9
 800ad7e:	eb45 0303 	adc.w	r3, r5, r3
 800ad82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ad86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ad96:	f04f 0200 	mov.w	r2, #0
 800ad9a:	f04f 0300 	mov.w	r3, #0
 800ad9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ada2:	4629      	mov	r1, r5
 800ada4:	008b      	lsls	r3, r1, #2
 800ada6:	4621      	mov	r1, r4
 800ada8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800adac:	4621      	mov	r1, r4
 800adae:	008a      	lsls	r2, r1, #2
 800adb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800adb4:	f7f5 ff12 	bl	8000bdc <__aeabi_uldivmod>
 800adb8:	4602      	mov	r2, r0
 800adba:	460b      	mov	r3, r1
 800adbc:	4b60      	ldr	r3, [pc, #384]	@ (800af40 <UART_SetConfig+0x4e4>)
 800adbe:	fba3 2302 	umull	r2, r3, r3, r2
 800adc2:	095b      	lsrs	r3, r3, #5
 800adc4:	011c      	lsls	r4, r3, #4
 800adc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800adca:	2200      	movs	r2, #0
 800adcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800add0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800add4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800add8:	4642      	mov	r2, r8
 800adda:	464b      	mov	r3, r9
 800addc:	1891      	adds	r1, r2, r2
 800adde:	61b9      	str	r1, [r7, #24]
 800ade0:	415b      	adcs	r3, r3
 800ade2:	61fb      	str	r3, [r7, #28]
 800ade4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ade8:	4641      	mov	r1, r8
 800adea:	1851      	adds	r1, r2, r1
 800adec:	6139      	str	r1, [r7, #16]
 800adee:	4649      	mov	r1, r9
 800adf0:	414b      	adcs	r3, r1
 800adf2:	617b      	str	r3, [r7, #20]
 800adf4:	f04f 0200 	mov.w	r2, #0
 800adf8:	f04f 0300 	mov.w	r3, #0
 800adfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae00:	4659      	mov	r1, fp
 800ae02:	00cb      	lsls	r3, r1, #3
 800ae04:	4651      	mov	r1, sl
 800ae06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae0a:	4651      	mov	r1, sl
 800ae0c:	00ca      	lsls	r2, r1, #3
 800ae0e:	4610      	mov	r0, r2
 800ae10:	4619      	mov	r1, r3
 800ae12:	4603      	mov	r3, r0
 800ae14:	4642      	mov	r2, r8
 800ae16:	189b      	adds	r3, r3, r2
 800ae18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae1c:	464b      	mov	r3, r9
 800ae1e:	460a      	mov	r2, r1
 800ae20:	eb42 0303 	adc.w	r3, r2, r3
 800ae24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ae34:	f04f 0200 	mov.w	r2, #0
 800ae38:	f04f 0300 	mov.w	r3, #0
 800ae3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ae40:	4649      	mov	r1, r9
 800ae42:	008b      	lsls	r3, r1, #2
 800ae44:	4641      	mov	r1, r8
 800ae46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae4a:	4641      	mov	r1, r8
 800ae4c:	008a      	lsls	r2, r1, #2
 800ae4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ae52:	f7f5 fec3 	bl	8000bdc <__aeabi_uldivmod>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4611      	mov	r1, r2
 800ae5c:	4b38      	ldr	r3, [pc, #224]	@ (800af40 <UART_SetConfig+0x4e4>)
 800ae5e:	fba3 2301 	umull	r2, r3, r3, r1
 800ae62:	095b      	lsrs	r3, r3, #5
 800ae64:	2264      	movs	r2, #100	@ 0x64
 800ae66:	fb02 f303 	mul.w	r3, r2, r3
 800ae6a:	1acb      	subs	r3, r1, r3
 800ae6c:	011b      	lsls	r3, r3, #4
 800ae6e:	3332      	adds	r3, #50	@ 0x32
 800ae70:	4a33      	ldr	r2, [pc, #204]	@ (800af40 <UART_SetConfig+0x4e4>)
 800ae72:	fba2 2303 	umull	r2, r3, r2, r3
 800ae76:	095b      	lsrs	r3, r3, #5
 800ae78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae7c:	441c      	add	r4, r3
 800ae7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae82:	2200      	movs	r2, #0
 800ae84:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae86:	677a      	str	r2, [r7, #116]	@ 0x74
 800ae88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ae8c:	4642      	mov	r2, r8
 800ae8e:	464b      	mov	r3, r9
 800ae90:	1891      	adds	r1, r2, r2
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	415b      	adcs	r3, r3
 800ae96:	60fb      	str	r3, [r7, #12]
 800ae98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae9c:	4641      	mov	r1, r8
 800ae9e:	1851      	adds	r1, r2, r1
 800aea0:	6039      	str	r1, [r7, #0]
 800aea2:	4649      	mov	r1, r9
 800aea4:	414b      	adcs	r3, r1
 800aea6:	607b      	str	r3, [r7, #4]
 800aea8:	f04f 0200 	mov.w	r2, #0
 800aeac:	f04f 0300 	mov.w	r3, #0
 800aeb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aeb4:	4659      	mov	r1, fp
 800aeb6:	00cb      	lsls	r3, r1, #3
 800aeb8:	4651      	mov	r1, sl
 800aeba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aebe:	4651      	mov	r1, sl
 800aec0:	00ca      	lsls	r2, r1, #3
 800aec2:	4610      	mov	r0, r2
 800aec4:	4619      	mov	r1, r3
 800aec6:	4603      	mov	r3, r0
 800aec8:	4642      	mov	r2, r8
 800aeca:	189b      	adds	r3, r3, r2
 800aecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aece:	464b      	mov	r3, r9
 800aed0:	460a      	mov	r2, r1
 800aed2:	eb42 0303 	adc.w	r3, r2, r3
 800aed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	663b      	str	r3, [r7, #96]	@ 0x60
 800aee2:	667a      	str	r2, [r7, #100]	@ 0x64
 800aee4:	f04f 0200 	mov.w	r2, #0
 800aee8:	f04f 0300 	mov.w	r3, #0
 800aeec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aef0:	4649      	mov	r1, r9
 800aef2:	008b      	lsls	r3, r1, #2
 800aef4:	4641      	mov	r1, r8
 800aef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aefa:	4641      	mov	r1, r8
 800aefc:	008a      	lsls	r2, r1, #2
 800aefe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800af02:	f7f5 fe6b 	bl	8000bdc <__aeabi_uldivmod>
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	4b0d      	ldr	r3, [pc, #52]	@ (800af40 <UART_SetConfig+0x4e4>)
 800af0c:	fba3 1302 	umull	r1, r3, r3, r2
 800af10:	095b      	lsrs	r3, r3, #5
 800af12:	2164      	movs	r1, #100	@ 0x64
 800af14:	fb01 f303 	mul.w	r3, r1, r3
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	3332      	adds	r3, #50	@ 0x32
 800af1e:	4a08      	ldr	r2, [pc, #32]	@ (800af40 <UART_SetConfig+0x4e4>)
 800af20:	fba2 2303 	umull	r2, r3, r2, r3
 800af24:	095b      	lsrs	r3, r3, #5
 800af26:	f003 020f 	and.w	r2, r3, #15
 800af2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4422      	add	r2, r4
 800af32:	609a      	str	r2, [r3, #8]
}
 800af34:	bf00      	nop
 800af36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800af3a:	46bd      	mov	sp, r7
 800af3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af40:	51eb851f 	.word	0x51eb851f

0800af44 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800af44:	b480      	push	{r7}
 800af46:	b087      	sub	sp, #28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	6812      	ldr	r2, [r2, #0]
 800af5c:	f023 0101 	bic.w	r1, r3, #1
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	2b08      	cmp	r3, #8
 800af6c:	d102      	bne.n	800af74 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800af6e:	2340      	movs	r3, #64	@ 0x40
 800af70:	617b      	str	r3, [r7, #20]
 800af72:	e001      	b.n	800af78 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800af74:	2300      	movs	r3, #0
 800af76:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800af84:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800af8a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800af90:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800af96:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800af9c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800afa2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800afa8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800afae:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800afb4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800afba:	4313      	orrs	r3, r2
 800afbc:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	4313      	orrs	r3, r2
 800afd0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800afd2:	4b10      	ldr	r3, [pc, #64]	@ (800b014 <FSMC_NORSRAM_Init+0xd0>)
 800afd4:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800afdc:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800afe4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	43db      	mvns	r3, r3
 800aff4:	ea02 0103 	and.w	r1, r2, r3
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	4319      	orrs	r1, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	371c      	adds	r7, #28
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	0008fb7f 	.word	0x0008fb7f

0800b018 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b02e:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	011b      	lsls	r3, r3, #4
 800b03c:	431a      	orrs	r2, r3
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	021b      	lsls	r3, r3, #8
 800b044:	431a      	orrs	r2, r3
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	041b      	lsls	r3, r3, #16
 800b04c:	431a      	orrs	r2, r3
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	3b01      	subs	r3, #1
 800b054:	051b      	lsls	r3, r3, #20
 800b056:	431a      	orrs	r2, r3
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	3b02      	subs	r3, #2
 800b05e:	061b      	lsls	r3, r3, #24
 800b060:	431a      	orrs	r2, r3
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	699b      	ldr	r3, [r3, #24]
 800b066:	4313      	orrs	r3, r2
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	3201      	adds	r2, #1
 800b06c:	4319      	orrs	r1, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3714      	adds	r7, #20
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
	...

0800b084 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
 800b090:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b098:	d11d      	bne.n	800b0d6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b0a2:	4b13      	ldr	r3, [pc, #76]	@ (800b0f0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	6811      	ldr	r1, [r2, #0]
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	6852      	ldr	r2, [r2, #4]
 800b0ae:	0112      	lsls	r2, r2, #4
 800b0b0:	4311      	orrs	r1, r2
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	6892      	ldr	r2, [r2, #8]
 800b0b6:	0212      	lsls	r2, r2, #8
 800b0b8:	4311      	orrs	r1, r2
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	6992      	ldr	r2, [r2, #24]
 800b0be:	4311      	orrs	r1, r2
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	68d2      	ldr	r2, [r2, #12]
 800b0c4:	0412      	lsls	r2, r2, #16
 800b0c6:	430a      	orrs	r2, r1
 800b0c8:	ea43 0102 	orr.w	r1, r3, r2
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b0d4:	e005      	b.n	800b0e2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800b0de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	cff00000 	.word	0xcff00000

0800b0f4 <malloc>:
 800b0f4:	4b02      	ldr	r3, [pc, #8]	@ (800b100 <malloc+0xc>)
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	6818      	ldr	r0, [r3, #0]
 800b0fa:	f000 b82d 	b.w	800b158 <_malloc_r>
 800b0fe:	bf00      	nop
 800b100:	200029d8 	.word	0x200029d8

0800b104 <free>:
 800b104:	4b02      	ldr	r3, [pc, #8]	@ (800b110 <free+0xc>)
 800b106:	4601      	mov	r1, r0
 800b108:	6818      	ldr	r0, [r3, #0]
 800b10a:	f001 b981 	b.w	800c410 <_free_r>
 800b10e:	bf00      	nop
 800b110:	200029d8 	.word	0x200029d8

0800b114 <sbrk_aligned>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	4e0f      	ldr	r6, [pc, #60]	@ (800b154 <sbrk_aligned+0x40>)
 800b118:	460c      	mov	r4, r1
 800b11a:	6831      	ldr	r1, [r6, #0]
 800b11c:	4605      	mov	r5, r0
 800b11e:	b911      	cbnz	r1, 800b126 <sbrk_aligned+0x12>
 800b120:	f001 f910 	bl	800c344 <_sbrk_r>
 800b124:	6030      	str	r0, [r6, #0]
 800b126:	4621      	mov	r1, r4
 800b128:	4628      	mov	r0, r5
 800b12a:	f001 f90b 	bl	800c344 <_sbrk_r>
 800b12e:	1c43      	adds	r3, r0, #1
 800b130:	d103      	bne.n	800b13a <sbrk_aligned+0x26>
 800b132:	f04f 34ff 	mov.w	r4, #4294967295
 800b136:	4620      	mov	r0, r4
 800b138:	bd70      	pop	{r4, r5, r6, pc}
 800b13a:	1cc4      	adds	r4, r0, #3
 800b13c:	f024 0403 	bic.w	r4, r4, #3
 800b140:	42a0      	cmp	r0, r4
 800b142:	d0f8      	beq.n	800b136 <sbrk_aligned+0x22>
 800b144:	1a21      	subs	r1, r4, r0
 800b146:	4628      	mov	r0, r5
 800b148:	f001 f8fc 	bl	800c344 <_sbrk_r>
 800b14c:	3001      	adds	r0, #1
 800b14e:	d1f2      	bne.n	800b136 <sbrk_aligned+0x22>
 800b150:	e7ef      	b.n	800b132 <sbrk_aligned+0x1e>
 800b152:	bf00      	nop
 800b154:	20003580 	.word	0x20003580

0800b158 <_malloc_r>:
 800b158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b15c:	1ccd      	adds	r5, r1, #3
 800b15e:	f025 0503 	bic.w	r5, r5, #3
 800b162:	3508      	adds	r5, #8
 800b164:	2d0c      	cmp	r5, #12
 800b166:	bf38      	it	cc
 800b168:	250c      	movcc	r5, #12
 800b16a:	2d00      	cmp	r5, #0
 800b16c:	4606      	mov	r6, r0
 800b16e:	db01      	blt.n	800b174 <_malloc_r+0x1c>
 800b170:	42a9      	cmp	r1, r5
 800b172:	d904      	bls.n	800b17e <_malloc_r+0x26>
 800b174:	230c      	movs	r3, #12
 800b176:	6033      	str	r3, [r6, #0]
 800b178:	2000      	movs	r0, #0
 800b17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b17e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b254 <_malloc_r+0xfc>
 800b182:	f000 f869 	bl	800b258 <__malloc_lock>
 800b186:	f8d8 3000 	ldr.w	r3, [r8]
 800b18a:	461c      	mov	r4, r3
 800b18c:	bb44      	cbnz	r4, 800b1e0 <_malloc_r+0x88>
 800b18e:	4629      	mov	r1, r5
 800b190:	4630      	mov	r0, r6
 800b192:	f7ff ffbf 	bl	800b114 <sbrk_aligned>
 800b196:	1c43      	adds	r3, r0, #1
 800b198:	4604      	mov	r4, r0
 800b19a:	d158      	bne.n	800b24e <_malloc_r+0xf6>
 800b19c:	f8d8 4000 	ldr.w	r4, [r8]
 800b1a0:	4627      	mov	r7, r4
 800b1a2:	2f00      	cmp	r7, #0
 800b1a4:	d143      	bne.n	800b22e <_malloc_r+0xd6>
 800b1a6:	2c00      	cmp	r4, #0
 800b1a8:	d04b      	beq.n	800b242 <_malloc_r+0xea>
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	eb04 0903 	add.w	r9, r4, r3
 800b1b4:	f001 f8c6 	bl	800c344 <_sbrk_r>
 800b1b8:	4581      	cmp	r9, r0
 800b1ba:	d142      	bne.n	800b242 <_malloc_r+0xea>
 800b1bc:	6821      	ldr	r1, [r4, #0]
 800b1be:	1a6d      	subs	r5, r5, r1
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	f7ff ffa6 	bl	800b114 <sbrk_aligned>
 800b1c8:	3001      	adds	r0, #1
 800b1ca:	d03a      	beq.n	800b242 <_malloc_r+0xea>
 800b1cc:	6823      	ldr	r3, [r4, #0]
 800b1ce:	442b      	add	r3, r5
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	f8d8 3000 	ldr.w	r3, [r8]
 800b1d6:	685a      	ldr	r2, [r3, #4]
 800b1d8:	bb62      	cbnz	r2, 800b234 <_malloc_r+0xdc>
 800b1da:	f8c8 7000 	str.w	r7, [r8]
 800b1de:	e00f      	b.n	800b200 <_malloc_r+0xa8>
 800b1e0:	6822      	ldr	r2, [r4, #0]
 800b1e2:	1b52      	subs	r2, r2, r5
 800b1e4:	d420      	bmi.n	800b228 <_malloc_r+0xd0>
 800b1e6:	2a0b      	cmp	r2, #11
 800b1e8:	d917      	bls.n	800b21a <_malloc_r+0xc2>
 800b1ea:	1961      	adds	r1, r4, r5
 800b1ec:	42a3      	cmp	r3, r4
 800b1ee:	6025      	str	r5, [r4, #0]
 800b1f0:	bf18      	it	ne
 800b1f2:	6059      	strne	r1, [r3, #4]
 800b1f4:	6863      	ldr	r3, [r4, #4]
 800b1f6:	bf08      	it	eq
 800b1f8:	f8c8 1000 	streq.w	r1, [r8]
 800b1fc:	5162      	str	r2, [r4, r5]
 800b1fe:	604b      	str	r3, [r1, #4]
 800b200:	4630      	mov	r0, r6
 800b202:	f000 f82f 	bl	800b264 <__malloc_unlock>
 800b206:	f104 000b 	add.w	r0, r4, #11
 800b20a:	1d23      	adds	r3, r4, #4
 800b20c:	f020 0007 	bic.w	r0, r0, #7
 800b210:	1ac2      	subs	r2, r0, r3
 800b212:	bf1c      	itt	ne
 800b214:	1a1b      	subne	r3, r3, r0
 800b216:	50a3      	strne	r3, [r4, r2]
 800b218:	e7af      	b.n	800b17a <_malloc_r+0x22>
 800b21a:	6862      	ldr	r2, [r4, #4]
 800b21c:	42a3      	cmp	r3, r4
 800b21e:	bf0c      	ite	eq
 800b220:	f8c8 2000 	streq.w	r2, [r8]
 800b224:	605a      	strne	r2, [r3, #4]
 800b226:	e7eb      	b.n	800b200 <_malloc_r+0xa8>
 800b228:	4623      	mov	r3, r4
 800b22a:	6864      	ldr	r4, [r4, #4]
 800b22c:	e7ae      	b.n	800b18c <_malloc_r+0x34>
 800b22e:	463c      	mov	r4, r7
 800b230:	687f      	ldr	r7, [r7, #4]
 800b232:	e7b6      	b.n	800b1a2 <_malloc_r+0x4a>
 800b234:	461a      	mov	r2, r3
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	42a3      	cmp	r3, r4
 800b23a:	d1fb      	bne.n	800b234 <_malloc_r+0xdc>
 800b23c:	2300      	movs	r3, #0
 800b23e:	6053      	str	r3, [r2, #4]
 800b240:	e7de      	b.n	800b200 <_malloc_r+0xa8>
 800b242:	230c      	movs	r3, #12
 800b244:	6033      	str	r3, [r6, #0]
 800b246:	4630      	mov	r0, r6
 800b248:	f000 f80c 	bl	800b264 <__malloc_unlock>
 800b24c:	e794      	b.n	800b178 <_malloc_r+0x20>
 800b24e:	6005      	str	r5, [r0, #0]
 800b250:	e7d6      	b.n	800b200 <_malloc_r+0xa8>
 800b252:	bf00      	nop
 800b254:	20003584 	.word	0x20003584

0800b258 <__malloc_lock>:
 800b258:	4801      	ldr	r0, [pc, #4]	@ (800b260 <__malloc_lock+0x8>)
 800b25a:	f001 b8c0 	b.w	800c3de <__retarget_lock_acquire_recursive>
 800b25e:	bf00      	nop
 800b260:	200036c8 	.word	0x200036c8

0800b264 <__malloc_unlock>:
 800b264:	4801      	ldr	r0, [pc, #4]	@ (800b26c <__malloc_unlock+0x8>)
 800b266:	f001 b8bb 	b.w	800c3e0 <__retarget_lock_release_recursive>
 800b26a:	bf00      	nop
 800b26c:	200036c8 	.word	0x200036c8

0800b270 <realloc>:
 800b270:	4b02      	ldr	r3, [pc, #8]	@ (800b27c <realloc+0xc>)
 800b272:	460a      	mov	r2, r1
 800b274:	4601      	mov	r1, r0
 800b276:	6818      	ldr	r0, [r3, #0]
 800b278:	f000 b802 	b.w	800b280 <_realloc_r>
 800b27c:	200029d8 	.word	0x200029d8

0800b280 <_realloc_r>:
 800b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b284:	4680      	mov	r8, r0
 800b286:	4615      	mov	r5, r2
 800b288:	460c      	mov	r4, r1
 800b28a:	b921      	cbnz	r1, 800b296 <_realloc_r+0x16>
 800b28c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b290:	4611      	mov	r1, r2
 800b292:	f7ff bf61 	b.w	800b158 <_malloc_r>
 800b296:	b92a      	cbnz	r2, 800b2a4 <_realloc_r+0x24>
 800b298:	f001 f8ba 	bl	800c410 <_free_r>
 800b29c:	2400      	movs	r4, #0
 800b29e:	4620      	mov	r0, r4
 800b2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a4:	f002 f8fc 	bl	800d4a0 <_malloc_usable_size_r>
 800b2a8:	4285      	cmp	r5, r0
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	d802      	bhi.n	800b2b4 <_realloc_r+0x34>
 800b2ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b2b2:	d8f4      	bhi.n	800b29e <_realloc_r+0x1e>
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	f7ff ff4e 	bl	800b158 <_malloc_r>
 800b2bc:	4607      	mov	r7, r0
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d0ec      	beq.n	800b29c <_realloc_r+0x1c>
 800b2c2:	42b5      	cmp	r5, r6
 800b2c4:	462a      	mov	r2, r5
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	bf28      	it	cs
 800b2ca:	4632      	movcs	r2, r6
 800b2cc:	f001 f889 	bl	800c3e2 <memcpy>
 800b2d0:	4621      	mov	r1, r4
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	f001 f89c 	bl	800c410 <_free_r>
 800b2d8:	463c      	mov	r4, r7
 800b2da:	e7e0      	b.n	800b29e <_realloc_r+0x1e>

0800b2dc <sulp>:
 800b2dc:	b570      	push	{r4, r5, r6, lr}
 800b2de:	4604      	mov	r4, r0
 800b2e0:	460d      	mov	r5, r1
 800b2e2:	ec45 4b10 	vmov	d0, r4, r5
 800b2e6:	4616      	mov	r6, r2
 800b2e8:	f001 ff9c 	bl	800d224 <__ulp>
 800b2ec:	ec51 0b10 	vmov	r0, r1, d0
 800b2f0:	b17e      	cbz	r6, 800b312 <sulp+0x36>
 800b2f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b2f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	dd09      	ble.n	800b312 <sulp+0x36>
 800b2fe:	051b      	lsls	r3, r3, #20
 800b300:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b304:	2400      	movs	r4, #0
 800b306:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b30a:	4622      	mov	r2, r4
 800b30c:	462b      	mov	r3, r5
 800b30e:	f7f5 f983 	bl	8000618 <__aeabi_dmul>
 800b312:	ec41 0b10 	vmov	d0, r0, r1
 800b316:	bd70      	pop	{r4, r5, r6, pc}

0800b318 <_strtod_l>:
 800b318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b31c:	b09f      	sub	sp, #124	@ 0x7c
 800b31e:	460c      	mov	r4, r1
 800b320:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b322:	2200      	movs	r2, #0
 800b324:	921a      	str	r2, [sp, #104]	@ 0x68
 800b326:	9005      	str	r0, [sp, #20]
 800b328:	f04f 0a00 	mov.w	sl, #0
 800b32c:	f04f 0b00 	mov.w	fp, #0
 800b330:	460a      	mov	r2, r1
 800b332:	9219      	str	r2, [sp, #100]	@ 0x64
 800b334:	7811      	ldrb	r1, [r2, #0]
 800b336:	292b      	cmp	r1, #43	@ 0x2b
 800b338:	d04a      	beq.n	800b3d0 <_strtod_l+0xb8>
 800b33a:	d838      	bhi.n	800b3ae <_strtod_l+0x96>
 800b33c:	290d      	cmp	r1, #13
 800b33e:	d832      	bhi.n	800b3a6 <_strtod_l+0x8e>
 800b340:	2908      	cmp	r1, #8
 800b342:	d832      	bhi.n	800b3aa <_strtod_l+0x92>
 800b344:	2900      	cmp	r1, #0
 800b346:	d03b      	beq.n	800b3c0 <_strtod_l+0xa8>
 800b348:	2200      	movs	r2, #0
 800b34a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b34c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b34e:	782a      	ldrb	r2, [r5, #0]
 800b350:	2a30      	cmp	r2, #48	@ 0x30
 800b352:	f040 80b3 	bne.w	800b4bc <_strtod_l+0x1a4>
 800b356:	786a      	ldrb	r2, [r5, #1]
 800b358:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b35c:	2a58      	cmp	r2, #88	@ 0x58
 800b35e:	d16e      	bne.n	800b43e <_strtod_l+0x126>
 800b360:	9302      	str	r3, [sp, #8]
 800b362:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	ab1a      	add	r3, sp, #104	@ 0x68
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	4a8e      	ldr	r2, [pc, #568]	@ (800b5a4 <_strtod_l+0x28c>)
 800b36c:	9805      	ldr	r0, [sp, #20]
 800b36e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b370:	a919      	add	r1, sp, #100	@ 0x64
 800b372:	f001 f8ff 	bl	800c574 <__gethex>
 800b376:	f010 060f 	ands.w	r6, r0, #15
 800b37a:	4604      	mov	r4, r0
 800b37c:	d005      	beq.n	800b38a <_strtod_l+0x72>
 800b37e:	2e06      	cmp	r6, #6
 800b380:	d128      	bne.n	800b3d4 <_strtod_l+0xbc>
 800b382:	3501      	adds	r5, #1
 800b384:	2300      	movs	r3, #0
 800b386:	9519      	str	r5, [sp, #100]	@ 0x64
 800b388:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b38a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f040 858e 	bne.w	800beae <_strtod_l+0xb96>
 800b392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b394:	b1cb      	cbz	r3, 800b3ca <_strtod_l+0xb2>
 800b396:	4652      	mov	r2, sl
 800b398:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b39c:	ec43 2b10 	vmov	d0, r2, r3
 800b3a0:	b01f      	add	sp, #124	@ 0x7c
 800b3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a6:	2920      	cmp	r1, #32
 800b3a8:	d1ce      	bne.n	800b348 <_strtod_l+0x30>
 800b3aa:	3201      	adds	r2, #1
 800b3ac:	e7c1      	b.n	800b332 <_strtod_l+0x1a>
 800b3ae:	292d      	cmp	r1, #45	@ 0x2d
 800b3b0:	d1ca      	bne.n	800b348 <_strtod_l+0x30>
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b3b6:	1c51      	adds	r1, r2, #1
 800b3b8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b3ba:	7852      	ldrb	r2, [r2, #1]
 800b3bc:	2a00      	cmp	r2, #0
 800b3be:	d1c5      	bne.n	800b34c <_strtod_l+0x34>
 800b3c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b3c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f040 8570 	bne.w	800beaa <_strtod_l+0xb92>
 800b3ca:	4652      	mov	r2, sl
 800b3cc:	465b      	mov	r3, fp
 800b3ce:	e7e5      	b.n	800b39c <_strtod_l+0x84>
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	e7ef      	b.n	800b3b4 <_strtod_l+0x9c>
 800b3d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b3d6:	b13a      	cbz	r2, 800b3e8 <_strtod_l+0xd0>
 800b3d8:	2135      	movs	r1, #53	@ 0x35
 800b3da:	a81c      	add	r0, sp, #112	@ 0x70
 800b3dc:	f002 f81c 	bl	800d418 <__copybits>
 800b3e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3e2:	9805      	ldr	r0, [sp, #20]
 800b3e4:	f001 fbea 	bl	800cbbc <_Bfree>
 800b3e8:	3e01      	subs	r6, #1
 800b3ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b3ec:	2e04      	cmp	r6, #4
 800b3ee:	d806      	bhi.n	800b3fe <_strtod_l+0xe6>
 800b3f0:	e8df f006 	tbb	[pc, r6]
 800b3f4:	201d0314 	.word	0x201d0314
 800b3f8:	14          	.byte	0x14
 800b3f9:	00          	.byte	0x00
 800b3fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b3fe:	05e1      	lsls	r1, r4, #23
 800b400:	bf48      	it	mi
 800b402:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b406:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b40a:	0d1b      	lsrs	r3, r3, #20
 800b40c:	051b      	lsls	r3, r3, #20
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1bb      	bne.n	800b38a <_strtod_l+0x72>
 800b412:	f000 ffb9 	bl	800c388 <__errno>
 800b416:	2322      	movs	r3, #34	@ 0x22
 800b418:	6003      	str	r3, [r0, #0]
 800b41a:	e7b6      	b.n	800b38a <_strtod_l+0x72>
 800b41c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b420:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b424:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b428:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b42c:	e7e7      	b.n	800b3fe <_strtod_l+0xe6>
 800b42e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b5ac <_strtod_l+0x294>
 800b432:	e7e4      	b.n	800b3fe <_strtod_l+0xe6>
 800b434:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b438:	f04f 3aff 	mov.w	sl, #4294967295
 800b43c:	e7df      	b.n	800b3fe <_strtod_l+0xe6>
 800b43e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b440:	1c5a      	adds	r2, r3, #1
 800b442:	9219      	str	r2, [sp, #100]	@ 0x64
 800b444:	785b      	ldrb	r3, [r3, #1]
 800b446:	2b30      	cmp	r3, #48	@ 0x30
 800b448:	d0f9      	beq.n	800b43e <_strtod_l+0x126>
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d09d      	beq.n	800b38a <_strtod_l+0x72>
 800b44e:	2301      	movs	r3, #1
 800b450:	9309      	str	r3, [sp, #36]	@ 0x24
 800b452:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b454:	930c      	str	r3, [sp, #48]	@ 0x30
 800b456:	2300      	movs	r3, #0
 800b458:	9308      	str	r3, [sp, #32]
 800b45a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b45c:	461f      	mov	r7, r3
 800b45e:	220a      	movs	r2, #10
 800b460:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b462:	7805      	ldrb	r5, [r0, #0]
 800b464:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b468:	b2d9      	uxtb	r1, r3
 800b46a:	2909      	cmp	r1, #9
 800b46c:	d928      	bls.n	800b4c0 <_strtod_l+0x1a8>
 800b46e:	494e      	ldr	r1, [pc, #312]	@ (800b5a8 <_strtod_l+0x290>)
 800b470:	2201      	movs	r2, #1
 800b472:	f000 fee2 	bl	800c23a <strncmp>
 800b476:	2800      	cmp	r0, #0
 800b478:	d032      	beq.n	800b4e0 <_strtod_l+0x1c8>
 800b47a:	2000      	movs	r0, #0
 800b47c:	462a      	mov	r2, r5
 800b47e:	4681      	mov	r9, r0
 800b480:	463d      	mov	r5, r7
 800b482:	4603      	mov	r3, r0
 800b484:	2a65      	cmp	r2, #101	@ 0x65
 800b486:	d001      	beq.n	800b48c <_strtod_l+0x174>
 800b488:	2a45      	cmp	r2, #69	@ 0x45
 800b48a:	d114      	bne.n	800b4b6 <_strtod_l+0x19e>
 800b48c:	b91d      	cbnz	r5, 800b496 <_strtod_l+0x17e>
 800b48e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b490:	4302      	orrs	r2, r0
 800b492:	d095      	beq.n	800b3c0 <_strtod_l+0xa8>
 800b494:	2500      	movs	r5, #0
 800b496:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b498:	1c62      	adds	r2, r4, #1
 800b49a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b49c:	7862      	ldrb	r2, [r4, #1]
 800b49e:	2a2b      	cmp	r2, #43	@ 0x2b
 800b4a0:	d077      	beq.n	800b592 <_strtod_l+0x27a>
 800b4a2:	2a2d      	cmp	r2, #45	@ 0x2d
 800b4a4:	d07b      	beq.n	800b59e <_strtod_l+0x286>
 800b4a6:	f04f 0c00 	mov.w	ip, #0
 800b4aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b4ae:	2909      	cmp	r1, #9
 800b4b0:	f240 8082 	bls.w	800b5b8 <_strtod_l+0x2a0>
 800b4b4:	9419      	str	r4, [sp, #100]	@ 0x64
 800b4b6:	f04f 0800 	mov.w	r8, #0
 800b4ba:	e0a2      	b.n	800b602 <_strtod_l+0x2ea>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	e7c7      	b.n	800b450 <_strtod_l+0x138>
 800b4c0:	2f08      	cmp	r7, #8
 800b4c2:	bfd5      	itete	le
 800b4c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b4c6:	9908      	ldrgt	r1, [sp, #32]
 800b4c8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b4cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b4d0:	f100 0001 	add.w	r0, r0, #1
 800b4d4:	bfd4      	ite	le
 800b4d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b4d8:	9308      	strgt	r3, [sp, #32]
 800b4da:	3701      	adds	r7, #1
 800b4dc:	9019      	str	r0, [sp, #100]	@ 0x64
 800b4de:	e7bf      	b.n	800b460 <_strtod_l+0x148>
 800b4e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4e2:	1c5a      	adds	r2, r3, #1
 800b4e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4e6:	785a      	ldrb	r2, [r3, #1]
 800b4e8:	b37f      	cbz	r7, 800b54a <_strtod_l+0x232>
 800b4ea:	4681      	mov	r9, r0
 800b4ec:	463d      	mov	r5, r7
 800b4ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b4f2:	2b09      	cmp	r3, #9
 800b4f4:	d912      	bls.n	800b51c <_strtod_l+0x204>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e7c4      	b.n	800b484 <_strtod_l+0x16c>
 800b4fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	9219      	str	r2, [sp, #100]	@ 0x64
 800b500:	785a      	ldrb	r2, [r3, #1]
 800b502:	3001      	adds	r0, #1
 800b504:	2a30      	cmp	r2, #48	@ 0x30
 800b506:	d0f8      	beq.n	800b4fa <_strtod_l+0x1e2>
 800b508:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b50c:	2b08      	cmp	r3, #8
 800b50e:	f200 84d3 	bhi.w	800beb8 <_strtod_l+0xba0>
 800b512:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b514:	930c      	str	r3, [sp, #48]	@ 0x30
 800b516:	4681      	mov	r9, r0
 800b518:	2000      	movs	r0, #0
 800b51a:	4605      	mov	r5, r0
 800b51c:	3a30      	subs	r2, #48	@ 0x30
 800b51e:	f100 0301 	add.w	r3, r0, #1
 800b522:	d02a      	beq.n	800b57a <_strtod_l+0x262>
 800b524:	4499      	add	r9, r3
 800b526:	eb00 0c05 	add.w	ip, r0, r5
 800b52a:	462b      	mov	r3, r5
 800b52c:	210a      	movs	r1, #10
 800b52e:	4563      	cmp	r3, ip
 800b530:	d10d      	bne.n	800b54e <_strtod_l+0x236>
 800b532:	1c69      	adds	r1, r5, #1
 800b534:	4401      	add	r1, r0
 800b536:	4428      	add	r0, r5
 800b538:	2808      	cmp	r0, #8
 800b53a:	dc16      	bgt.n	800b56a <_strtod_l+0x252>
 800b53c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b53e:	230a      	movs	r3, #10
 800b540:	fb03 2300 	mla	r3, r3, r0, r2
 800b544:	930a      	str	r3, [sp, #40]	@ 0x28
 800b546:	2300      	movs	r3, #0
 800b548:	e018      	b.n	800b57c <_strtod_l+0x264>
 800b54a:	4638      	mov	r0, r7
 800b54c:	e7da      	b.n	800b504 <_strtod_l+0x1ec>
 800b54e:	2b08      	cmp	r3, #8
 800b550:	f103 0301 	add.w	r3, r3, #1
 800b554:	dc03      	bgt.n	800b55e <_strtod_l+0x246>
 800b556:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b558:	434e      	muls	r6, r1
 800b55a:	960a      	str	r6, [sp, #40]	@ 0x28
 800b55c:	e7e7      	b.n	800b52e <_strtod_l+0x216>
 800b55e:	2b10      	cmp	r3, #16
 800b560:	bfde      	ittt	le
 800b562:	9e08      	ldrle	r6, [sp, #32]
 800b564:	434e      	mulle	r6, r1
 800b566:	9608      	strle	r6, [sp, #32]
 800b568:	e7e1      	b.n	800b52e <_strtod_l+0x216>
 800b56a:	280f      	cmp	r0, #15
 800b56c:	dceb      	bgt.n	800b546 <_strtod_l+0x22e>
 800b56e:	9808      	ldr	r0, [sp, #32]
 800b570:	230a      	movs	r3, #10
 800b572:	fb03 2300 	mla	r3, r3, r0, r2
 800b576:	9308      	str	r3, [sp, #32]
 800b578:	e7e5      	b.n	800b546 <_strtod_l+0x22e>
 800b57a:	4629      	mov	r1, r5
 800b57c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b57e:	1c50      	adds	r0, r2, #1
 800b580:	9019      	str	r0, [sp, #100]	@ 0x64
 800b582:	7852      	ldrb	r2, [r2, #1]
 800b584:	4618      	mov	r0, r3
 800b586:	460d      	mov	r5, r1
 800b588:	e7b1      	b.n	800b4ee <_strtod_l+0x1d6>
 800b58a:	f04f 0900 	mov.w	r9, #0
 800b58e:	2301      	movs	r3, #1
 800b590:	e77d      	b.n	800b48e <_strtod_l+0x176>
 800b592:	f04f 0c00 	mov.w	ip, #0
 800b596:	1ca2      	adds	r2, r4, #2
 800b598:	9219      	str	r2, [sp, #100]	@ 0x64
 800b59a:	78a2      	ldrb	r2, [r4, #2]
 800b59c:	e785      	b.n	800b4aa <_strtod_l+0x192>
 800b59e:	f04f 0c01 	mov.w	ip, #1
 800b5a2:	e7f8      	b.n	800b596 <_strtod_l+0x27e>
 800b5a4:	08025100 	.word	0x08025100
 800b5a8:	080250dc 	.word	0x080250dc
 800b5ac:	7ff00000 	.word	0x7ff00000
 800b5b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5b2:	1c51      	adds	r1, r2, #1
 800b5b4:	9119      	str	r1, [sp, #100]	@ 0x64
 800b5b6:	7852      	ldrb	r2, [r2, #1]
 800b5b8:	2a30      	cmp	r2, #48	@ 0x30
 800b5ba:	d0f9      	beq.n	800b5b0 <_strtod_l+0x298>
 800b5bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b5c0:	2908      	cmp	r1, #8
 800b5c2:	f63f af78 	bhi.w	800b4b6 <_strtod_l+0x19e>
 800b5c6:	3a30      	subs	r2, #48	@ 0x30
 800b5c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b5ce:	f04f 080a 	mov.w	r8, #10
 800b5d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5d4:	1c56      	adds	r6, r2, #1
 800b5d6:	9619      	str	r6, [sp, #100]	@ 0x64
 800b5d8:	7852      	ldrb	r2, [r2, #1]
 800b5da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b5de:	f1be 0f09 	cmp.w	lr, #9
 800b5e2:	d939      	bls.n	800b658 <_strtod_l+0x340>
 800b5e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b5e6:	1a76      	subs	r6, r6, r1
 800b5e8:	2e08      	cmp	r6, #8
 800b5ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b5ee:	dc03      	bgt.n	800b5f8 <_strtod_l+0x2e0>
 800b5f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b5f2:	4588      	cmp	r8, r1
 800b5f4:	bfa8      	it	ge
 800b5f6:	4688      	movge	r8, r1
 800b5f8:	f1bc 0f00 	cmp.w	ip, #0
 800b5fc:	d001      	beq.n	800b602 <_strtod_l+0x2ea>
 800b5fe:	f1c8 0800 	rsb	r8, r8, #0
 800b602:	2d00      	cmp	r5, #0
 800b604:	d14e      	bne.n	800b6a4 <_strtod_l+0x38c>
 800b606:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b608:	4308      	orrs	r0, r1
 800b60a:	f47f aebe 	bne.w	800b38a <_strtod_l+0x72>
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f47f aed6 	bne.w	800b3c0 <_strtod_l+0xa8>
 800b614:	2a69      	cmp	r2, #105	@ 0x69
 800b616:	d028      	beq.n	800b66a <_strtod_l+0x352>
 800b618:	dc25      	bgt.n	800b666 <_strtod_l+0x34e>
 800b61a:	2a49      	cmp	r2, #73	@ 0x49
 800b61c:	d025      	beq.n	800b66a <_strtod_l+0x352>
 800b61e:	2a4e      	cmp	r2, #78	@ 0x4e
 800b620:	f47f aece 	bne.w	800b3c0 <_strtod_l+0xa8>
 800b624:	499b      	ldr	r1, [pc, #620]	@ (800b894 <_strtod_l+0x57c>)
 800b626:	a819      	add	r0, sp, #100	@ 0x64
 800b628:	f001 f9c6 	bl	800c9b8 <__match>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	f43f aec7 	beq.w	800b3c0 <_strtod_l+0xa8>
 800b632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	2b28      	cmp	r3, #40	@ 0x28
 800b638:	d12e      	bne.n	800b698 <_strtod_l+0x380>
 800b63a:	4997      	ldr	r1, [pc, #604]	@ (800b898 <_strtod_l+0x580>)
 800b63c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b63e:	a819      	add	r0, sp, #100	@ 0x64
 800b640:	f001 f9ce 	bl	800c9e0 <__hexnan>
 800b644:	2805      	cmp	r0, #5
 800b646:	d127      	bne.n	800b698 <_strtod_l+0x380>
 800b648:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b64a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b64e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b652:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b656:	e698      	b.n	800b38a <_strtod_l+0x72>
 800b658:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b65a:	fb08 2101 	mla	r1, r8, r1, r2
 800b65e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b662:	920e      	str	r2, [sp, #56]	@ 0x38
 800b664:	e7b5      	b.n	800b5d2 <_strtod_l+0x2ba>
 800b666:	2a6e      	cmp	r2, #110	@ 0x6e
 800b668:	e7da      	b.n	800b620 <_strtod_l+0x308>
 800b66a:	498c      	ldr	r1, [pc, #560]	@ (800b89c <_strtod_l+0x584>)
 800b66c:	a819      	add	r0, sp, #100	@ 0x64
 800b66e:	f001 f9a3 	bl	800c9b8 <__match>
 800b672:	2800      	cmp	r0, #0
 800b674:	f43f aea4 	beq.w	800b3c0 <_strtod_l+0xa8>
 800b678:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b67a:	4989      	ldr	r1, [pc, #548]	@ (800b8a0 <_strtod_l+0x588>)
 800b67c:	3b01      	subs	r3, #1
 800b67e:	a819      	add	r0, sp, #100	@ 0x64
 800b680:	9319      	str	r3, [sp, #100]	@ 0x64
 800b682:	f001 f999 	bl	800c9b8 <__match>
 800b686:	b910      	cbnz	r0, 800b68e <_strtod_l+0x376>
 800b688:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b68a:	3301      	adds	r3, #1
 800b68c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b68e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b8b0 <_strtod_l+0x598>
 800b692:	f04f 0a00 	mov.w	sl, #0
 800b696:	e678      	b.n	800b38a <_strtod_l+0x72>
 800b698:	4882      	ldr	r0, [pc, #520]	@ (800b8a4 <_strtod_l+0x58c>)
 800b69a:	f000 feb1 	bl	800c400 <nan>
 800b69e:	ec5b ab10 	vmov	sl, fp, d0
 800b6a2:	e672      	b.n	800b38a <_strtod_l+0x72>
 800b6a4:	eba8 0309 	sub.w	r3, r8, r9
 800b6a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ac:	2f00      	cmp	r7, #0
 800b6ae:	bf08      	it	eq
 800b6b0:	462f      	moveq	r7, r5
 800b6b2:	2d10      	cmp	r5, #16
 800b6b4:	462c      	mov	r4, r5
 800b6b6:	bfa8      	it	ge
 800b6b8:	2410      	movge	r4, #16
 800b6ba:	f7f4 ff33 	bl	8000524 <__aeabi_ui2d>
 800b6be:	2d09      	cmp	r5, #9
 800b6c0:	4682      	mov	sl, r0
 800b6c2:	468b      	mov	fp, r1
 800b6c4:	dc13      	bgt.n	800b6ee <_strtod_l+0x3d6>
 800b6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f43f ae5e 	beq.w	800b38a <_strtod_l+0x72>
 800b6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d0:	dd78      	ble.n	800b7c4 <_strtod_l+0x4ac>
 800b6d2:	2b16      	cmp	r3, #22
 800b6d4:	dc5f      	bgt.n	800b796 <_strtod_l+0x47e>
 800b6d6:	4974      	ldr	r1, [pc, #464]	@ (800b8a8 <_strtod_l+0x590>)
 800b6d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b6dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6e0:	4652      	mov	r2, sl
 800b6e2:	465b      	mov	r3, fp
 800b6e4:	f7f4 ff98 	bl	8000618 <__aeabi_dmul>
 800b6e8:	4682      	mov	sl, r0
 800b6ea:	468b      	mov	fp, r1
 800b6ec:	e64d      	b.n	800b38a <_strtod_l+0x72>
 800b6ee:	4b6e      	ldr	r3, [pc, #440]	@ (800b8a8 <_strtod_l+0x590>)
 800b6f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b6f8:	f7f4 ff8e 	bl	8000618 <__aeabi_dmul>
 800b6fc:	4682      	mov	sl, r0
 800b6fe:	9808      	ldr	r0, [sp, #32]
 800b700:	468b      	mov	fp, r1
 800b702:	f7f4 ff0f 	bl	8000524 <__aeabi_ui2d>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	4650      	mov	r0, sl
 800b70c:	4659      	mov	r1, fp
 800b70e:	f7f4 fdcd 	bl	80002ac <__adddf3>
 800b712:	2d0f      	cmp	r5, #15
 800b714:	4682      	mov	sl, r0
 800b716:	468b      	mov	fp, r1
 800b718:	ddd5      	ble.n	800b6c6 <_strtod_l+0x3ae>
 800b71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b71c:	1b2c      	subs	r4, r5, r4
 800b71e:	441c      	add	r4, r3
 800b720:	2c00      	cmp	r4, #0
 800b722:	f340 8096 	ble.w	800b852 <_strtod_l+0x53a>
 800b726:	f014 030f 	ands.w	r3, r4, #15
 800b72a:	d00a      	beq.n	800b742 <_strtod_l+0x42a>
 800b72c:	495e      	ldr	r1, [pc, #376]	@ (800b8a8 <_strtod_l+0x590>)
 800b72e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b732:	4652      	mov	r2, sl
 800b734:	465b      	mov	r3, fp
 800b736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b73a:	f7f4 ff6d 	bl	8000618 <__aeabi_dmul>
 800b73e:	4682      	mov	sl, r0
 800b740:	468b      	mov	fp, r1
 800b742:	f034 040f 	bics.w	r4, r4, #15
 800b746:	d073      	beq.n	800b830 <_strtod_l+0x518>
 800b748:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b74c:	dd48      	ble.n	800b7e0 <_strtod_l+0x4c8>
 800b74e:	2400      	movs	r4, #0
 800b750:	46a0      	mov	r8, r4
 800b752:	940a      	str	r4, [sp, #40]	@ 0x28
 800b754:	46a1      	mov	r9, r4
 800b756:	9a05      	ldr	r2, [sp, #20]
 800b758:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b8b0 <_strtod_l+0x598>
 800b75c:	2322      	movs	r3, #34	@ 0x22
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	f04f 0a00 	mov.w	sl, #0
 800b764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b766:	2b00      	cmp	r3, #0
 800b768:	f43f ae0f 	beq.w	800b38a <_strtod_l+0x72>
 800b76c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b76e:	9805      	ldr	r0, [sp, #20]
 800b770:	f001 fa24 	bl	800cbbc <_Bfree>
 800b774:	9805      	ldr	r0, [sp, #20]
 800b776:	4649      	mov	r1, r9
 800b778:	f001 fa20 	bl	800cbbc <_Bfree>
 800b77c:	9805      	ldr	r0, [sp, #20]
 800b77e:	4641      	mov	r1, r8
 800b780:	f001 fa1c 	bl	800cbbc <_Bfree>
 800b784:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b786:	9805      	ldr	r0, [sp, #20]
 800b788:	f001 fa18 	bl	800cbbc <_Bfree>
 800b78c:	9805      	ldr	r0, [sp, #20]
 800b78e:	4621      	mov	r1, r4
 800b790:	f001 fa14 	bl	800cbbc <_Bfree>
 800b794:	e5f9      	b.n	800b38a <_strtod_l+0x72>
 800b796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b798:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b79c:	4293      	cmp	r3, r2
 800b79e:	dbbc      	blt.n	800b71a <_strtod_l+0x402>
 800b7a0:	4c41      	ldr	r4, [pc, #260]	@ (800b8a8 <_strtod_l+0x590>)
 800b7a2:	f1c5 050f 	rsb	r5, r5, #15
 800b7a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b7aa:	4652      	mov	r2, sl
 800b7ac:	465b      	mov	r3, fp
 800b7ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7b2:	f7f4 ff31 	bl	8000618 <__aeabi_dmul>
 800b7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b8:	1b5d      	subs	r5, r3, r5
 800b7ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b7be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b7c2:	e78f      	b.n	800b6e4 <_strtod_l+0x3cc>
 800b7c4:	3316      	adds	r3, #22
 800b7c6:	dba8      	blt.n	800b71a <_strtod_l+0x402>
 800b7c8:	4b37      	ldr	r3, [pc, #220]	@ (800b8a8 <_strtod_l+0x590>)
 800b7ca:	eba9 0808 	sub.w	r8, r9, r8
 800b7ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b7d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b7d6:	4650      	mov	r0, sl
 800b7d8:	4659      	mov	r1, fp
 800b7da:	f7f5 f847 	bl	800086c <__aeabi_ddiv>
 800b7de:	e783      	b.n	800b6e8 <_strtod_l+0x3d0>
 800b7e0:	4b32      	ldr	r3, [pc, #200]	@ (800b8ac <_strtod_l+0x594>)
 800b7e2:	9308      	str	r3, [sp, #32]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	1124      	asrs	r4, r4, #4
 800b7e8:	4650      	mov	r0, sl
 800b7ea:	4659      	mov	r1, fp
 800b7ec:	461e      	mov	r6, r3
 800b7ee:	2c01      	cmp	r4, #1
 800b7f0:	dc21      	bgt.n	800b836 <_strtod_l+0x51e>
 800b7f2:	b10b      	cbz	r3, 800b7f8 <_strtod_l+0x4e0>
 800b7f4:	4682      	mov	sl, r0
 800b7f6:	468b      	mov	fp, r1
 800b7f8:	492c      	ldr	r1, [pc, #176]	@ (800b8ac <_strtod_l+0x594>)
 800b7fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b7fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b802:	4652      	mov	r2, sl
 800b804:	465b      	mov	r3, fp
 800b806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b80a:	f7f4 ff05 	bl	8000618 <__aeabi_dmul>
 800b80e:	4b28      	ldr	r3, [pc, #160]	@ (800b8b0 <_strtod_l+0x598>)
 800b810:	460a      	mov	r2, r1
 800b812:	400b      	ands	r3, r1
 800b814:	4927      	ldr	r1, [pc, #156]	@ (800b8b4 <_strtod_l+0x59c>)
 800b816:	428b      	cmp	r3, r1
 800b818:	4682      	mov	sl, r0
 800b81a:	d898      	bhi.n	800b74e <_strtod_l+0x436>
 800b81c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b820:	428b      	cmp	r3, r1
 800b822:	bf86      	itte	hi
 800b824:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b8b8 <_strtod_l+0x5a0>
 800b828:	f04f 3aff 	movhi.w	sl, #4294967295
 800b82c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b830:	2300      	movs	r3, #0
 800b832:	9308      	str	r3, [sp, #32]
 800b834:	e07a      	b.n	800b92c <_strtod_l+0x614>
 800b836:	07e2      	lsls	r2, r4, #31
 800b838:	d505      	bpl.n	800b846 <_strtod_l+0x52e>
 800b83a:	9b08      	ldr	r3, [sp, #32]
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f4 feea 	bl	8000618 <__aeabi_dmul>
 800b844:	2301      	movs	r3, #1
 800b846:	9a08      	ldr	r2, [sp, #32]
 800b848:	3208      	adds	r2, #8
 800b84a:	3601      	adds	r6, #1
 800b84c:	1064      	asrs	r4, r4, #1
 800b84e:	9208      	str	r2, [sp, #32]
 800b850:	e7cd      	b.n	800b7ee <_strtod_l+0x4d6>
 800b852:	d0ed      	beq.n	800b830 <_strtod_l+0x518>
 800b854:	4264      	negs	r4, r4
 800b856:	f014 020f 	ands.w	r2, r4, #15
 800b85a:	d00a      	beq.n	800b872 <_strtod_l+0x55a>
 800b85c:	4b12      	ldr	r3, [pc, #72]	@ (800b8a8 <_strtod_l+0x590>)
 800b85e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b862:	4650      	mov	r0, sl
 800b864:	4659      	mov	r1, fp
 800b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86a:	f7f4 ffff 	bl	800086c <__aeabi_ddiv>
 800b86e:	4682      	mov	sl, r0
 800b870:	468b      	mov	fp, r1
 800b872:	1124      	asrs	r4, r4, #4
 800b874:	d0dc      	beq.n	800b830 <_strtod_l+0x518>
 800b876:	2c1f      	cmp	r4, #31
 800b878:	dd20      	ble.n	800b8bc <_strtod_l+0x5a4>
 800b87a:	2400      	movs	r4, #0
 800b87c:	46a0      	mov	r8, r4
 800b87e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b880:	46a1      	mov	r9, r4
 800b882:	9a05      	ldr	r2, [sp, #20]
 800b884:	2322      	movs	r3, #34	@ 0x22
 800b886:	f04f 0a00 	mov.w	sl, #0
 800b88a:	f04f 0b00 	mov.w	fp, #0
 800b88e:	6013      	str	r3, [r2, #0]
 800b890:	e768      	b.n	800b764 <_strtod_l+0x44c>
 800b892:	bf00      	nop
 800b894:	080250e7 	.word	0x080250e7
 800b898:	080250ec 	.word	0x080250ec
 800b89c:	080250de 	.word	0x080250de
 800b8a0:	080250e1 	.word	0x080250e1
 800b8a4:	080254b1 	.word	0x080254b1
 800b8a8:	08025360 	.word	0x08025360
 800b8ac:	08025338 	.word	0x08025338
 800b8b0:	7ff00000 	.word	0x7ff00000
 800b8b4:	7ca00000 	.word	0x7ca00000
 800b8b8:	7fefffff 	.word	0x7fefffff
 800b8bc:	f014 0310 	ands.w	r3, r4, #16
 800b8c0:	bf18      	it	ne
 800b8c2:	236a      	movne	r3, #106	@ 0x6a
 800b8c4:	4ea9      	ldr	r6, [pc, #676]	@ (800bb6c <_strtod_l+0x854>)
 800b8c6:	9308      	str	r3, [sp, #32]
 800b8c8:	4650      	mov	r0, sl
 800b8ca:	4659      	mov	r1, fp
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	07e2      	lsls	r2, r4, #31
 800b8d0:	d504      	bpl.n	800b8dc <_strtod_l+0x5c4>
 800b8d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8d6:	f7f4 fe9f 	bl	8000618 <__aeabi_dmul>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	1064      	asrs	r4, r4, #1
 800b8de:	f106 0608 	add.w	r6, r6, #8
 800b8e2:	d1f4      	bne.n	800b8ce <_strtod_l+0x5b6>
 800b8e4:	b10b      	cbz	r3, 800b8ea <_strtod_l+0x5d2>
 800b8e6:	4682      	mov	sl, r0
 800b8e8:	468b      	mov	fp, r1
 800b8ea:	9b08      	ldr	r3, [sp, #32]
 800b8ec:	b1b3      	cbz	r3, 800b91c <_strtod_l+0x604>
 800b8ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b8f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	4659      	mov	r1, fp
 800b8fa:	dd0f      	ble.n	800b91c <_strtod_l+0x604>
 800b8fc:	2b1f      	cmp	r3, #31
 800b8fe:	dd55      	ble.n	800b9ac <_strtod_l+0x694>
 800b900:	2b34      	cmp	r3, #52	@ 0x34
 800b902:	bfde      	ittt	le
 800b904:	f04f 33ff 	movle.w	r3, #4294967295
 800b908:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b90c:	4093      	lslle	r3, r2
 800b90e:	f04f 0a00 	mov.w	sl, #0
 800b912:	bfcc      	ite	gt
 800b914:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b918:	ea03 0b01 	andle.w	fp, r3, r1
 800b91c:	2200      	movs	r2, #0
 800b91e:	2300      	movs	r3, #0
 800b920:	4650      	mov	r0, sl
 800b922:	4659      	mov	r1, fp
 800b924:	f7f5 f8e0 	bl	8000ae8 <__aeabi_dcmpeq>
 800b928:	2800      	cmp	r0, #0
 800b92a:	d1a6      	bne.n	800b87a <_strtod_l+0x562>
 800b92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b932:	9805      	ldr	r0, [sp, #20]
 800b934:	462b      	mov	r3, r5
 800b936:	463a      	mov	r2, r7
 800b938:	f001 f9a8 	bl	800cc8c <__s2b>
 800b93c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b93e:	2800      	cmp	r0, #0
 800b940:	f43f af05 	beq.w	800b74e <_strtod_l+0x436>
 800b944:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b946:	2a00      	cmp	r2, #0
 800b948:	eba9 0308 	sub.w	r3, r9, r8
 800b94c:	bfa8      	it	ge
 800b94e:	2300      	movge	r3, #0
 800b950:	9312      	str	r3, [sp, #72]	@ 0x48
 800b952:	2400      	movs	r4, #0
 800b954:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b958:	9316      	str	r3, [sp, #88]	@ 0x58
 800b95a:	46a0      	mov	r8, r4
 800b95c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b95e:	9805      	ldr	r0, [sp, #20]
 800b960:	6859      	ldr	r1, [r3, #4]
 800b962:	f001 f8eb 	bl	800cb3c <_Balloc>
 800b966:	4681      	mov	r9, r0
 800b968:	2800      	cmp	r0, #0
 800b96a:	f43f aef4 	beq.w	800b756 <_strtod_l+0x43e>
 800b96e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b970:	691a      	ldr	r2, [r3, #16]
 800b972:	3202      	adds	r2, #2
 800b974:	f103 010c 	add.w	r1, r3, #12
 800b978:	0092      	lsls	r2, r2, #2
 800b97a:	300c      	adds	r0, #12
 800b97c:	f000 fd31 	bl	800c3e2 <memcpy>
 800b980:	ec4b ab10 	vmov	d0, sl, fp
 800b984:	9805      	ldr	r0, [sp, #20]
 800b986:	aa1c      	add	r2, sp, #112	@ 0x70
 800b988:	a91b      	add	r1, sp, #108	@ 0x6c
 800b98a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b98e:	f001 fcb9 	bl	800d304 <__d2b>
 800b992:	901a      	str	r0, [sp, #104]	@ 0x68
 800b994:	2800      	cmp	r0, #0
 800b996:	f43f aede 	beq.w	800b756 <_strtod_l+0x43e>
 800b99a:	9805      	ldr	r0, [sp, #20]
 800b99c:	2101      	movs	r1, #1
 800b99e:	f001 fa0b 	bl	800cdb8 <__i2b>
 800b9a2:	4680      	mov	r8, r0
 800b9a4:	b948      	cbnz	r0, 800b9ba <_strtod_l+0x6a2>
 800b9a6:	f04f 0800 	mov.w	r8, #0
 800b9aa:	e6d4      	b.n	800b756 <_strtod_l+0x43e>
 800b9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b4:	ea03 0a0a 	and.w	sl, r3, sl
 800b9b8:	e7b0      	b.n	800b91c <_strtod_l+0x604>
 800b9ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b9bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b9be:	2d00      	cmp	r5, #0
 800b9c0:	bfab      	itete	ge
 800b9c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b9c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b9c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b9c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b9ca:	bfac      	ite	ge
 800b9cc:	18ef      	addge	r7, r5, r3
 800b9ce:	1b5e      	sublt	r6, r3, r5
 800b9d0:	9b08      	ldr	r3, [sp, #32]
 800b9d2:	1aed      	subs	r5, r5, r3
 800b9d4:	4415      	add	r5, r2
 800b9d6:	4b66      	ldr	r3, [pc, #408]	@ (800bb70 <_strtod_l+0x858>)
 800b9d8:	3d01      	subs	r5, #1
 800b9da:	429d      	cmp	r5, r3
 800b9dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b9e0:	da50      	bge.n	800ba84 <_strtod_l+0x76c>
 800b9e2:	1b5b      	subs	r3, r3, r5
 800b9e4:	2b1f      	cmp	r3, #31
 800b9e6:	eba2 0203 	sub.w	r2, r2, r3
 800b9ea:	f04f 0101 	mov.w	r1, #1
 800b9ee:	dc3d      	bgt.n	800ba6c <_strtod_l+0x754>
 800b9f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b9f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9fa:	18bd      	adds	r5, r7, r2
 800b9fc:	9b08      	ldr	r3, [sp, #32]
 800b9fe:	42af      	cmp	r7, r5
 800ba00:	4416      	add	r6, r2
 800ba02:	441e      	add	r6, r3
 800ba04:	463b      	mov	r3, r7
 800ba06:	bfa8      	it	ge
 800ba08:	462b      	movge	r3, r5
 800ba0a:	42b3      	cmp	r3, r6
 800ba0c:	bfa8      	it	ge
 800ba0e:	4633      	movge	r3, r6
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	bfc2      	ittt	gt
 800ba14:	1aed      	subgt	r5, r5, r3
 800ba16:	1af6      	subgt	r6, r6, r3
 800ba18:	1aff      	subgt	r7, r7, r3
 800ba1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dd16      	ble.n	800ba4e <_strtod_l+0x736>
 800ba20:	4641      	mov	r1, r8
 800ba22:	9805      	ldr	r0, [sp, #20]
 800ba24:	461a      	mov	r2, r3
 800ba26:	f001 fa87 	bl	800cf38 <__pow5mult>
 800ba2a:	4680      	mov	r8, r0
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	d0ba      	beq.n	800b9a6 <_strtod_l+0x68e>
 800ba30:	4601      	mov	r1, r0
 800ba32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba34:	9805      	ldr	r0, [sp, #20]
 800ba36:	f001 f9d5 	bl	800cde4 <__multiply>
 800ba3a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	f43f ae8a 	beq.w	800b756 <_strtod_l+0x43e>
 800ba42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba44:	9805      	ldr	r0, [sp, #20]
 800ba46:	f001 f8b9 	bl	800cbbc <_Bfree>
 800ba4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba4e:	2d00      	cmp	r5, #0
 800ba50:	dc1d      	bgt.n	800ba8e <_strtod_l+0x776>
 800ba52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	dd23      	ble.n	800baa0 <_strtod_l+0x788>
 800ba58:	4649      	mov	r1, r9
 800ba5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ba5c:	9805      	ldr	r0, [sp, #20]
 800ba5e:	f001 fa6b 	bl	800cf38 <__pow5mult>
 800ba62:	4681      	mov	r9, r0
 800ba64:	b9e0      	cbnz	r0, 800baa0 <_strtod_l+0x788>
 800ba66:	f04f 0900 	mov.w	r9, #0
 800ba6a:	e674      	b.n	800b756 <_strtod_l+0x43e>
 800ba6c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ba70:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ba74:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ba78:	35e2      	adds	r5, #226	@ 0xe2
 800ba7a:	fa01 f305 	lsl.w	r3, r1, r5
 800ba7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba80:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ba82:	e7ba      	b.n	800b9fa <_strtod_l+0x6e2>
 800ba84:	2300      	movs	r3, #0
 800ba86:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba88:	2301      	movs	r3, #1
 800ba8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba8c:	e7b5      	b.n	800b9fa <_strtod_l+0x6e2>
 800ba8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba90:	9805      	ldr	r0, [sp, #20]
 800ba92:	462a      	mov	r2, r5
 800ba94:	f001 faaa 	bl	800cfec <__lshift>
 800ba98:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d1d9      	bne.n	800ba52 <_strtod_l+0x73a>
 800ba9e:	e65a      	b.n	800b756 <_strtod_l+0x43e>
 800baa0:	2e00      	cmp	r6, #0
 800baa2:	dd07      	ble.n	800bab4 <_strtod_l+0x79c>
 800baa4:	4649      	mov	r1, r9
 800baa6:	9805      	ldr	r0, [sp, #20]
 800baa8:	4632      	mov	r2, r6
 800baaa:	f001 fa9f 	bl	800cfec <__lshift>
 800baae:	4681      	mov	r9, r0
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d0d8      	beq.n	800ba66 <_strtod_l+0x74e>
 800bab4:	2f00      	cmp	r7, #0
 800bab6:	dd08      	ble.n	800baca <_strtod_l+0x7b2>
 800bab8:	4641      	mov	r1, r8
 800baba:	9805      	ldr	r0, [sp, #20]
 800babc:	463a      	mov	r2, r7
 800babe:	f001 fa95 	bl	800cfec <__lshift>
 800bac2:	4680      	mov	r8, r0
 800bac4:	2800      	cmp	r0, #0
 800bac6:	f43f ae46 	beq.w	800b756 <_strtod_l+0x43e>
 800baca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bacc:	9805      	ldr	r0, [sp, #20]
 800bace:	464a      	mov	r2, r9
 800bad0:	f001 fb14 	bl	800d0fc <__mdiff>
 800bad4:	4604      	mov	r4, r0
 800bad6:	2800      	cmp	r0, #0
 800bad8:	f43f ae3d 	beq.w	800b756 <_strtod_l+0x43e>
 800badc:	68c3      	ldr	r3, [r0, #12]
 800bade:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bae0:	2300      	movs	r3, #0
 800bae2:	60c3      	str	r3, [r0, #12]
 800bae4:	4641      	mov	r1, r8
 800bae6:	f001 faed 	bl	800d0c4 <__mcmp>
 800baea:	2800      	cmp	r0, #0
 800baec:	da46      	bge.n	800bb7c <_strtod_l+0x864>
 800baee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baf0:	ea53 030a 	orrs.w	r3, r3, sl
 800baf4:	d16c      	bne.n	800bbd0 <_strtod_l+0x8b8>
 800baf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d168      	bne.n	800bbd0 <_strtod_l+0x8b8>
 800bafe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb02:	0d1b      	lsrs	r3, r3, #20
 800bb04:	051b      	lsls	r3, r3, #20
 800bb06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bb0a:	d961      	bls.n	800bbd0 <_strtod_l+0x8b8>
 800bb0c:	6963      	ldr	r3, [r4, #20]
 800bb0e:	b913      	cbnz	r3, 800bb16 <_strtod_l+0x7fe>
 800bb10:	6923      	ldr	r3, [r4, #16]
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	dd5c      	ble.n	800bbd0 <_strtod_l+0x8b8>
 800bb16:	4621      	mov	r1, r4
 800bb18:	2201      	movs	r2, #1
 800bb1a:	9805      	ldr	r0, [sp, #20]
 800bb1c:	f001 fa66 	bl	800cfec <__lshift>
 800bb20:	4641      	mov	r1, r8
 800bb22:	4604      	mov	r4, r0
 800bb24:	f001 face 	bl	800d0c4 <__mcmp>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	dd51      	ble.n	800bbd0 <_strtod_l+0x8b8>
 800bb2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb30:	9a08      	ldr	r2, [sp, #32]
 800bb32:	0d1b      	lsrs	r3, r3, #20
 800bb34:	051b      	lsls	r3, r3, #20
 800bb36:	2a00      	cmp	r2, #0
 800bb38:	d06b      	beq.n	800bc12 <_strtod_l+0x8fa>
 800bb3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bb3e:	d868      	bhi.n	800bc12 <_strtod_l+0x8fa>
 800bb40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bb44:	f67f ae9d 	bls.w	800b882 <_strtod_l+0x56a>
 800bb48:	4b0a      	ldr	r3, [pc, #40]	@ (800bb74 <_strtod_l+0x85c>)
 800bb4a:	4650      	mov	r0, sl
 800bb4c:	4659      	mov	r1, fp
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f7f4 fd62 	bl	8000618 <__aeabi_dmul>
 800bb54:	4b08      	ldr	r3, [pc, #32]	@ (800bb78 <_strtod_l+0x860>)
 800bb56:	400b      	ands	r3, r1
 800bb58:	4682      	mov	sl, r0
 800bb5a:	468b      	mov	fp, r1
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f47f ae05 	bne.w	800b76c <_strtod_l+0x454>
 800bb62:	9a05      	ldr	r2, [sp, #20]
 800bb64:	2322      	movs	r3, #34	@ 0x22
 800bb66:	6013      	str	r3, [r2, #0]
 800bb68:	e600      	b.n	800b76c <_strtod_l+0x454>
 800bb6a:	bf00      	nop
 800bb6c:	08025118 	.word	0x08025118
 800bb70:	fffffc02 	.word	0xfffffc02
 800bb74:	39500000 	.word	0x39500000
 800bb78:	7ff00000 	.word	0x7ff00000
 800bb7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bb80:	d165      	bne.n	800bc4e <_strtod_l+0x936>
 800bb82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bb84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb88:	b35a      	cbz	r2, 800bbe2 <_strtod_l+0x8ca>
 800bb8a:	4a9f      	ldr	r2, [pc, #636]	@ (800be08 <_strtod_l+0xaf0>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d12b      	bne.n	800bbe8 <_strtod_l+0x8d0>
 800bb90:	9b08      	ldr	r3, [sp, #32]
 800bb92:	4651      	mov	r1, sl
 800bb94:	b303      	cbz	r3, 800bbd8 <_strtod_l+0x8c0>
 800bb96:	4b9d      	ldr	r3, [pc, #628]	@ (800be0c <_strtod_l+0xaf4>)
 800bb98:	465a      	mov	r2, fp
 800bb9a:	4013      	ands	r3, r2
 800bb9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bba0:	f04f 32ff 	mov.w	r2, #4294967295
 800bba4:	d81b      	bhi.n	800bbde <_strtod_l+0x8c6>
 800bba6:	0d1b      	lsrs	r3, r3, #20
 800bba8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bbac:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb0:	4299      	cmp	r1, r3
 800bbb2:	d119      	bne.n	800bbe8 <_strtod_l+0x8d0>
 800bbb4:	4b96      	ldr	r3, [pc, #600]	@ (800be10 <_strtod_l+0xaf8>)
 800bbb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d102      	bne.n	800bbc2 <_strtod_l+0x8aa>
 800bbbc:	3101      	adds	r1, #1
 800bbbe:	f43f adca 	beq.w	800b756 <_strtod_l+0x43e>
 800bbc2:	4b92      	ldr	r3, [pc, #584]	@ (800be0c <_strtod_l+0xaf4>)
 800bbc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbc6:	401a      	ands	r2, r3
 800bbc8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bbcc:	f04f 0a00 	mov.w	sl, #0
 800bbd0:	9b08      	ldr	r3, [sp, #32]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1b8      	bne.n	800bb48 <_strtod_l+0x830>
 800bbd6:	e5c9      	b.n	800b76c <_strtod_l+0x454>
 800bbd8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbdc:	e7e8      	b.n	800bbb0 <_strtod_l+0x898>
 800bbde:	4613      	mov	r3, r2
 800bbe0:	e7e6      	b.n	800bbb0 <_strtod_l+0x898>
 800bbe2:	ea53 030a 	orrs.w	r3, r3, sl
 800bbe6:	d0a1      	beq.n	800bb2c <_strtod_l+0x814>
 800bbe8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bbea:	b1db      	cbz	r3, 800bc24 <_strtod_l+0x90c>
 800bbec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbee:	4213      	tst	r3, r2
 800bbf0:	d0ee      	beq.n	800bbd0 <_strtod_l+0x8b8>
 800bbf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbf4:	9a08      	ldr	r2, [sp, #32]
 800bbf6:	4650      	mov	r0, sl
 800bbf8:	4659      	mov	r1, fp
 800bbfa:	b1bb      	cbz	r3, 800bc2c <_strtod_l+0x914>
 800bbfc:	f7ff fb6e 	bl	800b2dc <sulp>
 800bc00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc04:	ec53 2b10 	vmov	r2, r3, d0
 800bc08:	f7f4 fb50 	bl	80002ac <__adddf3>
 800bc0c:	4682      	mov	sl, r0
 800bc0e:	468b      	mov	fp, r1
 800bc10:	e7de      	b.n	800bbd0 <_strtod_l+0x8b8>
 800bc12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bc16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bc1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bc1e:	f04f 3aff 	mov.w	sl, #4294967295
 800bc22:	e7d5      	b.n	800bbd0 <_strtod_l+0x8b8>
 800bc24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc26:	ea13 0f0a 	tst.w	r3, sl
 800bc2a:	e7e1      	b.n	800bbf0 <_strtod_l+0x8d8>
 800bc2c:	f7ff fb56 	bl	800b2dc <sulp>
 800bc30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc34:	ec53 2b10 	vmov	r2, r3, d0
 800bc38:	f7f4 fb36 	bl	80002a8 <__aeabi_dsub>
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2300      	movs	r3, #0
 800bc40:	4682      	mov	sl, r0
 800bc42:	468b      	mov	fp, r1
 800bc44:	f7f4 ff50 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d0c1      	beq.n	800bbd0 <_strtod_l+0x8b8>
 800bc4c:	e619      	b.n	800b882 <_strtod_l+0x56a>
 800bc4e:	4641      	mov	r1, r8
 800bc50:	4620      	mov	r0, r4
 800bc52:	f001 fbaf 	bl	800d3b4 <__ratio>
 800bc56:	ec57 6b10 	vmov	r6, r7, d0
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bc60:	4630      	mov	r0, r6
 800bc62:	4639      	mov	r1, r7
 800bc64:	f7f4 ff54 	bl	8000b10 <__aeabi_dcmple>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d06f      	beq.n	800bd4c <_strtod_l+0xa34>
 800bc6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d17a      	bne.n	800bd68 <_strtod_l+0xa50>
 800bc72:	f1ba 0f00 	cmp.w	sl, #0
 800bc76:	d158      	bne.n	800bd2a <_strtod_l+0xa12>
 800bc78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d15a      	bne.n	800bd38 <_strtod_l+0xa20>
 800bc82:	4b64      	ldr	r3, [pc, #400]	@ (800be14 <_strtod_l+0xafc>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	4630      	mov	r0, r6
 800bc88:	4639      	mov	r1, r7
 800bc8a:	f7f4 ff37 	bl	8000afc <__aeabi_dcmplt>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d159      	bne.n	800bd46 <_strtod_l+0xa2e>
 800bc92:	4630      	mov	r0, r6
 800bc94:	4639      	mov	r1, r7
 800bc96:	4b60      	ldr	r3, [pc, #384]	@ (800be18 <_strtod_l+0xb00>)
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f7f4 fcbd 	bl	8000618 <__aeabi_dmul>
 800bc9e:	4606      	mov	r6, r0
 800bca0:	460f      	mov	r7, r1
 800bca2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bca6:	9606      	str	r6, [sp, #24]
 800bca8:	9307      	str	r3, [sp, #28]
 800bcaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcae:	4d57      	ldr	r5, [pc, #348]	@ (800be0c <_strtod_l+0xaf4>)
 800bcb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bcb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcb6:	401d      	ands	r5, r3
 800bcb8:	4b58      	ldr	r3, [pc, #352]	@ (800be1c <_strtod_l+0xb04>)
 800bcba:	429d      	cmp	r5, r3
 800bcbc:	f040 80b2 	bne.w	800be24 <_strtod_l+0xb0c>
 800bcc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bcc6:	ec4b ab10 	vmov	d0, sl, fp
 800bcca:	f001 faab 	bl	800d224 <__ulp>
 800bcce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcd2:	ec51 0b10 	vmov	r0, r1, d0
 800bcd6:	f7f4 fc9f 	bl	8000618 <__aeabi_dmul>
 800bcda:	4652      	mov	r2, sl
 800bcdc:	465b      	mov	r3, fp
 800bcde:	f7f4 fae5 	bl	80002ac <__adddf3>
 800bce2:	460b      	mov	r3, r1
 800bce4:	4949      	ldr	r1, [pc, #292]	@ (800be0c <_strtod_l+0xaf4>)
 800bce6:	4a4e      	ldr	r2, [pc, #312]	@ (800be20 <_strtod_l+0xb08>)
 800bce8:	4019      	ands	r1, r3
 800bcea:	4291      	cmp	r1, r2
 800bcec:	4682      	mov	sl, r0
 800bcee:	d942      	bls.n	800bd76 <_strtod_l+0xa5e>
 800bcf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcf2:	4b47      	ldr	r3, [pc, #284]	@ (800be10 <_strtod_l+0xaf8>)
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d103      	bne.n	800bd00 <_strtod_l+0x9e8>
 800bcf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	f43f ad2b 	beq.w	800b756 <_strtod_l+0x43e>
 800bd00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800be10 <_strtod_l+0xaf8>
 800bd04:	f04f 3aff 	mov.w	sl, #4294967295
 800bd08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd0a:	9805      	ldr	r0, [sp, #20]
 800bd0c:	f000 ff56 	bl	800cbbc <_Bfree>
 800bd10:	9805      	ldr	r0, [sp, #20]
 800bd12:	4649      	mov	r1, r9
 800bd14:	f000 ff52 	bl	800cbbc <_Bfree>
 800bd18:	9805      	ldr	r0, [sp, #20]
 800bd1a:	4641      	mov	r1, r8
 800bd1c:	f000 ff4e 	bl	800cbbc <_Bfree>
 800bd20:	9805      	ldr	r0, [sp, #20]
 800bd22:	4621      	mov	r1, r4
 800bd24:	f000 ff4a 	bl	800cbbc <_Bfree>
 800bd28:	e618      	b.n	800b95c <_strtod_l+0x644>
 800bd2a:	f1ba 0f01 	cmp.w	sl, #1
 800bd2e:	d103      	bne.n	800bd38 <_strtod_l+0xa20>
 800bd30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f43f ada5 	beq.w	800b882 <_strtod_l+0x56a>
 800bd38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bde8 <_strtod_l+0xad0>
 800bd3c:	4f35      	ldr	r7, [pc, #212]	@ (800be14 <_strtod_l+0xafc>)
 800bd3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd42:	2600      	movs	r6, #0
 800bd44:	e7b1      	b.n	800bcaa <_strtod_l+0x992>
 800bd46:	4f34      	ldr	r7, [pc, #208]	@ (800be18 <_strtod_l+0xb00>)
 800bd48:	2600      	movs	r6, #0
 800bd4a:	e7aa      	b.n	800bca2 <_strtod_l+0x98a>
 800bd4c:	4b32      	ldr	r3, [pc, #200]	@ (800be18 <_strtod_l+0xb00>)
 800bd4e:	4630      	mov	r0, r6
 800bd50:	4639      	mov	r1, r7
 800bd52:	2200      	movs	r2, #0
 800bd54:	f7f4 fc60 	bl	8000618 <__aeabi_dmul>
 800bd58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	460f      	mov	r7, r1
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d09f      	beq.n	800bca2 <_strtod_l+0x98a>
 800bd62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bd66:	e7a0      	b.n	800bcaa <_strtod_l+0x992>
 800bd68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bdf0 <_strtod_l+0xad8>
 800bd6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd70:	ec57 6b17 	vmov	r6, r7, d7
 800bd74:	e799      	b.n	800bcaa <_strtod_l+0x992>
 800bd76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bd7a:	9b08      	ldr	r3, [sp, #32]
 800bd7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1c1      	bne.n	800bd08 <_strtod_l+0x9f0>
 800bd84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd88:	0d1b      	lsrs	r3, r3, #20
 800bd8a:	051b      	lsls	r3, r3, #20
 800bd8c:	429d      	cmp	r5, r3
 800bd8e:	d1bb      	bne.n	800bd08 <_strtod_l+0x9f0>
 800bd90:	4630      	mov	r0, r6
 800bd92:	4639      	mov	r1, r7
 800bd94:	f7f4 ff3a 	bl	8000c0c <__aeabi_d2lz>
 800bd98:	f7f4 fc10 	bl	80005bc <__aeabi_l2d>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4630      	mov	r0, r6
 800bda2:	4639      	mov	r1, r7
 800bda4:	f7f4 fa80 	bl	80002a8 <__aeabi_dsub>
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4602      	mov	r2, r0
 800bdac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bdb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bdb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdb6:	ea46 060a 	orr.w	r6, r6, sl
 800bdba:	431e      	orrs	r6, r3
 800bdbc:	d06f      	beq.n	800be9e <_strtod_l+0xb86>
 800bdbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800bdf8 <_strtod_l+0xae0>)
 800bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc4:	f7f4 fe9a 	bl	8000afc <__aeabi_dcmplt>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	f47f accf 	bne.w	800b76c <_strtod_l+0x454>
 800bdce:	a30c      	add	r3, pc, #48	@ (adr r3, 800be00 <_strtod_l+0xae8>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdd8:	f7f4 feae 	bl	8000b38 <__aeabi_dcmpgt>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	d093      	beq.n	800bd08 <_strtod_l+0x9f0>
 800bde0:	e4c4      	b.n	800b76c <_strtod_l+0x454>
 800bde2:	bf00      	nop
 800bde4:	f3af 8000 	nop.w
 800bde8:	00000000 	.word	0x00000000
 800bdec:	bff00000 	.word	0xbff00000
 800bdf0:	00000000 	.word	0x00000000
 800bdf4:	3ff00000 	.word	0x3ff00000
 800bdf8:	94a03595 	.word	0x94a03595
 800bdfc:	3fdfffff 	.word	0x3fdfffff
 800be00:	35afe535 	.word	0x35afe535
 800be04:	3fe00000 	.word	0x3fe00000
 800be08:	000fffff 	.word	0x000fffff
 800be0c:	7ff00000 	.word	0x7ff00000
 800be10:	7fefffff 	.word	0x7fefffff
 800be14:	3ff00000 	.word	0x3ff00000
 800be18:	3fe00000 	.word	0x3fe00000
 800be1c:	7fe00000 	.word	0x7fe00000
 800be20:	7c9fffff 	.word	0x7c9fffff
 800be24:	9b08      	ldr	r3, [sp, #32]
 800be26:	b323      	cbz	r3, 800be72 <_strtod_l+0xb5a>
 800be28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800be2c:	d821      	bhi.n	800be72 <_strtod_l+0xb5a>
 800be2e:	a328      	add	r3, pc, #160	@ (adr r3, 800bed0 <_strtod_l+0xbb8>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	4630      	mov	r0, r6
 800be36:	4639      	mov	r1, r7
 800be38:	f7f4 fe6a 	bl	8000b10 <__aeabi_dcmple>
 800be3c:	b1a0      	cbz	r0, 800be68 <_strtod_l+0xb50>
 800be3e:	4639      	mov	r1, r7
 800be40:	4630      	mov	r0, r6
 800be42:	f7f4 feab 	bl	8000b9c <__aeabi_d2uiz>
 800be46:	2801      	cmp	r0, #1
 800be48:	bf38      	it	cc
 800be4a:	2001      	movcc	r0, #1
 800be4c:	f7f4 fb6a 	bl	8000524 <__aeabi_ui2d>
 800be50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be52:	4606      	mov	r6, r0
 800be54:	460f      	mov	r7, r1
 800be56:	b9fb      	cbnz	r3, 800be98 <_strtod_l+0xb80>
 800be58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be5c:	9014      	str	r0, [sp, #80]	@ 0x50
 800be5e:	9315      	str	r3, [sp, #84]	@ 0x54
 800be60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800be64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800be68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800be6e:	1b5b      	subs	r3, r3, r5
 800be70:	9311      	str	r3, [sp, #68]	@ 0x44
 800be72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800be76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800be7a:	f001 f9d3 	bl	800d224 <__ulp>
 800be7e:	4650      	mov	r0, sl
 800be80:	ec53 2b10 	vmov	r2, r3, d0
 800be84:	4659      	mov	r1, fp
 800be86:	f7f4 fbc7 	bl	8000618 <__aeabi_dmul>
 800be8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800be8e:	f7f4 fa0d 	bl	80002ac <__adddf3>
 800be92:	4682      	mov	sl, r0
 800be94:	468b      	mov	fp, r1
 800be96:	e770      	b.n	800bd7a <_strtod_l+0xa62>
 800be98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800be9c:	e7e0      	b.n	800be60 <_strtod_l+0xb48>
 800be9e:	a30e      	add	r3, pc, #56	@ (adr r3, 800bed8 <_strtod_l+0xbc0>)
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f7f4 fe2a 	bl	8000afc <__aeabi_dcmplt>
 800bea8:	e798      	b.n	800bddc <_strtod_l+0xac4>
 800beaa:	2300      	movs	r3, #0
 800beac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800beae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800beb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800beb2:	6013      	str	r3, [r2, #0]
 800beb4:	f7ff ba6d 	b.w	800b392 <_strtod_l+0x7a>
 800beb8:	2a65      	cmp	r2, #101	@ 0x65
 800beba:	f43f ab66 	beq.w	800b58a <_strtod_l+0x272>
 800bebe:	2a45      	cmp	r2, #69	@ 0x45
 800bec0:	f43f ab63 	beq.w	800b58a <_strtod_l+0x272>
 800bec4:	2301      	movs	r3, #1
 800bec6:	f7ff bb9e 	b.w	800b606 <_strtod_l+0x2ee>
 800beca:	bf00      	nop
 800becc:	f3af 8000 	nop.w
 800bed0:	ffc00000 	.word	0xffc00000
 800bed4:	41dfffff 	.word	0x41dfffff
 800bed8:	94a03595 	.word	0x94a03595
 800bedc:	3fcfffff 	.word	0x3fcfffff

0800bee0 <strtod>:
 800bee0:	460a      	mov	r2, r1
 800bee2:	4601      	mov	r1, r0
 800bee4:	4802      	ldr	r0, [pc, #8]	@ (800bef0 <strtod+0x10>)
 800bee6:	4b03      	ldr	r3, [pc, #12]	@ (800bef4 <strtod+0x14>)
 800bee8:	6800      	ldr	r0, [r0, #0]
 800beea:	f7ff ba15 	b.w	800b318 <_strtod_l>
 800beee:	bf00      	nop
 800bef0:	200029d8 	.word	0x200029d8
 800bef4:	2000286c 	.word	0x2000286c

0800bef8 <std>:
 800bef8:	2300      	movs	r3, #0
 800befa:	b510      	push	{r4, lr}
 800befc:	4604      	mov	r4, r0
 800befe:	e9c0 3300 	strd	r3, r3, [r0]
 800bf02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf06:	6083      	str	r3, [r0, #8]
 800bf08:	8181      	strh	r1, [r0, #12]
 800bf0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf0c:	81c2      	strh	r2, [r0, #14]
 800bf0e:	6183      	str	r3, [r0, #24]
 800bf10:	4619      	mov	r1, r3
 800bf12:	2208      	movs	r2, #8
 800bf14:	305c      	adds	r0, #92	@ 0x5c
 800bf16:	f000 f975 	bl	800c204 <memset>
 800bf1a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf50 <std+0x58>)
 800bf1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf1e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf54 <std+0x5c>)
 800bf20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf22:	4b0d      	ldr	r3, [pc, #52]	@ (800bf58 <std+0x60>)
 800bf24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf26:	4b0d      	ldr	r3, [pc, #52]	@ (800bf5c <std+0x64>)
 800bf28:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf2a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf60 <std+0x68>)
 800bf2c:	6224      	str	r4, [r4, #32]
 800bf2e:	429c      	cmp	r4, r3
 800bf30:	d006      	beq.n	800bf40 <std+0x48>
 800bf32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf36:	4294      	cmp	r4, r2
 800bf38:	d002      	beq.n	800bf40 <std+0x48>
 800bf3a:	33d0      	adds	r3, #208	@ 0xd0
 800bf3c:	429c      	cmp	r4, r3
 800bf3e:	d105      	bne.n	800bf4c <std+0x54>
 800bf40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf48:	f000 ba48 	b.w	800c3dc <__retarget_lock_init_recursive>
 800bf4c:	bd10      	pop	{r4, pc}
 800bf4e:	bf00      	nop
 800bf50:	0800c139 	.word	0x0800c139
 800bf54:	0800c15f 	.word	0x0800c15f
 800bf58:	0800c197 	.word	0x0800c197
 800bf5c:	0800c1bb 	.word	0x0800c1bb
 800bf60:	20003588 	.word	0x20003588

0800bf64 <stdio_exit_handler>:
 800bf64:	4a02      	ldr	r2, [pc, #8]	@ (800bf70 <stdio_exit_handler+0xc>)
 800bf66:	4903      	ldr	r1, [pc, #12]	@ (800bf74 <stdio_exit_handler+0x10>)
 800bf68:	4803      	ldr	r0, [pc, #12]	@ (800bf78 <stdio_exit_handler+0x14>)
 800bf6a:	f000 b869 	b.w	800c040 <_fwalk_sglue>
 800bf6e:	bf00      	nop
 800bf70:	20002860 	.word	0x20002860
 800bf74:	0800e1d1 	.word	0x0800e1d1
 800bf78:	200029dc 	.word	0x200029dc

0800bf7c <cleanup_stdio>:
 800bf7c:	6841      	ldr	r1, [r0, #4]
 800bf7e:	4b0c      	ldr	r3, [pc, #48]	@ (800bfb0 <cleanup_stdio+0x34>)
 800bf80:	4299      	cmp	r1, r3
 800bf82:	b510      	push	{r4, lr}
 800bf84:	4604      	mov	r4, r0
 800bf86:	d001      	beq.n	800bf8c <cleanup_stdio+0x10>
 800bf88:	f002 f922 	bl	800e1d0 <_fflush_r>
 800bf8c:	68a1      	ldr	r1, [r4, #8]
 800bf8e:	4b09      	ldr	r3, [pc, #36]	@ (800bfb4 <cleanup_stdio+0x38>)
 800bf90:	4299      	cmp	r1, r3
 800bf92:	d002      	beq.n	800bf9a <cleanup_stdio+0x1e>
 800bf94:	4620      	mov	r0, r4
 800bf96:	f002 f91b 	bl	800e1d0 <_fflush_r>
 800bf9a:	68e1      	ldr	r1, [r4, #12]
 800bf9c:	4b06      	ldr	r3, [pc, #24]	@ (800bfb8 <cleanup_stdio+0x3c>)
 800bf9e:	4299      	cmp	r1, r3
 800bfa0:	d004      	beq.n	800bfac <cleanup_stdio+0x30>
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfa8:	f002 b912 	b.w	800e1d0 <_fflush_r>
 800bfac:	bd10      	pop	{r4, pc}
 800bfae:	bf00      	nop
 800bfb0:	20003588 	.word	0x20003588
 800bfb4:	200035f0 	.word	0x200035f0
 800bfb8:	20003658 	.word	0x20003658

0800bfbc <global_stdio_init.part.0>:
 800bfbc:	b510      	push	{r4, lr}
 800bfbe:	4b0b      	ldr	r3, [pc, #44]	@ (800bfec <global_stdio_init.part.0+0x30>)
 800bfc0:	4c0b      	ldr	r4, [pc, #44]	@ (800bff0 <global_stdio_init.part.0+0x34>)
 800bfc2:	4a0c      	ldr	r2, [pc, #48]	@ (800bff4 <global_stdio_init.part.0+0x38>)
 800bfc4:	601a      	str	r2, [r3, #0]
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	2200      	movs	r2, #0
 800bfca:	2104      	movs	r1, #4
 800bfcc:	f7ff ff94 	bl	800bef8 <std>
 800bfd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	2109      	movs	r1, #9
 800bfd8:	f7ff ff8e 	bl	800bef8 <std>
 800bfdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bfe0:	2202      	movs	r2, #2
 800bfe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfe6:	2112      	movs	r1, #18
 800bfe8:	f7ff bf86 	b.w	800bef8 <std>
 800bfec:	200036c0 	.word	0x200036c0
 800bff0:	20003588 	.word	0x20003588
 800bff4:	0800bf65 	.word	0x0800bf65

0800bff8 <__sfp_lock_acquire>:
 800bff8:	4801      	ldr	r0, [pc, #4]	@ (800c000 <__sfp_lock_acquire+0x8>)
 800bffa:	f000 b9f0 	b.w	800c3de <__retarget_lock_acquire_recursive>
 800bffe:	bf00      	nop
 800c000:	200036c9 	.word	0x200036c9

0800c004 <__sfp_lock_release>:
 800c004:	4801      	ldr	r0, [pc, #4]	@ (800c00c <__sfp_lock_release+0x8>)
 800c006:	f000 b9eb 	b.w	800c3e0 <__retarget_lock_release_recursive>
 800c00a:	bf00      	nop
 800c00c:	200036c9 	.word	0x200036c9

0800c010 <__sinit>:
 800c010:	b510      	push	{r4, lr}
 800c012:	4604      	mov	r4, r0
 800c014:	f7ff fff0 	bl	800bff8 <__sfp_lock_acquire>
 800c018:	6a23      	ldr	r3, [r4, #32]
 800c01a:	b11b      	cbz	r3, 800c024 <__sinit+0x14>
 800c01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c020:	f7ff bff0 	b.w	800c004 <__sfp_lock_release>
 800c024:	4b04      	ldr	r3, [pc, #16]	@ (800c038 <__sinit+0x28>)
 800c026:	6223      	str	r3, [r4, #32]
 800c028:	4b04      	ldr	r3, [pc, #16]	@ (800c03c <__sinit+0x2c>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1f5      	bne.n	800c01c <__sinit+0xc>
 800c030:	f7ff ffc4 	bl	800bfbc <global_stdio_init.part.0>
 800c034:	e7f2      	b.n	800c01c <__sinit+0xc>
 800c036:	bf00      	nop
 800c038:	0800bf7d 	.word	0x0800bf7d
 800c03c:	200036c0 	.word	0x200036c0

0800c040 <_fwalk_sglue>:
 800c040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c044:	4607      	mov	r7, r0
 800c046:	4688      	mov	r8, r1
 800c048:	4614      	mov	r4, r2
 800c04a:	2600      	movs	r6, #0
 800c04c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c050:	f1b9 0901 	subs.w	r9, r9, #1
 800c054:	d505      	bpl.n	800c062 <_fwalk_sglue+0x22>
 800c056:	6824      	ldr	r4, [r4, #0]
 800c058:	2c00      	cmp	r4, #0
 800c05a:	d1f7      	bne.n	800c04c <_fwalk_sglue+0xc>
 800c05c:	4630      	mov	r0, r6
 800c05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c062:	89ab      	ldrh	r3, [r5, #12]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d907      	bls.n	800c078 <_fwalk_sglue+0x38>
 800c068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c06c:	3301      	adds	r3, #1
 800c06e:	d003      	beq.n	800c078 <_fwalk_sglue+0x38>
 800c070:	4629      	mov	r1, r5
 800c072:	4638      	mov	r0, r7
 800c074:	47c0      	blx	r8
 800c076:	4306      	orrs	r6, r0
 800c078:	3568      	adds	r5, #104	@ 0x68
 800c07a:	e7e9      	b.n	800c050 <_fwalk_sglue+0x10>

0800c07c <sniprintf>:
 800c07c:	b40c      	push	{r2, r3}
 800c07e:	b530      	push	{r4, r5, lr}
 800c080:	4b17      	ldr	r3, [pc, #92]	@ (800c0e0 <sniprintf+0x64>)
 800c082:	1e0c      	subs	r4, r1, #0
 800c084:	681d      	ldr	r5, [r3, #0]
 800c086:	b09d      	sub	sp, #116	@ 0x74
 800c088:	da08      	bge.n	800c09c <sniprintf+0x20>
 800c08a:	238b      	movs	r3, #139	@ 0x8b
 800c08c:	602b      	str	r3, [r5, #0]
 800c08e:	f04f 30ff 	mov.w	r0, #4294967295
 800c092:	b01d      	add	sp, #116	@ 0x74
 800c094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c098:	b002      	add	sp, #8
 800c09a:	4770      	bx	lr
 800c09c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c0a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c0a4:	bf14      	ite	ne
 800c0a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c0aa:	4623      	moveq	r3, r4
 800c0ac:	9304      	str	r3, [sp, #16]
 800c0ae:	9307      	str	r3, [sp, #28]
 800c0b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c0b4:	9002      	str	r0, [sp, #8]
 800c0b6:	9006      	str	r0, [sp, #24]
 800c0b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c0bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c0be:	ab21      	add	r3, sp, #132	@ 0x84
 800c0c0:	a902      	add	r1, sp, #8
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	f001 fa5b 	bl	800d580 <_svfiprintf_r>
 800c0ca:	1c43      	adds	r3, r0, #1
 800c0cc:	bfbc      	itt	lt
 800c0ce:	238b      	movlt	r3, #139	@ 0x8b
 800c0d0:	602b      	strlt	r3, [r5, #0]
 800c0d2:	2c00      	cmp	r4, #0
 800c0d4:	d0dd      	beq.n	800c092 <sniprintf+0x16>
 800c0d6:	9b02      	ldr	r3, [sp, #8]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	701a      	strb	r2, [r3, #0]
 800c0dc:	e7d9      	b.n	800c092 <sniprintf+0x16>
 800c0de:	bf00      	nop
 800c0e0:	200029d8 	.word	0x200029d8

0800c0e4 <siscanf>:
 800c0e4:	b40e      	push	{r1, r2, r3}
 800c0e6:	b530      	push	{r4, r5, lr}
 800c0e8:	b09c      	sub	sp, #112	@ 0x70
 800c0ea:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c0ec:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c0f0:	f854 5b04 	ldr.w	r5, [r4], #4
 800c0f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c0f8:	9002      	str	r0, [sp, #8]
 800c0fa:	9006      	str	r0, [sp, #24]
 800c0fc:	f7f4 f872 	bl	80001e4 <strlen>
 800c100:	4b0b      	ldr	r3, [pc, #44]	@ (800c130 <siscanf+0x4c>)
 800c102:	9003      	str	r0, [sp, #12]
 800c104:	9007      	str	r0, [sp, #28]
 800c106:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c108:	480a      	ldr	r0, [pc, #40]	@ (800c134 <siscanf+0x50>)
 800c10a:	9401      	str	r4, [sp, #4]
 800c10c:	2300      	movs	r3, #0
 800c10e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c110:	9314      	str	r3, [sp, #80]	@ 0x50
 800c112:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c116:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c11a:	462a      	mov	r2, r5
 800c11c:	4623      	mov	r3, r4
 800c11e:	a902      	add	r1, sp, #8
 800c120:	6800      	ldr	r0, [r0, #0]
 800c122:	f001 fb81 	bl	800d828 <__ssvfiscanf_r>
 800c126:	b01c      	add	sp, #112	@ 0x70
 800c128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c12c:	b003      	add	sp, #12
 800c12e:	4770      	bx	lr
 800c130:	0800c15b 	.word	0x0800c15b
 800c134:	200029d8 	.word	0x200029d8

0800c138 <__sread>:
 800c138:	b510      	push	{r4, lr}
 800c13a:	460c      	mov	r4, r1
 800c13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c140:	f000 f8ee 	bl	800c320 <_read_r>
 800c144:	2800      	cmp	r0, #0
 800c146:	bfab      	itete	ge
 800c148:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c14a:	89a3      	ldrhlt	r3, [r4, #12]
 800c14c:	181b      	addge	r3, r3, r0
 800c14e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c152:	bfac      	ite	ge
 800c154:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c156:	81a3      	strhlt	r3, [r4, #12]
 800c158:	bd10      	pop	{r4, pc}

0800c15a <__seofread>:
 800c15a:	2000      	movs	r0, #0
 800c15c:	4770      	bx	lr

0800c15e <__swrite>:
 800c15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c162:	461f      	mov	r7, r3
 800c164:	898b      	ldrh	r3, [r1, #12]
 800c166:	05db      	lsls	r3, r3, #23
 800c168:	4605      	mov	r5, r0
 800c16a:	460c      	mov	r4, r1
 800c16c:	4616      	mov	r6, r2
 800c16e:	d505      	bpl.n	800c17c <__swrite+0x1e>
 800c170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c174:	2302      	movs	r3, #2
 800c176:	2200      	movs	r2, #0
 800c178:	f000 f8c0 	bl	800c2fc <_lseek_r>
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c182:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c186:	81a3      	strh	r3, [r4, #12]
 800c188:	4632      	mov	r2, r6
 800c18a:	463b      	mov	r3, r7
 800c18c:	4628      	mov	r0, r5
 800c18e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c192:	f000 b8e7 	b.w	800c364 <_write_r>

0800c196 <__sseek>:
 800c196:	b510      	push	{r4, lr}
 800c198:	460c      	mov	r4, r1
 800c19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c19e:	f000 f8ad 	bl	800c2fc <_lseek_r>
 800c1a2:	1c43      	adds	r3, r0, #1
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	bf15      	itete	ne
 800c1a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c1aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c1ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c1b2:	81a3      	strheq	r3, [r4, #12]
 800c1b4:	bf18      	it	ne
 800c1b6:	81a3      	strhne	r3, [r4, #12]
 800c1b8:	bd10      	pop	{r4, pc}

0800c1ba <__sclose>:
 800c1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1be:	f000 b88d 	b.w	800c2dc <_close_r>
	...

0800c1c4 <_vsiprintf_r>:
 800c1c4:	b500      	push	{lr}
 800c1c6:	b09b      	sub	sp, #108	@ 0x6c
 800c1c8:	9100      	str	r1, [sp, #0]
 800c1ca:	9104      	str	r1, [sp, #16]
 800c1cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c1d0:	9105      	str	r1, [sp, #20]
 800c1d2:	9102      	str	r1, [sp, #8]
 800c1d4:	4905      	ldr	r1, [pc, #20]	@ (800c1ec <_vsiprintf_r+0x28>)
 800c1d6:	9103      	str	r1, [sp, #12]
 800c1d8:	4669      	mov	r1, sp
 800c1da:	f001 f9d1 	bl	800d580 <_svfiprintf_r>
 800c1de:	9b00      	ldr	r3, [sp, #0]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	701a      	strb	r2, [r3, #0]
 800c1e4:	b01b      	add	sp, #108	@ 0x6c
 800c1e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1ea:	bf00      	nop
 800c1ec:	ffff0208 	.word	0xffff0208

0800c1f0 <vsiprintf>:
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	460a      	mov	r2, r1
 800c1f4:	4601      	mov	r1, r0
 800c1f6:	4802      	ldr	r0, [pc, #8]	@ (800c200 <vsiprintf+0x10>)
 800c1f8:	6800      	ldr	r0, [r0, #0]
 800c1fa:	f7ff bfe3 	b.w	800c1c4 <_vsiprintf_r>
 800c1fe:	bf00      	nop
 800c200:	200029d8 	.word	0x200029d8

0800c204 <memset>:
 800c204:	4402      	add	r2, r0
 800c206:	4603      	mov	r3, r0
 800c208:	4293      	cmp	r3, r2
 800c20a:	d100      	bne.n	800c20e <memset+0xa>
 800c20c:	4770      	bx	lr
 800c20e:	f803 1b01 	strb.w	r1, [r3], #1
 800c212:	e7f9      	b.n	800c208 <memset+0x4>

0800c214 <strncat>:
 800c214:	b530      	push	{r4, r5, lr}
 800c216:	4604      	mov	r4, r0
 800c218:	7825      	ldrb	r5, [r4, #0]
 800c21a:	4623      	mov	r3, r4
 800c21c:	3401      	adds	r4, #1
 800c21e:	2d00      	cmp	r5, #0
 800c220:	d1fa      	bne.n	800c218 <strncat+0x4>
 800c222:	3a01      	subs	r2, #1
 800c224:	d304      	bcc.n	800c230 <strncat+0x1c>
 800c226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c22a:	f803 4b01 	strb.w	r4, [r3], #1
 800c22e:	b904      	cbnz	r4, 800c232 <strncat+0x1e>
 800c230:	bd30      	pop	{r4, r5, pc}
 800c232:	2a00      	cmp	r2, #0
 800c234:	d1f5      	bne.n	800c222 <strncat+0xe>
 800c236:	701a      	strb	r2, [r3, #0]
 800c238:	e7f3      	b.n	800c222 <strncat+0xe>

0800c23a <strncmp>:
 800c23a:	b510      	push	{r4, lr}
 800c23c:	b16a      	cbz	r2, 800c25a <strncmp+0x20>
 800c23e:	3901      	subs	r1, #1
 800c240:	1884      	adds	r4, r0, r2
 800c242:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c246:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d103      	bne.n	800c256 <strncmp+0x1c>
 800c24e:	42a0      	cmp	r0, r4
 800c250:	d001      	beq.n	800c256 <strncmp+0x1c>
 800c252:	2a00      	cmp	r2, #0
 800c254:	d1f5      	bne.n	800c242 <strncmp+0x8>
 800c256:	1ad0      	subs	r0, r2, r3
 800c258:	bd10      	pop	{r4, pc}
 800c25a:	4610      	mov	r0, r2
 800c25c:	e7fc      	b.n	800c258 <strncmp+0x1e>

0800c25e <strncpy>:
 800c25e:	b510      	push	{r4, lr}
 800c260:	3901      	subs	r1, #1
 800c262:	4603      	mov	r3, r0
 800c264:	b132      	cbz	r2, 800c274 <strncpy+0x16>
 800c266:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c26a:	f803 4b01 	strb.w	r4, [r3], #1
 800c26e:	3a01      	subs	r2, #1
 800c270:	2c00      	cmp	r4, #0
 800c272:	d1f7      	bne.n	800c264 <strncpy+0x6>
 800c274:	441a      	add	r2, r3
 800c276:	2100      	movs	r1, #0
 800c278:	4293      	cmp	r3, r2
 800c27a:	d100      	bne.n	800c27e <strncpy+0x20>
 800c27c:	bd10      	pop	{r4, pc}
 800c27e:	f803 1b01 	strb.w	r1, [r3], #1
 800c282:	e7f9      	b.n	800c278 <strncpy+0x1a>

0800c284 <strrchr>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800c28a:	4603      	mov	r3, r0
 800c28c:	d10e      	bne.n	800c2ac <strrchr+0x28>
 800c28e:	4621      	mov	r1, r4
 800c290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c294:	f002 b851 	b.w	800e33a <strchr>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	4605      	mov	r5, r0
 800c29c:	4621      	mov	r1, r4
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f002 f84b 	bl	800e33a <strchr>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d1f7      	bne.n	800c298 <strrchr+0x14>
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	2500      	movs	r5, #0
 800c2ae:	e7f5      	b.n	800c29c <strrchr+0x18>

0800c2b0 <strstr>:
 800c2b0:	780a      	ldrb	r2, [r1, #0]
 800c2b2:	b570      	push	{r4, r5, r6, lr}
 800c2b4:	b96a      	cbnz	r2, 800c2d2 <strstr+0x22>
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d109      	bne.n	800c2d0 <strstr+0x20>
 800c2bc:	460c      	mov	r4, r1
 800c2be:	4605      	mov	r5, r0
 800c2c0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d0f6      	beq.n	800c2b6 <strstr+0x6>
 800c2c8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c2cc:	429e      	cmp	r6, r3
 800c2ce:	d0f7      	beq.n	800c2c0 <strstr+0x10>
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	7803      	ldrb	r3, [r0, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1ef      	bne.n	800c2b8 <strstr+0x8>
 800c2d8:	4618      	mov	r0, r3
 800c2da:	e7ec      	b.n	800c2b6 <strstr+0x6>

0800c2dc <_close_r>:
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	4d06      	ldr	r5, [pc, #24]	@ (800c2f8 <_close_r+0x1c>)
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	4608      	mov	r0, r1
 800c2e6:	602b      	str	r3, [r5, #0]
 800c2e8:	f7fb fa64 	bl	80077b4 <_close>
 800c2ec:	1c43      	adds	r3, r0, #1
 800c2ee:	d102      	bne.n	800c2f6 <_close_r+0x1a>
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	b103      	cbz	r3, 800c2f6 <_close_r+0x1a>
 800c2f4:	6023      	str	r3, [r4, #0]
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
 800c2f8:	200036c4 	.word	0x200036c4

0800c2fc <_lseek_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	4d07      	ldr	r5, [pc, #28]	@ (800c31c <_lseek_r+0x20>)
 800c300:	4604      	mov	r4, r0
 800c302:	4608      	mov	r0, r1
 800c304:	4611      	mov	r1, r2
 800c306:	2200      	movs	r2, #0
 800c308:	602a      	str	r2, [r5, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	f7fb fa79 	bl	8007802 <_lseek>
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	d102      	bne.n	800c31a <_lseek_r+0x1e>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	b103      	cbz	r3, 800c31a <_lseek_r+0x1e>
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	bd38      	pop	{r3, r4, r5, pc}
 800c31c:	200036c4 	.word	0x200036c4

0800c320 <_read_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	4d07      	ldr	r5, [pc, #28]	@ (800c340 <_read_r+0x20>)
 800c324:	4604      	mov	r4, r0
 800c326:	4608      	mov	r0, r1
 800c328:	4611      	mov	r1, r2
 800c32a:	2200      	movs	r2, #0
 800c32c:	602a      	str	r2, [r5, #0]
 800c32e:	461a      	mov	r2, r3
 800c330:	f7fb fa07 	bl	8007742 <_read>
 800c334:	1c43      	adds	r3, r0, #1
 800c336:	d102      	bne.n	800c33e <_read_r+0x1e>
 800c338:	682b      	ldr	r3, [r5, #0]
 800c33a:	b103      	cbz	r3, 800c33e <_read_r+0x1e>
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	bd38      	pop	{r3, r4, r5, pc}
 800c340:	200036c4 	.word	0x200036c4

0800c344 <_sbrk_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4d06      	ldr	r5, [pc, #24]	@ (800c360 <_sbrk_r+0x1c>)
 800c348:	2300      	movs	r3, #0
 800c34a:	4604      	mov	r4, r0
 800c34c:	4608      	mov	r0, r1
 800c34e:	602b      	str	r3, [r5, #0]
 800c350:	f7fb fa64 	bl	800781c <_sbrk>
 800c354:	1c43      	adds	r3, r0, #1
 800c356:	d102      	bne.n	800c35e <_sbrk_r+0x1a>
 800c358:	682b      	ldr	r3, [r5, #0]
 800c35a:	b103      	cbz	r3, 800c35e <_sbrk_r+0x1a>
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	bd38      	pop	{r3, r4, r5, pc}
 800c360:	200036c4 	.word	0x200036c4

0800c364 <_write_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4d07      	ldr	r5, [pc, #28]	@ (800c384 <_write_r+0x20>)
 800c368:	4604      	mov	r4, r0
 800c36a:	4608      	mov	r0, r1
 800c36c:	4611      	mov	r1, r2
 800c36e:	2200      	movs	r2, #0
 800c370:	602a      	str	r2, [r5, #0]
 800c372:	461a      	mov	r2, r3
 800c374:	f7fb fa02 	bl	800777c <_write>
 800c378:	1c43      	adds	r3, r0, #1
 800c37a:	d102      	bne.n	800c382 <_write_r+0x1e>
 800c37c:	682b      	ldr	r3, [r5, #0]
 800c37e:	b103      	cbz	r3, 800c382 <_write_r+0x1e>
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	bd38      	pop	{r3, r4, r5, pc}
 800c384:	200036c4 	.word	0x200036c4

0800c388 <__errno>:
 800c388:	4b01      	ldr	r3, [pc, #4]	@ (800c390 <__errno+0x8>)
 800c38a:	6818      	ldr	r0, [r3, #0]
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	200029d8 	.word	0x200029d8

0800c394 <__libc_init_array>:
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	4d0d      	ldr	r5, [pc, #52]	@ (800c3cc <__libc_init_array+0x38>)
 800c398:	4c0d      	ldr	r4, [pc, #52]	@ (800c3d0 <__libc_init_array+0x3c>)
 800c39a:	1b64      	subs	r4, r4, r5
 800c39c:	10a4      	asrs	r4, r4, #2
 800c39e:	2600      	movs	r6, #0
 800c3a0:	42a6      	cmp	r6, r4
 800c3a2:	d109      	bne.n	800c3b8 <__libc_init_array+0x24>
 800c3a4:	4d0b      	ldr	r5, [pc, #44]	@ (800c3d4 <__libc_init_array+0x40>)
 800c3a6:	4c0c      	ldr	r4, [pc, #48]	@ (800c3d8 <__libc_init_array+0x44>)
 800c3a8:	f002 fba8 	bl	800eafc <_init>
 800c3ac:	1b64      	subs	r4, r4, r5
 800c3ae:	10a4      	asrs	r4, r4, #2
 800c3b0:	2600      	movs	r6, #0
 800c3b2:	42a6      	cmp	r6, r4
 800c3b4:	d105      	bne.n	800c3c2 <__libc_init_array+0x2e>
 800c3b6:	bd70      	pop	{r4, r5, r6, pc}
 800c3b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3bc:	4798      	blx	r3
 800c3be:	3601      	adds	r6, #1
 800c3c0:	e7ee      	b.n	800c3a0 <__libc_init_array+0xc>
 800c3c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3c6:	4798      	blx	r3
 800c3c8:	3601      	adds	r6, #1
 800c3ca:	e7f2      	b.n	800c3b2 <__libc_init_array+0x1e>
 800c3cc:	080254bc 	.word	0x080254bc
 800c3d0:	080254bc 	.word	0x080254bc
 800c3d4:	080254bc 	.word	0x080254bc
 800c3d8:	080254c0 	.word	0x080254c0

0800c3dc <__retarget_lock_init_recursive>:
 800c3dc:	4770      	bx	lr

0800c3de <__retarget_lock_acquire_recursive>:
 800c3de:	4770      	bx	lr

0800c3e0 <__retarget_lock_release_recursive>:
 800c3e0:	4770      	bx	lr

0800c3e2 <memcpy>:
 800c3e2:	440a      	add	r2, r1
 800c3e4:	4291      	cmp	r1, r2
 800c3e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3ea:	d100      	bne.n	800c3ee <memcpy+0xc>
 800c3ec:	4770      	bx	lr
 800c3ee:	b510      	push	{r4, lr}
 800c3f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3f8:	4291      	cmp	r1, r2
 800c3fa:	d1f9      	bne.n	800c3f0 <memcpy+0xe>
 800c3fc:	bd10      	pop	{r4, pc}
	...

0800c400 <nan>:
 800c400:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c408 <nan+0x8>
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	00000000 	.word	0x00000000
 800c40c:	7ff80000 	.word	0x7ff80000

0800c410 <_free_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4605      	mov	r5, r0
 800c414:	2900      	cmp	r1, #0
 800c416:	d041      	beq.n	800c49c <_free_r+0x8c>
 800c418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c41c:	1f0c      	subs	r4, r1, #4
 800c41e:	2b00      	cmp	r3, #0
 800c420:	bfb8      	it	lt
 800c422:	18e4      	addlt	r4, r4, r3
 800c424:	f7fe ff18 	bl	800b258 <__malloc_lock>
 800c428:	4a1d      	ldr	r2, [pc, #116]	@ (800c4a0 <_free_r+0x90>)
 800c42a:	6813      	ldr	r3, [r2, #0]
 800c42c:	b933      	cbnz	r3, 800c43c <_free_r+0x2c>
 800c42e:	6063      	str	r3, [r4, #4]
 800c430:	6014      	str	r4, [r2, #0]
 800c432:	4628      	mov	r0, r5
 800c434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c438:	f7fe bf14 	b.w	800b264 <__malloc_unlock>
 800c43c:	42a3      	cmp	r3, r4
 800c43e:	d908      	bls.n	800c452 <_free_r+0x42>
 800c440:	6820      	ldr	r0, [r4, #0]
 800c442:	1821      	adds	r1, r4, r0
 800c444:	428b      	cmp	r3, r1
 800c446:	bf01      	itttt	eq
 800c448:	6819      	ldreq	r1, [r3, #0]
 800c44a:	685b      	ldreq	r3, [r3, #4]
 800c44c:	1809      	addeq	r1, r1, r0
 800c44e:	6021      	streq	r1, [r4, #0]
 800c450:	e7ed      	b.n	800c42e <_free_r+0x1e>
 800c452:	461a      	mov	r2, r3
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	b10b      	cbz	r3, 800c45c <_free_r+0x4c>
 800c458:	42a3      	cmp	r3, r4
 800c45a:	d9fa      	bls.n	800c452 <_free_r+0x42>
 800c45c:	6811      	ldr	r1, [r2, #0]
 800c45e:	1850      	adds	r0, r2, r1
 800c460:	42a0      	cmp	r0, r4
 800c462:	d10b      	bne.n	800c47c <_free_r+0x6c>
 800c464:	6820      	ldr	r0, [r4, #0]
 800c466:	4401      	add	r1, r0
 800c468:	1850      	adds	r0, r2, r1
 800c46a:	4283      	cmp	r3, r0
 800c46c:	6011      	str	r1, [r2, #0]
 800c46e:	d1e0      	bne.n	800c432 <_free_r+0x22>
 800c470:	6818      	ldr	r0, [r3, #0]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	6053      	str	r3, [r2, #4]
 800c476:	4408      	add	r0, r1
 800c478:	6010      	str	r0, [r2, #0]
 800c47a:	e7da      	b.n	800c432 <_free_r+0x22>
 800c47c:	d902      	bls.n	800c484 <_free_r+0x74>
 800c47e:	230c      	movs	r3, #12
 800c480:	602b      	str	r3, [r5, #0]
 800c482:	e7d6      	b.n	800c432 <_free_r+0x22>
 800c484:	6820      	ldr	r0, [r4, #0]
 800c486:	1821      	adds	r1, r4, r0
 800c488:	428b      	cmp	r3, r1
 800c48a:	bf04      	itt	eq
 800c48c:	6819      	ldreq	r1, [r3, #0]
 800c48e:	685b      	ldreq	r3, [r3, #4]
 800c490:	6063      	str	r3, [r4, #4]
 800c492:	bf04      	itt	eq
 800c494:	1809      	addeq	r1, r1, r0
 800c496:	6021      	streq	r1, [r4, #0]
 800c498:	6054      	str	r4, [r2, #4]
 800c49a:	e7ca      	b.n	800c432 <_free_r+0x22>
 800c49c:	bd38      	pop	{r3, r4, r5, pc}
 800c49e:	bf00      	nop
 800c4a0:	20003584 	.word	0x20003584

0800c4a4 <rshift>:
 800c4a4:	6903      	ldr	r3, [r0, #16]
 800c4a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c4aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c4b2:	f100 0414 	add.w	r4, r0, #20
 800c4b6:	dd45      	ble.n	800c544 <rshift+0xa0>
 800c4b8:	f011 011f 	ands.w	r1, r1, #31
 800c4bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c4c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c4c4:	d10c      	bne.n	800c4e0 <rshift+0x3c>
 800c4c6:	f100 0710 	add.w	r7, r0, #16
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	42b1      	cmp	r1, r6
 800c4ce:	d334      	bcc.n	800c53a <rshift+0x96>
 800c4d0:	1a9b      	subs	r3, r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	1eea      	subs	r2, r5, #3
 800c4d6:	4296      	cmp	r6, r2
 800c4d8:	bf38      	it	cc
 800c4da:	2300      	movcc	r3, #0
 800c4dc:	4423      	add	r3, r4
 800c4de:	e015      	b.n	800c50c <rshift+0x68>
 800c4e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4e4:	f1c1 0820 	rsb	r8, r1, #32
 800c4e8:	40cf      	lsrs	r7, r1
 800c4ea:	f105 0e04 	add.w	lr, r5, #4
 800c4ee:	46a1      	mov	r9, r4
 800c4f0:	4576      	cmp	r6, lr
 800c4f2:	46f4      	mov	ip, lr
 800c4f4:	d815      	bhi.n	800c522 <rshift+0x7e>
 800c4f6:	1a9a      	subs	r2, r3, r2
 800c4f8:	0092      	lsls	r2, r2, #2
 800c4fa:	3a04      	subs	r2, #4
 800c4fc:	3501      	adds	r5, #1
 800c4fe:	42ae      	cmp	r6, r5
 800c500:	bf38      	it	cc
 800c502:	2200      	movcc	r2, #0
 800c504:	18a3      	adds	r3, r4, r2
 800c506:	50a7      	str	r7, [r4, r2]
 800c508:	b107      	cbz	r7, 800c50c <rshift+0x68>
 800c50a:	3304      	adds	r3, #4
 800c50c:	1b1a      	subs	r2, r3, r4
 800c50e:	42a3      	cmp	r3, r4
 800c510:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c514:	bf08      	it	eq
 800c516:	2300      	moveq	r3, #0
 800c518:	6102      	str	r2, [r0, #16]
 800c51a:	bf08      	it	eq
 800c51c:	6143      	streq	r3, [r0, #20]
 800c51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c522:	f8dc c000 	ldr.w	ip, [ip]
 800c526:	fa0c fc08 	lsl.w	ip, ip, r8
 800c52a:	ea4c 0707 	orr.w	r7, ip, r7
 800c52e:	f849 7b04 	str.w	r7, [r9], #4
 800c532:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c536:	40cf      	lsrs	r7, r1
 800c538:	e7da      	b.n	800c4f0 <rshift+0x4c>
 800c53a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c53e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c542:	e7c3      	b.n	800c4cc <rshift+0x28>
 800c544:	4623      	mov	r3, r4
 800c546:	e7e1      	b.n	800c50c <rshift+0x68>

0800c548 <__hexdig_fun>:
 800c548:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c54c:	2b09      	cmp	r3, #9
 800c54e:	d802      	bhi.n	800c556 <__hexdig_fun+0xe>
 800c550:	3820      	subs	r0, #32
 800c552:	b2c0      	uxtb	r0, r0
 800c554:	4770      	bx	lr
 800c556:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c55a:	2b05      	cmp	r3, #5
 800c55c:	d801      	bhi.n	800c562 <__hexdig_fun+0x1a>
 800c55e:	3847      	subs	r0, #71	@ 0x47
 800c560:	e7f7      	b.n	800c552 <__hexdig_fun+0xa>
 800c562:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c566:	2b05      	cmp	r3, #5
 800c568:	d801      	bhi.n	800c56e <__hexdig_fun+0x26>
 800c56a:	3827      	subs	r0, #39	@ 0x27
 800c56c:	e7f1      	b.n	800c552 <__hexdig_fun+0xa>
 800c56e:	2000      	movs	r0, #0
 800c570:	4770      	bx	lr
	...

0800c574 <__gethex>:
 800c574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c578:	b085      	sub	sp, #20
 800c57a:	468a      	mov	sl, r1
 800c57c:	9302      	str	r3, [sp, #8]
 800c57e:	680b      	ldr	r3, [r1, #0]
 800c580:	9001      	str	r0, [sp, #4]
 800c582:	4690      	mov	r8, r2
 800c584:	1c9c      	adds	r4, r3, #2
 800c586:	46a1      	mov	r9, r4
 800c588:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c58c:	2830      	cmp	r0, #48	@ 0x30
 800c58e:	d0fa      	beq.n	800c586 <__gethex+0x12>
 800c590:	eba9 0303 	sub.w	r3, r9, r3
 800c594:	f1a3 0b02 	sub.w	fp, r3, #2
 800c598:	f7ff ffd6 	bl	800c548 <__hexdig_fun>
 800c59c:	4605      	mov	r5, r0
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d168      	bne.n	800c674 <__gethex+0x100>
 800c5a2:	49a0      	ldr	r1, [pc, #640]	@ (800c824 <__gethex+0x2b0>)
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	4648      	mov	r0, r9
 800c5a8:	f7ff fe47 	bl	800c23a <strncmp>
 800c5ac:	4607      	mov	r7, r0
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d167      	bne.n	800c682 <__gethex+0x10e>
 800c5b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c5b6:	4626      	mov	r6, r4
 800c5b8:	f7ff ffc6 	bl	800c548 <__hexdig_fun>
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d062      	beq.n	800c686 <__gethex+0x112>
 800c5c0:	4623      	mov	r3, r4
 800c5c2:	7818      	ldrb	r0, [r3, #0]
 800c5c4:	2830      	cmp	r0, #48	@ 0x30
 800c5c6:	4699      	mov	r9, r3
 800c5c8:	f103 0301 	add.w	r3, r3, #1
 800c5cc:	d0f9      	beq.n	800c5c2 <__gethex+0x4e>
 800c5ce:	f7ff ffbb 	bl	800c548 <__hexdig_fun>
 800c5d2:	fab0 f580 	clz	r5, r0
 800c5d6:	096d      	lsrs	r5, r5, #5
 800c5d8:	f04f 0b01 	mov.w	fp, #1
 800c5dc:	464a      	mov	r2, r9
 800c5de:	4616      	mov	r6, r2
 800c5e0:	3201      	adds	r2, #1
 800c5e2:	7830      	ldrb	r0, [r6, #0]
 800c5e4:	f7ff ffb0 	bl	800c548 <__hexdig_fun>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d1f8      	bne.n	800c5de <__gethex+0x6a>
 800c5ec:	498d      	ldr	r1, [pc, #564]	@ (800c824 <__gethex+0x2b0>)
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f7ff fe22 	bl	800c23a <strncmp>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	d13f      	bne.n	800c67a <__gethex+0x106>
 800c5fa:	b944      	cbnz	r4, 800c60e <__gethex+0x9a>
 800c5fc:	1c74      	adds	r4, r6, #1
 800c5fe:	4622      	mov	r2, r4
 800c600:	4616      	mov	r6, r2
 800c602:	3201      	adds	r2, #1
 800c604:	7830      	ldrb	r0, [r6, #0]
 800c606:	f7ff ff9f 	bl	800c548 <__hexdig_fun>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d1f8      	bne.n	800c600 <__gethex+0x8c>
 800c60e:	1ba4      	subs	r4, r4, r6
 800c610:	00a7      	lsls	r7, r4, #2
 800c612:	7833      	ldrb	r3, [r6, #0]
 800c614:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c618:	2b50      	cmp	r3, #80	@ 0x50
 800c61a:	d13e      	bne.n	800c69a <__gethex+0x126>
 800c61c:	7873      	ldrb	r3, [r6, #1]
 800c61e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c620:	d033      	beq.n	800c68a <__gethex+0x116>
 800c622:	2b2d      	cmp	r3, #45	@ 0x2d
 800c624:	d034      	beq.n	800c690 <__gethex+0x11c>
 800c626:	1c71      	adds	r1, r6, #1
 800c628:	2400      	movs	r4, #0
 800c62a:	7808      	ldrb	r0, [r1, #0]
 800c62c:	f7ff ff8c 	bl	800c548 <__hexdig_fun>
 800c630:	1e43      	subs	r3, r0, #1
 800c632:	b2db      	uxtb	r3, r3
 800c634:	2b18      	cmp	r3, #24
 800c636:	d830      	bhi.n	800c69a <__gethex+0x126>
 800c638:	f1a0 0210 	sub.w	r2, r0, #16
 800c63c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c640:	f7ff ff82 	bl	800c548 <__hexdig_fun>
 800c644:	f100 3cff 	add.w	ip, r0, #4294967295
 800c648:	fa5f fc8c 	uxtb.w	ip, ip
 800c64c:	f1bc 0f18 	cmp.w	ip, #24
 800c650:	f04f 030a 	mov.w	r3, #10
 800c654:	d91e      	bls.n	800c694 <__gethex+0x120>
 800c656:	b104      	cbz	r4, 800c65a <__gethex+0xe6>
 800c658:	4252      	negs	r2, r2
 800c65a:	4417      	add	r7, r2
 800c65c:	f8ca 1000 	str.w	r1, [sl]
 800c660:	b1ed      	cbz	r5, 800c69e <__gethex+0x12a>
 800c662:	f1bb 0f00 	cmp.w	fp, #0
 800c666:	bf0c      	ite	eq
 800c668:	2506      	moveq	r5, #6
 800c66a:	2500      	movne	r5, #0
 800c66c:	4628      	mov	r0, r5
 800c66e:	b005      	add	sp, #20
 800c670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c674:	2500      	movs	r5, #0
 800c676:	462c      	mov	r4, r5
 800c678:	e7b0      	b.n	800c5dc <__gethex+0x68>
 800c67a:	2c00      	cmp	r4, #0
 800c67c:	d1c7      	bne.n	800c60e <__gethex+0x9a>
 800c67e:	4627      	mov	r7, r4
 800c680:	e7c7      	b.n	800c612 <__gethex+0x9e>
 800c682:	464e      	mov	r6, r9
 800c684:	462f      	mov	r7, r5
 800c686:	2501      	movs	r5, #1
 800c688:	e7c3      	b.n	800c612 <__gethex+0x9e>
 800c68a:	2400      	movs	r4, #0
 800c68c:	1cb1      	adds	r1, r6, #2
 800c68e:	e7cc      	b.n	800c62a <__gethex+0xb6>
 800c690:	2401      	movs	r4, #1
 800c692:	e7fb      	b.n	800c68c <__gethex+0x118>
 800c694:	fb03 0002 	mla	r0, r3, r2, r0
 800c698:	e7ce      	b.n	800c638 <__gethex+0xc4>
 800c69a:	4631      	mov	r1, r6
 800c69c:	e7de      	b.n	800c65c <__gethex+0xe8>
 800c69e:	eba6 0309 	sub.w	r3, r6, r9
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	2b07      	cmp	r3, #7
 800c6a8:	dc0a      	bgt.n	800c6c0 <__gethex+0x14c>
 800c6aa:	9801      	ldr	r0, [sp, #4]
 800c6ac:	f000 fa46 	bl	800cb3c <_Balloc>
 800c6b0:	4604      	mov	r4, r0
 800c6b2:	b940      	cbnz	r0, 800c6c6 <__gethex+0x152>
 800c6b4:	4b5c      	ldr	r3, [pc, #368]	@ (800c828 <__gethex+0x2b4>)
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	21e4      	movs	r1, #228	@ 0xe4
 800c6ba:	485c      	ldr	r0, [pc, #368]	@ (800c82c <__gethex+0x2b8>)
 800c6bc:	f001 fe4a 	bl	800e354 <__assert_func>
 800c6c0:	3101      	adds	r1, #1
 800c6c2:	105b      	asrs	r3, r3, #1
 800c6c4:	e7ef      	b.n	800c6a6 <__gethex+0x132>
 800c6c6:	f100 0a14 	add.w	sl, r0, #20
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	4655      	mov	r5, sl
 800c6ce:	469b      	mov	fp, r3
 800c6d0:	45b1      	cmp	r9, r6
 800c6d2:	d337      	bcc.n	800c744 <__gethex+0x1d0>
 800c6d4:	f845 bb04 	str.w	fp, [r5], #4
 800c6d8:	eba5 050a 	sub.w	r5, r5, sl
 800c6dc:	10ad      	asrs	r5, r5, #2
 800c6de:	6125      	str	r5, [r4, #16]
 800c6e0:	4658      	mov	r0, fp
 800c6e2:	f000 fb1d 	bl	800cd20 <__hi0bits>
 800c6e6:	016d      	lsls	r5, r5, #5
 800c6e8:	f8d8 6000 	ldr.w	r6, [r8]
 800c6ec:	1a2d      	subs	r5, r5, r0
 800c6ee:	42b5      	cmp	r5, r6
 800c6f0:	dd54      	ble.n	800c79c <__gethex+0x228>
 800c6f2:	1bad      	subs	r5, r5, r6
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f000 feb1 	bl	800d45e <__any_on>
 800c6fc:	4681      	mov	r9, r0
 800c6fe:	b178      	cbz	r0, 800c720 <__gethex+0x1ac>
 800c700:	1e6b      	subs	r3, r5, #1
 800c702:	1159      	asrs	r1, r3, #5
 800c704:	f003 021f 	and.w	r2, r3, #31
 800c708:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c70c:	f04f 0901 	mov.w	r9, #1
 800c710:	fa09 f202 	lsl.w	r2, r9, r2
 800c714:	420a      	tst	r2, r1
 800c716:	d003      	beq.n	800c720 <__gethex+0x1ac>
 800c718:	454b      	cmp	r3, r9
 800c71a:	dc36      	bgt.n	800c78a <__gethex+0x216>
 800c71c:	f04f 0902 	mov.w	r9, #2
 800c720:	4629      	mov	r1, r5
 800c722:	4620      	mov	r0, r4
 800c724:	f7ff febe 	bl	800c4a4 <rshift>
 800c728:	442f      	add	r7, r5
 800c72a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c72e:	42bb      	cmp	r3, r7
 800c730:	da42      	bge.n	800c7b8 <__gethex+0x244>
 800c732:	9801      	ldr	r0, [sp, #4]
 800c734:	4621      	mov	r1, r4
 800c736:	f000 fa41 	bl	800cbbc <_Bfree>
 800c73a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c73c:	2300      	movs	r3, #0
 800c73e:	6013      	str	r3, [r2, #0]
 800c740:	25a3      	movs	r5, #163	@ 0xa3
 800c742:	e793      	b.n	800c66c <__gethex+0xf8>
 800c744:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c748:	2a2e      	cmp	r2, #46	@ 0x2e
 800c74a:	d012      	beq.n	800c772 <__gethex+0x1fe>
 800c74c:	2b20      	cmp	r3, #32
 800c74e:	d104      	bne.n	800c75a <__gethex+0x1e6>
 800c750:	f845 bb04 	str.w	fp, [r5], #4
 800c754:	f04f 0b00 	mov.w	fp, #0
 800c758:	465b      	mov	r3, fp
 800c75a:	7830      	ldrb	r0, [r6, #0]
 800c75c:	9303      	str	r3, [sp, #12]
 800c75e:	f7ff fef3 	bl	800c548 <__hexdig_fun>
 800c762:	9b03      	ldr	r3, [sp, #12]
 800c764:	f000 000f 	and.w	r0, r0, #15
 800c768:	4098      	lsls	r0, r3
 800c76a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c76e:	3304      	adds	r3, #4
 800c770:	e7ae      	b.n	800c6d0 <__gethex+0x15c>
 800c772:	45b1      	cmp	r9, r6
 800c774:	d8ea      	bhi.n	800c74c <__gethex+0x1d8>
 800c776:	492b      	ldr	r1, [pc, #172]	@ (800c824 <__gethex+0x2b0>)
 800c778:	9303      	str	r3, [sp, #12]
 800c77a:	2201      	movs	r2, #1
 800c77c:	4630      	mov	r0, r6
 800c77e:	f7ff fd5c 	bl	800c23a <strncmp>
 800c782:	9b03      	ldr	r3, [sp, #12]
 800c784:	2800      	cmp	r0, #0
 800c786:	d1e1      	bne.n	800c74c <__gethex+0x1d8>
 800c788:	e7a2      	b.n	800c6d0 <__gethex+0x15c>
 800c78a:	1ea9      	subs	r1, r5, #2
 800c78c:	4620      	mov	r0, r4
 800c78e:	f000 fe66 	bl	800d45e <__any_on>
 800c792:	2800      	cmp	r0, #0
 800c794:	d0c2      	beq.n	800c71c <__gethex+0x1a8>
 800c796:	f04f 0903 	mov.w	r9, #3
 800c79a:	e7c1      	b.n	800c720 <__gethex+0x1ac>
 800c79c:	da09      	bge.n	800c7b2 <__gethex+0x23e>
 800c79e:	1b75      	subs	r5, r6, r5
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	9801      	ldr	r0, [sp, #4]
 800c7a4:	462a      	mov	r2, r5
 800c7a6:	f000 fc21 	bl	800cfec <__lshift>
 800c7aa:	1b7f      	subs	r7, r7, r5
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	f100 0a14 	add.w	sl, r0, #20
 800c7b2:	f04f 0900 	mov.w	r9, #0
 800c7b6:	e7b8      	b.n	800c72a <__gethex+0x1b6>
 800c7b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c7bc:	42bd      	cmp	r5, r7
 800c7be:	dd6f      	ble.n	800c8a0 <__gethex+0x32c>
 800c7c0:	1bed      	subs	r5, r5, r7
 800c7c2:	42ae      	cmp	r6, r5
 800c7c4:	dc34      	bgt.n	800c830 <__gethex+0x2bc>
 800c7c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7ca:	2b02      	cmp	r3, #2
 800c7cc:	d022      	beq.n	800c814 <__gethex+0x2a0>
 800c7ce:	2b03      	cmp	r3, #3
 800c7d0:	d024      	beq.n	800c81c <__gethex+0x2a8>
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d115      	bne.n	800c802 <__gethex+0x28e>
 800c7d6:	42ae      	cmp	r6, r5
 800c7d8:	d113      	bne.n	800c802 <__gethex+0x28e>
 800c7da:	2e01      	cmp	r6, #1
 800c7dc:	d10b      	bne.n	800c7f6 <__gethex+0x282>
 800c7de:	9a02      	ldr	r2, [sp, #8]
 800c7e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7e4:	6013      	str	r3, [r2, #0]
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	6123      	str	r3, [r4, #16]
 800c7ea:	f8ca 3000 	str.w	r3, [sl]
 800c7ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7f0:	2562      	movs	r5, #98	@ 0x62
 800c7f2:	601c      	str	r4, [r3, #0]
 800c7f4:	e73a      	b.n	800c66c <__gethex+0xf8>
 800c7f6:	1e71      	subs	r1, r6, #1
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	f000 fe30 	bl	800d45e <__any_on>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d1ed      	bne.n	800c7de <__gethex+0x26a>
 800c802:	9801      	ldr	r0, [sp, #4]
 800c804:	4621      	mov	r1, r4
 800c806:	f000 f9d9 	bl	800cbbc <_Bfree>
 800c80a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c80c:	2300      	movs	r3, #0
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	2550      	movs	r5, #80	@ 0x50
 800c812:	e72b      	b.n	800c66c <__gethex+0xf8>
 800c814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c816:	2b00      	cmp	r3, #0
 800c818:	d1f3      	bne.n	800c802 <__gethex+0x28e>
 800c81a:	e7e0      	b.n	800c7de <__gethex+0x26a>
 800c81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1dd      	bne.n	800c7de <__gethex+0x26a>
 800c822:	e7ee      	b.n	800c802 <__gethex+0x28e>
 800c824:	080250dc 	.word	0x080250dc
 800c828:	08025249 	.word	0x08025249
 800c82c:	0802525a 	.word	0x0802525a
 800c830:	1e6f      	subs	r7, r5, #1
 800c832:	f1b9 0f00 	cmp.w	r9, #0
 800c836:	d130      	bne.n	800c89a <__gethex+0x326>
 800c838:	b127      	cbz	r7, 800c844 <__gethex+0x2d0>
 800c83a:	4639      	mov	r1, r7
 800c83c:	4620      	mov	r0, r4
 800c83e:	f000 fe0e 	bl	800d45e <__any_on>
 800c842:	4681      	mov	r9, r0
 800c844:	117a      	asrs	r2, r7, #5
 800c846:	2301      	movs	r3, #1
 800c848:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c84c:	f007 071f 	and.w	r7, r7, #31
 800c850:	40bb      	lsls	r3, r7
 800c852:	4213      	tst	r3, r2
 800c854:	4629      	mov	r1, r5
 800c856:	4620      	mov	r0, r4
 800c858:	bf18      	it	ne
 800c85a:	f049 0902 	orrne.w	r9, r9, #2
 800c85e:	f7ff fe21 	bl	800c4a4 <rshift>
 800c862:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c866:	1b76      	subs	r6, r6, r5
 800c868:	2502      	movs	r5, #2
 800c86a:	f1b9 0f00 	cmp.w	r9, #0
 800c86e:	d047      	beq.n	800c900 <__gethex+0x38c>
 800c870:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c874:	2b02      	cmp	r3, #2
 800c876:	d015      	beq.n	800c8a4 <__gethex+0x330>
 800c878:	2b03      	cmp	r3, #3
 800c87a:	d017      	beq.n	800c8ac <__gethex+0x338>
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d109      	bne.n	800c894 <__gethex+0x320>
 800c880:	f019 0f02 	tst.w	r9, #2
 800c884:	d006      	beq.n	800c894 <__gethex+0x320>
 800c886:	f8da 3000 	ldr.w	r3, [sl]
 800c88a:	ea49 0903 	orr.w	r9, r9, r3
 800c88e:	f019 0f01 	tst.w	r9, #1
 800c892:	d10e      	bne.n	800c8b2 <__gethex+0x33e>
 800c894:	f045 0510 	orr.w	r5, r5, #16
 800c898:	e032      	b.n	800c900 <__gethex+0x38c>
 800c89a:	f04f 0901 	mov.w	r9, #1
 800c89e:	e7d1      	b.n	800c844 <__gethex+0x2d0>
 800c8a0:	2501      	movs	r5, #1
 800c8a2:	e7e2      	b.n	800c86a <__gethex+0x2f6>
 800c8a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8a6:	f1c3 0301 	rsb	r3, r3, #1
 800c8aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d0f0      	beq.n	800c894 <__gethex+0x320>
 800c8b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c8b6:	f104 0314 	add.w	r3, r4, #20
 800c8ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c8be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c8c2:	f04f 0c00 	mov.w	ip, #0
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c8d0:	d01b      	beq.n	800c90a <__gethex+0x396>
 800c8d2:	3201      	adds	r2, #1
 800c8d4:	6002      	str	r2, [r0, #0]
 800c8d6:	2d02      	cmp	r5, #2
 800c8d8:	f104 0314 	add.w	r3, r4, #20
 800c8dc:	d13c      	bne.n	800c958 <__gethex+0x3e4>
 800c8de:	f8d8 2000 	ldr.w	r2, [r8]
 800c8e2:	3a01      	subs	r2, #1
 800c8e4:	42b2      	cmp	r2, r6
 800c8e6:	d109      	bne.n	800c8fc <__gethex+0x388>
 800c8e8:	1171      	asrs	r1, r6, #5
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8f0:	f006 061f 	and.w	r6, r6, #31
 800c8f4:	fa02 f606 	lsl.w	r6, r2, r6
 800c8f8:	421e      	tst	r6, r3
 800c8fa:	d13a      	bne.n	800c972 <__gethex+0x3fe>
 800c8fc:	f045 0520 	orr.w	r5, r5, #32
 800c900:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c902:	601c      	str	r4, [r3, #0]
 800c904:	9b02      	ldr	r3, [sp, #8]
 800c906:	601f      	str	r7, [r3, #0]
 800c908:	e6b0      	b.n	800c66c <__gethex+0xf8>
 800c90a:	4299      	cmp	r1, r3
 800c90c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c910:	d8d9      	bhi.n	800c8c6 <__gethex+0x352>
 800c912:	68a3      	ldr	r3, [r4, #8]
 800c914:	459b      	cmp	fp, r3
 800c916:	db17      	blt.n	800c948 <__gethex+0x3d4>
 800c918:	6861      	ldr	r1, [r4, #4]
 800c91a:	9801      	ldr	r0, [sp, #4]
 800c91c:	3101      	adds	r1, #1
 800c91e:	f000 f90d 	bl	800cb3c <_Balloc>
 800c922:	4681      	mov	r9, r0
 800c924:	b918      	cbnz	r0, 800c92e <__gethex+0x3ba>
 800c926:	4b1a      	ldr	r3, [pc, #104]	@ (800c990 <__gethex+0x41c>)
 800c928:	4602      	mov	r2, r0
 800c92a:	2184      	movs	r1, #132	@ 0x84
 800c92c:	e6c5      	b.n	800c6ba <__gethex+0x146>
 800c92e:	6922      	ldr	r2, [r4, #16]
 800c930:	3202      	adds	r2, #2
 800c932:	f104 010c 	add.w	r1, r4, #12
 800c936:	0092      	lsls	r2, r2, #2
 800c938:	300c      	adds	r0, #12
 800c93a:	f7ff fd52 	bl	800c3e2 <memcpy>
 800c93e:	4621      	mov	r1, r4
 800c940:	9801      	ldr	r0, [sp, #4]
 800c942:	f000 f93b 	bl	800cbbc <_Bfree>
 800c946:	464c      	mov	r4, r9
 800c948:	6923      	ldr	r3, [r4, #16]
 800c94a:	1c5a      	adds	r2, r3, #1
 800c94c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c950:	6122      	str	r2, [r4, #16]
 800c952:	2201      	movs	r2, #1
 800c954:	615a      	str	r2, [r3, #20]
 800c956:	e7be      	b.n	800c8d6 <__gethex+0x362>
 800c958:	6922      	ldr	r2, [r4, #16]
 800c95a:	455a      	cmp	r2, fp
 800c95c:	dd0b      	ble.n	800c976 <__gethex+0x402>
 800c95e:	2101      	movs	r1, #1
 800c960:	4620      	mov	r0, r4
 800c962:	f7ff fd9f 	bl	800c4a4 <rshift>
 800c966:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c96a:	3701      	adds	r7, #1
 800c96c:	42bb      	cmp	r3, r7
 800c96e:	f6ff aee0 	blt.w	800c732 <__gethex+0x1be>
 800c972:	2501      	movs	r5, #1
 800c974:	e7c2      	b.n	800c8fc <__gethex+0x388>
 800c976:	f016 061f 	ands.w	r6, r6, #31
 800c97a:	d0fa      	beq.n	800c972 <__gethex+0x3fe>
 800c97c:	4453      	add	r3, sl
 800c97e:	f1c6 0620 	rsb	r6, r6, #32
 800c982:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c986:	f000 f9cb 	bl	800cd20 <__hi0bits>
 800c98a:	42b0      	cmp	r0, r6
 800c98c:	dbe7      	blt.n	800c95e <__gethex+0x3ea>
 800c98e:	e7f0      	b.n	800c972 <__gethex+0x3fe>
 800c990:	08025249 	.word	0x08025249

0800c994 <L_shift>:
 800c994:	f1c2 0208 	rsb	r2, r2, #8
 800c998:	0092      	lsls	r2, r2, #2
 800c99a:	b570      	push	{r4, r5, r6, lr}
 800c99c:	f1c2 0620 	rsb	r6, r2, #32
 800c9a0:	6843      	ldr	r3, [r0, #4]
 800c9a2:	6804      	ldr	r4, [r0, #0]
 800c9a4:	fa03 f506 	lsl.w	r5, r3, r6
 800c9a8:	432c      	orrs	r4, r5
 800c9aa:	40d3      	lsrs	r3, r2
 800c9ac:	6004      	str	r4, [r0, #0]
 800c9ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800c9b2:	4288      	cmp	r0, r1
 800c9b4:	d3f4      	bcc.n	800c9a0 <L_shift+0xc>
 800c9b6:	bd70      	pop	{r4, r5, r6, pc}

0800c9b8 <__match>:
 800c9b8:	b530      	push	{r4, r5, lr}
 800c9ba:	6803      	ldr	r3, [r0, #0]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9c2:	b914      	cbnz	r4, 800c9ca <__match+0x12>
 800c9c4:	6003      	str	r3, [r0, #0]
 800c9c6:	2001      	movs	r0, #1
 800c9c8:	bd30      	pop	{r4, r5, pc}
 800c9ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c9d2:	2d19      	cmp	r5, #25
 800c9d4:	bf98      	it	ls
 800c9d6:	3220      	addls	r2, #32
 800c9d8:	42a2      	cmp	r2, r4
 800c9da:	d0f0      	beq.n	800c9be <__match+0x6>
 800c9dc:	2000      	movs	r0, #0
 800c9de:	e7f3      	b.n	800c9c8 <__match+0x10>

0800c9e0 <__hexnan>:
 800c9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e4:	680b      	ldr	r3, [r1, #0]
 800c9e6:	6801      	ldr	r1, [r0, #0]
 800c9e8:	115e      	asrs	r6, r3, #5
 800c9ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9ee:	f013 031f 	ands.w	r3, r3, #31
 800c9f2:	b087      	sub	sp, #28
 800c9f4:	bf18      	it	ne
 800c9f6:	3604      	addne	r6, #4
 800c9f8:	2500      	movs	r5, #0
 800c9fa:	1f37      	subs	r7, r6, #4
 800c9fc:	4682      	mov	sl, r0
 800c9fe:	4690      	mov	r8, r2
 800ca00:	9301      	str	r3, [sp, #4]
 800ca02:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca06:	46b9      	mov	r9, r7
 800ca08:	463c      	mov	r4, r7
 800ca0a:	9502      	str	r5, [sp, #8]
 800ca0c:	46ab      	mov	fp, r5
 800ca0e:	784a      	ldrb	r2, [r1, #1]
 800ca10:	1c4b      	adds	r3, r1, #1
 800ca12:	9303      	str	r3, [sp, #12]
 800ca14:	b342      	cbz	r2, 800ca68 <__hexnan+0x88>
 800ca16:	4610      	mov	r0, r2
 800ca18:	9105      	str	r1, [sp, #20]
 800ca1a:	9204      	str	r2, [sp, #16]
 800ca1c:	f7ff fd94 	bl	800c548 <__hexdig_fun>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d151      	bne.n	800cac8 <__hexnan+0xe8>
 800ca24:	9a04      	ldr	r2, [sp, #16]
 800ca26:	9905      	ldr	r1, [sp, #20]
 800ca28:	2a20      	cmp	r2, #32
 800ca2a:	d818      	bhi.n	800ca5e <__hexnan+0x7e>
 800ca2c:	9b02      	ldr	r3, [sp, #8]
 800ca2e:	459b      	cmp	fp, r3
 800ca30:	dd13      	ble.n	800ca5a <__hexnan+0x7a>
 800ca32:	454c      	cmp	r4, r9
 800ca34:	d206      	bcs.n	800ca44 <__hexnan+0x64>
 800ca36:	2d07      	cmp	r5, #7
 800ca38:	dc04      	bgt.n	800ca44 <__hexnan+0x64>
 800ca3a:	462a      	mov	r2, r5
 800ca3c:	4649      	mov	r1, r9
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f7ff ffa8 	bl	800c994 <L_shift>
 800ca44:	4544      	cmp	r4, r8
 800ca46:	d952      	bls.n	800caee <__hexnan+0x10e>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	f1a4 0904 	sub.w	r9, r4, #4
 800ca4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca52:	f8cd b008 	str.w	fp, [sp, #8]
 800ca56:	464c      	mov	r4, r9
 800ca58:	461d      	mov	r5, r3
 800ca5a:	9903      	ldr	r1, [sp, #12]
 800ca5c:	e7d7      	b.n	800ca0e <__hexnan+0x2e>
 800ca5e:	2a29      	cmp	r2, #41	@ 0x29
 800ca60:	d157      	bne.n	800cb12 <__hexnan+0x132>
 800ca62:	3102      	adds	r1, #2
 800ca64:	f8ca 1000 	str.w	r1, [sl]
 800ca68:	f1bb 0f00 	cmp.w	fp, #0
 800ca6c:	d051      	beq.n	800cb12 <__hexnan+0x132>
 800ca6e:	454c      	cmp	r4, r9
 800ca70:	d206      	bcs.n	800ca80 <__hexnan+0xa0>
 800ca72:	2d07      	cmp	r5, #7
 800ca74:	dc04      	bgt.n	800ca80 <__hexnan+0xa0>
 800ca76:	462a      	mov	r2, r5
 800ca78:	4649      	mov	r1, r9
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f7ff ff8a 	bl	800c994 <L_shift>
 800ca80:	4544      	cmp	r4, r8
 800ca82:	d936      	bls.n	800caf2 <__hexnan+0x112>
 800ca84:	f1a8 0204 	sub.w	r2, r8, #4
 800ca88:	4623      	mov	r3, r4
 800ca8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca92:	429f      	cmp	r7, r3
 800ca94:	d2f9      	bcs.n	800ca8a <__hexnan+0xaa>
 800ca96:	1b3b      	subs	r3, r7, r4
 800ca98:	f023 0303 	bic.w	r3, r3, #3
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	3401      	adds	r4, #1
 800caa0:	3e03      	subs	r6, #3
 800caa2:	42b4      	cmp	r4, r6
 800caa4:	bf88      	it	hi
 800caa6:	2304      	movhi	r3, #4
 800caa8:	4443      	add	r3, r8
 800caaa:	2200      	movs	r2, #0
 800caac:	f843 2b04 	str.w	r2, [r3], #4
 800cab0:	429f      	cmp	r7, r3
 800cab2:	d2fb      	bcs.n	800caac <__hexnan+0xcc>
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	b91b      	cbnz	r3, 800cac0 <__hexnan+0xe0>
 800cab8:	4547      	cmp	r7, r8
 800caba:	d128      	bne.n	800cb0e <__hexnan+0x12e>
 800cabc:	2301      	movs	r3, #1
 800cabe:	603b      	str	r3, [r7, #0]
 800cac0:	2005      	movs	r0, #5
 800cac2:	b007      	add	sp, #28
 800cac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac8:	3501      	adds	r5, #1
 800caca:	2d08      	cmp	r5, #8
 800cacc:	f10b 0b01 	add.w	fp, fp, #1
 800cad0:	dd06      	ble.n	800cae0 <__hexnan+0x100>
 800cad2:	4544      	cmp	r4, r8
 800cad4:	d9c1      	bls.n	800ca5a <__hexnan+0x7a>
 800cad6:	2300      	movs	r3, #0
 800cad8:	f844 3c04 	str.w	r3, [r4, #-4]
 800cadc:	2501      	movs	r5, #1
 800cade:	3c04      	subs	r4, #4
 800cae0:	6822      	ldr	r2, [r4, #0]
 800cae2:	f000 000f 	and.w	r0, r0, #15
 800cae6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800caea:	6020      	str	r0, [r4, #0]
 800caec:	e7b5      	b.n	800ca5a <__hexnan+0x7a>
 800caee:	2508      	movs	r5, #8
 800caf0:	e7b3      	b.n	800ca5a <__hexnan+0x7a>
 800caf2:	9b01      	ldr	r3, [sp, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d0dd      	beq.n	800cab4 <__hexnan+0xd4>
 800caf8:	f1c3 0320 	rsb	r3, r3, #32
 800cafc:	f04f 32ff 	mov.w	r2, #4294967295
 800cb00:	40da      	lsrs	r2, r3
 800cb02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cb06:	4013      	ands	r3, r2
 800cb08:	f846 3c04 	str.w	r3, [r6, #-4]
 800cb0c:	e7d2      	b.n	800cab4 <__hexnan+0xd4>
 800cb0e:	3f04      	subs	r7, #4
 800cb10:	e7d0      	b.n	800cab4 <__hexnan+0xd4>
 800cb12:	2004      	movs	r0, #4
 800cb14:	e7d5      	b.n	800cac2 <__hexnan+0xe2>

0800cb16 <__ascii_mbtowc>:
 800cb16:	b082      	sub	sp, #8
 800cb18:	b901      	cbnz	r1, 800cb1c <__ascii_mbtowc+0x6>
 800cb1a:	a901      	add	r1, sp, #4
 800cb1c:	b142      	cbz	r2, 800cb30 <__ascii_mbtowc+0x1a>
 800cb1e:	b14b      	cbz	r3, 800cb34 <__ascii_mbtowc+0x1e>
 800cb20:	7813      	ldrb	r3, [r2, #0]
 800cb22:	600b      	str	r3, [r1, #0]
 800cb24:	7812      	ldrb	r2, [r2, #0]
 800cb26:	1e10      	subs	r0, r2, #0
 800cb28:	bf18      	it	ne
 800cb2a:	2001      	movne	r0, #1
 800cb2c:	b002      	add	sp, #8
 800cb2e:	4770      	bx	lr
 800cb30:	4610      	mov	r0, r2
 800cb32:	e7fb      	b.n	800cb2c <__ascii_mbtowc+0x16>
 800cb34:	f06f 0001 	mvn.w	r0, #1
 800cb38:	e7f8      	b.n	800cb2c <__ascii_mbtowc+0x16>
	...

0800cb3c <_Balloc>:
 800cb3c:	b570      	push	{r4, r5, r6, lr}
 800cb3e:	69c6      	ldr	r6, [r0, #28]
 800cb40:	4604      	mov	r4, r0
 800cb42:	460d      	mov	r5, r1
 800cb44:	b976      	cbnz	r6, 800cb64 <_Balloc+0x28>
 800cb46:	2010      	movs	r0, #16
 800cb48:	f7fe fad4 	bl	800b0f4 <malloc>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	61e0      	str	r0, [r4, #28]
 800cb50:	b920      	cbnz	r0, 800cb5c <_Balloc+0x20>
 800cb52:	4b18      	ldr	r3, [pc, #96]	@ (800cbb4 <_Balloc+0x78>)
 800cb54:	4818      	ldr	r0, [pc, #96]	@ (800cbb8 <_Balloc+0x7c>)
 800cb56:	216b      	movs	r1, #107	@ 0x6b
 800cb58:	f001 fbfc 	bl	800e354 <__assert_func>
 800cb5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb60:	6006      	str	r6, [r0, #0]
 800cb62:	60c6      	str	r6, [r0, #12]
 800cb64:	69e6      	ldr	r6, [r4, #28]
 800cb66:	68f3      	ldr	r3, [r6, #12]
 800cb68:	b183      	cbz	r3, 800cb8c <_Balloc+0x50>
 800cb6a:	69e3      	ldr	r3, [r4, #28]
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb72:	b9b8      	cbnz	r0, 800cba4 <_Balloc+0x68>
 800cb74:	2101      	movs	r1, #1
 800cb76:	fa01 f605 	lsl.w	r6, r1, r5
 800cb7a:	1d72      	adds	r2, r6, #5
 800cb7c:	0092      	lsls	r2, r2, #2
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f001 fc06 	bl	800e390 <_calloc_r>
 800cb84:	b160      	cbz	r0, 800cba0 <_Balloc+0x64>
 800cb86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb8a:	e00e      	b.n	800cbaa <_Balloc+0x6e>
 800cb8c:	2221      	movs	r2, #33	@ 0x21
 800cb8e:	2104      	movs	r1, #4
 800cb90:	4620      	mov	r0, r4
 800cb92:	f001 fbfd 	bl	800e390 <_calloc_r>
 800cb96:	69e3      	ldr	r3, [r4, #28]
 800cb98:	60f0      	str	r0, [r6, #12]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1e4      	bne.n	800cb6a <_Balloc+0x2e>
 800cba0:	2000      	movs	r0, #0
 800cba2:	bd70      	pop	{r4, r5, r6, pc}
 800cba4:	6802      	ldr	r2, [r0, #0]
 800cba6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbaa:	2300      	movs	r3, #0
 800cbac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbb0:	e7f7      	b.n	800cba2 <_Balloc+0x66>
 800cbb2:	bf00      	nop
 800cbb4:	080252ba 	.word	0x080252ba
 800cbb8:	080252d1 	.word	0x080252d1

0800cbbc <_Bfree>:
 800cbbc:	b570      	push	{r4, r5, r6, lr}
 800cbbe:	69c6      	ldr	r6, [r0, #28]
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	b976      	cbnz	r6, 800cbe4 <_Bfree+0x28>
 800cbc6:	2010      	movs	r0, #16
 800cbc8:	f7fe fa94 	bl	800b0f4 <malloc>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	61e8      	str	r0, [r5, #28]
 800cbd0:	b920      	cbnz	r0, 800cbdc <_Bfree+0x20>
 800cbd2:	4b09      	ldr	r3, [pc, #36]	@ (800cbf8 <_Bfree+0x3c>)
 800cbd4:	4809      	ldr	r0, [pc, #36]	@ (800cbfc <_Bfree+0x40>)
 800cbd6:	218f      	movs	r1, #143	@ 0x8f
 800cbd8:	f001 fbbc 	bl	800e354 <__assert_func>
 800cbdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbe0:	6006      	str	r6, [r0, #0]
 800cbe2:	60c6      	str	r6, [r0, #12]
 800cbe4:	b13c      	cbz	r4, 800cbf6 <_Bfree+0x3a>
 800cbe6:	69eb      	ldr	r3, [r5, #28]
 800cbe8:	6862      	ldr	r2, [r4, #4]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbf0:	6021      	str	r1, [r4, #0]
 800cbf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbf6:	bd70      	pop	{r4, r5, r6, pc}
 800cbf8:	080252ba 	.word	0x080252ba
 800cbfc:	080252d1 	.word	0x080252d1

0800cc00 <__multadd>:
 800cc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc04:	690d      	ldr	r5, [r1, #16]
 800cc06:	4607      	mov	r7, r0
 800cc08:	460c      	mov	r4, r1
 800cc0a:	461e      	mov	r6, r3
 800cc0c:	f101 0c14 	add.w	ip, r1, #20
 800cc10:	2000      	movs	r0, #0
 800cc12:	f8dc 3000 	ldr.w	r3, [ip]
 800cc16:	b299      	uxth	r1, r3
 800cc18:	fb02 6101 	mla	r1, r2, r1, r6
 800cc1c:	0c1e      	lsrs	r6, r3, #16
 800cc1e:	0c0b      	lsrs	r3, r1, #16
 800cc20:	fb02 3306 	mla	r3, r2, r6, r3
 800cc24:	b289      	uxth	r1, r1
 800cc26:	3001      	adds	r0, #1
 800cc28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc2c:	4285      	cmp	r5, r0
 800cc2e:	f84c 1b04 	str.w	r1, [ip], #4
 800cc32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc36:	dcec      	bgt.n	800cc12 <__multadd+0x12>
 800cc38:	b30e      	cbz	r6, 800cc7e <__multadd+0x7e>
 800cc3a:	68a3      	ldr	r3, [r4, #8]
 800cc3c:	42ab      	cmp	r3, r5
 800cc3e:	dc19      	bgt.n	800cc74 <__multadd+0x74>
 800cc40:	6861      	ldr	r1, [r4, #4]
 800cc42:	4638      	mov	r0, r7
 800cc44:	3101      	adds	r1, #1
 800cc46:	f7ff ff79 	bl	800cb3c <_Balloc>
 800cc4a:	4680      	mov	r8, r0
 800cc4c:	b928      	cbnz	r0, 800cc5a <__multadd+0x5a>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	4b0c      	ldr	r3, [pc, #48]	@ (800cc84 <__multadd+0x84>)
 800cc52:	480d      	ldr	r0, [pc, #52]	@ (800cc88 <__multadd+0x88>)
 800cc54:	21ba      	movs	r1, #186	@ 0xba
 800cc56:	f001 fb7d 	bl	800e354 <__assert_func>
 800cc5a:	6922      	ldr	r2, [r4, #16]
 800cc5c:	3202      	adds	r2, #2
 800cc5e:	f104 010c 	add.w	r1, r4, #12
 800cc62:	0092      	lsls	r2, r2, #2
 800cc64:	300c      	adds	r0, #12
 800cc66:	f7ff fbbc 	bl	800c3e2 <memcpy>
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	4638      	mov	r0, r7
 800cc6e:	f7ff ffa5 	bl	800cbbc <_Bfree>
 800cc72:	4644      	mov	r4, r8
 800cc74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc78:	3501      	adds	r5, #1
 800cc7a:	615e      	str	r6, [r3, #20]
 800cc7c:	6125      	str	r5, [r4, #16]
 800cc7e:	4620      	mov	r0, r4
 800cc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc84:	08025249 	.word	0x08025249
 800cc88:	080252d1 	.word	0x080252d1

0800cc8c <__s2b>:
 800cc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc90:	460c      	mov	r4, r1
 800cc92:	4615      	mov	r5, r2
 800cc94:	461f      	mov	r7, r3
 800cc96:	2209      	movs	r2, #9
 800cc98:	3308      	adds	r3, #8
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cca0:	2100      	movs	r1, #0
 800cca2:	2201      	movs	r2, #1
 800cca4:	429a      	cmp	r2, r3
 800cca6:	db09      	blt.n	800ccbc <__s2b+0x30>
 800cca8:	4630      	mov	r0, r6
 800ccaa:	f7ff ff47 	bl	800cb3c <_Balloc>
 800ccae:	b940      	cbnz	r0, 800ccc2 <__s2b+0x36>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	4b19      	ldr	r3, [pc, #100]	@ (800cd18 <__s2b+0x8c>)
 800ccb4:	4819      	ldr	r0, [pc, #100]	@ (800cd1c <__s2b+0x90>)
 800ccb6:	21d3      	movs	r1, #211	@ 0xd3
 800ccb8:	f001 fb4c 	bl	800e354 <__assert_func>
 800ccbc:	0052      	lsls	r2, r2, #1
 800ccbe:	3101      	adds	r1, #1
 800ccc0:	e7f0      	b.n	800cca4 <__s2b+0x18>
 800ccc2:	9b08      	ldr	r3, [sp, #32]
 800ccc4:	6143      	str	r3, [r0, #20]
 800ccc6:	2d09      	cmp	r5, #9
 800ccc8:	f04f 0301 	mov.w	r3, #1
 800cccc:	6103      	str	r3, [r0, #16]
 800ccce:	dd16      	ble.n	800ccfe <__s2b+0x72>
 800ccd0:	f104 0909 	add.w	r9, r4, #9
 800ccd4:	46c8      	mov	r8, r9
 800ccd6:	442c      	add	r4, r5
 800ccd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ccdc:	4601      	mov	r1, r0
 800ccde:	3b30      	subs	r3, #48	@ 0x30
 800cce0:	220a      	movs	r2, #10
 800cce2:	4630      	mov	r0, r6
 800cce4:	f7ff ff8c 	bl	800cc00 <__multadd>
 800cce8:	45a0      	cmp	r8, r4
 800ccea:	d1f5      	bne.n	800ccd8 <__s2b+0x4c>
 800ccec:	f1a5 0408 	sub.w	r4, r5, #8
 800ccf0:	444c      	add	r4, r9
 800ccf2:	1b2d      	subs	r5, r5, r4
 800ccf4:	1963      	adds	r3, r4, r5
 800ccf6:	42bb      	cmp	r3, r7
 800ccf8:	db04      	blt.n	800cd04 <__s2b+0x78>
 800ccfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccfe:	340a      	adds	r4, #10
 800cd00:	2509      	movs	r5, #9
 800cd02:	e7f6      	b.n	800ccf2 <__s2b+0x66>
 800cd04:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd08:	4601      	mov	r1, r0
 800cd0a:	3b30      	subs	r3, #48	@ 0x30
 800cd0c:	220a      	movs	r2, #10
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f7ff ff76 	bl	800cc00 <__multadd>
 800cd14:	e7ee      	b.n	800ccf4 <__s2b+0x68>
 800cd16:	bf00      	nop
 800cd18:	08025249 	.word	0x08025249
 800cd1c:	080252d1 	.word	0x080252d1

0800cd20 <__hi0bits>:
 800cd20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd24:	4603      	mov	r3, r0
 800cd26:	bf36      	itet	cc
 800cd28:	0403      	lslcc	r3, r0, #16
 800cd2a:	2000      	movcs	r0, #0
 800cd2c:	2010      	movcc	r0, #16
 800cd2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd32:	bf3c      	itt	cc
 800cd34:	021b      	lslcc	r3, r3, #8
 800cd36:	3008      	addcc	r0, #8
 800cd38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd3c:	bf3c      	itt	cc
 800cd3e:	011b      	lslcc	r3, r3, #4
 800cd40:	3004      	addcc	r0, #4
 800cd42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd46:	bf3c      	itt	cc
 800cd48:	009b      	lslcc	r3, r3, #2
 800cd4a:	3002      	addcc	r0, #2
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	db05      	blt.n	800cd5c <__hi0bits+0x3c>
 800cd50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd54:	f100 0001 	add.w	r0, r0, #1
 800cd58:	bf08      	it	eq
 800cd5a:	2020      	moveq	r0, #32
 800cd5c:	4770      	bx	lr

0800cd5e <__lo0bits>:
 800cd5e:	6803      	ldr	r3, [r0, #0]
 800cd60:	4602      	mov	r2, r0
 800cd62:	f013 0007 	ands.w	r0, r3, #7
 800cd66:	d00b      	beq.n	800cd80 <__lo0bits+0x22>
 800cd68:	07d9      	lsls	r1, r3, #31
 800cd6a:	d421      	bmi.n	800cdb0 <__lo0bits+0x52>
 800cd6c:	0798      	lsls	r0, r3, #30
 800cd6e:	bf49      	itett	mi
 800cd70:	085b      	lsrmi	r3, r3, #1
 800cd72:	089b      	lsrpl	r3, r3, #2
 800cd74:	2001      	movmi	r0, #1
 800cd76:	6013      	strmi	r3, [r2, #0]
 800cd78:	bf5c      	itt	pl
 800cd7a:	6013      	strpl	r3, [r2, #0]
 800cd7c:	2002      	movpl	r0, #2
 800cd7e:	4770      	bx	lr
 800cd80:	b299      	uxth	r1, r3
 800cd82:	b909      	cbnz	r1, 800cd88 <__lo0bits+0x2a>
 800cd84:	0c1b      	lsrs	r3, r3, #16
 800cd86:	2010      	movs	r0, #16
 800cd88:	b2d9      	uxtb	r1, r3
 800cd8a:	b909      	cbnz	r1, 800cd90 <__lo0bits+0x32>
 800cd8c:	3008      	adds	r0, #8
 800cd8e:	0a1b      	lsrs	r3, r3, #8
 800cd90:	0719      	lsls	r1, r3, #28
 800cd92:	bf04      	itt	eq
 800cd94:	091b      	lsreq	r3, r3, #4
 800cd96:	3004      	addeq	r0, #4
 800cd98:	0799      	lsls	r1, r3, #30
 800cd9a:	bf04      	itt	eq
 800cd9c:	089b      	lsreq	r3, r3, #2
 800cd9e:	3002      	addeq	r0, #2
 800cda0:	07d9      	lsls	r1, r3, #31
 800cda2:	d403      	bmi.n	800cdac <__lo0bits+0x4e>
 800cda4:	085b      	lsrs	r3, r3, #1
 800cda6:	f100 0001 	add.w	r0, r0, #1
 800cdaa:	d003      	beq.n	800cdb4 <__lo0bits+0x56>
 800cdac:	6013      	str	r3, [r2, #0]
 800cdae:	4770      	bx	lr
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	4770      	bx	lr
 800cdb4:	2020      	movs	r0, #32
 800cdb6:	4770      	bx	lr

0800cdb8 <__i2b>:
 800cdb8:	b510      	push	{r4, lr}
 800cdba:	460c      	mov	r4, r1
 800cdbc:	2101      	movs	r1, #1
 800cdbe:	f7ff febd 	bl	800cb3c <_Balloc>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	b928      	cbnz	r0, 800cdd2 <__i2b+0x1a>
 800cdc6:	4b05      	ldr	r3, [pc, #20]	@ (800cddc <__i2b+0x24>)
 800cdc8:	4805      	ldr	r0, [pc, #20]	@ (800cde0 <__i2b+0x28>)
 800cdca:	f240 1145 	movw	r1, #325	@ 0x145
 800cdce:	f001 fac1 	bl	800e354 <__assert_func>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	6144      	str	r4, [r0, #20]
 800cdd6:	6103      	str	r3, [r0, #16]
 800cdd8:	bd10      	pop	{r4, pc}
 800cdda:	bf00      	nop
 800cddc:	08025249 	.word	0x08025249
 800cde0:	080252d1 	.word	0x080252d1

0800cde4 <__multiply>:
 800cde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde8:	4614      	mov	r4, r2
 800cdea:	690a      	ldr	r2, [r1, #16]
 800cdec:	6923      	ldr	r3, [r4, #16]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	bfa8      	it	ge
 800cdf2:	4623      	movge	r3, r4
 800cdf4:	460f      	mov	r7, r1
 800cdf6:	bfa4      	itt	ge
 800cdf8:	460c      	movge	r4, r1
 800cdfa:	461f      	movge	r7, r3
 800cdfc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ce00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ce04:	68a3      	ldr	r3, [r4, #8]
 800ce06:	6861      	ldr	r1, [r4, #4]
 800ce08:	eb0a 0609 	add.w	r6, sl, r9
 800ce0c:	42b3      	cmp	r3, r6
 800ce0e:	b085      	sub	sp, #20
 800ce10:	bfb8      	it	lt
 800ce12:	3101      	addlt	r1, #1
 800ce14:	f7ff fe92 	bl	800cb3c <_Balloc>
 800ce18:	b930      	cbnz	r0, 800ce28 <__multiply+0x44>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	4b44      	ldr	r3, [pc, #272]	@ (800cf30 <__multiply+0x14c>)
 800ce1e:	4845      	ldr	r0, [pc, #276]	@ (800cf34 <__multiply+0x150>)
 800ce20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce24:	f001 fa96 	bl	800e354 <__assert_func>
 800ce28:	f100 0514 	add.w	r5, r0, #20
 800ce2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce30:	462b      	mov	r3, r5
 800ce32:	2200      	movs	r2, #0
 800ce34:	4543      	cmp	r3, r8
 800ce36:	d321      	bcc.n	800ce7c <__multiply+0x98>
 800ce38:	f107 0114 	add.w	r1, r7, #20
 800ce3c:	f104 0214 	add.w	r2, r4, #20
 800ce40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ce44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ce48:	9302      	str	r3, [sp, #8]
 800ce4a:	1b13      	subs	r3, r2, r4
 800ce4c:	3b15      	subs	r3, #21
 800ce4e:	f023 0303 	bic.w	r3, r3, #3
 800ce52:	3304      	adds	r3, #4
 800ce54:	f104 0715 	add.w	r7, r4, #21
 800ce58:	42ba      	cmp	r2, r7
 800ce5a:	bf38      	it	cc
 800ce5c:	2304      	movcc	r3, #4
 800ce5e:	9301      	str	r3, [sp, #4]
 800ce60:	9b02      	ldr	r3, [sp, #8]
 800ce62:	9103      	str	r1, [sp, #12]
 800ce64:	428b      	cmp	r3, r1
 800ce66:	d80c      	bhi.n	800ce82 <__multiply+0x9e>
 800ce68:	2e00      	cmp	r6, #0
 800ce6a:	dd03      	ble.n	800ce74 <__multiply+0x90>
 800ce6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d05b      	beq.n	800cf2c <__multiply+0x148>
 800ce74:	6106      	str	r6, [r0, #16]
 800ce76:	b005      	add	sp, #20
 800ce78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7c:	f843 2b04 	str.w	r2, [r3], #4
 800ce80:	e7d8      	b.n	800ce34 <__multiply+0x50>
 800ce82:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce86:	f1ba 0f00 	cmp.w	sl, #0
 800ce8a:	d024      	beq.n	800ced6 <__multiply+0xf2>
 800ce8c:	f104 0e14 	add.w	lr, r4, #20
 800ce90:	46a9      	mov	r9, r5
 800ce92:	f04f 0c00 	mov.w	ip, #0
 800ce96:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce9a:	f8d9 3000 	ldr.w	r3, [r9]
 800ce9e:	fa1f fb87 	uxth.w	fp, r7
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	fb0a 330b 	mla	r3, sl, fp, r3
 800cea8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ceac:	f8d9 7000 	ldr.w	r7, [r9]
 800ceb0:	4463      	add	r3, ip
 800ceb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ceb6:	fb0a c70b 	mla	r7, sl, fp, ip
 800ceba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cec4:	4572      	cmp	r2, lr
 800cec6:	f849 3b04 	str.w	r3, [r9], #4
 800ceca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cece:	d8e2      	bhi.n	800ce96 <__multiply+0xb2>
 800ced0:	9b01      	ldr	r3, [sp, #4]
 800ced2:	f845 c003 	str.w	ip, [r5, r3]
 800ced6:	9b03      	ldr	r3, [sp, #12]
 800ced8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cedc:	3104      	adds	r1, #4
 800cede:	f1b9 0f00 	cmp.w	r9, #0
 800cee2:	d021      	beq.n	800cf28 <__multiply+0x144>
 800cee4:	682b      	ldr	r3, [r5, #0]
 800cee6:	f104 0c14 	add.w	ip, r4, #20
 800ceea:	46ae      	mov	lr, r5
 800ceec:	f04f 0a00 	mov.w	sl, #0
 800cef0:	f8bc b000 	ldrh.w	fp, [ip]
 800cef4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cef8:	fb09 770b 	mla	r7, r9, fp, r7
 800cefc:	4457      	add	r7, sl
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf04:	f84e 3b04 	str.w	r3, [lr], #4
 800cf08:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf10:	f8be 3000 	ldrh.w	r3, [lr]
 800cf14:	fb09 330a 	mla	r3, r9, sl, r3
 800cf18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cf1c:	4562      	cmp	r2, ip
 800cf1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf22:	d8e5      	bhi.n	800cef0 <__multiply+0x10c>
 800cf24:	9f01      	ldr	r7, [sp, #4]
 800cf26:	51eb      	str	r3, [r5, r7]
 800cf28:	3504      	adds	r5, #4
 800cf2a:	e799      	b.n	800ce60 <__multiply+0x7c>
 800cf2c:	3e01      	subs	r6, #1
 800cf2e:	e79b      	b.n	800ce68 <__multiply+0x84>
 800cf30:	08025249 	.word	0x08025249
 800cf34:	080252d1 	.word	0x080252d1

0800cf38 <__pow5mult>:
 800cf38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf3c:	4615      	mov	r5, r2
 800cf3e:	f012 0203 	ands.w	r2, r2, #3
 800cf42:	4607      	mov	r7, r0
 800cf44:	460e      	mov	r6, r1
 800cf46:	d007      	beq.n	800cf58 <__pow5mult+0x20>
 800cf48:	4c25      	ldr	r4, [pc, #148]	@ (800cfe0 <__pow5mult+0xa8>)
 800cf4a:	3a01      	subs	r2, #1
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf52:	f7ff fe55 	bl	800cc00 <__multadd>
 800cf56:	4606      	mov	r6, r0
 800cf58:	10ad      	asrs	r5, r5, #2
 800cf5a:	d03d      	beq.n	800cfd8 <__pow5mult+0xa0>
 800cf5c:	69fc      	ldr	r4, [r7, #28]
 800cf5e:	b97c      	cbnz	r4, 800cf80 <__pow5mult+0x48>
 800cf60:	2010      	movs	r0, #16
 800cf62:	f7fe f8c7 	bl	800b0f4 <malloc>
 800cf66:	4602      	mov	r2, r0
 800cf68:	61f8      	str	r0, [r7, #28]
 800cf6a:	b928      	cbnz	r0, 800cf78 <__pow5mult+0x40>
 800cf6c:	4b1d      	ldr	r3, [pc, #116]	@ (800cfe4 <__pow5mult+0xac>)
 800cf6e:	481e      	ldr	r0, [pc, #120]	@ (800cfe8 <__pow5mult+0xb0>)
 800cf70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf74:	f001 f9ee 	bl	800e354 <__assert_func>
 800cf78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf7c:	6004      	str	r4, [r0, #0]
 800cf7e:	60c4      	str	r4, [r0, #12]
 800cf80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf88:	b94c      	cbnz	r4, 800cf9e <__pow5mult+0x66>
 800cf8a:	f240 2171 	movw	r1, #625	@ 0x271
 800cf8e:	4638      	mov	r0, r7
 800cf90:	f7ff ff12 	bl	800cdb8 <__i2b>
 800cf94:	2300      	movs	r3, #0
 800cf96:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	6003      	str	r3, [r0, #0]
 800cf9e:	f04f 0900 	mov.w	r9, #0
 800cfa2:	07eb      	lsls	r3, r5, #31
 800cfa4:	d50a      	bpl.n	800cfbc <__pow5mult+0x84>
 800cfa6:	4631      	mov	r1, r6
 800cfa8:	4622      	mov	r2, r4
 800cfaa:	4638      	mov	r0, r7
 800cfac:	f7ff ff1a 	bl	800cde4 <__multiply>
 800cfb0:	4631      	mov	r1, r6
 800cfb2:	4680      	mov	r8, r0
 800cfb4:	4638      	mov	r0, r7
 800cfb6:	f7ff fe01 	bl	800cbbc <_Bfree>
 800cfba:	4646      	mov	r6, r8
 800cfbc:	106d      	asrs	r5, r5, #1
 800cfbe:	d00b      	beq.n	800cfd8 <__pow5mult+0xa0>
 800cfc0:	6820      	ldr	r0, [r4, #0]
 800cfc2:	b938      	cbnz	r0, 800cfd4 <__pow5mult+0x9c>
 800cfc4:	4622      	mov	r2, r4
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	4638      	mov	r0, r7
 800cfca:	f7ff ff0b 	bl	800cde4 <__multiply>
 800cfce:	6020      	str	r0, [r4, #0]
 800cfd0:	f8c0 9000 	str.w	r9, [r0]
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	e7e4      	b.n	800cfa2 <__pow5mult+0x6a>
 800cfd8:	4630      	mov	r0, r6
 800cfda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfde:	bf00      	nop
 800cfe0:	0802532c 	.word	0x0802532c
 800cfe4:	080252ba 	.word	0x080252ba
 800cfe8:	080252d1 	.word	0x080252d1

0800cfec <__lshift>:
 800cfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cff0:	460c      	mov	r4, r1
 800cff2:	6849      	ldr	r1, [r1, #4]
 800cff4:	6923      	ldr	r3, [r4, #16]
 800cff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cffa:	68a3      	ldr	r3, [r4, #8]
 800cffc:	4607      	mov	r7, r0
 800cffe:	4691      	mov	r9, r2
 800d000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d004:	f108 0601 	add.w	r6, r8, #1
 800d008:	42b3      	cmp	r3, r6
 800d00a:	db0b      	blt.n	800d024 <__lshift+0x38>
 800d00c:	4638      	mov	r0, r7
 800d00e:	f7ff fd95 	bl	800cb3c <_Balloc>
 800d012:	4605      	mov	r5, r0
 800d014:	b948      	cbnz	r0, 800d02a <__lshift+0x3e>
 800d016:	4602      	mov	r2, r0
 800d018:	4b28      	ldr	r3, [pc, #160]	@ (800d0bc <__lshift+0xd0>)
 800d01a:	4829      	ldr	r0, [pc, #164]	@ (800d0c0 <__lshift+0xd4>)
 800d01c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d020:	f001 f998 	bl	800e354 <__assert_func>
 800d024:	3101      	adds	r1, #1
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	e7ee      	b.n	800d008 <__lshift+0x1c>
 800d02a:	2300      	movs	r3, #0
 800d02c:	f100 0114 	add.w	r1, r0, #20
 800d030:	f100 0210 	add.w	r2, r0, #16
 800d034:	4618      	mov	r0, r3
 800d036:	4553      	cmp	r3, sl
 800d038:	db33      	blt.n	800d0a2 <__lshift+0xb6>
 800d03a:	6920      	ldr	r0, [r4, #16]
 800d03c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d040:	f104 0314 	add.w	r3, r4, #20
 800d044:	f019 091f 	ands.w	r9, r9, #31
 800d048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d04c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d050:	d02b      	beq.n	800d0aa <__lshift+0xbe>
 800d052:	f1c9 0e20 	rsb	lr, r9, #32
 800d056:	468a      	mov	sl, r1
 800d058:	2200      	movs	r2, #0
 800d05a:	6818      	ldr	r0, [r3, #0]
 800d05c:	fa00 f009 	lsl.w	r0, r0, r9
 800d060:	4310      	orrs	r0, r2
 800d062:	f84a 0b04 	str.w	r0, [sl], #4
 800d066:	f853 2b04 	ldr.w	r2, [r3], #4
 800d06a:	459c      	cmp	ip, r3
 800d06c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d070:	d8f3      	bhi.n	800d05a <__lshift+0x6e>
 800d072:	ebac 0304 	sub.w	r3, ip, r4
 800d076:	3b15      	subs	r3, #21
 800d078:	f023 0303 	bic.w	r3, r3, #3
 800d07c:	3304      	adds	r3, #4
 800d07e:	f104 0015 	add.w	r0, r4, #21
 800d082:	4584      	cmp	ip, r0
 800d084:	bf38      	it	cc
 800d086:	2304      	movcc	r3, #4
 800d088:	50ca      	str	r2, [r1, r3]
 800d08a:	b10a      	cbz	r2, 800d090 <__lshift+0xa4>
 800d08c:	f108 0602 	add.w	r6, r8, #2
 800d090:	3e01      	subs	r6, #1
 800d092:	4638      	mov	r0, r7
 800d094:	612e      	str	r6, [r5, #16]
 800d096:	4621      	mov	r1, r4
 800d098:	f7ff fd90 	bl	800cbbc <_Bfree>
 800d09c:	4628      	mov	r0, r5
 800d09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	e7c5      	b.n	800d036 <__lshift+0x4a>
 800d0aa:	3904      	subs	r1, #4
 800d0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0b4:	459c      	cmp	ip, r3
 800d0b6:	d8f9      	bhi.n	800d0ac <__lshift+0xc0>
 800d0b8:	e7ea      	b.n	800d090 <__lshift+0xa4>
 800d0ba:	bf00      	nop
 800d0bc:	08025249 	.word	0x08025249
 800d0c0:	080252d1 	.word	0x080252d1

0800d0c4 <__mcmp>:
 800d0c4:	690a      	ldr	r2, [r1, #16]
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	6900      	ldr	r0, [r0, #16]
 800d0ca:	1a80      	subs	r0, r0, r2
 800d0cc:	b530      	push	{r4, r5, lr}
 800d0ce:	d10e      	bne.n	800d0ee <__mcmp+0x2a>
 800d0d0:	3314      	adds	r3, #20
 800d0d2:	3114      	adds	r1, #20
 800d0d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0e4:	4295      	cmp	r5, r2
 800d0e6:	d003      	beq.n	800d0f0 <__mcmp+0x2c>
 800d0e8:	d205      	bcs.n	800d0f6 <__mcmp+0x32>
 800d0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ee:	bd30      	pop	{r4, r5, pc}
 800d0f0:	42a3      	cmp	r3, r4
 800d0f2:	d3f3      	bcc.n	800d0dc <__mcmp+0x18>
 800d0f4:	e7fb      	b.n	800d0ee <__mcmp+0x2a>
 800d0f6:	2001      	movs	r0, #1
 800d0f8:	e7f9      	b.n	800d0ee <__mcmp+0x2a>
	...

0800d0fc <__mdiff>:
 800d0fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d100:	4689      	mov	r9, r1
 800d102:	4606      	mov	r6, r0
 800d104:	4611      	mov	r1, r2
 800d106:	4648      	mov	r0, r9
 800d108:	4614      	mov	r4, r2
 800d10a:	f7ff ffdb 	bl	800d0c4 <__mcmp>
 800d10e:	1e05      	subs	r5, r0, #0
 800d110:	d112      	bne.n	800d138 <__mdiff+0x3c>
 800d112:	4629      	mov	r1, r5
 800d114:	4630      	mov	r0, r6
 800d116:	f7ff fd11 	bl	800cb3c <_Balloc>
 800d11a:	4602      	mov	r2, r0
 800d11c:	b928      	cbnz	r0, 800d12a <__mdiff+0x2e>
 800d11e:	4b3f      	ldr	r3, [pc, #252]	@ (800d21c <__mdiff+0x120>)
 800d120:	f240 2137 	movw	r1, #567	@ 0x237
 800d124:	483e      	ldr	r0, [pc, #248]	@ (800d220 <__mdiff+0x124>)
 800d126:	f001 f915 	bl	800e354 <__assert_func>
 800d12a:	2301      	movs	r3, #1
 800d12c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d130:	4610      	mov	r0, r2
 800d132:	b003      	add	sp, #12
 800d134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d138:	bfbc      	itt	lt
 800d13a:	464b      	movlt	r3, r9
 800d13c:	46a1      	movlt	r9, r4
 800d13e:	4630      	mov	r0, r6
 800d140:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d144:	bfba      	itte	lt
 800d146:	461c      	movlt	r4, r3
 800d148:	2501      	movlt	r5, #1
 800d14a:	2500      	movge	r5, #0
 800d14c:	f7ff fcf6 	bl	800cb3c <_Balloc>
 800d150:	4602      	mov	r2, r0
 800d152:	b918      	cbnz	r0, 800d15c <__mdiff+0x60>
 800d154:	4b31      	ldr	r3, [pc, #196]	@ (800d21c <__mdiff+0x120>)
 800d156:	f240 2145 	movw	r1, #581	@ 0x245
 800d15a:	e7e3      	b.n	800d124 <__mdiff+0x28>
 800d15c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d160:	6926      	ldr	r6, [r4, #16]
 800d162:	60c5      	str	r5, [r0, #12]
 800d164:	f109 0310 	add.w	r3, r9, #16
 800d168:	f109 0514 	add.w	r5, r9, #20
 800d16c:	f104 0e14 	add.w	lr, r4, #20
 800d170:	f100 0b14 	add.w	fp, r0, #20
 800d174:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d178:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d17c:	9301      	str	r3, [sp, #4]
 800d17e:	46d9      	mov	r9, fp
 800d180:	f04f 0c00 	mov.w	ip, #0
 800d184:	9b01      	ldr	r3, [sp, #4]
 800d186:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d18a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d18e:	9301      	str	r3, [sp, #4]
 800d190:	fa1f f38a 	uxth.w	r3, sl
 800d194:	4619      	mov	r1, r3
 800d196:	b283      	uxth	r3, r0
 800d198:	1acb      	subs	r3, r1, r3
 800d19a:	0c00      	lsrs	r0, r0, #16
 800d19c:	4463      	add	r3, ip
 800d19e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d1a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d1ac:	4576      	cmp	r6, lr
 800d1ae:	f849 3b04 	str.w	r3, [r9], #4
 800d1b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1b6:	d8e5      	bhi.n	800d184 <__mdiff+0x88>
 800d1b8:	1b33      	subs	r3, r6, r4
 800d1ba:	3b15      	subs	r3, #21
 800d1bc:	f023 0303 	bic.w	r3, r3, #3
 800d1c0:	3415      	adds	r4, #21
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	42a6      	cmp	r6, r4
 800d1c6:	bf38      	it	cc
 800d1c8:	2304      	movcc	r3, #4
 800d1ca:	441d      	add	r5, r3
 800d1cc:	445b      	add	r3, fp
 800d1ce:	461e      	mov	r6, r3
 800d1d0:	462c      	mov	r4, r5
 800d1d2:	4544      	cmp	r4, r8
 800d1d4:	d30e      	bcc.n	800d1f4 <__mdiff+0xf8>
 800d1d6:	f108 0103 	add.w	r1, r8, #3
 800d1da:	1b49      	subs	r1, r1, r5
 800d1dc:	f021 0103 	bic.w	r1, r1, #3
 800d1e0:	3d03      	subs	r5, #3
 800d1e2:	45a8      	cmp	r8, r5
 800d1e4:	bf38      	it	cc
 800d1e6:	2100      	movcc	r1, #0
 800d1e8:	440b      	add	r3, r1
 800d1ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1ee:	b191      	cbz	r1, 800d216 <__mdiff+0x11a>
 800d1f0:	6117      	str	r7, [r2, #16]
 800d1f2:	e79d      	b.n	800d130 <__mdiff+0x34>
 800d1f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1f8:	46e6      	mov	lr, ip
 800d1fa:	0c08      	lsrs	r0, r1, #16
 800d1fc:	fa1c fc81 	uxtah	ip, ip, r1
 800d200:	4471      	add	r1, lr
 800d202:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d206:	b289      	uxth	r1, r1
 800d208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d20c:	f846 1b04 	str.w	r1, [r6], #4
 800d210:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d214:	e7dd      	b.n	800d1d2 <__mdiff+0xd6>
 800d216:	3f01      	subs	r7, #1
 800d218:	e7e7      	b.n	800d1ea <__mdiff+0xee>
 800d21a:	bf00      	nop
 800d21c:	08025249 	.word	0x08025249
 800d220:	080252d1 	.word	0x080252d1

0800d224 <__ulp>:
 800d224:	b082      	sub	sp, #8
 800d226:	ed8d 0b00 	vstr	d0, [sp]
 800d22a:	9a01      	ldr	r2, [sp, #4]
 800d22c:	4b0f      	ldr	r3, [pc, #60]	@ (800d26c <__ulp+0x48>)
 800d22e:	4013      	ands	r3, r2
 800d230:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d234:	2b00      	cmp	r3, #0
 800d236:	dc08      	bgt.n	800d24a <__ulp+0x26>
 800d238:	425b      	negs	r3, r3
 800d23a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d23e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d242:	da04      	bge.n	800d24e <__ulp+0x2a>
 800d244:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d248:	4113      	asrs	r3, r2
 800d24a:	2200      	movs	r2, #0
 800d24c:	e008      	b.n	800d260 <__ulp+0x3c>
 800d24e:	f1a2 0314 	sub.w	r3, r2, #20
 800d252:	2b1e      	cmp	r3, #30
 800d254:	bfda      	itte	le
 800d256:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d25a:	40da      	lsrle	r2, r3
 800d25c:	2201      	movgt	r2, #1
 800d25e:	2300      	movs	r3, #0
 800d260:	4619      	mov	r1, r3
 800d262:	4610      	mov	r0, r2
 800d264:	ec41 0b10 	vmov	d0, r0, r1
 800d268:	b002      	add	sp, #8
 800d26a:	4770      	bx	lr
 800d26c:	7ff00000 	.word	0x7ff00000

0800d270 <__b2d>:
 800d270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d274:	6906      	ldr	r6, [r0, #16]
 800d276:	f100 0814 	add.w	r8, r0, #20
 800d27a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d27e:	1f37      	subs	r7, r6, #4
 800d280:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d284:	4610      	mov	r0, r2
 800d286:	f7ff fd4b 	bl	800cd20 <__hi0bits>
 800d28a:	f1c0 0320 	rsb	r3, r0, #32
 800d28e:	280a      	cmp	r0, #10
 800d290:	600b      	str	r3, [r1, #0]
 800d292:	491b      	ldr	r1, [pc, #108]	@ (800d300 <__b2d+0x90>)
 800d294:	dc15      	bgt.n	800d2c2 <__b2d+0x52>
 800d296:	f1c0 0c0b 	rsb	ip, r0, #11
 800d29a:	fa22 f30c 	lsr.w	r3, r2, ip
 800d29e:	45b8      	cmp	r8, r7
 800d2a0:	ea43 0501 	orr.w	r5, r3, r1
 800d2a4:	bf34      	ite	cc
 800d2a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d2aa:	2300      	movcs	r3, #0
 800d2ac:	3015      	adds	r0, #21
 800d2ae:	fa02 f000 	lsl.w	r0, r2, r0
 800d2b2:	fa23 f30c 	lsr.w	r3, r3, ip
 800d2b6:	4303      	orrs	r3, r0
 800d2b8:	461c      	mov	r4, r3
 800d2ba:	ec45 4b10 	vmov	d0, r4, r5
 800d2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c2:	45b8      	cmp	r8, r7
 800d2c4:	bf3a      	itte	cc
 800d2c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d2ca:	f1a6 0708 	subcc.w	r7, r6, #8
 800d2ce:	2300      	movcs	r3, #0
 800d2d0:	380b      	subs	r0, #11
 800d2d2:	d012      	beq.n	800d2fa <__b2d+0x8a>
 800d2d4:	f1c0 0120 	rsb	r1, r0, #32
 800d2d8:	fa23 f401 	lsr.w	r4, r3, r1
 800d2dc:	4082      	lsls	r2, r0
 800d2de:	4322      	orrs	r2, r4
 800d2e0:	4547      	cmp	r7, r8
 800d2e2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d2e6:	bf8c      	ite	hi
 800d2e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d2ec:	2200      	movls	r2, #0
 800d2ee:	4083      	lsls	r3, r0
 800d2f0:	40ca      	lsrs	r2, r1
 800d2f2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	e7de      	b.n	800d2b8 <__b2d+0x48>
 800d2fa:	ea42 0501 	orr.w	r5, r2, r1
 800d2fe:	e7db      	b.n	800d2b8 <__b2d+0x48>
 800d300:	3ff00000 	.word	0x3ff00000

0800d304 <__d2b>:
 800d304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d308:	460f      	mov	r7, r1
 800d30a:	2101      	movs	r1, #1
 800d30c:	ec59 8b10 	vmov	r8, r9, d0
 800d310:	4616      	mov	r6, r2
 800d312:	f7ff fc13 	bl	800cb3c <_Balloc>
 800d316:	4604      	mov	r4, r0
 800d318:	b930      	cbnz	r0, 800d328 <__d2b+0x24>
 800d31a:	4602      	mov	r2, r0
 800d31c:	4b23      	ldr	r3, [pc, #140]	@ (800d3ac <__d2b+0xa8>)
 800d31e:	4824      	ldr	r0, [pc, #144]	@ (800d3b0 <__d2b+0xac>)
 800d320:	f240 310f 	movw	r1, #783	@ 0x30f
 800d324:	f001 f816 	bl	800e354 <__assert_func>
 800d328:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d32c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d330:	b10d      	cbz	r5, 800d336 <__d2b+0x32>
 800d332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d336:	9301      	str	r3, [sp, #4]
 800d338:	f1b8 0300 	subs.w	r3, r8, #0
 800d33c:	d023      	beq.n	800d386 <__d2b+0x82>
 800d33e:	4668      	mov	r0, sp
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	f7ff fd0c 	bl	800cd5e <__lo0bits>
 800d346:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d34a:	b1d0      	cbz	r0, 800d382 <__d2b+0x7e>
 800d34c:	f1c0 0320 	rsb	r3, r0, #32
 800d350:	fa02 f303 	lsl.w	r3, r2, r3
 800d354:	430b      	orrs	r3, r1
 800d356:	40c2      	lsrs	r2, r0
 800d358:	6163      	str	r3, [r4, #20]
 800d35a:	9201      	str	r2, [sp, #4]
 800d35c:	9b01      	ldr	r3, [sp, #4]
 800d35e:	61a3      	str	r3, [r4, #24]
 800d360:	2b00      	cmp	r3, #0
 800d362:	bf0c      	ite	eq
 800d364:	2201      	moveq	r2, #1
 800d366:	2202      	movne	r2, #2
 800d368:	6122      	str	r2, [r4, #16]
 800d36a:	b1a5      	cbz	r5, 800d396 <__d2b+0x92>
 800d36c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d370:	4405      	add	r5, r0
 800d372:	603d      	str	r5, [r7, #0]
 800d374:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d378:	6030      	str	r0, [r6, #0]
 800d37a:	4620      	mov	r0, r4
 800d37c:	b003      	add	sp, #12
 800d37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d382:	6161      	str	r1, [r4, #20]
 800d384:	e7ea      	b.n	800d35c <__d2b+0x58>
 800d386:	a801      	add	r0, sp, #4
 800d388:	f7ff fce9 	bl	800cd5e <__lo0bits>
 800d38c:	9b01      	ldr	r3, [sp, #4]
 800d38e:	6163      	str	r3, [r4, #20]
 800d390:	3020      	adds	r0, #32
 800d392:	2201      	movs	r2, #1
 800d394:	e7e8      	b.n	800d368 <__d2b+0x64>
 800d396:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d39a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d39e:	6038      	str	r0, [r7, #0]
 800d3a0:	6918      	ldr	r0, [r3, #16]
 800d3a2:	f7ff fcbd 	bl	800cd20 <__hi0bits>
 800d3a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3aa:	e7e5      	b.n	800d378 <__d2b+0x74>
 800d3ac:	08025249 	.word	0x08025249
 800d3b0:	080252d1 	.word	0x080252d1

0800d3b4 <__ratio>:
 800d3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b8:	b085      	sub	sp, #20
 800d3ba:	e9cd 1000 	strd	r1, r0, [sp]
 800d3be:	a902      	add	r1, sp, #8
 800d3c0:	f7ff ff56 	bl	800d270 <__b2d>
 800d3c4:	9800      	ldr	r0, [sp, #0]
 800d3c6:	a903      	add	r1, sp, #12
 800d3c8:	ec55 4b10 	vmov	r4, r5, d0
 800d3cc:	f7ff ff50 	bl	800d270 <__b2d>
 800d3d0:	9b01      	ldr	r3, [sp, #4]
 800d3d2:	6919      	ldr	r1, [r3, #16]
 800d3d4:	9b00      	ldr	r3, [sp, #0]
 800d3d6:	691b      	ldr	r3, [r3, #16]
 800d3d8:	1ac9      	subs	r1, r1, r3
 800d3da:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d3de:	1a9b      	subs	r3, r3, r2
 800d3e0:	ec5b ab10 	vmov	sl, fp, d0
 800d3e4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	bfce      	itee	gt
 800d3ec:	462a      	movgt	r2, r5
 800d3ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3f2:	465a      	movle	r2, fp
 800d3f4:	462f      	mov	r7, r5
 800d3f6:	46d9      	mov	r9, fp
 800d3f8:	bfcc      	ite	gt
 800d3fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d3fe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d402:	464b      	mov	r3, r9
 800d404:	4652      	mov	r2, sl
 800d406:	4620      	mov	r0, r4
 800d408:	4639      	mov	r1, r7
 800d40a:	f7f3 fa2f 	bl	800086c <__aeabi_ddiv>
 800d40e:	ec41 0b10 	vmov	d0, r0, r1
 800d412:	b005      	add	sp, #20
 800d414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d418 <__copybits>:
 800d418:	3901      	subs	r1, #1
 800d41a:	b570      	push	{r4, r5, r6, lr}
 800d41c:	1149      	asrs	r1, r1, #5
 800d41e:	6914      	ldr	r4, [r2, #16]
 800d420:	3101      	adds	r1, #1
 800d422:	f102 0314 	add.w	r3, r2, #20
 800d426:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d42a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d42e:	1f05      	subs	r5, r0, #4
 800d430:	42a3      	cmp	r3, r4
 800d432:	d30c      	bcc.n	800d44e <__copybits+0x36>
 800d434:	1aa3      	subs	r3, r4, r2
 800d436:	3b11      	subs	r3, #17
 800d438:	f023 0303 	bic.w	r3, r3, #3
 800d43c:	3211      	adds	r2, #17
 800d43e:	42a2      	cmp	r2, r4
 800d440:	bf88      	it	hi
 800d442:	2300      	movhi	r3, #0
 800d444:	4418      	add	r0, r3
 800d446:	2300      	movs	r3, #0
 800d448:	4288      	cmp	r0, r1
 800d44a:	d305      	bcc.n	800d458 <__copybits+0x40>
 800d44c:	bd70      	pop	{r4, r5, r6, pc}
 800d44e:	f853 6b04 	ldr.w	r6, [r3], #4
 800d452:	f845 6f04 	str.w	r6, [r5, #4]!
 800d456:	e7eb      	b.n	800d430 <__copybits+0x18>
 800d458:	f840 3b04 	str.w	r3, [r0], #4
 800d45c:	e7f4      	b.n	800d448 <__copybits+0x30>

0800d45e <__any_on>:
 800d45e:	f100 0214 	add.w	r2, r0, #20
 800d462:	6900      	ldr	r0, [r0, #16]
 800d464:	114b      	asrs	r3, r1, #5
 800d466:	4298      	cmp	r0, r3
 800d468:	b510      	push	{r4, lr}
 800d46a:	db11      	blt.n	800d490 <__any_on+0x32>
 800d46c:	dd0a      	ble.n	800d484 <__any_on+0x26>
 800d46e:	f011 011f 	ands.w	r1, r1, #31
 800d472:	d007      	beq.n	800d484 <__any_on+0x26>
 800d474:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d478:	fa24 f001 	lsr.w	r0, r4, r1
 800d47c:	fa00 f101 	lsl.w	r1, r0, r1
 800d480:	428c      	cmp	r4, r1
 800d482:	d10b      	bne.n	800d49c <__any_on+0x3e>
 800d484:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d488:	4293      	cmp	r3, r2
 800d48a:	d803      	bhi.n	800d494 <__any_on+0x36>
 800d48c:	2000      	movs	r0, #0
 800d48e:	bd10      	pop	{r4, pc}
 800d490:	4603      	mov	r3, r0
 800d492:	e7f7      	b.n	800d484 <__any_on+0x26>
 800d494:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d498:	2900      	cmp	r1, #0
 800d49a:	d0f5      	beq.n	800d488 <__any_on+0x2a>
 800d49c:	2001      	movs	r0, #1
 800d49e:	e7f6      	b.n	800d48e <__any_on+0x30>

0800d4a0 <_malloc_usable_size_r>:
 800d4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4a4:	1f18      	subs	r0, r3, #4
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	bfbc      	itt	lt
 800d4aa:	580b      	ldrlt	r3, [r1, r0]
 800d4ac:	18c0      	addlt	r0, r0, r3
 800d4ae:	4770      	bx	lr

0800d4b0 <__ascii_wctomb>:
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	4608      	mov	r0, r1
 800d4b4:	b141      	cbz	r1, 800d4c8 <__ascii_wctomb+0x18>
 800d4b6:	2aff      	cmp	r2, #255	@ 0xff
 800d4b8:	d904      	bls.n	800d4c4 <__ascii_wctomb+0x14>
 800d4ba:	228a      	movs	r2, #138	@ 0x8a
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c2:	4770      	bx	lr
 800d4c4:	700a      	strb	r2, [r1, #0]
 800d4c6:	2001      	movs	r0, #1
 800d4c8:	4770      	bx	lr

0800d4ca <__ssputs_r>:
 800d4ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4ce:	688e      	ldr	r6, [r1, #8]
 800d4d0:	461f      	mov	r7, r3
 800d4d2:	42be      	cmp	r6, r7
 800d4d4:	680b      	ldr	r3, [r1, #0]
 800d4d6:	4682      	mov	sl, r0
 800d4d8:	460c      	mov	r4, r1
 800d4da:	4690      	mov	r8, r2
 800d4dc:	d82d      	bhi.n	800d53a <__ssputs_r+0x70>
 800d4de:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4e2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4e6:	d026      	beq.n	800d536 <__ssputs_r+0x6c>
 800d4e8:	6965      	ldr	r5, [r4, #20]
 800d4ea:	6909      	ldr	r1, [r1, #16]
 800d4ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4f0:	eba3 0901 	sub.w	r9, r3, r1
 800d4f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4f8:	1c7b      	adds	r3, r7, #1
 800d4fa:	444b      	add	r3, r9
 800d4fc:	106d      	asrs	r5, r5, #1
 800d4fe:	429d      	cmp	r5, r3
 800d500:	bf38      	it	cc
 800d502:	461d      	movcc	r5, r3
 800d504:	0553      	lsls	r3, r2, #21
 800d506:	d527      	bpl.n	800d558 <__ssputs_r+0x8e>
 800d508:	4629      	mov	r1, r5
 800d50a:	f7fd fe25 	bl	800b158 <_malloc_r>
 800d50e:	4606      	mov	r6, r0
 800d510:	b360      	cbz	r0, 800d56c <__ssputs_r+0xa2>
 800d512:	6921      	ldr	r1, [r4, #16]
 800d514:	464a      	mov	r2, r9
 800d516:	f7fe ff64 	bl	800c3e2 <memcpy>
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d524:	81a3      	strh	r3, [r4, #12]
 800d526:	6126      	str	r6, [r4, #16]
 800d528:	6165      	str	r5, [r4, #20]
 800d52a:	444e      	add	r6, r9
 800d52c:	eba5 0509 	sub.w	r5, r5, r9
 800d530:	6026      	str	r6, [r4, #0]
 800d532:	60a5      	str	r5, [r4, #8]
 800d534:	463e      	mov	r6, r7
 800d536:	42be      	cmp	r6, r7
 800d538:	d900      	bls.n	800d53c <__ssputs_r+0x72>
 800d53a:	463e      	mov	r6, r7
 800d53c:	6820      	ldr	r0, [r4, #0]
 800d53e:	4632      	mov	r2, r6
 800d540:	4641      	mov	r1, r8
 800d542:	f000 fee0 	bl	800e306 <memmove>
 800d546:	68a3      	ldr	r3, [r4, #8]
 800d548:	1b9b      	subs	r3, r3, r6
 800d54a:	60a3      	str	r3, [r4, #8]
 800d54c:	6823      	ldr	r3, [r4, #0]
 800d54e:	4433      	add	r3, r6
 800d550:	6023      	str	r3, [r4, #0]
 800d552:	2000      	movs	r0, #0
 800d554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d558:	462a      	mov	r2, r5
 800d55a:	f7fd fe91 	bl	800b280 <_realloc_r>
 800d55e:	4606      	mov	r6, r0
 800d560:	2800      	cmp	r0, #0
 800d562:	d1e0      	bne.n	800d526 <__ssputs_r+0x5c>
 800d564:	6921      	ldr	r1, [r4, #16]
 800d566:	4650      	mov	r0, sl
 800d568:	f7fe ff52 	bl	800c410 <_free_r>
 800d56c:	230c      	movs	r3, #12
 800d56e:	f8ca 3000 	str.w	r3, [sl]
 800d572:	89a3      	ldrh	r3, [r4, #12]
 800d574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d578:	81a3      	strh	r3, [r4, #12]
 800d57a:	f04f 30ff 	mov.w	r0, #4294967295
 800d57e:	e7e9      	b.n	800d554 <__ssputs_r+0x8a>

0800d580 <_svfiprintf_r>:
 800d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d584:	4698      	mov	r8, r3
 800d586:	898b      	ldrh	r3, [r1, #12]
 800d588:	061b      	lsls	r3, r3, #24
 800d58a:	b09d      	sub	sp, #116	@ 0x74
 800d58c:	4607      	mov	r7, r0
 800d58e:	460d      	mov	r5, r1
 800d590:	4614      	mov	r4, r2
 800d592:	d510      	bpl.n	800d5b6 <_svfiprintf_r+0x36>
 800d594:	690b      	ldr	r3, [r1, #16]
 800d596:	b973      	cbnz	r3, 800d5b6 <_svfiprintf_r+0x36>
 800d598:	2140      	movs	r1, #64	@ 0x40
 800d59a:	f7fd fddd 	bl	800b158 <_malloc_r>
 800d59e:	6028      	str	r0, [r5, #0]
 800d5a0:	6128      	str	r0, [r5, #16]
 800d5a2:	b930      	cbnz	r0, 800d5b2 <_svfiprintf_r+0x32>
 800d5a4:	230c      	movs	r3, #12
 800d5a6:	603b      	str	r3, [r7, #0]
 800d5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ac:	b01d      	add	sp, #116	@ 0x74
 800d5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b2:	2340      	movs	r3, #64	@ 0x40
 800d5b4:	616b      	str	r3, [r5, #20]
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5ba:	2320      	movs	r3, #32
 800d5bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5c4:	2330      	movs	r3, #48	@ 0x30
 800d5c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d764 <_svfiprintf_r+0x1e4>
 800d5ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5ce:	f04f 0901 	mov.w	r9, #1
 800d5d2:	4623      	mov	r3, r4
 800d5d4:	469a      	mov	sl, r3
 800d5d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5da:	b10a      	cbz	r2, 800d5e0 <_svfiprintf_r+0x60>
 800d5dc:	2a25      	cmp	r2, #37	@ 0x25
 800d5de:	d1f9      	bne.n	800d5d4 <_svfiprintf_r+0x54>
 800d5e0:	ebba 0b04 	subs.w	fp, sl, r4
 800d5e4:	d00b      	beq.n	800d5fe <_svfiprintf_r+0x7e>
 800d5e6:	465b      	mov	r3, fp
 800d5e8:	4622      	mov	r2, r4
 800d5ea:	4629      	mov	r1, r5
 800d5ec:	4638      	mov	r0, r7
 800d5ee:	f7ff ff6c 	bl	800d4ca <__ssputs_r>
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	f000 80a7 	beq.w	800d746 <_svfiprintf_r+0x1c6>
 800d5f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5fa:	445a      	add	r2, fp
 800d5fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5fe:	f89a 3000 	ldrb.w	r3, [sl]
 800d602:	2b00      	cmp	r3, #0
 800d604:	f000 809f 	beq.w	800d746 <_svfiprintf_r+0x1c6>
 800d608:	2300      	movs	r3, #0
 800d60a:	f04f 32ff 	mov.w	r2, #4294967295
 800d60e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d612:	f10a 0a01 	add.w	sl, sl, #1
 800d616:	9304      	str	r3, [sp, #16]
 800d618:	9307      	str	r3, [sp, #28]
 800d61a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d61e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d620:	4654      	mov	r4, sl
 800d622:	2205      	movs	r2, #5
 800d624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d628:	484e      	ldr	r0, [pc, #312]	@ (800d764 <_svfiprintf_r+0x1e4>)
 800d62a:	f7f2 fde9 	bl	8000200 <memchr>
 800d62e:	9a04      	ldr	r2, [sp, #16]
 800d630:	b9d8      	cbnz	r0, 800d66a <_svfiprintf_r+0xea>
 800d632:	06d0      	lsls	r0, r2, #27
 800d634:	bf44      	itt	mi
 800d636:	2320      	movmi	r3, #32
 800d638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d63c:	0711      	lsls	r1, r2, #28
 800d63e:	bf44      	itt	mi
 800d640:	232b      	movmi	r3, #43	@ 0x2b
 800d642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d646:	f89a 3000 	ldrb.w	r3, [sl]
 800d64a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d64c:	d015      	beq.n	800d67a <_svfiprintf_r+0xfa>
 800d64e:	9a07      	ldr	r2, [sp, #28]
 800d650:	4654      	mov	r4, sl
 800d652:	2000      	movs	r0, #0
 800d654:	f04f 0c0a 	mov.w	ip, #10
 800d658:	4621      	mov	r1, r4
 800d65a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d65e:	3b30      	subs	r3, #48	@ 0x30
 800d660:	2b09      	cmp	r3, #9
 800d662:	d94b      	bls.n	800d6fc <_svfiprintf_r+0x17c>
 800d664:	b1b0      	cbz	r0, 800d694 <_svfiprintf_r+0x114>
 800d666:	9207      	str	r2, [sp, #28]
 800d668:	e014      	b.n	800d694 <_svfiprintf_r+0x114>
 800d66a:	eba0 0308 	sub.w	r3, r0, r8
 800d66e:	fa09 f303 	lsl.w	r3, r9, r3
 800d672:	4313      	orrs	r3, r2
 800d674:	9304      	str	r3, [sp, #16]
 800d676:	46a2      	mov	sl, r4
 800d678:	e7d2      	b.n	800d620 <_svfiprintf_r+0xa0>
 800d67a:	9b03      	ldr	r3, [sp, #12]
 800d67c:	1d19      	adds	r1, r3, #4
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	9103      	str	r1, [sp, #12]
 800d682:	2b00      	cmp	r3, #0
 800d684:	bfbb      	ittet	lt
 800d686:	425b      	neglt	r3, r3
 800d688:	f042 0202 	orrlt.w	r2, r2, #2
 800d68c:	9307      	strge	r3, [sp, #28]
 800d68e:	9307      	strlt	r3, [sp, #28]
 800d690:	bfb8      	it	lt
 800d692:	9204      	strlt	r2, [sp, #16]
 800d694:	7823      	ldrb	r3, [r4, #0]
 800d696:	2b2e      	cmp	r3, #46	@ 0x2e
 800d698:	d10a      	bne.n	800d6b0 <_svfiprintf_r+0x130>
 800d69a:	7863      	ldrb	r3, [r4, #1]
 800d69c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d69e:	d132      	bne.n	800d706 <_svfiprintf_r+0x186>
 800d6a0:	9b03      	ldr	r3, [sp, #12]
 800d6a2:	1d1a      	adds	r2, r3, #4
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	9203      	str	r2, [sp, #12]
 800d6a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6ac:	3402      	adds	r4, #2
 800d6ae:	9305      	str	r3, [sp, #20]
 800d6b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d774 <_svfiprintf_r+0x1f4>
 800d6b4:	7821      	ldrb	r1, [r4, #0]
 800d6b6:	2203      	movs	r2, #3
 800d6b8:	4650      	mov	r0, sl
 800d6ba:	f7f2 fda1 	bl	8000200 <memchr>
 800d6be:	b138      	cbz	r0, 800d6d0 <_svfiprintf_r+0x150>
 800d6c0:	9b04      	ldr	r3, [sp, #16]
 800d6c2:	eba0 000a 	sub.w	r0, r0, sl
 800d6c6:	2240      	movs	r2, #64	@ 0x40
 800d6c8:	4082      	lsls	r2, r0
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	3401      	adds	r4, #1
 800d6ce:	9304      	str	r3, [sp, #16]
 800d6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6d4:	4824      	ldr	r0, [pc, #144]	@ (800d768 <_svfiprintf_r+0x1e8>)
 800d6d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6da:	2206      	movs	r2, #6
 800d6dc:	f7f2 fd90 	bl	8000200 <memchr>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d036      	beq.n	800d752 <_svfiprintf_r+0x1d2>
 800d6e4:	4b21      	ldr	r3, [pc, #132]	@ (800d76c <_svfiprintf_r+0x1ec>)
 800d6e6:	bb1b      	cbnz	r3, 800d730 <_svfiprintf_r+0x1b0>
 800d6e8:	9b03      	ldr	r3, [sp, #12]
 800d6ea:	3307      	adds	r3, #7
 800d6ec:	f023 0307 	bic.w	r3, r3, #7
 800d6f0:	3308      	adds	r3, #8
 800d6f2:	9303      	str	r3, [sp, #12]
 800d6f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6f6:	4433      	add	r3, r6
 800d6f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6fa:	e76a      	b.n	800d5d2 <_svfiprintf_r+0x52>
 800d6fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d700:	460c      	mov	r4, r1
 800d702:	2001      	movs	r0, #1
 800d704:	e7a8      	b.n	800d658 <_svfiprintf_r+0xd8>
 800d706:	2300      	movs	r3, #0
 800d708:	3401      	adds	r4, #1
 800d70a:	9305      	str	r3, [sp, #20]
 800d70c:	4619      	mov	r1, r3
 800d70e:	f04f 0c0a 	mov.w	ip, #10
 800d712:	4620      	mov	r0, r4
 800d714:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d718:	3a30      	subs	r2, #48	@ 0x30
 800d71a:	2a09      	cmp	r2, #9
 800d71c:	d903      	bls.n	800d726 <_svfiprintf_r+0x1a6>
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d0c6      	beq.n	800d6b0 <_svfiprintf_r+0x130>
 800d722:	9105      	str	r1, [sp, #20]
 800d724:	e7c4      	b.n	800d6b0 <_svfiprintf_r+0x130>
 800d726:	fb0c 2101 	mla	r1, ip, r1, r2
 800d72a:	4604      	mov	r4, r0
 800d72c:	2301      	movs	r3, #1
 800d72e:	e7f0      	b.n	800d712 <_svfiprintf_r+0x192>
 800d730:	ab03      	add	r3, sp, #12
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	462a      	mov	r2, r5
 800d736:	4b0e      	ldr	r3, [pc, #56]	@ (800d770 <_svfiprintf_r+0x1f0>)
 800d738:	a904      	add	r1, sp, #16
 800d73a:	4638      	mov	r0, r7
 800d73c:	f3af 8000 	nop.w
 800d740:	1c42      	adds	r2, r0, #1
 800d742:	4606      	mov	r6, r0
 800d744:	d1d6      	bne.n	800d6f4 <_svfiprintf_r+0x174>
 800d746:	89ab      	ldrh	r3, [r5, #12]
 800d748:	065b      	lsls	r3, r3, #25
 800d74a:	f53f af2d 	bmi.w	800d5a8 <_svfiprintf_r+0x28>
 800d74e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d750:	e72c      	b.n	800d5ac <_svfiprintf_r+0x2c>
 800d752:	ab03      	add	r3, sp, #12
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	462a      	mov	r2, r5
 800d758:	4b05      	ldr	r3, [pc, #20]	@ (800d770 <_svfiprintf_r+0x1f0>)
 800d75a:	a904      	add	r1, sp, #16
 800d75c:	4638      	mov	r0, r7
 800d75e:	f000 fa45 	bl	800dbec <_printf_i>
 800d762:	e7ed      	b.n	800d740 <_svfiprintf_r+0x1c0>
 800d764:	08025428 	.word	0x08025428
 800d768:	08025432 	.word	0x08025432
 800d76c:	00000000 	.word	0x00000000
 800d770:	0800d4cb 	.word	0x0800d4cb
 800d774:	0802542e 	.word	0x0802542e

0800d778 <_sungetc_r>:
 800d778:	b538      	push	{r3, r4, r5, lr}
 800d77a:	1c4b      	adds	r3, r1, #1
 800d77c:	4614      	mov	r4, r2
 800d77e:	d103      	bne.n	800d788 <_sungetc_r+0x10>
 800d780:	f04f 35ff 	mov.w	r5, #4294967295
 800d784:	4628      	mov	r0, r5
 800d786:	bd38      	pop	{r3, r4, r5, pc}
 800d788:	8993      	ldrh	r3, [r2, #12]
 800d78a:	f023 0320 	bic.w	r3, r3, #32
 800d78e:	8193      	strh	r3, [r2, #12]
 800d790:	6853      	ldr	r3, [r2, #4]
 800d792:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d794:	b2cd      	uxtb	r5, r1
 800d796:	b18a      	cbz	r2, 800d7bc <_sungetc_r+0x44>
 800d798:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d79a:	429a      	cmp	r2, r3
 800d79c:	dd08      	ble.n	800d7b0 <_sungetc_r+0x38>
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	1e5a      	subs	r2, r3, #1
 800d7a2:	6022      	str	r2, [r4, #0]
 800d7a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d7a8:	6863      	ldr	r3, [r4, #4]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	6063      	str	r3, [r4, #4]
 800d7ae:	e7e9      	b.n	800d784 <_sungetc_r+0xc>
 800d7b0:	4621      	mov	r1, r4
 800d7b2:	f000 fd6e 	bl	800e292 <__submore>
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	d0f1      	beq.n	800d79e <_sungetc_r+0x26>
 800d7ba:	e7e1      	b.n	800d780 <_sungetc_r+0x8>
 800d7bc:	6921      	ldr	r1, [r4, #16]
 800d7be:	6822      	ldr	r2, [r4, #0]
 800d7c0:	b141      	cbz	r1, 800d7d4 <_sungetc_r+0x5c>
 800d7c2:	4291      	cmp	r1, r2
 800d7c4:	d206      	bcs.n	800d7d4 <_sungetc_r+0x5c>
 800d7c6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800d7ca:	42a9      	cmp	r1, r5
 800d7cc:	d102      	bne.n	800d7d4 <_sungetc_r+0x5c>
 800d7ce:	3a01      	subs	r2, #1
 800d7d0:	6022      	str	r2, [r4, #0]
 800d7d2:	e7ea      	b.n	800d7aa <_sungetc_r+0x32>
 800d7d4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800d7d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7de:	2303      	movs	r3, #3
 800d7e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d7e2:	4623      	mov	r3, r4
 800d7e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d7e8:	6023      	str	r3, [r4, #0]
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e7de      	b.n	800d7ac <_sungetc_r+0x34>

0800d7ee <__ssrefill_r>:
 800d7ee:	b510      	push	{r4, lr}
 800d7f0:	460c      	mov	r4, r1
 800d7f2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d7f4:	b169      	cbz	r1, 800d812 <__ssrefill_r+0x24>
 800d7f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7fa:	4299      	cmp	r1, r3
 800d7fc:	d001      	beq.n	800d802 <__ssrefill_r+0x14>
 800d7fe:	f7fe fe07 	bl	800c410 <_free_r>
 800d802:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d804:	6063      	str	r3, [r4, #4]
 800d806:	2000      	movs	r0, #0
 800d808:	6360      	str	r0, [r4, #52]	@ 0x34
 800d80a:	b113      	cbz	r3, 800d812 <__ssrefill_r+0x24>
 800d80c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d80e:	6023      	str	r3, [r4, #0]
 800d810:	bd10      	pop	{r4, pc}
 800d812:	6923      	ldr	r3, [r4, #16]
 800d814:	6023      	str	r3, [r4, #0]
 800d816:	2300      	movs	r3, #0
 800d818:	6063      	str	r3, [r4, #4]
 800d81a:	89a3      	ldrh	r3, [r4, #12]
 800d81c:	f043 0320 	orr.w	r3, r3, #32
 800d820:	81a3      	strh	r3, [r4, #12]
 800d822:	f04f 30ff 	mov.w	r0, #4294967295
 800d826:	e7f3      	b.n	800d810 <__ssrefill_r+0x22>

0800d828 <__ssvfiscanf_r>:
 800d828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d82c:	460c      	mov	r4, r1
 800d82e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d832:	2100      	movs	r1, #0
 800d834:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d838:	49a5      	ldr	r1, [pc, #660]	@ (800dad0 <__ssvfiscanf_r+0x2a8>)
 800d83a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d83c:	f10d 0804 	add.w	r8, sp, #4
 800d840:	49a4      	ldr	r1, [pc, #656]	@ (800dad4 <__ssvfiscanf_r+0x2ac>)
 800d842:	4fa5      	ldr	r7, [pc, #660]	@ (800dad8 <__ssvfiscanf_r+0x2b0>)
 800d844:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d848:	4606      	mov	r6, r0
 800d84a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	7813      	ldrb	r3, [r2, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	f000 8158 	beq.w	800db06 <__ssvfiscanf_r+0x2de>
 800d856:	5cf9      	ldrb	r1, [r7, r3]
 800d858:	f011 0108 	ands.w	r1, r1, #8
 800d85c:	f102 0501 	add.w	r5, r2, #1
 800d860:	d019      	beq.n	800d896 <__ssvfiscanf_r+0x6e>
 800d862:	6863      	ldr	r3, [r4, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	dd0f      	ble.n	800d888 <__ssvfiscanf_r+0x60>
 800d868:	6823      	ldr	r3, [r4, #0]
 800d86a:	781a      	ldrb	r2, [r3, #0]
 800d86c:	5cba      	ldrb	r2, [r7, r2]
 800d86e:	0712      	lsls	r2, r2, #28
 800d870:	d401      	bmi.n	800d876 <__ssvfiscanf_r+0x4e>
 800d872:	462a      	mov	r2, r5
 800d874:	e7eb      	b.n	800d84e <__ssvfiscanf_r+0x26>
 800d876:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d878:	3201      	adds	r2, #1
 800d87a:	9245      	str	r2, [sp, #276]	@ 0x114
 800d87c:	6862      	ldr	r2, [r4, #4]
 800d87e:	3301      	adds	r3, #1
 800d880:	3a01      	subs	r2, #1
 800d882:	6062      	str	r2, [r4, #4]
 800d884:	6023      	str	r3, [r4, #0]
 800d886:	e7ec      	b.n	800d862 <__ssvfiscanf_r+0x3a>
 800d888:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d88a:	4621      	mov	r1, r4
 800d88c:	4630      	mov	r0, r6
 800d88e:	4798      	blx	r3
 800d890:	2800      	cmp	r0, #0
 800d892:	d0e9      	beq.n	800d868 <__ssvfiscanf_r+0x40>
 800d894:	e7ed      	b.n	800d872 <__ssvfiscanf_r+0x4a>
 800d896:	2b25      	cmp	r3, #37	@ 0x25
 800d898:	d012      	beq.n	800d8c0 <__ssvfiscanf_r+0x98>
 800d89a:	4699      	mov	r9, r3
 800d89c:	6863      	ldr	r3, [r4, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f340 8093 	ble.w	800d9ca <__ssvfiscanf_r+0x1a2>
 800d8a4:	6822      	ldr	r2, [r4, #0]
 800d8a6:	7813      	ldrb	r3, [r2, #0]
 800d8a8:	454b      	cmp	r3, r9
 800d8aa:	f040 812c 	bne.w	800db06 <__ssvfiscanf_r+0x2de>
 800d8ae:	6863      	ldr	r3, [r4, #4]
 800d8b0:	3b01      	subs	r3, #1
 800d8b2:	6063      	str	r3, [r4, #4]
 800d8b4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d8b6:	3201      	adds	r2, #1
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	6022      	str	r2, [r4, #0]
 800d8bc:	9345      	str	r3, [sp, #276]	@ 0x114
 800d8be:	e7d8      	b.n	800d872 <__ssvfiscanf_r+0x4a>
 800d8c0:	9141      	str	r1, [sp, #260]	@ 0x104
 800d8c2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d8c4:	7853      	ldrb	r3, [r2, #1]
 800d8c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8c8:	bf02      	ittt	eq
 800d8ca:	2310      	moveq	r3, #16
 800d8cc:	1c95      	addeq	r5, r2, #2
 800d8ce:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d8d0:	220a      	movs	r2, #10
 800d8d2:	46a9      	mov	r9, r5
 800d8d4:	f819 1b01 	ldrb.w	r1, [r9], #1
 800d8d8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d8dc:	2b09      	cmp	r3, #9
 800d8de:	d91e      	bls.n	800d91e <__ssvfiscanf_r+0xf6>
 800d8e0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800dadc <__ssvfiscanf_r+0x2b4>
 800d8e4:	2203      	movs	r2, #3
 800d8e6:	4650      	mov	r0, sl
 800d8e8:	f7f2 fc8a 	bl	8000200 <memchr>
 800d8ec:	b138      	cbz	r0, 800d8fe <__ssvfiscanf_r+0xd6>
 800d8ee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d8f0:	eba0 000a 	sub.w	r0, r0, sl
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	4083      	lsls	r3, r0
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	9341      	str	r3, [sp, #260]	@ 0x104
 800d8fc:	464d      	mov	r5, r9
 800d8fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d902:	2b78      	cmp	r3, #120	@ 0x78
 800d904:	d806      	bhi.n	800d914 <__ssvfiscanf_r+0xec>
 800d906:	2b57      	cmp	r3, #87	@ 0x57
 800d908:	d810      	bhi.n	800d92c <__ssvfiscanf_r+0x104>
 800d90a:	2b25      	cmp	r3, #37	@ 0x25
 800d90c:	d0c5      	beq.n	800d89a <__ssvfiscanf_r+0x72>
 800d90e:	d857      	bhi.n	800d9c0 <__ssvfiscanf_r+0x198>
 800d910:	2b00      	cmp	r3, #0
 800d912:	d065      	beq.n	800d9e0 <__ssvfiscanf_r+0x1b8>
 800d914:	2303      	movs	r3, #3
 800d916:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d918:	230a      	movs	r3, #10
 800d91a:	9342      	str	r3, [sp, #264]	@ 0x108
 800d91c:	e078      	b.n	800da10 <__ssvfiscanf_r+0x1e8>
 800d91e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d920:	fb02 1103 	mla	r1, r2, r3, r1
 800d924:	3930      	subs	r1, #48	@ 0x30
 800d926:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d928:	464d      	mov	r5, r9
 800d92a:	e7d2      	b.n	800d8d2 <__ssvfiscanf_r+0xaa>
 800d92c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d930:	2a20      	cmp	r2, #32
 800d932:	d8ef      	bhi.n	800d914 <__ssvfiscanf_r+0xec>
 800d934:	a101      	add	r1, pc, #4	@ (adr r1, 800d93c <__ssvfiscanf_r+0x114>)
 800d936:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d93a:	bf00      	nop
 800d93c:	0800d9ef 	.word	0x0800d9ef
 800d940:	0800d915 	.word	0x0800d915
 800d944:	0800d915 	.word	0x0800d915
 800d948:	0800da49 	.word	0x0800da49
 800d94c:	0800d915 	.word	0x0800d915
 800d950:	0800d915 	.word	0x0800d915
 800d954:	0800d915 	.word	0x0800d915
 800d958:	0800d915 	.word	0x0800d915
 800d95c:	0800d915 	.word	0x0800d915
 800d960:	0800d915 	.word	0x0800d915
 800d964:	0800d915 	.word	0x0800d915
 800d968:	0800da5f 	.word	0x0800da5f
 800d96c:	0800da45 	.word	0x0800da45
 800d970:	0800d9c7 	.word	0x0800d9c7
 800d974:	0800d9c7 	.word	0x0800d9c7
 800d978:	0800d9c7 	.word	0x0800d9c7
 800d97c:	0800d915 	.word	0x0800d915
 800d980:	0800da01 	.word	0x0800da01
 800d984:	0800d915 	.word	0x0800d915
 800d988:	0800d915 	.word	0x0800d915
 800d98c:	0800d915 	.word	0x0800d915
 800d990:	0800d915 	.word	0x0800d915
 800d994:	0800da6f 	.word	0x0800da6f
 800d998:	0800da09 	.word	0x0800da09
 800d99c:	0800d9e7 	.word	0x0800d9e7
 800d9a0:	0800d915 	.word	0x0800d915
 800d9a4:	0800d915 	.word	0x0800d915
 800d9a8:	0800da6b 	.word	0x0800da6b
 800d9ac:	0800d915 	.word	0x0800d915
 800d9b0:	0800da45 	.word	0x0800da45
 800d9b4:	0800d915 	.word	0x0800d915
 800d9b8:	0800d915 	.word	0x0800d915
 800d9bc:	0800d9ef 	.word	0x0800d9ef
 800d9c0:	3b45      	subs	r3, #69	@ 0x45
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	d8a6      	bhi.n	800d914 <__ssvfiscanf_r+0xec>
 800d9c6:	2305      	movs	r3, #5
 800d9c8:	e021      	b.n	800da0e <__ssvfiscanf_r+0x1e6>
 800d9ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d9cc:	4621      	mov	r1, r4
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	4798      	blx	r3
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	f43f af66 	beq.w	800d8a4 <__ssvfiscanf_r+0x7c>
 800d9d8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	f040 808b 	bne.w	800daf6 <__ssvfiscanf_r+0x2ce>
 800d9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e4:	e08b      	b.n	800dafe <__ssvfiscanf_r+0x2d6>
 800d9e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d9e8:	f042 0220 	orr.w	r2, r2, #32
 800d9ec:	9241      	str	r2, [sp, #260]	@ 0x104
 800d9ee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d9f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d9f4:	9241      	str	r2, [sp, #260]	@ 0x104
 800d9f6:	2210      	movs	r2, #16
 800d9f8:	2b6e      	cmp	r3, #110	@ 0x6e
 800d9fa:	9242      	str	r2, [sp, #264]	@ 0x108
 800d9fc:	d902      	bls.n	800da04 <__ssvfiscanf_r+0x1dc>
 800d9fe:	e005      	b.n	800da0c <__ssvfiscanf_r+0x1e4>
 800da00:	2300      	movs	r3, #0
 800da02:	9342      	str	r3, [sp, #264]	@ 0x108
 800da04:	2303      	movs	r3, #3
 800da06:	e002      	b.n	800da0e <__ssvfiscanf_r+0x1e6>
 800da08:	2308      	movs	r3, #8
 800da0a:	9342      	str	r3, [sp, #264]	@ 0x108
 800da0c:	2304      	movs	r3, #4
 800da0e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800da10:	6863      	ldr	r3, [r4, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	dd39      	ble.n	800da8a <__ssvfiscanf_r+0x262>
 800da16:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da18:	0659      	lsls	r1, r3, #25
 800da1a:	d404      	bmi.n	800da26 <__ssvfiscanf_r+0x1fe>
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	781a      	ldrb	r2, [r3, #0]
 800da20:	5cba      	ldrb	r2, [r7, r2]
 800da22:	0712      	lsls	r2, r2, #28
 800da24:	d438      	bmi.n	800da98 <__ssvfiscanf_r+0x270>
 800da26:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800da28:	2b02      	cmp	r3, #2
 800da2a:	dc47      	bgt.n	800dabc <__ssvfiscanf_r+0x294>
 800da2c:	466b      	mov	r3, sp
 800da2e:	4622      	mov	r2, r4
 800da30:	a941      	add	r1, sp, #260	@ 0x104
 800da32:	4630      	mov	r0, r6
 800da34:	f000 f9fa 	bl	800de2c <_scanf_chars>
 800da38:	2801      	cmp	r0, #1
 800da3a:	d064      	beq.n	800db06 <__ssvfiscanf_r+0x2de>
 800da3c:	2802      	cmp	r0, #2
 800da3e:	f47f af18 	bne.w	800d872 <__ssvfiscanf_r+0x4a>
 800da42:	e7c9      	b.n	800d9d8 <__ssvfiscanf_r+0x1b0>
 800da44:	220a      	movs	r2, #10
 800da46:	e7d7      	b.n	800d9f8 <__ssvfiscanf_r+0x1d0>
 800da48:	4629      	mov	r1, r5
 800da4a:	4640      	mov	r0, r8
 800da4c:	f000 fbe8 	bl	800e220 <__sccl>
 800da50:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da56:	9341      	str	r3, [sp, #260]	@ 0x104
 800da58:	4605      	mov	r5, r0
 800da5a:	2301      	movs	r3, #1
 800da5c:	e7d7      	b.n	800da0e <__ssvfiscanf_r+0x1e6>
 800da5e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da64:	9341      	str	r3, [sp, #260]	@ 0x104
 800da66:	2300      	movs	r3, #0
 800da68:	e7d1      	b.n	800da0e <__ssvfiscanf_r+0x1e6>
 800da6a:	2302      	movs	r3, #2
 800da6c:	e7cf      	b.n	800da0e <__ssvfiscanf_r+0x1e6>
 800da6e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800da70:	06c3      	lsls	r3, r0, #27
 800da72:	f53f aefe 	bmi.w	800d872 <__ssvfiscanf_r+0x4a>
 800da76:	9b00      	ldr	r3, [sp, #0]
 800da78:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800da7a:	1d19      	adds	r1, r3, #4
 800da7c:	9100      	str	r1, [sp, #0]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	07c0      	lsls	r0, r0, #31
 800da82:	bf4c      	ite	mi
 800da84:	801a      	strhmi	r2, [r3, #0]
 800da86:	601a      	strpl	r2, [r3, #0]
 800da88:	e6f3      	b.n	800d872 <__ssvfiscanf_r+0x4a>
 800da8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800da8c:	4621      	mov	r1, r4
 800da8e:	4630      	mov	r0, r6
 800da90:	4798      	blx	r3
 800da92:	2800      	cmp	r0, #0
 800da94:	d0bf      	beq.n	800da16 <__ssvfiscanf_r+0x1ee>
 800da96:	e79f      	b.n	800d9d8 <__ssvfiscanf_r+0x1b0>
 800da98:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800da9a:	3201      	adds	r2, #1
 800da9c:	9245      	str	r2, [sp, #276]	@ 0x114
 800da9e:	6862      	ldr	r2, [r4, #4]
 800daa0:	3a01      	subs	r2, #1
 800daa2:	2a00      	cmp	r2, #0
 800daa4:	6062      	str	r2, [r4, #4]
 800daa6:	dd02      	ble.n	800daae <__ssvfiscanf_r+0x286>
 800daa8:	3301      	adds	r3, #1
 800daaa:	6023      	str	r3, [r4, #0]
 800daac:	e7b6      	b.n	800da1c <__ssvfiscanf_r+0x1f4>
 800daae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dab0:	4621      	mov	r1, r4
 800dab2:	4630      	mov	r0, r6
 800dab4:	4798      	blx	r3
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d0b0      	beq.n	800da1c <__ssvfiscanf_r+0x1f4>
 800daba:	e78d      	b.n	800d9d8 <__ssvfiscanf_r+0x1b0>
 800dabc:	2b04      	cmp	r3, #4
 800dabe:	dc0f      	bgt.n	800dae0 <__ssvfiscanf_r+0x2b8>
 800dac0:	466b      	mov	r3, sp
 800dac2:	4622      	mov	r2, r4
 800dac4:	a941      	add	r1, sp, #260	@ 0x104
 800dac6:	4630      	mov	r0, r6
 800dac8:	f000 fa0a 	bl	800dee0 <_scanf_i>
 800dacc:	e7b4      	b.n	800da38 <__ssvfiscanf_r+0x210>
 800dace:	bf00      	nop
 800dad0:	0800d779 	.word	0x0800d779
 800dad4:	0800d7ef 	.word	0x0800d7ef
 800dad8:	08025141 	.word	0x08025141
 800dadc:	0802542e 	.word	0x0802542e
 800dae0:	4b0a      	ldr	r3, [pc, #40]	@ (800db0c <__ssvfiscanf_r+0x2e4>)
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	f43f aec5 	beq.w	800d872 <__ssvfiscanf_r+0x4a>
 800dae8:	466b      	mov	r3, sp
 800daea:	4622      	mov	r2, r4
 800daec:	a941      	add	r1, sp, #260	@ 0x104
 800daee:	4630      	mov	r0, r6
 800daf0:	f3af 8000 	nop.w
 800daf4:	e7a0      	b.n	800da38 <__ssvfiscanf_r+0x210>
 800daf6:	89a3      	ldrh	r3, [r4, #12]
 800daf8:	065b      	lsls	r3, r3, #25
 800dafa:	f53f af71 	bmi.w	800d9e0 <__ssvfiscanf_r+0x1b8>
 800dafe:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800db02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db06:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800db08:	e7f9      	b.n	800dafe <__ssvfiscanf_r+0x2d6>
 800db0a:	bf00      	nop
 800db0c:	00000000 	.word	0x00000000

0800db10 <_printf_common>:
 800db10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db14:	4616      	mov	r6, r2
 800db16:	4698      	mov	r8, r3
 800db18:	688a      	ldr	r2, [r1, #8]
 800db1a:	690b      	ldr	r3, [r1, #16]
 800db1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db20:	4293      	cmp	r3, r2
 800db22:	bfb8      	it	lt
 800db24:	4613      	movlt	r3, r2
 800db26:	6033      	str	r3, [r6, #0]
 800db28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800db2c:	4607      	mov	r7, r0
 800db2e:	460c      	mov	r4, r1
 800db30:	b10a      	cbz	r2, 800db36 <_printf_common+0x26>
 800db32:	3301      	adds	r3, #1
 800db34:	6033      	str	r3, [r6, #0]
 800db36:	6823      	ldr	r3, [r4, #0]
 800db38:	0699      	lsls	r1, r3, #26
 800db3a:	bf42      	ittt	mi
 800db3c:	6833      	ldrmi	r3, [r6, #0]
 800db3e:	3302      	addmi	r3, #2
 800db40:	6033      	strmi	r3, [r6, #0]
 800db42:	6825      	ldr	r5, [r4, #0]
 800db44:	f015 0506 	ands.w	r5, r5, #6
 800db48:	d106      	bne.n	800db58 <_printf_common+0x48>
 800db4a:	f104 0a19 	add.w	sl, r4, #25
 800db4e:	68e3      	ldr	r3, [r4, #12]
 800db50:	6832      	ldr	r2, [r6, #0]
 800db52:	1a9b      	subs	r3, r3, r2
 800db54:	42ab      	cmp	r3, r5
 800db56:	dc26      	bgt.n	800dba6 <_printf_common+0x96>
 800db58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db5c:	6822      	ldr	r2, [r4, #0]
 800db5e:	3b00      	subs	r3, #0
 800db60:	bf18      	it	ne
 800db62:	2301      	movne	r3, #1
 800db64:	0692      	lsls	r2, r2, #26
 800db66:	d42b      	bmi.n	800dbc0 <_printf_common+0xb0>
 800db68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db6c:	4641      	mov	r1, r8
 800db6e:	4638      	mov	r0, r7
 800db70:	47c8      	blx	r9
 800db72:	3001      	adds	r0, #1
 800db74:	d01e      	beq.n	800dbb4 <_printf_common+0xa4>
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	6922      	ldr	r2, [r4, #16]
 800db7a:	f003 0306 	and.w	r3, r3, #6
 800db7e:	2b04      	cmp	r3, #4
 800db80:	bf02      	ittt	eq
 800db82:	68e5      	ldreq	r5, [r4, #12]
 800db84:	6833      	ldreq	r3, [r6, #0]
 800db86:	1aed      	subeq	r5, r5, r3
 800db88:	68a3      	ldr	r3, [r4, #8]
 800db8a:	bf0c      	ite	eq
 800db8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db90:	2500      	movne	r5, #0
 800db92:	4293      	cmp	r3, r2
 800db94:	bfc4      	itt	gt
 800db96:	1a9b      	subgt	r3, r3, r2
 800db98:	18ed      	addgt	r5, r5, r3
 800db9a:	2600      	movs	r6, #0
 800db9c:	341a      	adds	r4, #26
 800db9e:	42b5      	cmp	r5, r6
 800dba0:	d11a      	bne.n	800dbd8 <_printf_common+0xc8>
 800dba2:	2000      	movs	r0, #0
 800dba4:	e008      	b.n	800dbb8 <_printf_common+0xa8>
 800dba6:	2301      	movs	r3, #1
 800dba8:	4652      	mov	r2, sl
 800dbaa:	4641      	mov	r1, r8
 800dbac:	4638      	mov	r0, r7
 800dbae:	47c8      	blx	r9
 800dbb0:	3001      	adds	r0, #1
 800dbb2:	d103      	bne.n	800dbbc <_printf_common+0xac>
 800dbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbbc:	3501      	adds	r5, #1
 800dbbe:	e7c6      	b.n	800db4e <_printf_common+0x3e>
 800dbc0:	18e1      	adds	r1, r4, r3
 800dbc2:	1c5a      	adds	r2, r3, #1
 800dbc4:	2030      	movs	r0, #48	@ 0x30
 800dbc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dbca:	4422      	add	r2, r4
 800dbcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dbd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dbd4:	3302      	adds	r3, #2
 800dbd6:	e7c7      	b.n	800db68 <_printf_common+0x58>
 800dbd8:	2301      	movs	r3, #1
 800dbda:	4622      	mov	r2, r4
 800dbdc:	4641      	mov	r1, r8
 800dbde:	4638      	mov	r0, r7
 800dbe0:	47c8      	blx	r9
 800dbe2:	3001      	adds	r0, #1
 800dbe4:	d0e6      	beq.n	800dbb4 <_printf_common+0xa4>
 800dbe6:	3601      	adds	r6, #1
 800dbe8:	e7d9      	b.n	800db9e <_printf_common+0x8e>
	...

0800dbec <_printf_i>:
 800dbec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbf0:	7e0f      	ldrb	r7, [r1, #24]
 800dbf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dbf4:	2f78      	cmp	r7, #120	@ 0x78
 800dbf6:	4691      	mov	r9, r2
 800dbf8:	4680      	mov	r8, r0
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	469a      	mov	sl, r3
 800dbfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc02:	d807      	bhi.n	800dc14 <_printf_i+0x28>
 800dc04:	2f62      	cmp	r7, #98	@ 0x62
 800dc06:	d80a      	bhi.n	800dc1e <_printf_i+0x32>
 800dc08:	2f00      	cmp	r7, #0
 800dc0a:	f000 80d2 	beq.w	800ddb2 <_printf_i+0x1c6>
 800dc0e:	2f58      	cmp	r7, #88	@ 0x58
 800dc10:	f000 80b9 	beq.w	800dd86 <_printf_i+0x19a>
 800dc14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dc1c:	e03a      	b.n	800dc94 <_printf_i+0xa8>
 800dc1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dc22:	2b15      	cmp	r3, #21
 800dc24:	d8f6      	bhi.n	800dc14 <_printf_i+0x28>
 800dc26:	a101      	add	r1, pc, #4	@ (adr r1, 800dc2c <_printf_i+0x40>)
 800dc28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc2c:	0800dc85 	.word	0x0800dc85
 800dc30:	0800dc99 	.word	0x0800dc99
 800dc34:	0800dc15 	.word	0x0800dc15
 800dc38:	0800dc15 	.word	0x0800dc15
 800dc3c:	0800dc15 	.word	0x0800dc15
 800dc40:	0800dc15 	.word	0x0800dc15
 800dc44:	0800dc99 	.word	0x0800dc99
 800dc48:	0800dc15 	.word	0x0800dc15
 800dc4c:	0800dc15 	.word	0x0800dc15
 800dc50:	0800dc15 	.word	0x0800dc15
 800dc54:	0800dc15 	.word	0x0800dc15
 800dc58:	0800dd99 	.word	0x0800dd99
 800dc5c:	0800dcc3 	.word	0x0800dcc3
 800dc60:	0800dd53 	.word	0x0800dd53
 800dc64:	0800dc15 	.word	0x0800dc15
 800dc68:	0800dc15 	.word	0x0800dc15
 800dc6c:	0800ddbb 	.word	0x0800ddbb
 800dc70:	0800dc15 	.word	0x0800dc15
 800dc74:	0800dcc3 	.word	0x0800dcc3
 800dc78:	0800dc15 	.word	0x0800dc15
 800dc7c:	0800dc15 	.word	0x0800dc15
 800dc80:	0800dd5b 	.word	0x0800dd5b
 800dc84:	6833      	ldr	r3, [r6, #0]
 800dc86:	1d1a      	adds	r2, r3, #4
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	6032      	str	r2, [r6, #0]
 800dc8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc94:	2301      	movs	r3, #1
 800dc96:	e09d      	b.n	800ddd4 <_printf_i+0x1e8>
 800dc98:	6833      	ldr	r3, [r6, #0]
 800dc9a:	6820      	ldr	r0, [r4, #0]
 800dc9c:	1d19      	adds	r1, r3, #4
 800dc9e:	6031      	str	r1, [r6, #0]
 800dca0:	0606      	lsls	r6, r0, #24
 800dca2:	d501      	bpl.n	800dca8 <_printf_i+0xbc>
 800dca4:	681d      	ldr	r5, [r3, #0]
 800dca6:	e003      	b.n	800dcb0 <_printf_i+0xc4>
 800dca8:	0645      	lsls	r5, r0, #25
 800dcaa:	d5fb      	bpl.n	800dca4 <_printf_i+0xb8>
 800dcac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dcb0:	2d00      	cmp	r5, #0
 800dcb2:	da03      	bge.n	800dcbc <_printf_i+0xd0>
 800dcb4:	232d      	movs	r3, #45	@ 0x2d
 800dcb6:	426d      	negs	r5, r5
 800dcb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcbc:	4859      	ldr	r0, [pc, #356]	@ (800de24 <_printf_i+0x238>)
 800dcbe:	230a      	movs	r3, #10
 800dcc0:	e011      	b.n	800dce6 <_printf_i+0xfa>
 800dcc2:	6821      	ldr	r1, [r4, #0]
 800dcc4:	6833      	ldr	r3, [r6, #0]
 800dcc6:	0608      	lsls	r0, r1, #24
 800dcc8:	f853 5b04 	ldr.w	r5, [r3], #4
 800dccc:	d402      	bmi.n	800dcd4 <_printf_i+0xe8>
 800dcce:	0649      	lsls	r1, r1, #25
 800dcd0:	bf48      	it	mi
 800dcd2:	b2ad      	uxthmi	r5, r5
 800dcd4:	2f6f      	cmp	r7, #111	@ 0x6f
 800dcd6:	4853      	ldr	r0, [pc, #332]	@ (800de24 <_printf_i+0x238>)
 800dcd8:	6033      	str	r3, [r6, #0]
 800dcda:	bf14      	ite	ne
 800dcdc:	230a      	movne	r3, #10
 800dcde:	2308      	moveq	r3, #8
 800dce0:	2100      	movs	r1, #0
 800dce2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dce6:	6866      	ldr	r6, [r4, #4]
 800dce8:	60a6      	str	r6, [r4, #8]
 800dcea:	2e00      	cmp	r6, #0
 800dcec:	bfa2      	ittt	ge
 800dcee:	6821      	ldrge	r1, [r4, #0]
 800dcf0:	f021 0104 	bicge.w	r1, r1, #4
 800dcf4:	6021      	strge	r1, [r4, #0]
 800dcf6:	b90d      	cbnz	r5, 800dcfc <_printf_i+0x110>
 800dcf8:	2e00      	cmp	r6, #0
 800dcfa:	d04b      	beq.n	800dd94 <_printf_i+0x1a8>
 800dcfc:	4616      	mov	r6, r2
 800dcfe:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd02:	fb03 5711 	mls	r7, r3, r1, r5
 800dd06:	5dc7      	ldrb	r7, [r0, r7]
 800dd08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd0c:	462f      	mov	r7, r5
 800dd0e:	42bb      	cmp	r3, r7
 800dd10:	460d      	mov	r5, r1
 800dd12:	d9f4      	bls.n	800dcfe <_printf_i+0x112>
 800dd14:	2b08      	cmp	r3, #8
 800dd16:	d10b      	bne.n	800dd30 <_printf_i+0x144>
 800dd18:	6823      	ldr	r3, [r4, #0]
 800dd1a:	07df      	lsls	r7, r3, #31
 800dd1c:	d508      	bpl.n	800dd30 <_printf_i+0x144>
 800dd1e:	6923      	ldr	r3, [r4, #16]
 800dd20:	6861      	ldr	r1, [r4, #4]
 800dd22:	4299      	cmp	r1, r3
 800dd24:	bfde      	ittt	le
 800dd26:	2330      	movle	r3, #48	@ 0x30
 800dd28:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dd30:	1b92      	subs	r2, r2, r6
 800dd32:	6122      	str	r2, [r4, #16]
 800dd34:	f8cd a000 	str.w	sl, [sp]
 800dd38:	464b      	mov	r3, r9
 800dd3a:	aa03      	add	r2, sp, #12
 800dd3c:	4621      	mov	r1, r4
 800dd3e:	4640      	mov	r0, r8
 800dd40:	f7ff fee6 	bl	800db10 <_printf_common>
 800dd44:	3001      	adds	r0, #1
 800dd46:	d14a      	bne.n	800ddde <_printf_i+0x1f2>
 800dd48:	f04f 30ff 	mov.w	r0, #4294967295
 800dd4c:	b004      	add	sp, #16
 800dd4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	f043 0320 	orr.w	r3, r3, #32
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	4833      	ldr	r0, [pc, #204]	@ (800de28 <_printf_i+0x23c>)
 800dd5c:	2778      	movs	r7, #120	@ 0x78
 800dd5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd62:	6823      	ldr	r3, [r4, #0]
 800dd64:	6831      	ldr	r1, [r6, #0]
 800dd66:	061f      	lsls	r7, r3, #24
 800dd68:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd6c:	d402      	bmi.n	800dd74 <_printf_i+0x188>
 800dd6e:	065f      	lsls	r7, r3, #25
 800dd70:	bf48      	it	mi
 800dd72:	b2ad      	uxthmi	r5, r5
 800dd74:	6031      	str	r1, [r6, #0]
 800dd76:	07d9      	lsls	r1, r3, #31
 800dd78:	bf44      	itt	mi
 800dd7a:	f043 0320 	orrmi.w	r3, r3, #32
 800dd7e:	6023      	strmi	r3, [r4, #0]
 800dd80:	b11d      	cbz	r5, 800dd8a <_printf_i+0x19e>
 800dd82:	2310      	movs	r3, #16
 800dd84:	e7ac      	b.n	800dce0 <_printf_i+0xf4>
 800dd86:	4827      	ldr	r0, [pc, #156]	@ (800de24 <_printf_i+0x238>)
 800dd88:	e7e9      	b.n	800dd5e <_printf_i+0x172>
 800dd8a:	6823      	ldr	r3, [r4, #0]
 800dd8c:	f023 0320 	bic.w	r3, r3, #32
 800dd90:	6023      	str	r3, [r4, #0]
 800dd92:	e7f6      	b.n	800dd82 <_printf_i+0x196>
 800dd94:	4616      	mov	r6, r2
 800dd96:	e7bd      	b.n	800dd14 <_printf_i+0x128>
 800dd98:	6833      	ldr	r3, [r6, #0]
 800dd9a:	6825      	ldr	r5, [r4, #0]
 800dd9c:	6961      	ldr	r1, [r4, #20]
 800dd9e:	1d18      	adds	r0, r3, #4
 800dda0:	6030      	str	r0, [r6, #0]
 800dda2:	062e      	lsls	r6, r5, #24
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	d501      	bpl.n	800ddac <_printf_i+0x1c0>
 800dda8:	6019      	str	r1, [r3, #0]
 800ddaa:	e002      	b.n	800ddb2 <_printf_i+0x1c6>
 800ddac:	0668      	lsls	r0, r5, #25
 800ddae:	d5fb      	bpl.n	800dda8 <_printf_i+0x1bc>
 800ddb0:	8019      	strh	r1, [r3, #0]
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	6123      	str	r3, [r4, #16]
 800ddb6:	4616      	mov	r6, r2
 800ddb8:	e7bc      	b.n	800dd34 <_printf_i+0x148>
 800ddba:	6833      	ldr	r3, [r6, #0]
 800ddbc:	1d1a      	adds	r2, r3, #4
 800ddbe:	6032      	str	r2, [r6, #0]
 800ddc0:	681e      	ldr	r6, [r3, #0]
 800ddc2:	6862      	ldr	r2, [r4, #4]
 800ddc4:	2100      	movs	r1, #0
 800ddc6:	4630      	mov	r0, r6
 800ddc8:	f7f2 fa1a 	bl	8000200 <memchr>
 800ddcc:	b108      	cbz	r0, 800ddd2 <_printf_i+0x1e6>
 800ddce:	1b80      	subs	r0, r0, r6
 800ddd0:	6060      	str	r0, [r4, #4]
 800ddd2:	6863      	ldr	r3, [r4, #4]
 800ddd4:	6123      	str	r3, [r4, #16]
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dddc:	e7aa      	b.n	800dd34 <_printf_i+0x148>
 800ddde:	6923      	ldr	r3, [r4, #16]
 800dde0:	4632      	mov	r2, r6
 800dde2:	4649      	mov	r1, r9
 800dde4:	4640      	mov	r0, r8
 800dde6:	47d0      	blx	sl
 800dde8:	3001      	adds	r0, #1
 800ddea:	d0ad      	beq.n	800dd48 <_printf_i+0x15c>
 800ddec:	6823      	ldr	r3, [r4, #0]
 800ddee:	079b      	lsls	r3, r3, #30
 800ddf0:	d413      	bmi.n	800de1a <_printf_i+0x22e>
 800ddf2:	68e0      	ldr	r0, [r4, #12]
 800ddf4:	9b03      	ldr	r3, [sp, #12]
 800ddf6:	4298      	cmp	r0, r3
 800ddf8:	bfb8      	it	lt
 800ddfa:	4618      	movlt	r0, r3
 800ddfc:	e7a6      	b.n	800dd4c <_printf_i+0x160>
 800ddfe:	2301      	movs	r3, #1
 800de00:	4632      	mov	r2, r6
 800de02:	4649      	mov	r1, r9
 800de04:	4640      	mov	r0, r8
 800de06:	47d0      	blx	sl
 800de08:	3001      	adds	r0, #1
 800de0a:	d09d      	beq.n	800dd48 <_printf_i+0x15c>
 800de0c:	3501      	adds	r5, #1
 800de0e:	68e3      	ldr	r3, [r4, #12]
 800de10:	9903      	ldr	r1, [sp, #12]
 800de12:	1a5b      	subs	r3, r3, r1
 800de14:	42ab      	cmp	r3, r5
 800de16:	dcf2      	bgt.n	800ddfe <_printf_i+0x212>
 800de18:	e7eb      	b.n	800ddf2 <_printf_i+0x206>
 800de1a:	2500      	movs	r5, #0
 800de1c:	f104 0619 	add.w	r6, r4, #25
 800de20:	e7f5      	b.n	800de0e <_printf_i+0x222>
 800de22:	bf00      	nop
 800de24:	08025439 	.word	0x08025439
 800de28:	0802544a 	.word	0x0802544a

0800de2c <_scanf_chars>:
 800de2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de30:	4615      	mov	r5, r2
 800de32:	688a      	ldr	r2, [r1, #8]
 800de34:	4680      	mov	r8, r0
 800de36:	460c      	mov	r4, r1
 800de38:	b932      	cbnz	r2, 800de48 <_scanf_chars+0x1c>
 800de3a:	698a      	ldr	r2, [r1, #24]
 800de3c:	2a00      	cmp	r2, #0
 800de3e:	bf14      	ite	ne
 800de40:	f04f 32ff 	movne.w	r2, #4294967295
 800de44:	2201      	moveq	r2, #1
 800de46:	608a      	str	r2, [r1, #8]
 800de48:	6822      	ldr	r2, [r4, #0]
 800de4a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800dedc <_scanf_chars+0xb0>
 800de4e:	06d1      	lsls	r1, r2, #27
 800de50:	bf5f      	itttt	pl
 800de52:	681a      	ldrpl	r2, [r3, #0]
 800de54:	1d11      	addpl	r1, r2, #4
 800de56:	6019      	strpl	r1, [r3, #0]
 800de58:	6816      	ldrpl	r6, [r2, #0]
 800de5a:	2700      	movs	r7, #0
 800de5c:	69a0      	ldr	r0, [r4, #24]
 800de5e:	b188      	cbz	r0, 800de84 <_scanf_chars+0x58>
 800de60:	2801      	cmp	r0, #1
 800de62:	d107      	bne.n	800de74 <_scanf_chars+0x48>
 800de64:	682b      	ldr	r3, [r5, #0]
 800de66:	781a      	ldrb	r2, [r3, #0]
 800de68:	6963      	ldr	r3, [r4, #20]
 800de6a:	5c9b      	ldrb	r3, [r3, r2]
 800de6c:	b953      	cbnz	r3, 800de84 <_scanf_chars+0x58>
 800de6e:	2f00      	cmp	r7, #0
 800de70:	d031      	beq.n	800ded6 <_scanf_chars+0xaa>
 800de72:	e022      	b.n	800deba <_scanf_chars+0x8e>
 800de74:	2802      	cmp	r0, #2
 800de76:	d120      	bne.n	800deba <_scanf_chars+0x8e>
 800de78:	682b      	ldr	r3, [r5, #0]
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800de80:	071b      	lsls	r3, r3, #28
 800de82:	d41a      	bmi.n	800deba <_scanf_chars+0x8e>
 800de84:	6823      	ldr	r3, [r4, #0]
 800de86:	06da      	lsls	r2, r3, #27
 800de88:	bf5e      	ittt	pl
 800de8a:	682b      	ldrpl	r3, [r5, #0]
 800de8c:	781b      	ldrbpl	r3, [r3, #0]
 800de8e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800de92:	682a      	ldr	r2, [r5, #0]
 800de94:	686b      	ldr	r3, [r5, #4]
 800de96:	3201      	adds	r2, #1
 800de98:	602a      	str	r2, [r5, #0]
 800de9a:	68a2      	ldr	r2, [r4, #8]
 800de9c:	3b01      	subs	r3, #1
 800de9e:	3a01      	subs	r2, #1
 800dea0:	606b      	str	r3, [r5, #4]
 800dea2:	3701      	adds	r7, #1
 800dea4:	60a2      	str	r2, [r4, #8]
 800dea6:	b142      	cbz	r2, 800deba <_scanf_chars+0x8e>
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	dcd7      	bgt.n	800de5c <_scanf_chars+0x30>
 800deac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800deb0:	4629      	mov	r1, r5
 800deb2:	4640      	mov	r0, r8
 800deb4:	4798      	blx	r3
 800deb6:	2800      	cmp	r0, #0
 800deb8:	d0d0      	beq.n	800de5c <_scanf_chars+0x30>
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	f013 0310 	ands.w	r3, r3, #16
 800dec0:	d105      	bne.n	800dece <_scanf_chars+0xa2>
 800dec2:	68e2      	ldr	r2, [r4, #12]
 800dec4:	3201      	adds	r2, #1
 800dec6:	60e2      	str	r2, [r4, #12]
 800dec8:	69a2      	ldr	r2, [r4, #24]
 800deca:	b102      	cbz	r2, 800dece <_scanf_chars+0xa2>
 800decc:	7033      	strb	r3, [r6, #0]
 800dece:	6923      	ldr	r3, [r4, #16]
 800ded0:	443b      	add	r3, r7
 800ded2:	6123      	str	r3, [r4, #16]
 800ded4:	2000      	movs	r0, #0
 800ded6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deda:	bf00      	nop
 800dedc:	08025141 	.word	0x08025141

0800dee0 <_scanf_i>:
 800dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	4698      	mov	r8, r3
 800dee6:	4b74      	ldr	r3, [pc, #464]	@ (800e0b8 <_scanf_i+0x1d8>)
 800dee8:	460c      	mov	r4, r1
 800deea:	4682      	mov	sl, r0
 800deec:	4616      	mov	r6, r2
 800deee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800def2:	b087      	sub	sp, #28
 800def4:	ab03      	add	r3, sp, #12
 800def6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800defa:	4b70      	ldr	r3, [pc, #448]	@ (800e0bc <_scanf_i+0x1dc>)
 800defc:	69a1      	ldr	r1, [r4, #24]
 800defe:	4a70      	ldr	r2, [pc, #448]	@ (800e0c0 <_scanf_i+0x1e0>)
 800df00:	2903      	cmp	r1, #3
 800df02:	bf08      	it	eq
 800df04:	461a      	moveq	r2, r3
 800df06:	68a3      	ldr	r3, [r4, #8]
 800df08:	9201      	str	r2, [sp, #4]
 800df0a:	1e5a      	subs	r2, r3, #1
 800df0c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800df10:	bf88      	it	hi
 800df12:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800df16:	4627      	mov	r7, r4
 800df18:	bf82      	ittt	hi
 800df1a:	eb03 0905 	addhi.w	r9, r3, r5
 800df1e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800df22:	60a3      	strhi	r3, [r4, #8]
 800df24:	f857 3b1c 	ldr.w	r3, [r7], #28
 800df28:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800df2c:	bf98      	it	ls
 800df2e:	f04f 0900 	movls.w	r9, #0
 800df32:	6023      	str	r3, [r4, #0]
 800df34:	463d      	mov	r5, r7
 800df36:	f04f 0b00 	mov.w	fp, #0
 800df3a:	6831      	ldr	r1, [r6, #0]
 800df3c:	ab03      	add	r3, sp, #12
 800df3e:	7809      	ldrb	r1, [r1, #0]
 800df40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800df44:	2202      	movs	r2, #2
 800df46:	f7f2 f95b 	bl	8000200 <memchr>
 800df4a:	b328      	cbz	r0, 800df98 <_scanf_i+0xb8>
 800df4c:	f1bb 0f01 	cmp.w	fp, #1
 800df50:	d159      	bne.n	800e006 <_scanf_i+0x126>
 800df52:	6862      	ldr	r2, [r4, #4]
 800df54:	b92a      	cbnz	r2, 800df62 <_scanf_i+0x82>
 800df56:	6822      	ldr	r2, [r4, #0]
 800df58:	2108      	movs	r1, #8
 800df5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800df5e:	6061      	str	r1, [r4, #4]
 800df60:	6022      	str	r2, [r4, #0]
 800df62:	6822      	ldr	r2, [r4, #0]
 800df64:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800df68:	6022      	str	r2, [r4, #0]
 800df6a:	68a2      	ldr	r2, [r4, #8]
 800df6c:	1e51      	subs	r1, r2, #1
 800df6e:	60a1      	str	r1, [r4, #8]
 800df70:	b192      	cbz	r2, 800df98 <_scanf_i+0xb8>
 800df72:	6832      	ldr	r2, [r6, #0]
 800df74:	1c51      	adds	r1, r2, #1
 800df76:	6031      	str	r1, [r6, #0]
 800df78:	7812      	ldrb	r2, [r2, #0]
 800df7a:	f805 2b01 	strb.w	r2, [r5], #1
 800df7e:	6872      	ldr	r2, [r6, #4]
 800df80:	3a01      	subs	r2, #1
 800df82:	2a00      	cmp	r2, #0
 800df84:	6072      	str	r2, [r6, #4]
 800df86:	dc07      	bgt.n	800df98 <_scanf_i+0xb8>
 800df88:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800df8c:	4631      	mov	r1, r6
 800df8e:	4650      	mov	r0, sl
 800df90:	4790      	blx	r2
 800df92:	2800      	cmp	r0, #0
 800df94:	f040 8085 	bne.w	800e0a2 <_scanf_i+0x1c2>
 800df98:	f10b 0b01 	add.w	fp, fp, #1
 800df9c:	f1bb 0f03 	cmp.w	fp, #3
 800dfa0:	d1cb      	bne.n	800df3a <_scanf_i+0x5a>
 800dfa2:	6863      	ldr	r3, [r4, #4]
 800dfa4:	b90b      	cbnz	r3, 800dfaa <_scanf_i+0xca>
 800dfa6:	230a      	movs	r3, #10
 800dfa8:	6063      	str	r3, [r4, #4]
 800dfaa:	6863      	ldr	r3, [r4, #4]
 800dfac:	4945      	ldr	r1, [pc, #276]	@ (800e0c4 <_scanf_i+0x1e4>)
 800dfae:	6960      	ldr	r0, [r4, #20]
 800dfb0:	1ac9      	subs	r1, r1, r3
 800dfb2:	f000 f935 	bl	800e220 <__sccl>
 800dfb6:	f04f 0b00 	mov.w	fp, #0
 800dfba:	68a3      	ldr	r3, [r4, #8]
 800dfbc:	6822      	ldr	r2, [r4, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d03d      	beq.n	800e03e <_scanf_i+0x15e>
 800dfc2:	6831      	ldr	r1, [r6, #0]
 800dfc4:	6960      	ldr	r0, [r4, #20]
 800dfc6:	f891 c000 	ldrb.w	ip, [r1]
 800dfca:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d035      	beq.n	800e03e <_scanf_i+0x15e>
 800dfd2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800dfd6:	d124      	bne.n	800e022 <_scanf_i+0x142>
 800dfd8:	0510      	lsls	r0, r2, #20
 800dfda:	d522      	bpl.n	800e022 <_scanf_i+0x142>
 800dfdc:	f10b 0b01 	add.w	fp, fp, #1
 800dfe0:	f1b9 0f00 	cmp.w	r9, #0
 800dfe4:	d003      	beq.n	800dfee <_scanf_i+0x10e>
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	f109 39ff 	add.w	r9, r9, #4294967295
 800dfec:	60a3      	str	r3, [r4, #8]
 800dfee:	6873      	ldr	r3, [r6, #4]
 800dff0:	3b01      	subs	r3, #1
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	6073      	str	r3, [r6, #4]
 800dff6:	dd1b      	ble.n	800e030 <_scanf_i+0x150>
 800dff8:	6833      	ldr	r3, [r6, #0]
 800dffa:	3301      	adds	r3, #1
 800dffc:	6033      	str	r3, [r6, #0]
 800dffe:	68a3      	ldr	r3, [r4, #8]
 800e000:	3b01      	subs	r3, #1
 800e002:	60a3      	str	r3, [r4, #8]
 800e004:	e7d9      	b.n	800dfba <_scanf_i+0xda>
 800e006:	f1bb 0f02 	cmp.w	fp, #2
 800e00a:	d1ae      	bne.n	800df6a <_scanf_i+0x8a>
 800e00c:	6822      	ldr	r2, [r4, #0]
 800e00e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e012:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e016:	d1bf      	bne.n	800df98 <_scanf_i+0xb8>
 800e018:	2110      	movs	r1, #16
 800e01a:	6061      	str	r1, [r4, #4]
 800e01c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e020:	e7a2      	b.n	800df68 <_scanf_i+0x88>
 800e022:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e026:	6022      	str	r2, [r4, #0]
 800e028:	780b      	ldrb	r3, [r1, #0]
 800e02a:	f805 3b01 	strb.w	r3, [r5], #1
 800e02e:	e7de      	b.n	800dfee <_scanf_i+0x10e>
 800e030:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e034:	4631      	mov	r1, r6
 800e036:	4650      	mov	r0, sl
 800e038:	4798      	blx	r3
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d0df      	beq.n	800dffe <_scanf_i+0x11e>
 800e03e:	6823      	ldr	r3, [r4, #0]
 800e040:	05d9      	lsls	r1, r3, #23
 800e042:	d50d      	bpl.n	800e060 <_scanf_i+0x180>
 800e044:	42bd      	cmp	r5, r7
 800e046:	d909      	bls.n	800e05c <_scanf_i+0x17c>
 800e048:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e04c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e050:	4632      	mov	r2, r6
 800e052:	4650      	mov	r0, sl
 800e054:	4798      	blx	r3
 800e056:	f105 39ff 	add.w	r9, r5, #4294967295
 800e05a:	464d      	mov	r5, r9
 800e05c:	42bd      	cmp	r5, r7
 800e05e:	d028      	beq.n	800e0b2 <_scanf_i+0x1d2>
 800e060:	6822      	ldr	r2, [r4, #0]
 800e062:	f012 0210 	ands.w	r2, r2, #16
 800e066:	d113      	bne.n	800e090 <_scanf_i+0x1b0>
 800e068:	702a      	strb	r2, [r5, #0]
 800e06a:	6863      	ldr	r3, [r4, #4]
 800e06c:	9e01      	ldr	r6, [sp, #4]
 800e06e:	4639      	mov	r1, r7
 800e070:	4650      	mov	r0, sl
 800e072:	47b0      	blx	r6
 800e074:	f8d8 3000 	ldr.w	r3, [r8]
 800e078:	6821      	ldr	r1, [r4, #0]
 800e07a:	1d1a      	adds	r2, r3, #4
 800e07c:	f8c8 2000 	str.w	r2, [r8]
 800e080:	f011 0f20 	tst.w	r1, #32
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	d00f      	beq.n	800e0a8 <_scanf_i+0x1c8>
 800e088:	6018      	str	r0, [r3, #0]
 800e08a:	68e3      	ldr	r3, [r4, #12]
 800e08c:	3301      	adds	r3, #1
 800e08e:	60e3      	str	r3, [r4, #12]
 800e090:	6923      	ldr	r3, [r4, #16]
 800e092:	1bed      	subs	r5, r5, r7
 800e094:	445d      	add	r5, fp
 800e096:	442b      	add	r3, r5
 800e098:	6123      	str	r3, [r4, #16]
 800e09a:	2000      	movs	r0, #0
 800e09c:	b007      	add	sp, #28
 800e09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a2:	f04f 0b00 	mov.w	fp, #0
 800e0a6:	e7ca      	b.n	800e03e <_scanf_i+0x15e>
 800e0a8:	07ca      	lsls	r2, r1, #31
 800e0aa:	bf4c      	ite	mi
 800e0ac:	8018      	strhmi	r0, [r3, #0]
 800e0ae:	6018      	strpl	r0, [r3, #0]
 800e0b0:	e7eb      	b.n	800e08a <_scanf_i+0x1aa>
 800e0b2:	2001      	movs	r0, #1
 800e0b4:	e7f2      	b.n	800e09c <_scanf_i+0x1bc>
 800e0b6:	bf00      	nop
 800e0b8:	0800f028 	.word	0x0800f028
 800e0bc:	0800e4ad 	.word	0x0800e4ad
 800e0c0:	0800e58d 	.word	0x0800e58d
 800e0c4:	0802546b 	.word	0x0802546b

0800e0c8 <__sflush_r>:
 800e0c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d0:	0716      	lsls	r6, r2, #28
 800e0d2:	4605      	mov	r5, r0
 800e0d4:	460c      	mov	r4, r1
 800e0d6:	d454      	bmi.n	800e182 <__sflush_r+0xba>
 800e0d8:	684b      	ldr	r3, [r1, #4]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	dc02      	bgt.n	800e0e4 <__sflush_r+0x1c>
 800e0de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	dd48      	ble.n	800e176 <__sflush_r+0xae>
 800e0e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0e6:	2e00      	cmp	r6, #0
 800e0e8:	d045      	beq.n	800e176 <__sflush_r+0xae>
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e0f0:	682f      	ldr	r7, [r5, #0]
 800e0f2:	6a21      	ldr	r1, [r4, #32]
 800e0f4:	602b      	str	r3, [r5, #0]
 800e0f6:	d030      	beq.n	800e15a <__sflush_r+0x92>
 800e0f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e0fa:	89a3      	ldrh	r3, [r4, #12]
 800e0fc:	0759      	lsls	r1, r3, #29
 800e0fe:	d505      	bpl.n	800e10c <__sflush_r+0x44>
 800e100:	6863      	ldr	r3, [r4, #4]
 800e102:	1ad2      	subs	r2, r2, r3
 800e104:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e106:	b10b      	cbz	r3, 800e10c <__sflush_r+0x44>
 800e108:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e10a:	1ad2      	subs	r2, r2, r3
 800e10c:	2300      	movs	r3, #0
 800e10e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e110:	6a21      	ldr	r1, [r4, #32]
 800e112:	4628      	mov	r0, r5
 800e114:	47b0      	blx	r6
 800e116:	1c43      	adds	r3, r0, #1
 800e118:	89a3      	ldrh	r3, [r4, #12]
 800e11a:	d106      	bne.n	800e12a <__sflush_r+0x62>
 800e11c:	6829      	ldr	r1, [r5, #0]
 800e11e:	291d      	cmp	r1, #29
 800e120:	d82b      	bhi.n	800e17a <__sflush_r+0xb2>
 800e122:	4a2a      	ldr	r2, [pc, #168]	@ (800e1cc <__sflush_r+0x104>)
 800e124:	410a      	asrs	r2, r1
 800e126:	07d6      	lsls	r6, r2, #31
 800e128:	d427      	bmi.n	800e17a <__sflush_r+0xb2>
 800e12a:	2200      	movs	r2, #0
 800e12c:	6062      	str	r2, [r4, #4]
 800e12e:	04d9      	lsls	r1, r3, #19
 800e130:	6922      	ldr	r2, [r4, #16]
 800e132:	6022      	str	r2, [r4, #0]
 800e134:	d504      	bpl.n	800e140 <__sflush_r+0x78>
 800e136:	1c42      	adds	r2, r0, #1
 800e138:	d101      	bne.n	800e13e <__sflush_r+0x76>
 800e13a:	682b      	ldr	r3, [r5, #0]
 800e13c:	b903      	cbnz	r3, 800e140 <__sflush_r+0x78>
 800e13e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e140:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e142:	602f      	str	r7, [r5, #0]
 800e144:	b1b9      	cbz	r1, 800e176 <__sflush_r+0xae>
 800e146:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e14a:	4299      	cmp	r1, r3
 800e14c:	d002      	beq.n	800e154 <__sflush_r+0x8c>
 800e14e:	4628      	mov	r0, r5
 800e150:	f7fe f95e 	bl	800c410 <_free_r>
 800e154:	2300      	movs	r3, #0
 800e156:	6363      	str	r3, [r4, #52]	@ 0x34
 800e158:	e00d      	b.n	800e176 <__sflush_r+0xae>
 800e15a:	2301      	movs	r3, #1
 800e15c:	4628      	mov	r0, r5
 800e15e:	47b0      	blx	r6
 800e160:	4602      	mov	r2, r0
 800e162:	1c50      	adds	r0, r2, #1
 800e164:	d1c9      	bne.n	800e0fa <__sflush_r+0x32>
 800e166:	682b      	ldr	r3, [r5, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d0c6      	beq.n	800e0fa <__sflush_r+0x32>
 800e16c:	2b1d      	cmp	r3, #29
 800e16e:	d001      	beq.n	800e174 <__sflush_r+0xac>
 800e170:	2b16      	cmp	r3, #22
 800e172:	d11e      	bne.n	800e1b2 <__sflush_r+0xea>
 800e174:	602f      	str	r7, [r5, #0]
 800e176:	2000      	movs	r0, #0
 800e178:	e022      	b.n	800e1c0 <__sflush_r+0xf8>
 800e17a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e17e:	b21b      	sxth	r3, r3
 800e180:	e01b      	b.n	800e1ba <__sflush_r+0xf2>
 800e182:	690f      	ldr	r7, [r1, #16]
 800e184:	2f00      	cmp	r7, #0
 800e186:	d0f6      	beq.n	800e176 <__sflush_r+0xae>
 800e188:	0793      	lsls	r3, r2, #30
 800e18a:	680e      	ldr	r6, [r1, #0]
 800e18c:	bf08      	it	eq
 800e18e:	694b      	ldreq	r3, [r1, #20]
 800e190:	600f      	str	r7, [r1, #0]
 800e192:	bf18      	it	ne
 800e194:	2300      	movne	r3, #0
 800e196:	eba6 0807 	sub.w	r8, r6, r7
 800e19a:	608b      	str	r3, [r1, #8]
 800e19c:	f1b8 0f00 	cmp.w	r8, #0
 800e1a0:	dde9      	ble.n	800e176 <__sflush_r+0xae>
 800e1a2:	6a21      	ldr	r1, [r4, #32]
 800e1a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e1a6:	4643      	mov	r3, r8
 800e1a8:	463a      	mov	r2, r7
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	47b0      	blx	r6
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	dc08      	bgt.n	800e1c4 <__sflush_r+0xfc>
 800e1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1ba:	81a3      	strh	r3, [r4, #12]
 800e1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c4:	4407      	add	r7, r0
 800e1c6:	eba8 0800 	sub.w	r8, r8, r0
 800e1ca:	e7e7      	b.n	800e19c <__sflush_r+0xd4>
 800e1cc:	dfbffffe 	.word	0xdfbffffe

0800e1d0 <_fflush_r>:
 800e1d0:	b538      	push	{r3, r4, r5, lr}
 800e1d2:	690b      	ldr	r3, [r1, #16]
 800e1d4:	4605      	mov	r5, r0
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	b913      	cbnz	r3, 800e1e0 <_fflush_r+0x10>
 800e1da:	2500      	movs	r5, #0
 800e1dc:	4628      	mov	r0, r5
 800e1de:	bd38      	pop	{r3, r4, r5, pc}
 800e1e0:	b118      	cbz	r0, 800e1ea <_fflush_r+0x1a>
 800e1e2:	6a03      	ldr	r3, [r0, #32]
 800e1e4:	b90b      	cbnz	r3, 800e1ea <_fflush_r+0x1a>
 800e1e6:	f7fd ff13 	bl	800c010 <__sinit>
 800e1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d0f3      	beq.n	800e1da <_fflush_r+0xa>
 800e1f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1f4:	07d0      	lsls	r0, r2, #31
 800e1f6:	d404      	bmi.n	800e202 <_fflush_r+0x32>
 800e1f8:	0599      	lsls	r1, r3, #22
 800e1fa:	d402      	bmi.n	800e202 <_fflush_r+0x32>
 800e1fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1fe:	f7fe f8ee 	bl	800c3de <__retarget_lock_acquire_recursive>
 800e202:	4628      	mov	r0, r5
 800e204:	4621      	mov	r1, r4
 800e206:	f7ff ff5f 	bl	800e0c8 <__sflush_r>
 800e20a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e20c:	07da      	lsls	r2, r3, #31
 800e20e:	4605      	mov	r5, r0
 800e210:	d4e4      	bmi.n	800e1dc <_fflush_r+0xc>
 800e212:	89a3      	ldrh	r3, [r4, #12]
 800e214:	059b      	lsls	r3, r3, #22
 800e216:	d4e1      	bmi.n	800e1dc <_fflush_r+0xc>
 800e218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e21a:	f7fe f8e1 	bl	800c3e0 <__retarget_lock_release_recursive>
 800e21e:	e7dd      	b.n	800e1dc <_fflush_r+0xc>

0800e220 <__sccl>:
 800e220:	b570      	push	{r4, r5, r6, lr}
 800e222:	780b      	ldrb	r3, [r1, #0]
 800e224:	4604      	mov	r4, r0
 800e226:	2b5e      	cmp	r3, #94	@ 0x5e
 800e228:	bf0b      	itete	eq
 800e22a:	784b      	ldrbeq	r3, [r1, #1]
 800e22c:	1c4a      	addne	r2, r1, #1
 800e22e:	1c8a      	addeq	r2, r1, #2
 800e230:	2100      	movne	r1, #0
 800e232:	bf08      	it	eq
 800e234:	2101      	moveq	r1, #1
 800e236:	3801      	subs	r0, #1
 800e238:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e23c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e240:	42a8      	cmp	r0, r5
 800e242:	d1fb      	bne.n	800e23c <__sccl+0x1c>
 800e244:	b90b      	cbnz	r3, 800e24a <__sccl+0x2a>
 800e246:	1e50      	subs	r0, r2, #1
 800e248:	bd70      	pop	{r4, r5, r6, pc}
 800e24a:	f081 0101 	eor.w	r1, r1, #1
 800e24e:	54e1      	strb	r1, [r4, r3]
 800e250:	4610      	mov	r0, r2
 800e252:	4602      	mov	r2, r0
 800e254:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e258:	2d2d      	cmp	r5, #45	@ 0x2d
 800e25a:	d005      	beq.n	800e268 <__sccl+0x48>
 800e25c:	2d5d      	cmp	r5, #93	@ 0x5d
 800e25e:	d016      	beq.n	800e28e <__sccl+0x6e>
 800e260:	2d00      	cmp	r5, #0
 800e262:	d0f1      	beq.n	800e248 <__sccl+0x28>
 800e264:	462b      	mov	r3, r5
 800e266:	e7f2      	b.n	800e24e <__sccl+0x2e>
 800e268:	7846      	ldrb	r6, [r0, #1]
 800e26a:	2e5d      	cmp	r6, #93	@ 0x5d
 800e26c:	d0fa      	beq.n	800e264 <__sccl+0x44>
 800e26e:	42b3      	cmp	r3, r6
 800e270:	dcf8      	bgt.n	800e264 <__sccl+0x44>
 800e272:	3002      	adds	r0, #2
 800e274:	461a      	mov	r2, r3
 800e276:	3201      	adds	r2, #1
 800e278:	4296      	cmp	r6, r2
 800e27a:	54a1      	strb	r1, [r4, r2]
 800e27c:	dcfb      	bgt.n	800e276 <__sccl+0x56>
 800e27e:	1af2      	subs	r2, r6, r3
 800e280:	3a01      	subs	r2, #1
 800e282:	1c5d      	adds	r5, r3, #1
 800e284:	42b3      	cmp	r3, r6
 800e286:	bfa8      	it	ge
 800e288:	2200      	movge	r2, #0
 800e28a:	18ab      	adds	r3, r5, r2
 800e28c:	e7e1      	b.n	800e252 <__sccl+0x32>
 800e28e:	4610      	mov	r0, r2
 800e290:	e7da      	b.n	800e248 <__sccl+0x28>

0800e292 <__submore>:
 800e292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e296:	460c      	mov	r4, r1
 800e298:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e29a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e29e:	4299      	cmp	r1, r3
 800e2a0:	d11d      	bne.n	800e2de <__submore+0x4c>
 800e2a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e2a6:	f7fc ff57 	bl	800b158 <_malloc_r>
 800e2aa:	b918      	cbnz	r0, 800e2b4 <__submore+0x22>
 800e2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e2ba:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e2be:	6360      	str	r0, [r4, #52]	@ 0x34
 800e2c0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e2c4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e2c8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e2cc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e2d0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e2d4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e2d8:	6020      	str	r0, [r4, #0]
 800e2da:	2000      	movs	r0, #0
 800e2dc:	e7e8      	b.n	800e2b0 <__submore+0x1e>
 800e2de:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e2e0:	0077      	lsls	r7, r6, #1
 800e2e2:	463a      	mov	r2, r7
 800e2e4:	f7fc ffcc 	bl	800b280 <_realloc_r>
 800e2e8:	4605      	mov	r5, r0
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d0de      	beq.n	800e2ac <__submore+0x1a>
 800e2ee:	eb00 0806 	add.w	r8, r0, r6
 800e2f2:	4601      	mov	r1, r0
 800e2f4:	4632      	mov	r2, r6
 800e2f6:	4640      	mov	r0, r8
 800e2f8:	f7fe f873 	bl	800c3e2 <memcpy>
 800e2fc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e300:	f8c4 8000 	str.w	r8, [r4]
 800e304:	e7e9      	b.n	800e2da <__submore+0x48>

0800e306 <memmove>:
 800e306:	4288      	cmp	r0, r1
 800e308:	b510      	push	{r4, lr}
 800e30a:	eb01 0402 	add.w	r4, r1, r2
 800e30e:	d902      	bls.n	800e316 <memmove+0x10>
 800e310:	4284      	cmp	r4, r0
 800e312:	4623      	mov	r3, r4
 800e314:	d807      	bhi.n	800e326 <memmove+0x20>
 800e316:	1e43      	subs	r3, r0, #1
 800e318:	42a1      	cmp	r1, r4
 800e31a:	d008      	beq.n	800e32e <memmove+0x28>
 800e31c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e320:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e324:	e7f8      	b.n	800e318 <memmove+0x12>
 800e326:	4402      	add	r2, r0
 800e328:	4601      	mov	r1, r0
 800e32a:	428a      	cmp	r2, r1
 800e32c:	d100      	bne.n	800e330 <memmove+0x2a>
 800e32e:	bd10      	pop	{r4, pc}
 800e330:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e334:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e338:	e7f7      	b.n	800e32a <memmove+0x24>

0800e33a <strchr>:
 800e33a:	b2c9      	uxtb	r1, r1
 800e33c:	4603      	mov	r3, r0
 800e33e:	4618      	mov	r0, r3
 800e340:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e344:	b112      	cbz	r2, 800e34c <strchr+0x12>
 800e346:	428a      	cmp	r2, r1
 800e348:	d1f9      	bne.n	800e33e <strchr+0x4>
 800e34a:	4770      	bx	lr
 800e34c:	2900      	cmp	r1, #0
 800e34e:	bf18      	it	ne
 800e350:	2000      	movne	r0, #0
 800e352:	4770      	bx	lr

0800e354 <__assert_func>:
 800e354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e356:	4614      	mov	r4, r2
 800e358:	461a      	mov	r2, r3
 800e35a:	4b09      	ldr	r3, [pc, #36]	@ (800e380 <__assert_func+0x2c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4605      	mov	r5, r0
 800e360:	68d8      	ldr	r0, [r3, #12]
 800e362:	b954      	cbnz	r4, 800e37a <__assert_func+0x26>
 800e364:	4b07      	ldr	r3, [pc, #28]	@ (800e384 <__assert_func+0x30>)
 800e366:	461c      	mov	r4, r3
 800e368:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e36c:	9100      	str	r1, [sp, #0]
 800e36e:	462b      	mov	r3, r5
 800e370:	4905      	ldr	r1, [pc, #20]	@ (800e388 <__assert_func+0x34>)
 800e372:	f000 f90d 	bl	800e590 <fiprintf>
 800e376:	f000 f91d 	bl	800e5b4 <abort>
 800e37a:	4b04      	ldr	r3, [pc, #16]	@ (800e38c <__assert_func+0x38>)
 800e37c:	e7f4      	b.n	800e368 <__assert_func+0x14>
 800e37e:	bf00      	nop
 800e380:	200029d8 	.word	0x200029d8
 800e384:	080254b1 	.word	0x080254b1
 800e388:	08025483 	.word	0x08025483
 800e38c:	08025476 	.word	0x08025476

0800e390 <_calloc_r>:
 800e390:	b570      	push	{r4, r5, r6, lr}
 800e392:	fba1 5402 	umull	r5, r4, r1, r2
 800e396:	b93c      	cbnz	r4, 800e3a8 <_calloc_r+0x18>
 800e398:	4629      	mov	r1, r5
 800e39a:	f7fc fedd 	bl	800b158 <_malloc_r>
 800e39e:	4606      	mov	r6, r0
 800e3a0:	b928      	cbnz	r0, 800e3ae <_calloc_r+0x1e>
 800e3a2:	2600      	movs	r6, #0
 800e3a4:	4630      	mov	r0, r6
 800e3a6:	bd70      	pop	{r4, r5, r6, pc}
 800e3a8:	220c      	movs	r2, #12
 800e3aa:	6002      	str	r2, [r0, #0]
 800e3ac:	e7f9      	b.n	800e3a2 <_calloc_r+0x12>
 800e3ae:	462a      	mov	r2, r5
 800e3b0:	4621      	mov	r1, r4
 800e3b2:	f7fd ff27 	bl	800c204 <memset>
 800e3b6:	e7f5      	b.n	800e3a4 <_calloc_r+0x14>

0800e3b8 <_strtol_l.constprop.0>:
 800e3b8:	2b24      	cmp	r3, #36	@ 0x24
 800e3ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3be:	4686      	mov	lr, r0
 800e3c0:	4690      	mov	r8, r2
 800e3c2:	d801      	bhi.n	800e3c8 <_strtol_l.constprop.0+0x10>
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d106      	bne.n	800e3d6 <_strtol_l.constprop.0+0x1e>
 800e3c8:	f7fd ffde 	bl	800c388 <__errno>
 800e3cc:	2316      	movs	r3, #22
 800e3ce:	6003      	str	r3, [r0, #0]
 800e3d0:	2000      	movs	r0, #0
 800e3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3d6:	4834      	ldr	r0, [pc, #208]	@ (800e4a8 <_strtol_l.constprop.0+0xf0>)
 800e3d8:	460d      	mov	r5, r1
 800e3da:	462a      	mov	r2, r5
 800e3dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e3e0:	5d06      	ldrb	r6, [r0, r4]
 800e3e2:	f016 0608 	ands.w	r6, r6, #8
 800e3e6:	d1f8      	bne.n	800e3da <_strtol_l.constprop.0+0x22>
 800e3e8:	2c2d      	cmp	r4, #45	@ 0x2d
 800e3ea:	d12d      	bne.n	800e448 <_strtol_l.constprop.0+0x90>
 800e3ec:	782c      	ldrb	r4, [r5, #0]
 800e3ee:	2601      	movs	r6, #1
 800e3f0:	1c95      	adds	r5, r2, #2
 800e3f2:	f033 0210 	bics.w	r2, r3, #16
 800e3f6:	d109      	bne.n	800e40c <_strtol_l.constprop.0+0x54>
 800e3f8:	2c30      	cmp	r4, #48	@ 0x30
 800e3fa:	d12a      	bne.n	800e452 <_strtol_l.constprop.0+0x9a>
 800e3fc:	782a      	ldrb	r2, [r5, #0]
 800e3fe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e402:	2a58      	cmp	r2, #88	@ 0x58
 800e404:	d125      	bne.n	800e452 <_strtol_l.constprop.0+0x9a>
 800e406:	786c      	ldrb	r4, [r5, #1]
 800e408:	2310      	movs	r3, #16
 800e40a:	3502      	adds	r5, #2
 800e40c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e410:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e414:	2200      	movs	r2, #0
 800e416:	fbbc f9f3 	udiv	r9, ip, r3
 800e41a:	4610      	mov	r0, r2
 800e41c:	fb03 ca19 	mls	sl, r3, r9, ip
 800e420:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e424:	2f09      	cmp	r7, #9
 800e426:	d81b      	bhi.n	800e460 <_strtol_l.constprop.0+0xa8>
 800e428:	463c      	mov	r4, r7
 800e42a:	42a3      	cmp	r3, r4
 800e42c:	dd27      	ble.n	800e47e <_strtol_l.constprop.0+0xc6>
 800e42e:	1c57      	adds	r7, r2, #1
 800e430:	d007      	beq.n	800e442 <_strtol_l.constprop.0+0x8a>
 800e432:	4581      	cmp	r9, r0
 800e434:	d320      	bcc.n	800e478 <_strtol_l.constprop.0+0xc0>
 800e436:	d101      	bne.n	800e43c <_strtol_l.constprop.0+0x84>
 800e438:	45a2      	cmp	sl, r4
 800e43a:	db1d      	blt.n	800e478 <_strtol_l.constprop.0+0xc0>
 800e43c:	fb00 4003 	mla	r0, r0, r3, r4
 800e440:	2201      	movs	r2, #1
 800e442:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e446:	e7eb      	b.n	800e420 <_strtol_l.constprop.0+0x68>
 800e448:	2c2b      	cmp	r4, #43	@ 0x2b
 800e44a:	bf04      	itt	eq
 800e44c:	782c      	ldrbeq	r4, [r5, #0]
 800e44e:	1c95      	addeq	r5, r2, #2
 800e450:	e7cf      	b.n	800e3f2 <_strtol_l.constprop.0+0x3a>
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1da      	bne.n	800e40c <_strtol_l.constprop.0+0x54>
 800e456:	2c30      	cmp	r4, #48	@ 0x30
 800e458:	bf0c      	ite	eq
 800e45a:	2308      	moveq	r3, #8
 800e45c:	230a      	movne	r3, #10
 800e45e:	e7d5      	b.n	800e40c <_strtol_l.constprop.0+0x54>
 800e460:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e464:	2f19      	cmp	r7, #25
 800e466:	d801      	bhi.n	800e46c <_strtol_l.constprop.0+0xb4>
 800e468:	3c37      	subs	r4, #55	@ 0x37
 800e46a:	e7de      	b.n	800e42a <_strtol_l.constprop.0+0x72>
 800e46c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e470:	2f19      	cmp	r7, #25
 800e472:	d804      	bhi.n	800e47e <_strtol_l.constprop.0+0xc6>
 800e474:	3c57      	subs	r4, #87	@ 0x57
 800e476:	e7d8      	b.n	800e42a <_strtol_l.constprop.0+0x72>
 800e478:	f04f 32ff 	mov.w	r2, #4294967295
 800e47c:	e7e1      	b.n	800e442 <_strtol_l.constprop.0+0x8a>
 800e47e:	1c53      	adds	r3, r2, #1
 800e480:	d108      	bne.n	800e494 <_strtol_l.constprop.0+0xdc>
 800e482:	2322      	movs	r3, #34	@ 0x22
 800e484:	f8ce 3000 	str.w	r3, [lr]
 800e488:	4660      	mov	r0, ip
 800e48a:	f1b8 0f00 	cmp.w	r8, #0
 800e48e:	d0a0      	beq.n	800e3d2 <_strtol_l.constprop.0+0x1a>
 800e490:	1e69      	subs	r1, r5, #1
 800e492:	e006      	b.n	800e4a2 <_strtol_l.constprop.0+0xea>
 800e494:	b106      	cbz	r6, 800e498 <_strtol_l.constprop.0+0xe0>
 800e496:	4240      	negs	r0, r0
 800e498:	f1b8 0f00 	cmp.w	r8, #0
 800e49c:	d099      	beq.n	800e3d2 <_strtol_l.constprop.0+0x1a>
 800e49e:	2a00      	cmp	r2, #0
 800e4a0:	d1f6      	bne.n	800e490 <_strtol_l.constprop.0+0xd8>
 800e4a2:	f8c8 1000 	str.w	r1, [r8]
 800e4a6:	e794      	b.n	800e3d2 <_strtol_l.constprop.0+0x1a>
 800e4a8:	08025141 	.word	0x08025141

0800e4ac <_strtol_r>:
 800e4ac:	f7ff bf84 	b.w	800e3b8 <_strtol_l.constprop.0>

0800e4b0 <_strtoul_l.constprop.0>:
 800e4b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4b4:	4e34      	ldr	r6, [pc, #208]	@ (800e588 <_strtoul_l.constprop.0+0xd8>)
 800e4b6:	4686      	mov	lr, r0
 800e4b8:	460d      	mov	r5, r1
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4c0:	5d37      	ldrb	r7, [r6, r4]
 800e4c2:	f017 0708 	ands.w	r7, r7, #8
 800e4c6:	d1f8      	bne.n	800e4ba <_strtoul_l.constprop.0+0xa>
 800e4c8:	2c2d      	cmp	r4, #45	@ 0x2d
 800e4ca:	d12f      	bne.n	800e52c <_strtoul_l.constprop.0+0x7c>
 800e4cc:	782c      	ldrb	r4, [r5, #0]
 800e4ce:	2701      	movs	r7, #1
 800e4d0:	1c85      	adds	r5, r0, #2
 800e4d2:	f033 0010 	bics.w	r0, r3, #16
 800e4d6:	d109      	bne.n	800e4ec <_strtoul_l.constprop.0+0x3c>
 800e4d8:	2c30      	cmp	r4, #48	@ 0x30
 800e4da:	d12c      	bne.n	800e536 <_strtoul_l.constprop.0+0x86>
 800e4dc:	7828      	ldrb	r0, [r5, #0]
 800e4de:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e4e2:	2858      	cmp	r0, #88	@ 0x58
 800e4e4:	d127      	bne.n	800e536 <_strtoul_l.constprop.0+0x86>
 800e4e6:	786c      	ldrb	r4, [r5, #1]
 800e4e8:	2310      	movs	r3, #16
 800e4ea:	3502      	adds	r5, #2
 800e4ec:	f04f 38ff 	mov.w	r8, #4294967295
 800e4f0:	2600      	movs	r6, #0
 800e4f2:	fbb8 f8f3 	udiv	r8, r8, r3
 800e4f6:	fb03 f908 	mul.w	r9, r3, r8
 800e4fa:	ea6f 0909 	mvn.w	r9, r9
 800e4fe:	4630      	mov	r0, r6
 800e500:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e504:	f1bc 0f09 	cmp.w	ip, #9
 800e508:	d81c      	bhi.n	800e544 <_strtoul_l.constprop.0+0x94>
 800e50a:	4664      	mov	r4, ip
 800e50c:	42a3      	cmp	r3, r4
 800e50e:	dd2a      	ble.n	800e566 <_strtoul_l.constprop.0+0xb6>
 800e510:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e514:	d007      	beq.n	800e526 <_strtoul_l.constprop.0+0x76>
 800e516:	4580      	cmp	r8, r0
 800e518:	d322      	bcc.n	800e560 <_strtoul_l.constprop.0+0xb0>
 800e51a:	d101      	bne.n	800e520 <_strtoul_l.constprop.0+0x70>
 800e51c:	45a1      	cmp	r9, r4
 800e51e:	db1f      	blt.n	800e560 <_strtoul_l.constprop.0+0xb0>
 800e520:	fb00 4003 	mla	r0, r0, r3, r4
 800e524:	2601      	movs	r6, #1
 800e526:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e52a:	e7e9      	b.n	800e500 <_strtoul_l.constprop.0+0x50>
 800e52c:	2c2b      	cmp	r4, #43	@ 0x2b
 800e52e:	bf04      	itt	eq
 800e530:	782c      	ldrbeq	r4, [r5, #0]
 800e532:	1c85      	addeq	r5, r0, #2
 800e534:	e7cd      	b.n	800e4d2 <_strtoul_l.constprop.0+0x22>
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1d8      	bne.n	800e4ec <_strtoul_l.constprop.0+0x3c>
 800e53a:	2c30      	cmp	r4, #48	@ 0x30
 800e53c:	bf0c      	ite	eq
 800e53e:	2308      	moveq	r3, #8
 800e540:	230a      	movne	r3, #10
 800e542:	e7d3      	b.n	800e4ec <_strtoul_l.constprop.0+0x3c>
 800e544:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e548:	f1bc 0f19 	cmp.w	ip, #25
 800e54c:	d801      	bhi.n	800e552 <_strtoul_l.constprop.0+0xa2>
 800e54e:	3c37      	subs	r4, #55	@ 0x37
 800e550:	e7dc      	b.n	800e50c <_strtoul_l.constprop.0+0x5c>
 800e552:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e556:	f1bc 0f19 	cmp.w	ip, #25
 800e55a:	d804      	bhi.n	800e566 <_strtoul_l.constprop.0+0xb6>
 800e55c:	3c57      	subs	r4, #87	@ 0x57
 800e55e:	e7d5      	b.n	800e50c <_strtoul_l.constprop.0+0x5c>
 800e560:	f04f 36ff 	mov.w	r6, #4294967295
 800e564:	e7df      	b.n	800e526 <_strtoul_l.constprop.0+0x76>
 800e566:	1c73      	adds	r3, r6, #1
 800e568:	d106      	bne.n	800e578 <_strtoul_l.constprop.0+0xc8>
 800e56a:	2322      	movs	r3, #34	@ 0x22
 800e56c:	f8ce 3000 	str.w	r3, [lr]
 800e570:	4630      	mov	r0, r6
 800e572:	b932      	cbnz	r2, 800e582 <_strtoul_l.constprop.0+0xd2>
 800e574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e578:	b107      	cbz	r7, 800e57c <_strtoul_l.constprop.0+0xcc>
 800e57a:	4240      	negs	r0, r0
 800e57c:	2a00      	cmp	r2, #0
 800e57e:	d0f9      	beq.n	800e574 <_strtoul_l.constprop.0+0xc4>
 800e580:	b106      	cbz	r6, 800e584 <_strtoul_l.constprop.0+0xd4>
 800e582:	1e69      	subs	r1, r5, #1
 800e584:	6011      	str	r1, [r2, #0]
 800e586:	e7f5      	b.n	800e574 <_strtoul_l.constprop.0+0xc4>
 800e588:	08025141 	.word	0x08025141

0800e58c <_strtoul_r>:
 800e58c:	f7ff bf90 	b.w	800e4b0 <_strtoul_l.constprop.0>

0800e590 <fiprintf>:
 800e590:	b40e      	push	{r1, r2, r3}
 800e592:	b503      	push	{r0, r1, lr}
 800e594:	4601      	mov	r1, r0
 800e596:	ab03      	add	r3, sp, #12
 800e598:	4805      	ldr	r0, [pc, #20]	@ (800e5b0 <fiprintf+0x20>)
 800e59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e59e:	6800      	ldr	r0, [r0, #0]
 800e5a0:	9301      	str	r3, [sp, #4]
 800e5a2:	f000 f837 	bl	800e614 <_vfiprintf_r>
 800e5a6:	b002      	add	sp, #8
 800e5a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5ac:	b003      	add	sp, #12
 800e5ae:	4770      	bx	lr
 800e5b0:	200029d8 	.word	0x200029d8

0800e5b4 <abort>:
 800e5b4:	b508      	push	{r3, lr}
 800e5b6:	2006      	movs	r0, #6
 800e5b8:	f000 fa00 	bl	800e9bc <raise>
 800e5bc:	2001      	movs	r0, #1
 800e5be:	f7f9 f8b5 	bl	800772c <_exit>

0800e5c2 <__sfputc_r>:
 800e5c2:	6893      	ldr	r3, [r2, #8]
 800e5c4:	3b01      	subs	r3, #1
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	b410      	push	{r4}
 800e5ca:	6093      	str	r3, [r2, #8]
 800e5cc:	da08      	bge.n	800e5e0 <__sfputc_r+0x1e>
 800e5ce:	6994      	ldr	r4, [r2, #24]
 800e5d0:	42a3      	cmp	r3, r4
 800e5d2:	db01      	blt.n	800e5d8 <__sfputc_r+0x16>
 800e5d4:	290a      	cmp	r1, #10
 800e5d6:	d103      	bne.n	800e5e0 <__sfputc_r+0x1e>
 800e5d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5dc:	f000 b932 	b.w	800e844 <__swbuf_r>
 800e5e0:	6813      	ldr	r3, [r2, #0]
 800e5e2:	1c58      	adds	r0, r3, #1
 800e5e4:	6010      	str	r0, [r2, #0]
 800e5e6:	7019      	strb	r1, [r3, #0]
 800e5e8:	4608      	mov	r0, r1
 800e5ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5ee:	4770      	bx	lr

0800e5f0 <__sfputs_r>:
 800e5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f2:	4606      	mov	r6, r0
 800e5f4:	460f      	mov	r7, r1
 800e5f6:	4614      	mov	r4, r2
 800e5f8:	18d5      	adds	r5, r2, r3
 800e5fa:	42ac      	cmp	r4, r5
 800e5fc:	d101      	bne.n	800e602 <__sfputs_r+0x12>
 800e5fe:	2000      	movs	r0, #0
 800e600:	e007      	b.n	800e612 <__sfputs_r+0x22>
 800e602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e606:	463a      	mov	r2, r7
 800e608:	4630      	mov	r0, r6
 800e60a:	f7ff ffda 	bl	800e5c2 <__sfputc_r>
 800e60e:	1c43      	adds	r3, r0, #1
 800e610:	d1f3      	bne.n	800e5fa <__sfputs_r+0xa>
 800e612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e614 <_vfiprintf_r>:
 800e614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e618:	460d      	mov	r5, r1
 800e61a:	b09d      	sub	sp, #116	@ 0x74
 800e61c:	4614      	mov	r4, r2
 800e61e:	4698      	mov	r8, r3
 800e620:	4606      	mov	r6, r0
 800e622:	b118      	cbz	r0, 800e62c <_vfiprintf_r+0x18>
 800e624:	6a03      	ldr	r3, [r0, #32]
 800e626:	b90b      	cbnz	r3, 800e62c <_vfiprintf_r+0x18>
 800e628:	f7fd fcf2 	bl	800c010 <__sinit>
 800e62c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e62e:	07d9      	lsls	r1, r3, #31
 800e630:	d405      	bmi.n	800e63e <_vfiprintf_r+0x2a>
 800e632:	89ab      	ldrh	r3, [r5, #12]
 800e634:	059a      	lsls	r2, r3, #22
 800e636:	d402      	bmi.n	800e63e <_vfiprintf_r+0x2a>
 800e638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e63a:	f7fd fed0 	bl	800c3de <__retarget_lock_acquire_recursive>
 800e63e:	89ab      	ldrh	r3, [r5, #12]
 800e640:	071b      	lsls	r3, r3, #28
 800e642:	d501      	bpl.n	800e648 <_vfiprintf_r+0x34>
 800e644:	692b      	ldr	r3, [r5, #16]
 800e646:	b99b      	cbnz	r3, 800e670 <_vfiprintf_r+0x5c>
 800e648:	4629      	mov	r1, r5
 800e64a:	4630      	mov	r0, r6
 800e64c:	f000 f938 	bl	800e8c0 <__swsetup_r>
 800e650:	b170      	cbz	r0, 800e670 <_vfiprintf_r+0x5c>
 800e652:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e654:	07dc      	lsls	r4, r3, #31
 800e656:	d504      	bpl.n	800e662 <_vfiprintf_r+0x4e>
 800e658:	f04f 30ff 	mov.w	r0, #4294967295
 800e65c:	b01d      	add	sp, #116	@ 0x74
 800e65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e662:	89ab      	ldrh	r3, [r5, #12]
 800e664:	0598      	lsls	r0, r3, #22
 800e666:	d4f7      	bmi.n	800e658 <_vfiprintf_r+0x44>
 800e668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e66a:	f7fd feb9 	bl	800c3e0 <__retarget_lock_release_recursive>
 800e66e:	e7f3      	b.n	800e658 <_vfiprintf_r+0x44>
 800e670:	2300      	movs	r3, #0
 800e672:	9309      	str	r3, [sp, #36]	@ 0x24
 800e674:	2320      	movs	r3, #32
 800e676:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e67a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e67e:	2330      	movs	r3, #48	@ 0x30
 800e680:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e830 <_vfiprintf_r+0x21c>
 800e684:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e688:	f04f 0901 	mov.w	r9, #1
 800e68c:	4623      	mov	r3, r4
 800e68e:	469a      	mov	sl, r3
 800e690:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e694:	b10a      	cbz	r2, 800e69a <_vfiprintf_r+0x86>
 800e696:	2a25      	cmp	r2, #37	@ 0x25
 800e698:	d1f9      	bne.n	800e68e <_vfiprintf_r+0x7a>
 800e69a:	ebba 0b04 	subs.w	fp, sl, r4
 800e69e:	d00b      	beq.n	800e6b8 <_vfiprintf_r+0xa4>
 800e6a0:	465b      	mov	r3, fp
 800e6a2:	4622      	mov	r2, r4
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	f7ff ffa2 	bl	800e5f0 <__sfputs_r>
 800e6ac:	3001      	adds	r0, #1
 800e6ae:	f000 80a7 	beq.w	800e800 <_vfiprintf_r+0x1ec>
 800e6b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6b4:	445a      	add	r2, fp
 800e6b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 809f 	beq.w	800e800 <_vfiprintf_r+0x1ec>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6cc:	f10a 0a01 	add.w	sl, sl, #1
 800e6d0:	9304      	str	r3, [sp, #16]
 800e6d2:	9307      	str	r3, [sp, #28]
 800e6d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e6d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800e6da:	4654      	mov	r4, sl
 800e6dc:	2205      	movs	r2, #5
 800e6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6e2:	4853      	ldr	r0, [pc, #332]	@ (800e830 <_vfiprintf_r+0x21c>)
 800e6e4:	f7f1 fd8c 	bl	8000200 <memchr>
 800e6e8:	9a04      	ldr	r2, [sp, #16]
 800e6ea:	b9d8      	cbnz	r0, 800e724 <_vfiprintf_r+0x110>
 800e6ec:	06d1      	lsls	r1, r2, #27
 800e6ee:	bf44      	itt	mi
 800e6f0:	2320      	movmi	r3, #32
 800e6f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6f6:	0713      	lsls	r3, r2, #28
 800e6f8:	bf44      	itt	mi
 800e6fa:	232b      	movmi	r3, #43	@ 0x2b
 800e6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e700:	f89a 3000 	ldrb.w	r3, [sl]
 800e704:	2b2a      	cmp	r3, #42	@ 0x2a
 800e706:	d015      	beq.n	800e734 <_vfiprintf_r+0x120>
 800e708:	9a07      	ldr	r2, [sp, #28]
 800e70a:	4654      	mov	r4, sl
 800e70c:	2000      	movs	r0, #0
 800e70e:	f04f 0c0a 	mov.w	ip, #10
 800e712:	4621      	mov	r1, r4
 800e714:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e718:	3b30      	subs	r3, #48	@ 0x30
 800e71a:	2b09      	cmp	r3, #9
 800e71c:	d94b      	bls.n	800e7b6 <_vfiprintf_r+0x1a2>
 800e71e:	b1b0      	cbz	r0, 800e74e <_vfiprintf_r+0x13a>
 800e720:	9207      	str	r2, [sp, #28]
 800e722:	e014      	b.n	800e74e <_vfiprintf_r+0x13a>
 800e724:	eba0 0308 	sub.w	r3, r0, r8
 800e728:	fa09 f303 	lsl.w	r3, r9, r3
 800e72c:	4313      	orrs	r3, r2
 800e72e:	9304      	str	r3, [sp, #16]
 800e730:	46a2      	mov	sl, r4
 800e732:	e7d2      	b.n	800e6da <_vfiprintf_r+0xc6>
 800e734:	9b03      	ldr	r3, [sp, #12]
 800e736:	1d19      	adds	r1, r3, #4
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	9103      	str	r1, [sp, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	bfbb      	ittet	lt
 800e740:	425b      	neglt	r3, r3
 800e742:	f042 0202 	orrlt.w	r2, r2, #2
 800e746:	9307      	strge	r3, [sp, #28]
 800e748:	9307      	strlt	r3, [sp, #28]
 800e74a:	bfb8      	it	lt
 800e74c:	9204      	strlt	r2, [sp, #16]
 800e74e:	7823      	ldrb	r3, [r4, #0]
 800e750:	2b2e      	cmp	r3, #46	@ 0x2e
 800e752:	d10a      	bne.n	800e76a <_vfiprintf_r+0x156>
 800e754:	7863      	ldrb	r3, [r4, #1]
 800e756:	2b2a      	cmp	r3, #42	@ 0x2a
 800e758:	d132      	bne.n	800e7c0 <_vfiprintf_r+0x1ac>
 800e75a:	9b03      	ldr	r3, [sp, #12]
 800e75c:	1d1a      	adds	r2, r3, #4
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	9203      	str	r2, [sp, #12]
 800e762:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e766:	3402      	adds	r4, #2
 800e768:	9305      	str	r3, [sp, #20]
 800e76a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e840 <_vfiprintf_r+0x22c>
 800e76e:	7821      	ldrb	r1, [r4, #0]
 800e770:	2203      	movs	r2, #3
 800e772:	4650      	mov	r0, sl
 800e774:	f7f1 fd44 	bl	8000200 <memchr>
 800e778:	b138      	cbz	r0, 800e78a <_vfiprintf_r+0x176>
 800e77a:	9b04      	ldr	r3, [sp, #16]
 800e77c:	eba0 000a 	sub.w	r0, r0, sl
 800e780:	2240      	movs	r2, #64	@ 0x40
 800e782:	4082      	lsls	r2, r0
 800e784:	4313      	orrs	r3, r2
 800e786:	3401      	adds	r4, #1
 800e788:	9304      	str	r3, [sp, #16]
 800e78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e78e:	4829      	ldr	r0, [pc, #164]	@ (800e834 <_vfiprintf_r+0x220>)
 800e790:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e794:	2206      	movs	r2, #6
 800e796:	f7f1 fd33 	bl	8000200 <memchr>
 800e79a:	2800      	cmp	r0, #0
 800e79c:	d03f      	beq.n	800e81e <_vfiprintf_r+0x20a>
 800e79e:	4b26      	ldr	r3, [pc, #152]	@ (800e838 <_vfiprintf_r+0x224>)
 800e7a0:	bb1b      	cbnz	r3, 800e7ea <_vfiprintf_r+0x1d6>
 800e7a2:	9b03      	ldr	r3, [sp, #12]
 800e7a4:	3307      	adds	r3, #7
 800e7a6:	f023 0307 	bic.w	r3, r3, #7
 800e7aa:	3308      	adds	r3, #8
 800e7ac:	9303      	str	r3, [sp, #12]
 800e7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7b0:	443b      	add	r3, r7
 800e7b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7b4:	e76a      	b.n	800e68c <_vfiprintf_r+0x78>
 800e7b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7ba:	460c      	mov	r4, r1
 800e7bc:	2001      	movs	r0, #1
 800e7be:	e7a8      	b.n	800e712 <_vfiprintf_r+0xfe>
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	3401      	adds	r4, #1
 800e7c4:	9305      	str	r3, [sp, #20]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	f04f 0c0a 	mov.w	ip, #10
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7d2:	3a30      	subs	r2, #48	@ 0x30
 800e7d4:	2a09      	cmp	r2, #9
 800e7d6:	d903      	bls.n	800e7e0 <_vfiprintf_r+0x1cc>
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d0c6      	beq.n	800e76a <_vfiprintf_r+0x156>
 800e7dc:	9105      	str	r1, [sp, #20]
 800e7de:	e7c4      	b.n	800e76a <_vfiprintf_r+0x156>
 800e7e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7e4:	4604      	mov	r4, r0
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	e7f0      	b.n	800e7cc <_vfiprintf_r+0x1b8>
 800e7ea:	ab03      	add	r3, sp, #12
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	462a      	mov	r2, r5
 800e7f0:	4b12      	ldr	r3, [pc, #72]	@ (800e83c <_vfiprintf_r+0x228>)
 800e7f2:	a904      	add	r1, sp, #16
 800e7f4:	4630      	mov	r0, r6
 800e7f6:	f3af 8000 	nop.w
 800e7fa:	4607      	mov	r7, r0
 800e7fc:	1c78      	adds	r0, r7, #1
 800e7fe:	d1d6      	bne.n	800e7ae <_vfiprintf_r+0x19a>
 800e800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e802:	07d9      	lsls	r1, r3, #31
 800e804:	d405      	bmi.n	800e812 <_vfiprintf_r+0x1fe>
 800e806:	89ab      	ldrh	r3, [r5, #12]
 800e808:	059a      	lsls	r2, r3, #22
 800e80a:	d402      	bmi.n	800e812 <_vfiprintf_r+0x1fe>
 800e80c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e80e:	f7fd fde7 	bl	800c3e0 <__retarget_lock_release_recursive>
 800e812:	89ab      	ldrh	r3, [r5, #12]
 800e814:	065b      	lsls	r3, r3, #25
 800e816:	f53f af1f 	bmi.w	800e658 <_vfiprintf_r+0x44>
 800e81a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e81c:	e71e      	b.n	800e65c <_vfiprintf_r+0x48>
 800e81e:	ab03      	add	r3, sp, #12
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	462a      	mov	r2, r5
 800e824:	4b05      	ldr	r3, [pc, #20]	@ (800e83c <_vfiprintf_r+0x228>)
 800e826:	a904      	add	r1, sp, #16
 800e828:	4630      	mov	r0, r6
 800e82a:	f7ff f9df 	bl	800dbec <_printf_i>
 800e82e:	e7e4      	b.n	800e7fa <_vfiprintf_r+0x1e6>
 800e830:	08025428 	.word	0x08025428
 800e834:	08025432 	.word	0x08025432
 800e838:	00000000 	.word	0x00000000
 800e83c:	0800e5f1 	.word	0x0800e5f1
 800e840:	0802542e 	.word	0x0802542e

0800e844 <__swbuf_r>:
 800e844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e846:	460e      	mov	r6, r1
 800e848:	4614      	mov	r4, r2
 800e84a:	4605      	mov	r5, r0
 800e84c:	b118      	cbz	r0, 800e856 <__swbuf_r+0x12>
 800e84e:	6a03      	ldr	r3, [r0, #32]
 800e850:	b90b      	cbnz	r3, 800e856 <__swbuf_r+0x12>
 800e852:	f7fd fbdd 	bl	800c010 <__sinit>
 800e856:	69a3      	ldr	r3, [r4, #24]
 800e858:	60a3      	str	r3, [r4, #8]
 800e85a:	89a3      	ldrh	r3, [r4, #12]
 800e85c:	071a      	lsls	r2, r3, #28
 800e85e:	d501      	bpl.n	800e864 <__swbuf_r+0x20>
 800e860:	6923      	ldr	r3, [r4, #16]
 800e862:	b943      	cbnz	r3, 800e876 <__swbuf_r+0x32>
 800e864:	4621      	mov	r1, r4
 800e866:	4628      	mov	r0, r5
 800e868:	f000 f82a 	bl	800e8c0 <__swsetup_r>
 800e86c:	b118      	cbz	r0, 800e876 <__swbuf_r+0x32>
 800e86e:	f04f 37ff 	mov.w	r7, #4294967295
 800e872:	4638      	mov	r0, r7
 800e874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e876:	6823      	ldr	r3, [r4, #0]
 800e878:	6922      	ldr	r2, [r4, #16]
 800e87a:	1a98      	subs	r0, r3, r2
 800e87c:	6963      	ldr	r3, [r4, #20]
 800e87e:	b2f6      	uxtb	r6, r6
 800e880:	4283      	cmp	r3, r0
 800e882:	4637      	mov	r7, r6
 800e884:	dc05      	bgt.n	800e892 <__swbuf_r+0x4e>
 800e886:	4621      	mov	r1, r4
 800e888:	4628      	mov	r0, r5
 800e88a:	f7ff fca1 	bl	800e1d0 <_fflush_r>
 800e88e:	2800      	cmp	r0, #0
 800e890:	d1ed      	bne.n	800e86e <__swbuf_r+0x2a>
 800e892:	68a3      	ldr	r3, [r4, #8]
 800e894:	3b01      	subs	r3, #1
 800e896:	60a3      	str	r3, [r4, #8]
 800e898:	6823      	ldr	r3, [r4, #0]
 800e89a:	1c5a      	adds	r2, r3, #1
 800e89c:	6022      	str	r2, [r4, #0]
 800e89e:	701e      	strb	r6, [r3, #0]
 800e8a0:	6962      	ldr	r2, [r4, #20]
 800e8a2:	1c43      	adds	r3, r0, #1
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d004      	beq.n	800e8b2 <__swbuf_r+0x6e>
 800e8a8:	89a3      	ldrh	r3, [r4, #12]
 800e8aa:	07db      	lsls	r3, r3, #31
 800e8ac:	d5e1      	bpl.n	800e872 <__swbuf_r+0x2e>
 800e8ae:	2e0a      	cmp	r6, #10
 800e8b0:	d1df      	bne.n	800e872 <__swbuf_r+0x2e>
 800e8b2:	4621      	mov	r1, r4
 800e8b4:	4628      	mov	r0, r5
 800e8b6:	f7ff fc8b 	bl	800e1d0 <_fflush_r>
 800e8ba:	2800      	cmp	r0, #0
 800e8bc:	d0d9      	beq.n	800e872 <__swbuf_r+0x2e>
 800e8be:	e7d6      	b.n	800e86e <__swbuf_r+0x2a>

0800e8c0 <__swsetup_r>:
 800e8c0:	b538      	push	{r3, r4, r5, lr}
 800e8c2:	4b29      	ldr	r3, [pc, #164]	@ (800e968 <__swsetup_r+0xa8>)
 800e8c4:	4605      	mov	r5, r0
 800e8c6:	6818      	ldr	r0, [r3, #0]
 800e8c8:	460c      	mov	r4, r1
 800e8ca:	b118      	cbz	r0, 800e8d4 <__swsetup_r+0x14>
 800e8cc:	6a03      	ldr	r3, [r0, #32]
 800e8ce:	b90b      	cbnz	r3, 800e8d4 <__swsetup_r+0x14>
 800e8d0:	f7fd fb9e 	bl	800c010 <__sinit>
 800e8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8d8:	0719      	lsls	r1, r3, #28
 800e8da:	d422      	bmi.n	800e922 <__swsetup_r+0x62>
 800e8dc:	06da      	lsls	r2, r3, #27
 800e8de:	d407      	bmi.n	800e8f0 <__swsetup_r+0x30>
 800e8e0:	2209      	movs	r2, #9
 800e8e2:	602a      	str	r2, [r5, #0]
 800e8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8e8:	81a3      	strh	r3, [r4, #12]
 800e8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ee:	e033      	b.n	800e958 <__swsetup_r+0x98>
 800e8f0:	0758      	lsls	r0, r3, #29
 800e8f2:	d512      	bpl.n	800e91a <__swsetup_r+0x5a>
 800e8f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e8f6:	b141      	cbz	r1, 800e90a <__swsetup_r+0x4a>
 800e8f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e8fc:	4299      	cmp	r1, r3
 800e8fe:	d002      	beq.n	800e906 <__swsetup_r+0x46>
 800e900:	4628      	mov	r0, r5
 800e902:	f7fd fd85 	bl	800c410 <_free_r>
 800e906:	2300      	movs	r3, #0
 800e908:	6363      	str	r3, [r4, #52]	@ 0x34
 800e90a:	89a3      	ldrh	r3, [r4, #12]
 800e90c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e910:	81a3      	strh	r3, [r4, #12]
 800e912:	2300      	movs	r3, #0
 800e914:	6063      	str	r3, [r4, #4]
 800e916:	6923      	ldr	r3, [r4, #16]
 800e918:	6023      	str	r3, [r4, #0]
 800e91a:	89a3      	ldrh	r3, [r4, #12]
 800e91c:	f043 0308 	orr.w	r3, r3, #8
 800e920:	81a3      	strh	r3, [r4, #12]
 800e922:	6923      	ldr	r3, [r4, #16]
 800e924:	b94b      	cbnz	r3, 800e93a <__swsetup_r+0x7a>
 800e926:	89a3      	ldrh	r3, [r4, #12]
 800e928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e92c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e930:	d003      	beq.n	800e93a <__swsetup_r+0x7a>
 800e932:	4621      	mov	r1, r4
 800e934:	4628      	mov	r0, r5
 800e936:	f000 f883 	bl	800ea40 <__smakebuf_r>
 800e93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e93e:	f013 0201 	ands.w	r2, r3, #1
 800e942:	d00a      	beq.n	800e95a <__swsetup_r+0x9a>
 800e944:	2200      	movs	r2, #0
 800e946:	60a2      	str	r2, [r4, #8]
 800e948:	6962      	ldr	r2, [r4, #20]
 800e94a:	4252      	negs	r2, r2
 800e94c:	61a2      	str	r2, [r4, #24]
 800e94e:	6922      	ldr	r2, [r4, #16]
 800e950:	b942      	cbnz	r2, 800e964 <__swsetup_r+0xa4>
 800e952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e956:	d1c5      	bne.n	800e8e4 <__swsetup_r+0x24>
 800e958:	bd38      	pop	{r3, r4, r5, pc}
 800e95a:	0799      	lsls	r1, r3, #30
 800e95c:	bf58      	it	pl
 800e95e:	6962      	ldrpl	r2, [r4, #20]
 800e960:	60a2      	str	r2, [r4, #8]
 800e962:	e7f4      	b.n	800e94e <__swsetup_r+0x8e>
 800e964:	2000      	movs	r0, #0
 800e966:	e7f7      	b.n	800e958 <__swsetup_r+0x98>
 800e968:	200029d8 	.word	0x200029d8

0800e96c <_raise_r>:
 800e96c:	291f      	cmp	r1, #31
 800e96e:	b538      	push	{r3, r4, r5, lr}
 800e970:	4605      	mov	r5, r0
 800e972:	460c      	mov	r4, r1
 800e974:	d904      	bls.n	800e980 <_raise_r+0x14>
 800e976:	2316      	movs	r3, #22
 800e978:	6003      	str	r3, [r0, #0]
 800e97a:	f04f 30ff 	mov.w	r0, #4294967295
 800e97e:	bd38      	pop	{r3, r4, r5, pc}
 800e980:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e982:	b112      	cbz	r2, 800e98a <_raise_r+0x1e>
 800e984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e988:	b94b      	cbnz	r3, 800e99e <_raise_r+0x32>
 800e98a:	4628      	mov	r0, r5
 800e98c:	f000 f830 	bl	800e9f0 <_getpid_r>
 800e990:	4622      	mov	r2, r4
 800e992:	4601      	mov	r1, r0
 800e994:	4628      	mov	r0, r5
 800e996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e99a:	f000 b817 	b.w	800e9cc <_kill_r>
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d00a      	beq.n	800e9b8 <_raise_r+0x4c>
 800e9a2:	1c59      	adds	r1, r3, #1
 800e9a4:	d103      	bne.n	800e9ae <_raise_r+0x42>
 800e9a6:	2316      	movs	r3, #22
 800e9a8:	6003      	str	r3, [r0, #0]
 800e9aa:	2001      	movs	r0, #1
 800e9ac:	e7e7      	b.n	800e97e <_raise_r+0x12>
 800e9ae:	2100      	movs	r1, #0
 800e9b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	4798      	blx	r3
 800e9b8:	2000      	movs	r0, #0
 800e9ba:	e7e0      	b.n	800e97e <_raise_r+0x12>

0800e9bc <raise>:
 800e9bc:	4b02      	ldr	r3, [pc, #8]	@ (800e9c8 <raise+0xc>)
 800e9be:	4601      	mov	r1, r0
 800e9c0:	6818      	ldr	r0, [r3, #0]
 800e9c2:	f7ff bfd3 	b.w	800e96c <_raise_r>
 800e9c6:	bf00      	nop
 800e9c8:	200029d8 	.word	0x200029d8

0800e9cc <_kill_r>:
 800e9cc:	b538      	push	{r3, r4, r5, lr}
 800e9ce:	4d07      	ldr	r5, [pc, #28]	@ (800e9ec <_kill_r+0x20>)
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	4608      	mov	r0, r1
 800e9d6:	4611      	mov	r1, r2
 800e9d8:	602b      	str	r3, [r5, #0]
 800e9da:	f7f8 fe97 	bl	800770c <_kill>
 800e9de:	1c43      	adds	r3, r0, #1
 800e9e0:	d102      	bne.n	800e9e8 <_kill_r+0x1c>
 800e9e2:	682b      	ldr	r3, [r5, #0]
 800e9e4:	b103      	cbz	r3, 800e9e8 <_kill_r+0x1c>
 800e9e6:	6023      	str	r3, [r4, #0]
 800e9e8:	bd38      	pop	{r3, r4, r5, pc}
 800e9ea:	bf00      	nop
 800e9ec:	200036c4 	.word	0x200036c4

0800e9f0 <_getpid_r>:
 800e9f0:	f7f8 be84 	b.w	80076fc <_getpid>

0800e9f4 <__swhatbuf_r>:
 800e9f4:	b570      	push	{r4, r5, r6, lr}
 800e9f6:	460c      	mov	r4, r1
 800e9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9fc:	2900      	cmp	r1, #0
 800e9fe:	b096      	sub	sp, #88	@ 0x58
 800ea00:	4615      	mov	r5, r2
 800ea02:	461e      	mov	r6, r3
 800ea04:	da0d      	bge.n	800ea22 <__swhatbuf_r+0x2e>
 800ea06:	89a3      	ldrh	r3, [r4, #12]
 800ea08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ea0c:	f04f 0100 	mov.w	r1, #0
 800ea10:	bf14      	ite	ne
 800ea12:	2340      	movne	r3, #64	@ 0x40
 800ea14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ea18:	2000      	movs	r0, #0
 800ea1a:	6031      	str	r1, [r6, #0]
 800ea1c:	602b      	str	r3, [r5, #0]
 800ea1e:	b016      	add	sp, #88	@ 0x58
 800ea20:	bd70      	pop	{r4, r5, r6, pc}
 800ea22:	466a      	mov	r2, sp
 800ea24:	f000 f848 	bl	800eab8 <_fstat_r>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	dbec      	blt.n	800ea06 <__swhatbuf_r+0x12>
 800ea2c:	9901      	ldr	r1, [sp, #4]
 800ea2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ea32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ea36:	4259      	negs	r1, r3
 800ea38:	4159      	adcs	r1, r3
 800ea3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea3e:	e7eb      	b.n	800ea18 <__swhatbuf_r+0x24>

0800ea40 <__smakebuf_r>:
 800ea40:	898b      	ldrh	r3, [r1, #12]
 800ea42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea44:	079d      	lsls	r5, r3, #30
 800ea46:	4606      	mov	r6, r0
 800ea48:	460c      	mov	r4, r1
 800ea4a:	d507      	bpl.n	800ea5c <__smakebuf_r+0x1c>
 800ea4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ea50:	6023      	str	r3, [r4, #0]
 800ea52:	6123      	str	r3, [r4, #16]
 800ea54:	2301      	movs	r3, #1
 800ea56:	6163      	str	r3, [r4, #20]
 800ea58:	b003      	add	sp, #12
 800ea5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea5c:	ab01      	add	r3, sp, #4
 800ea5e:	466a      	mov	r2, sp
 800ea60:	f7ff ffc8 	bl	800e9f4 <__swhatbuf_r>
 800ea64:	9f00      	ldr	r7, [sp, #0]
 800ea66:	4605      	mov	r5, r0
 800ea68:	4639      	mov	r1, r7
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f7fc fb74 	bl	800b158 <_malloc_r>
 800ea70:	b948      	cbnz	r0, 800ea86 <__smakebuf_r+0x46>
 800ea72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea76:	059a      	lsls	r2, r3, #22
 800ea78:	d4ee      	bmi.n	800ea58 <__smakebuf_r+0x18>
 800ea7a:	f023 0303 	bic.w	r3, r3, #3
 800ea7e:	f043 0302 	orr.w	r3, r3, #2
 800ea82:	81a3      	strh	r3, [r4, #12]
 800ea84:	e7e2      	b.n	800ea4c <__smakebuf_r+0xc>
 800ea86:	89a3      	ldrh	r3, [r4, #12]
 800ea88:	6020      	str	r0, [r4, #0]
 800ea8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea8e:	81a3      	strh	r3, [r4, #12]
 800ea90:	9b01      	ldr	r3, [sp, #4]
 800ea92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ea96:	b15b      	cbz	r3, 800eab0 <__smakebuf_r+0x70>
 800ea98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	f000 f81d 	bl	800eadc <_isatty_r>
 800eaa2:	b128      	cbz	r0, 800eab0 <__smakebuf_r+0x70>
 800eaa4:	89a3      	ldrh	r3, [r4, #12]
 800eaa6:	f023 0303 	bic.w	r3, r3, #3
 800eaaa:	f043 0301 	orr.w	r3, r3, #1
 800eaae:	81a3      	strh	r3, [r4, #12]
 800eab0:	89a3      	ldrh	r3, [r4, #12]
 800eab2:	431d      	orrs	r5, r3
 800eab4:	81a5      	strh	r5, [r4, #12]
 800eab6:	e7cf      	b.n	800ea58 <__smakebuf_r+0x18>

0800eab8 <_fstat_r>:
 800eab8:	b538      	push	{r3, r4, r5, lr}
 800eaba:	4d07      	ldr	r5, [pc, #28]	@ (800ead8 <_fstat_r+0x20>)
 800eabc:	2300      	movs	r3, #0
 800eabe:	4604      	mov	r4, r0
 800eac0:	4608      	mov	r0, r1
 800eac2:	4611      	mov	r1, r2
 800eac4:	602b      	str	r3, [r5, #0]
 800eac6:	f7f8 fe81 	bl	80077cc <_fstat>
 800eaca:	1c43      	adds	r3, r0, #1
 800eacc:	d102      	bne.n	800ead4 <_fstat_r+0x1c>
 800eace:	682b      	ldr	r3, [r5, #0]
 800ead0:	b103      	cbz	r3, 800ead4 <_fstat_r+0x1c>
 800ead2:	6023      	str	r3, [r4, #0]
 800ead4:	bd38      	pop	{r3, r4, r5, pc}
 800ead6:	bf00      	nop
 800ead8:	200036c4 	.word	0x200036c4

0800eadc <_isatty_r>:
 800eadc:	b538      	push	{r3, r4, r5, lr}
 800eade:	4d06      	ldr	r5, [pc, #24]	@ (800eaf8 <_isatty_r+0x1c>)
 800eae0:	2300      	movs	r3, #0
 800eae2:	4604      	mov	r4, r0
 800eae4:	4608      	mov	r0, r1
 800eae6:	602b      	str	r3, [r5, #0]
 800eae8:	f7f8 fe80 	bl	80077ec <_isatty>
 800eaec:	1c43      	adds	r3, r0, #1
 800eaee:	d102      	bne.n	800eaf6 <_isatty_r+0x1a>
 800eaf0:	682b      	ldr	r3, [r5, #0]
 800eaf2:	b103      	cbz	r3, 800eaf6 <_isatty_r+0x1a>
 800eaf4:	6023      	str	r3, [r4, #0]
 800eaf6:	bd38      	pop	{r3, r4, r5, pc}
 800eaf8:	200036c4 	.word	0x200036c4

0800eafc <_init>:
 800eafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eafe:	bf00      	nop
 800eb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb02:	bc08      	pop	{r3}
 800eb04:	469e      	mov	lr, r3
 800eb06:	4770      	bx	lr

0800eb08 <_fini>:
 800eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0a:	bf00      	nop
 800eb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb0e:	bc08      	pop	{r3}
 800eb10:	469e      	mov	lr, r3
 800eb12:	4770      	bx	lr
