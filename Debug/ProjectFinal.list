
ProjectFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000be84  0800c348  0800c348  0000d348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080181cc  080181cc  0001aa18  2**0
                  CONTENTS
  4 .ARM          00000008  080181cc  080181cc  000191cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080181d4  080181d4  0001aa18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080181d4  080181d4  000191d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080181d8  080181d8  000191d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a18  20000000  080181dc  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001aa18  2**0
                  CONTENTS
 10 .bss          000003e8  20000a18  20000a18  0001aa18  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e00  20000e00  0001aa18  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001aa18  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013234  00000000  00000000  0001aa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000361b  00000000  00000000  0002dc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001388  00000000  00000000  00031298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ee7  00000000  00000000  00032620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d36  00000000  00000000  00055507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cef2e  00000000  00000000  0006d23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c16b  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000e5d  00000000  00000000  0013c1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000062e8  00000000  00000000  0013d00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001432f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a18 	.word	0x20000a18
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c32c 	.word	0x0800c32c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a1c 	.word	0x20000a1c
 80001cc:	0800c32c 	.word	0x0800c32c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b9a0 	b.w	8000f34 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f83c 	bl	8000c78 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2lz>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	460d      	mov	r5, r1
 8000c16:	f7ff ff71 	bl	8000afc <__aeabi_dcmplt>
 8000c1a:	b928      	cbnz	r0, 8000c28 <__aeabi_d2lz+0x1c>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b80a 	b.w	8000c3c <__aeabi_d2ulz>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c2e:	f000 f805 	bl	8000c3c <__aeabi_d2ulz>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2ulz>:
 8000c3c:	b5d0      	push	{r4, r6, r7, lr}
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <__aeabi_d2ulz+0x34>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	4606      	mov	r6, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	f7ff fce7 	bl	8000618 <__aeabi_dmul>
 8000c4a:	f7ff ffa7 	bl	8000b9c <__aeabi_d2uiz>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	f7ff fc68 	bl	8000524 <__aeabi_ui2d>
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <__aeabi_d2ulz+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fcde 	bl	8000618 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4630      	mov	r0, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	f7ff fb20 	bl	80002a8 <__aeabi_dsub>
 8000c68:	f7ff ff98 	bl	8000b9c <__aeabi_d2uiz>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c70:	3df00000 	.word	0x3df00000
 8000c74:	41f00000 	.word	0x41f00000

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <case_insensitive_strcmp+0x16>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e056      	b.n	8001000 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d10d      	bne.n	8000f76 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e050      	b.n	8001000 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e04a      	b.n	8001000 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a22      	ldr	r2, [pc, #136]	@ (800100c <case_insensitive_strcmp+0xd4>)
 8000f82:	4413      	add	r3, r2
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d103      	bne.n	8000f96 <case_insensitive_strcmp+0x5e>
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	f103 0220 	add.w	r2, r3, #32
 8000f94:	e000      	b.n	8000f98 <case_insensitive_strcmp+0x60>
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	73bb      	strb	r3, [r7, #14]
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	491a      	ldr	r1, [pc, #104]	@ (800100c <case_insensitive_strcmp+0xd4>)
 8000fa4:	440b      	add	r3, r1
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d102      	bne.n	8000fb6 <case_insensitive_strcmp+0x7e>
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	3320      	adds	r3, #32
 8000fb4:	e000      	b.n	8000fb8 <case_insensitive_strcmp+0x80>
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d0d0      	beq.n	8000f5e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	737b      	strb	r3, [r7, #13]
 8000fc2:	7b7b      	ldrb	r3, [r7, #13]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a11      	ldr	r2, [pc, #68]	@ (800100c <case_insensitive_strcmp+0xd4>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d103      	bne.n	8000fdc <case_insensitive_strcmp+0xa4>
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	f103 0220 	add.w	r2, r3, #32
 8000fda:	e000      	b.n	8000fde <case_insensitive_strcmp+0xa6>
 8000fdc:	7b7a      	ldrb	r2, [r7, #13]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	733b      	strb	r3, [r7, #12]
 8000fe4:	7b3b      	ldrb	r3, [r7, #12]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4908      	ldr	r1, [pc, #32]	@ (800100c <case_insensitive_strcmp+0xd4>)
 8000fea:	440b      	add	r3, r1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d102      	bne.n	8000ffc <case_insensitive_strcmp+0xc4>
 8000ff6:	7b3b      	ldrb	r3, [r7, #12]
 8000ff8:	3320      	adds	r3, #32
 8000ffa:	e000      	b.n	8000ffe <case_insensitive_strcmp+0xc6>
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	1ad3      	subs	r3, r2, r3
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	08017e58 	.word	0x08017e58

08001010 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2028      	movs	r0, #40	@ 0x28
 800101e:	4798      	blx	r3
 8001020:	60f8      	str	r0, [r7, #12]
    if (node)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001028:	2228      	movs	r2, #40	@ 0x28
 800102a:	2100      	movs	r1, #0
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f008 fd49 	bl	8009ac4 <memset>
    }

    return node;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001048:	e03d      	b.n	80010c6 <cJSON_Delete+0x8a>
    {
        next = item->next;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001058:	2b00      	cmp	r3, #0
 800105a:	d108      	bne.n	800106e <cJSON_Delete+0x32>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d004      	beq.n	800106e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ffe7 	bl	800103c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10c      	bne.n	8001094 <cJSON_Delete+0x58>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d008      	beq.n	8001094 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <cJSON_Delete+0x9c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6912      	ldr	r2, [r2, #16]
 800108a:	4610      	mov	r0, r2
 800108c:	4798      	blx	r3
            item->valuestring = NULL;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10c      	bne.n	80010ba <cJSON_Delete+0x7e>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <cJSON_Delete+0x9c>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6a12      	ldr	r2, [r2, #32]
 80010b0:	4610      	mov	r0, r2
 80010b2:	4798      	blx	r3
            item->string = NULL;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <cJSON_Delete+0x9c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	4798      	blx	r3
        item = next;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1be      	bne.n	800104a <cJSON_Delete+0xe>
    }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000000 	.word	0x20000000

080010dc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80010e0:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	0000      	movs	r0, r0
	...

080010f0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b098      	sub	sp, #96	@ 0x60
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
    double number = 0;
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 8001106:	2300      	movs	r3, #0
 8001108:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800110a:	f7ff ffe7 	bl	80010dc <get_decimal_point>
 800110e:	4603      	mov	r3, r0
 8001110:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <parse_number+0x36>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <parse_number+0x3a>
    {
        return false;
 8001126:	2300      	movs	r3, #0
 8001128:	e0a0      	b.n	800126c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800112a:	2300      	movs	r3, #0
 800112c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800112e:	e03d      	b.n	80011ac <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	6899      	ldr	r1, [r3, #8]
 8001138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800113a:	440b      	add	r3, r1
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b45      	cmp	r3, #69	@ 0x45
 8001142:	dc17      	bgt.n	8001174 <parse_number+0x84>
 8001144:	2b2b      	cmp	r3, #43	@ 0x2b
 8001146:	db40      	blt.n	80011ca <parse_number+0xda>
 8001148:	3b2b      	subs	r3, #43	@ 0x2b
 800114a:	2201      	movs	r2, #1
 800114c:	409a      	lsls	r2, r3
 800114e:	4b4c      	ldr	r3, [pc, #304]	@ (8001280 <parse_number+0x190>)
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	bf14      	ite	ne
 8001156:	2301      	movne	r3, #1
 8001158:	2300      	moveq	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10b      	bne.n	8001178 <parse_number+0x88>
 8001160:	f002 0308 	and.w	r3, r2, #8
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf14      	ite	ne
 8001168:	2301      	movne	r3, #1
 800116a:	2300      	moveq	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d111      	bne.n	8001196 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8001172:	e02a      	b.n	80011ca <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8001174:	2b65      	cmp	r3, #101	@ 0x65
 8001176:	d128      	bne.n	80011ca <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6899      	ldr	r1, [r3, #8]
 8001180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001182:	440b      	add	r3, r1
 8001184:	4413      	add	r3, r2
 8001186:	7819      	ldrb	r1, [r3, #0]
 8001188:	f107 0208 	add.w	r2, r7, #8
 800118c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800118e:	4413      	add	r3, r2
 8001190:	460a      	mov	r2, r1
 8001192:	701a      	strb	r2, [r3, #0]
                break;
 8001194:	e007      	b.n	80011a6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8001196:	f107 0208 	add.w	r2, r7, #8
 800119a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800119c:	4413      	add	r3, r2
 800119e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80011a2:	701a      	strb	r2, [r3, #0]
                break;
 80011a4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80011a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011a8:	3301      	adds	r3, #1
 80011aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80011b0:	d80d      	bhi.n	80011ce <parse_number+0xde>
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00a      	beq.n	80011ce <parse_number+0xde>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011be:	441a      	add	r2, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d3b3      	bcc.n	8001130 <parse_number+0x40>
        }
    }
loop_end:
 80011c8:	e001      	b.n	80011ce <parse_number+0xde>
                goto loop_end;
 80011ca:	bf00      	nop
 80011cc:	e000      	b.n	80011d0 <parse_number+0xe0>
loop_end:
 80011ce:	bf00      	nop
    number_c_string[i] = '\0';
 80011d0:	f107 0208 	add.w	r2, r7, #8
 80011d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011d6:	4413      	add	r3, r2
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80011dc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f008 faee 	bl	80097c8 <strtod>
 80011ec:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80011f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d101      	bne.n	80011fe <parse_number+0x10e>
    {
        return false; /* parse_error */
 80011fa:	2300      	movs	r3, #0
 80011fc:	e036      	b.n	800126c <parse_number+0x17c>
    }

    item->valuedouble = number;
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001204:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001208:	a31b      	add	r3, pc, #108	@ (adr r3, 8001278 <parse_number+0x188>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001212:	f7ff fc87 	bl	8000b24 <__aeabi_dcmpge>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001222:	615a      	str	r2, [r3, #20]
 8001224:	e015      	b.n	8001252 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <parse_number+0x194>)
 800122c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001230:	f7ff fc6e 	bl	8000b10 <__aeabi_dcmple>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d004      	beq.n	8001244 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001240:	615a      	str	r2, [r3, #20]
 8001242:	e006      	b.n	8001252 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001244:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001248:	f7ff fc80 	bl	8000b4c <__aeabi_d2iz>
 800124c:	4602      	mov	r2, r0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2208      	movs	r2, #8
 8001256:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800125e:	f107 0208 	add.w	r2, r7, #8
 8001262:	1a8a      	subs	r2, r1, r2
 8001264:	441a      	add	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	609a      	str	r2, [r3, #8]
    return true;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3760      	adds	r7, #96	@ 0x60
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	f3af 8000 	nop.w
 8001278:	ffc00000 	.word	0xffc00000
 800127c:	41dfffff 	.word	0x41dfffff
 8001280:	04007fe5 	.word	0x04007fe5
 8001284:	c1e00000 	.word	0xc1e00000

08001288 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	e04c      	b.n	8001338 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80012a8:	d90f      	bls.n	80012ca <parse_hex4+0x42>
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b39      	cmp	r3, #57	@ 0x39
 80012b4:	d809      	bhi.n	80012ca <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	3b30      	subs	r3, #48	@ 0x30
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	e02d      	b.n	8001326 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b40      	cmp	r3, #64	@ 0x40
 80012d4:	d90f      	bls.n	80012f6 <parse_hex4+0x6e>
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4413      	add	r3, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b46      	cmp	r3, #70	@ 0x46
 80012e0:	d809      	bhi.n	80012f6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	3b37      	subs	r3, #55	@ 0x37
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	e017      	b.n	8001326 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b60      	cmp	r3, #96	@ 0x60
 8001300:	d90f      	bls.n	8001322 <parse_hex4+0x9a>
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b66      	cmp	r3, #102	@ 0x66
 800130c:	d809      	bhi.n	8001322 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	3b57      	subs	r3, #87	@ 0x57
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	e001      	b.n	8001326 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001322:	2300      	movs	r3, #0
 8001324:	e00c      	b.n	8001340 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d802      	bhi.n	8001332 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	3301      	adds	r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d9af      	bls.n	800129e <parse_hex4+0x16>
        }
    }

    return h;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b05      	cmp	r3, #5
 8001384:	f340 80b7 	ble.w	80014f6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	3302      	adds	r3, #2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff7b 	bl	8001288 <parse_hex4>
 8001392:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800139a:	d304      	bcc.n	80013a6 <utf16_literal_to_utf8+0x5a>
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80013a2:	f0c0 80aa 	bcc.w	80014fa <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80013ac:	d337      	bcc.n	800141e <utf16_literal_to_utf8+0xd2>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80013b4:	d233      	bcs.n	800141e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	3306      	adds	r3, #6
 80013ba:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80013c0:	230c      	movs	r3, #12
 80013c2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	f340 8096 	ble.w	80014fe <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b5c      	cmp	r3, #92	@ 0x5c
 80013d8:	f040 8093 	bne.w	8001502 <utf16_literal_to_utf8+0x1b6>
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b75      	cmp	r3, #117	@ 0x75
 80013e4:	f040 808d 	bne.w	8001502 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3302      	adds	r3, #2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff4b 	bl	8001288 <parse_hex4>
 80013f2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80013fa:	f0c0 8084 	bcc.w	8001506 <utf16_literal_to_utf8+0x1ba>
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001404:	d27f      	bcs.n	8001506 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	029a      	lsls	r2, r3, #10
 800140a:	4b43      	ldr	r3, [pc, #268]	@ (8001518 <utf16_literal_to_utf8+0x1cc>)
 800140c:	4013      	ands	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001414:	4313      	orrs	r3, r2
 8001416:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800141c:	e004      	b.n	8001428 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800141e:	2306      	movs	r3, #6
 8001420:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	2b7f      	cmp	r3, #127	@ 0x7f
 800142c:	d803      	bhi.n	8001436 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001434:	e01f      	b.n	8001476 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800143c:	d206      	bcs.n	800144c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800143e:	2302      	movs	r3, #2
 8001440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001444:	23c0      	movs	r3, #192	@ 0xc0
 8001446:	f887 3020 	strb.w	r3, [r7, #32]
 800144a:	e014      	b.n	8001476 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001452:	d206      	bcs.n	8001462 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001454:	2303      	movs	r3, #3
 8001456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800145a:	23e0      	movs	r3, #224	@ 0xe0
 800145c:	f887 3020 	strb.w	r3, [r7, #32]
 8001460:	e009      	b.n	8001476 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001468:	d24f      	bcs.n	800150a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800146a:	2304      	movs	r3, #4
 800146c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001470:	23f0      	movs	r3, #240	@ 0xf0
 8001472:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001476:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800147a:	3b01      	subs	r3, #1
 800147c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001480:	e015      	b.n	80014ae <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800148a:	b2da      	uxtb	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6819      	ldr	r1, [r3, #0]
 8001490:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001494:	440b      	add	r3, r1
 8001496:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	099b      	lsrs	r3, r3, #6
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80014a4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014a8:	3b01      	subs	r3, #1
 80014aa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80014ae:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1e5      	bne.n	8001482 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80014b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d909      	bls.n	80014d2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	b2d9      	uxtb	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	e007      	b.n	80014e2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014ea:	441a      	add	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80014f0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80014f4:	e00b      	b.n	800150e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80014f6:	bf00      	nop
 80014f8:	e008      	b.n	800150c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80014fa:	bf00      	nop
 80014fc:	e006      	b.n	800150c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80014fe:	bf00      	nop
 8001500:	e004      	b.n	800150c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001502:	bf00      	nop
 8001504:	e002      	b.n	800150c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001506:	bf00      	nop
 8001508:	e000      	b.n	800150c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800150a:	bf00      	nop

fail:
    return 0;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3728      	adds	r7, #40	@ 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	000ffc00 	.word	0x000ffc00

0800151c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	@ 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	3301      	adds	r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	3301      	adds	r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b22      	cmp	r3, #34	@ 0x22
 8001558:	f040 8103 	bne.w	8001762 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001564:	e017      	b.n	8001596 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b5c      	cmp	r3, #92	@ 0x5c
 800156c:	d110      	bne.n	8001590 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	461a      	mov	r2, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	f080 80f1 	bcs.w	8001766 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	3301      	adds	r3, #1
 8001588:	61bb      	str	r3, [r7, #24]
                input_end++;
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	3301      	adds	r3, #1
 800158e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	3301      	adds	r3, #1
 8001594:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a3a      	ldr	r2, [r7, #32]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d203      	bcs.n	80015b0 <parse_string+0x94>
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b22      	cmp	r3, #34	@ 0x22
 80015ae:	d1da      	bne.n	8001566 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6a3a      	ldr	r2, [r7, #32]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	f080 80d3 	bcs.w	800176a <parse_string+0x24e>
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b22      	cmp	r3, #34	@ 0x22
 80015ca:	f040 80ce 	bne.w	800176a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	4413      	add	r3, r2
 80015d8:	6a3a      	ldr	r2, [r7, #32]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	3201      	adds	r2, #1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4798      	blx	r3
 80015f0:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80ba 	beq.w	800176e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80015fe:	e094      	b.n	800172a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b5c      	cmp	r3, #92	@ 0x5c
 8001606:	d008      	beq.n	800161a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160a:	1c53      	adds	r3, r2, #1
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1c59      	adds	r1, r3, #1
 8001612:	60f9      	str	r1, [r7, #12]
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e087      	b.n	800172a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800161a:	2302      	movs	r3, #2
 800161c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800161e:	6a3a      	ldr	r2, [r7, #32]
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	f340 80a4 	ble.w	8001772 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	3301      	adds	r3, #1
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b75      	cmp	r3, #117	@ 0x75
 8001632:	f300 80a0 	bgt.w	8001776 <parse_string+0x25a>
 8001636:	2b5c      	cmp	r3, #92	@ 0x5c
 8001638:	da04      	bge.n	8001644 <parse_string+0x128>
 800163a:	2b22      	cmp	r3, #34	@ 0x22
 800163c:	d05c      	beq.n	80016f8 <parse_string+0x1dc>
 800163e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001640:	d05a      	beq.n	80016f8 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001642:	e098      	b.n	8001776 <parse_string+0x25a>
            switch (input_pointer[1])
 8001644:	3b5c      	subs	r3, #92	@ 0x5c
 8001646:	2b19      	cmp	r3, #25
 8001648:	f200 8095 	bhi.w	8001776 <parse_string+0x25a>
 800164c:	a201      	add	r2, pc, #4	@ (adr r2, 8001654 <parse_string+0x138>)
 800164e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001652:	bf00      	nop
 8001654:	080016f9 	.word	0x080016f9
 8001658:	08001777 	.word	0x08001777
 800165c:	08001777 	.word	0x08001777
 8001660:	08001777 	.word	0x08001777
 8001664:	08001777 	.word	0x08001777
 8001668:	08001777 	.word	0x08001777
 800166c:	080016bd 	.word	0x080016bd
 8001670:	08001777 	.word	0x08001777
 8001674:	08001777 	.word	0x08001777
 8001678:	08001777 	.word	0x08001777
 800167c:	080016c9 	.word	0x080016c9
 8001680:	08001777 	.word	0x08001777
 8001684:	08001777 	.word	0x08001777
 8001688:	08001777 	.word	0x08001777
 800168c:	08001777 	.word	0x08001777
 8001690:	08001777 	.word	0x08001777
 8001694:	08001777 	.word	0x08001777
 8001698:	08001777 	.word	0x08001777
 800169c:	080016d5 	.word	0x080016d5
 80016a0:	08001777 	.word	0x08001777
 80016a4:	08001777 	.word	0x08001777
 80016a8:	08001777 	.word	0x08001777
 80016ac:	080016e1 	.word	0x080016e1
 80016b0:	08001777 	.word	0x08001777
 80016b4:	080016ed 	.word	0x080016ed
 80016b8:	08001709 	.word	0x08001709
                    *output_pointer++ = '\b';
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	60fa      	str	r2, [r7, #12]
 80016c2:	2208      	movs	r2, #8
 80016c4:	701a      	strb	r2, [r3, #0]
                    break;
 80016c6:	e02c      	b.n	8001722 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60fa      	str	r2, [r7, #12]
 80016ce:	220c      	movs	r2, #12
 80016d0:	701a      	strb	r2, [r3, #0]
                    break;
 80016d2:	e026      	b.n	8001722 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60fa      	str	r2, [r7, #12]
 80016da:	220a      	movs	r2, #10
 80016dc:	701a      	strb	r2, [r3, #0]
                    break;
 80016de:	e020      	b.n	8001722 <parse_string+0x206>
                    *output_pointer++ = '\r';
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60fa      	str	r2, [r7, #12]
 80016e6:	220d      	movs	r2, #13
 80016e8:	701a      	strb	r2, [r3, #0]
                    break;
 80016ea:	e01a      	b.n	8001722 <parse_string+0x206>
                    *output_pointer++ = '\t';
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60fa      	str	r2, [r7, #12]
 80016f2:	2209      	movs	r2, #9
 80016f4:	701a      	strb	r2, [r3, #0]
                    break;
 80016f6:	e014      	b.n	8001722 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1c59      	adds	r1, r3, #1
 8001700:	60f9      	str	r1, [r7, #12]
 8001702:	7812      	ldrb	r2, [r2, #0]
 8001704:	701a      	strb	r2, [r3, #0]
                    break;
 8001706:	e00c      	b.n	8001722 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	461a      	mov	r2, r3
 800170e:	6a39      	ldr	r1, [r7, #32]
 8001710:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001712:	f7ff fe1b 	bl	800134c <utf16_literal_to_utf8>
 8001716:	4603      	mov	r3, r0
 8001718:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d02c      	beq.n	800177a <parse_string+0x25e>
                    break;
 8001720:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001726:	4413      	add	r3, r2
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800172a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	429a      	cmp	r2, r3
 8001730:	f4ff af66 	bcc.w	8001600 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2210      	movs	r2, #16
 800173e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a3a      	ldr	r2, [r7, #32]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	461a      	mov	r2, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	609a      	str	r2, [r3, #8]

    return true;
 800175e:	2301      	movs	r3, #1
 8001760:	e020      	b.n	80017a4 <parse_string+0x288>
        goto fail;
 8001762:	bf00      	nop
 8001764:	e00a      	b.n	800177c <parse_string+0x260>
                    goto fail;
 8001766:	bf00      	nop
 8001768:	e008      	b.n	800177c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800176a:	bf00      	nop
 800176c:	e006      	b.n	800177c <parse_string+0x260>
            goto fail; /* allocation failure */
 800176e:	bf00      	nop
 8001770:	e004      	b.n	800177c <parse_string+0x260>
                goto fail;
 8001772:	bf00      	nop
 8001774:	e002      	b.n	800177c <parse_string+0x260>
                    goto fail;
 8001776:	bf00      	nop
 8001778:	e000      	b.n	800177c <parse_string+0x260>
                        goto fail;
 800177a:	bf00      	nop

fail:
    if (output != NULL)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	69f8      	ldr	r0, [r7, #28]
 8001788:	4798      	blx	r3
        output = NULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	461a      	mov	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	609a      	str	r2, [r3, #8]
    }

    return false;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3728      	adds	r7, #40	@ 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <buffer_skip_whitespace+0x16>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e02c      	b.n	8001820 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <buffer_skip_whitespace+0x2c>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d306      	bcc.n	80017e6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	e021      	b.n	8001820 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00d      	beq.n	8001808 <buffer_skip_whitespace+0x5c>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <buffer_skip_whitespace+0x5c>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4413      	add	r3, r2
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b20      	cmp	r3, #32
 8001806:	d9e9      	bls.n	80017dc <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	d104      	bne.n	800181e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800181e:	687b      	ldr	r3, [r7, #4]
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <skip_utf8_bom+0x1e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <skip_utf8_bom+0x1e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <skip_utf8_bom+0x22>
    {
        return NULL;
 800184a:	2300      	movs	r3, #0
 800184c:	e01c      	b.n	8001888 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d018      	beq.n	8001886 <skip_utf8_bom+0x5a>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	1d1a      	adds	r2, r3, #4
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	d211      	bcs.n	8001886 <skip_utf8_bom+0x5a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	4413      	add	r3, r2
 800186c:	2203      	movs	r2, #3
 800186e:	4908      	ldr	r1, [pc, #32]	@ (8001890 <skip_utf8_bom+0x64>)
 8001870:	4618      	mov	r0, r3
 8001872:	f008 f942 	bl	8009afa <strncmp>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d104      	bne.n	8001886 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	1cda      	adds	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001886:	687b      	ldr	r3, [r7, #4]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	0800c380 	.word	0x0800c380

08001894 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e00c      	b.n	80018c4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f7fe fc9a 	bl	80001e4 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	3301      	adds	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	6979      	ldr	r1, [r7, #20]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f805 	bl	80018cc <cJSON_ParseWithLengthOpts>
 80018c2:	4603      	mov	r3, r0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	@ 0x38
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80018da:	f107 0318 	add.w	r3, r7, #24
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 80018f2:	4b41      	ldr	r3, [pc, #260]	@ (80019f8 <cJSON_ParseWithLengthOpts+0x12c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80018f8:	4b3f      	ldr	r3, [pc, #252]	@ (80019f8 <cJSON_ParseWithLengthOpts+0x12c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d042      	beq.n	800198a <cJSON_ParseWithLengthOpts+0xbe>
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d03f      	beq.n	800198a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001916:	4a39      	ldr	r2, [pc, #228]	@ (80019fc <cJSON_ParseWithLengthOpts+0x130>)
 8001918:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800191c:	ca07      	ldmia	r2, {r0, r1, r2}
 800191e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001922:	4836      	ldr	r0, [pc, #216]	@ (80019fc <cJSON_ParseWithLengthOpts+0x130>)
 8001924:	f7ff fb74 	bl	8001010 <cJSON_New_Item>
 8001928:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800192a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800192c:	2b00      	cmp	r3, #0
 800192e:	d02e      	beq.n	800198e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001930:	f107 0318 	add.w	r3, r7, #24
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff79 	bl	800182c <skip_utf8_bom>
 800193a:	4603      	mov	r3, r0
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff35 	bl	80017ac <buffer_skip_whitespace>
 8001942:	4603      	mov	r3, r0
 8001944:	4619      	mov	r1, r3
 8001946:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001948:	f000 f868 	bl	8001a1c <parse_value>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d01f      	beq.n	8001992 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00e      	beq.n	8001976 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff25 	bl	80017ac <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001962:	6a3a      	ldr	r2, [r7, #32]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	429a      	cmp	r2, r3
 8001968:	d215      	bcs.n	8001996 <cJSON_ParseWithLengthOpts+0xca>
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10f      	bne.n	8001996 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	441a      	add	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001988:	e031      	b.n	80019ee <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800198a:	bf00      	nop
 800198c:	e004      	b.n	8001998 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800198e:	bf00      	nop
 8001990:	e002      	b.n	8001998 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001992:	bf00      	nop
 8001994:	e000      	b.n	8001998 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001996:	bf00      	nop

fail:
    if (item != NULL)
 8001998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800199e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80019a0:	f7ff fb4c 	bl	800103c <cJSON_Delete>
    }

    if (value != NULL)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d020      	beq.n	80019ec <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80019b2:	6a3a      	ldr	r2, [r7, #32]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d202      	bcs.n	80019c0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e005      	b.n	80019cc <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d004      	beq.n	80019dc <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	441a      	add	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <cJSON_ParseWithLengthOpts+0x12c>)
 80019de:	461a      	mov	r2, r3
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019e8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3738      	adds	r7, #56	@ 0x38
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000a34 	.word	0x20000a34
 80019fc:	20000000 	.word	0x20000000

08001a00 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff41 	bl	8001894 <cJSON_ParseWithOpts>
 8001a12:	4603      	mov	r3, r0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <parse_value+0x18>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <parse_value+0x1c>
    {
        return false; /* no input */
 8001a34:	2300      	movs	r3, #0
 8001a36:	e0d2      	b.n	8001bde <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d01d      	beq.n	8001a7a <parse_value+0x5e>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	1d1a      	adds	r2, r3, #4
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d816      	bhi.n	8001a7a <parse_value+0x5e>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4413      	add	r3, r2
 8001a56:	2204      	movs	r2, #4
 8001a58:	4963      	ldr	r1, [pc, #396]	@ (8001be8 <parse_value+0x1cc>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f008 f84d 	bl	8009afa <strncmp>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2204      	movs	r2, #4
 8001a6a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	1d1a      	adds	r2, r3, #4
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	609a      	str	r2, [r3, #8]
        return true;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0b1      	b.n	8001bde <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01d      	beq.n	8001abc <parse_value+0xa0>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	1d5a      	adds	r2, r3, #5
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d816      	bhi.n	8001abc <parse_value+0xa0>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	4413      	add	r3, r2
 8001a98:	2205      	movs	r2, #5
 8001a9a:	4954      	ldr	r1, [pc, #336]	@ (8001bec <parse_value+0x1d0>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f008 f82c 	bl	8009afa <strncmp>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d109      	bne.n	8001abc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	1d5a      	adds	r2, r3, #5
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	609a      	str	r2, [r3, #8]
        return true;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e090      	b.n	8001bde <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d020      	beq.n	8001b04 <parse_value+0xe8>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	1d1a      	adds	r2, r3, #4
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d819      	bhi.n	8001b04 <parse_value+0xe8>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4413      	add	r3, r2
 8001ada:	2204      	movs	r2, #4
 8001adc:	4944      	ldr	r1, [pc, #272]	@ (8001bf0 <parse_value+0x1d4>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f008 f80b 	bl	8009afa <strncmp>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10c      	bne.n	8001b04 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	1d1a      	adds	r2, r3, #4
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	609a      	str	r2, [r3, #8]
        return true;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e06c      	b.n	8001bde <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d013      	beq.n	8001b32 <parse_value+0x116>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d20d      	bcs.n	8001b32 <parse_value+0x116>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	4413      	add	r3, r2
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b22      	cmp	r3, #34	@ 0x22
 8001b24:	d105      	bne.n	8001b32 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001b26:	6839      	ldr	r1, [r7, #0]
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff fcf7 	bl	800151c <parse_string>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	e055      	b.n	8001bde <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d023      	beq.n	8001b80 <parse_value+0x164>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d21d      	bcs.n	8001b80 <parse_value+0x164>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b2d      	cmp	r3, #45	@ 0x2d
 8001b52:	d00f      	beq.n	8001b74 <parse_value+0x158>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b62:	d90d      	bls.n	8001b80 <parse_value+0x164>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b39      	cmp	r3, #57	@ 0x39
 8001b72:	d805      	bhi.n	8001b80 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001b74:	6839      	ldr	r1, [r7, #0]
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff faba 	bl	80010f0 <parse_number>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	e02e      	b.n	8001bde <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d013      	beq.n	8001bae <parse_value+0x192>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d20d      	bcs.n	8001bae <parse_value+0x192>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001ba0:	d105      	bne.n	8001bae <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001ba2:	6839      	ldr	r1, [r7, #0]
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f825 	bl	8001bf4 <parse_array>
 8001baa:	4603      	mov	r3, r0
 8001bac:	e017      	b.n	8001bde <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <parse_value+0x1c0>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d20d      	bcs.n	8001bdc <parse_value+0x1c0>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4413      	add	r3, r2
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b7b      	cmp	r3, #123	@ 0x7b
 8001bce:	d105      	bne.n	8001bdc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001bd0:	6839      	ldr	r1, [r7, #0]
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8d2 	bl	8001d7c <parse_object>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	e000      	b.n	8001bde <parse_value+0x1c2>
    }

    return false;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	0800c354 	.word	0x0800c354
 8001bec:	0800c384 	.word	0x0800c384
 8001bf0:	0800c38c 	.word	0x0800c38c

08001bf4 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c0e:	d301      	bcc.n	8001c14 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001c10:	2300      	movs	r3, #0
 8001c12:	e0af      	b.n	8001d74 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c2c:	f040 8094 	bne.w	8001d58 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001c3a:	6838      	ldr	r0, [r7, #0]
 8001c3c:	f7ff fdb6 	bl	80017ac <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00d      	beq.n	8001c62 <parse_array+0x6e>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d207      	bcs.n	8001c62 <parse_array+0x6e>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b5d      	cmp	r3, #93	@ 0x5d
 8001c60:	d061      	beq.n	8001d26 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <parse_array+0x80>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d305      	bcc.n	8001c80 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001c7e:	e072      	b.n	8001d66 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	1e5a      	subs	r2, r3, #1
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	3310      	adds	r3, #16
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f9be 	bl	8001010 <cJSON_New_Item>
 8001c94:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d05f      	beq.n	8001d5c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d104      	bne.n	8001cac <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	e007      	b.n	8001cbc <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001cc6:	6838      	ldr	r0, [r7, #0]
 8001cc8:	f7ff fd70 	bl	80017ac <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001ccc:	6839      	ldr	r1, [r7, #0]
 8001cce:	6938      	ldr	r0, [r7, #16]
 8001cd0:	f7ff fea4 	bl	8001a1c <parse_value>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d042      	beq.n	8001d60 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f7ff fd66 	bl	80017ac <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00d      	beq.n	8001d02 <parse_array+0x10e>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d207      	bcs.n	8001d02 <parse_array+0x10e>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d00:	d0c3      	beq.n	8001c8a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d02d      	beq.n	8001d64 <parse_array+0x170>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d227      	bcs.n	8001d64 <parse_array+0x170>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b5d      	cmp	r3, #93	@ 0x5d
 8001d22:	d11f      	bne.n	8001d64 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001d24:	e000      	b.n	8001d28 <parse_array+0x134>
        goto success;
 8001d26:	bf00      	nop
    input_buffer->depth--;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	1e5a      	subs	r2, r3, #1
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <parse_array+0x14a>
        head->prev = current_item;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2220      	movs	r2, #32
 8001d42:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	609a      	str	r2, [r3, #8]

    return true;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e00d      	b.n	8001d74 <parse_array+0x180>
        goto fail;
 8001d58:	bf00      	nop
 8001d5a:	e004      	b.n	8001d66 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001d5c:	bf00      	nop
 8001d5e:	e002      	b.n	8001d66 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001d60:	bf00      	nop
 8001d62:	e000      	b.n	8001d66 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001d64:	bf00      	nop

fail:
    if (head != NULL)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001d6c:	6978      	ldr	r0, [r7, #20]
 8001d6e:	f7ff f965 	bl	800103c <cJSON_Delete>
    }

    return false;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d96:	d301      	bcc.n	8001d9c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e0f7      	b.n	8001f8c <parse_object+0x210>
    }
    input_buffer->depth++;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80db 	beq.w	8001f64 <parse_object+0x1e8>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	f080 80d4 	bcs.w	8001f64 <parse_object+0x1e8>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b7b      	cmp	r3, #123	@ 0x7b
 8001dca:	f040 80cb 	bne.w	8001f64 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001dd8:	6838      	ldr	r0, [r7, #0]
 8001dda:	f7ff fce7 	bl	80017ac <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00e      	beq.n	8001e02 <parse_object+0x86>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d208      	bcs.n	8001e02 <parse_object+0x86>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4413      	add	r3, r2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b7d      	cmp	r3, #125	@ 0x7d
 8001dfe:	f000 8098 	beq.w	8001f32 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <parse_object+0x98>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d305      	bcc.n	8001e20 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001e1e:	e0ae      	b.n	8001f7e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	1e5a      	subs	r2, r3, #1
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	3310      	adds	r3, #16
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f8ee 	bl	8001010 <cJSON_New_Item>
 8001e34:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 8095 	beq.w	8001f68 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d104      	bne.n	8001e4e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	e007      	b.n	8001e5e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8083 	beq.w	8001f6c <parse_object+0x1f0>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d27b      	bcs.n	8001f6c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001e7e:	6838      	ldr	r0, [r7, #0]
 8001e80:	f7ff fc94 	bl	80017ac <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001e84:	6839      	ldr	r1, [r7, #0]
 8001e86:	6938      	ldr	r0, [r7, #16]
 8001e88:	f7ff fb48 	bl	800151c <parse_string>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d06e      	beq.n	8001f70 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001e92:	6838      	ldr	r0, [r7, #0]
 8001e94:	f7ff fc8a 	bl	80017ac <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d063      	beq.n	8001f74 <parse_object+0x1f8>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d25d      	bcs.n	8001f74 <parse_object+0x1f8>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001ec6:	d155      	bne.n	8001f74 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f7ff fc6a 	bl	80017ac <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001ed8:	6839      	ldr	r1, [r7, #0]
 8001eda:	6938      	ldr	r0, [r7, #16]
 8001edc:	f7ff fd9e 	bl	8001a1c <parse_value>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d048      	beq.n	8001f78 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001ee6:	6838      	ldr	r0, [r7, #0]
 8001ee8:	f7ff fc60 	bl	80017ac <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00d      	beq.n	8001f0e <parse_object+0x192>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d207      	bcs.n	8001f0e <parse_object+0x192>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001f0c:	d08d      	beq.n	8001e2a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d033      	beq.n	8001f7c <parse_object+0x200>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d22d      	bcs.n	8001f7c <parse_object+0x200>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4413      	add	r3, r2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b7d      	cmp	r3, #125	@ 0x7d
 8001f2e:	d125      	bne.n	8001f7c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8001f30:	e000      	b.n	8001f34 <parse_object+0x1b8>
        goto success; /* empty object */
 8001f32:	bf00      	nop
    input_buffer->depth--;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	1e5a      	subs	r2, r3, #1
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <parse_object+0x1ce>
        head->prev = current_item;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2240      	movs	r2, #64	@ 0x40
 8001f4e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	609a      	str	r2, [r3, #8]
    return true;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e013      	b.n	8001f8c <parse_object+0x210>
        goto fail; /* not an object */
 8001f64:	bf00      	nop
 8001f66:	e00a      	b.n	8001f7e <parse_object+0x202>
            goto fail; /* allocation failure */
 8001f68:	bf00      	nop
 8001f6a:	e008      	b.n	8001f7e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8001f6c:	bf00      	nop
 8001f6e:	e006      	b.n	8001f7e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8001f70:	bf00      	nop
 8001f72:	e004      	b.n	8001f7e <parse_object+0x202>
            goto fail; /* invalid object */
 8001f74:	bf00      	nop
 8001f76:	e002      	b.n	8001f7e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8001f78:	bf00      	nop
 8001f7a:	e000      	b.n	8001f7e <parse_object+0x202>
        goto fail; /* expected end of object */
 8001f7c:	bf00      	nop

fail:
    if (head != NULL)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8001f84:	6978      	ldr	r0, [r7, #20]
 8001f86:	f7ff f859 	bl	800103c <cJSON_Delete>
    }

    return false;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <cJSON_GetArraySize>:
    return true;
}

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <cJSON_GetArraySize+0x1a>
    {
        return 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e00d      	b.n	8001fca <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 8001fb4:	e005      	b.n	8001fc2 <cJSON_GetArraySize+0x2e>
    {
        size++;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
        child = child->next;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f6      	bne.n	8001fb6 <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <get_array_item+0x18>
    {
        return NULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e010      	b.n	8002010 <get_array_item+0x3a>
    }

    current_child = array->child;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8001ff4:	e005      	b.n	8002002 <get_array_item+0x2c>
    {
        index--;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <get_array_item+0x38>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f3      	bne.n	8001ff6 <get_array_item+0x20>
    }

    return current_child;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da01      	bge.n	8002030 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 800202c:	2300      	movs	r3, #0
 800202e:	e005      	b.n	800203c <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ffce 	bl	8001fd6 <get_array_item>
 800203a:	4603      	mov	r3, r0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <get_object_item+0x1c>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <get_object_item+0x20>
    {
        return NULL;
 8002060:	2300      	movs	r3, #0
 8002062:	e033      	b.n	80020cc <get_object_item+0x88>
    }

    current_element = object->child;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d017      	beq.n	80020a0 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002070:	e002      	b.n	8002078 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01c      	beq.n	80020b8 <get_object_item+0x74>
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d018      	beq.n	80020b8 <get_object_item+0x74>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4619      	mov	r1, r3
 800208c:	68b8      	ldr	r0, [r7, #8]
 800208e:	f7fe f89f 	bl	80001d0 <strcmp>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ec      	bne.n	8002072 <get_object_item+0x2e>
 8002098:	e00e      	b.n	80020b8 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <get_object_item+0x74>
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4619      	mov	r1, r3
 80020ac:	68b8      	ldr	r0, [r7, #8]
 80020ae:	f7fe ff43 	bl	8000f38 <case_insensitive_strcmp>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <get_object_item+0x82>
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <get_object_item+0x86>
        return NULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <get_object_item+0x88>
    }

    return current_element;
 80020ca:	697b      	ldr	r3, [r7, #20]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 80020de:	2200      	movs	r2, #0
 80020e0:	6839      	ldr	r1, [r7, #0]
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffae 	bl	8002044 <get_object_item>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <setCalibrationMatrix>:
#include "calibrate.h"

int setCalibrationMatrix( POINT_T * displayPtr,
						  POINT_T * screenPtr,
                          MATRIX * matrixPtr)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b087      	sub	sp, #28
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]

    int  retValue = OK ;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]



    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3310      	adds	r3, #16
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	3208      	adds	r2, #8
 8002112:	6851      	ldr	r1, [r2, #4]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	3210      	adds	r2, #16
 8002118:	6852      	ldr	r2, [r2, #4]
 800211a:	1a8a      	subs	r2, r1, r2
 800211c:	fb03 f202 	mul.w	r2, r3, r2
                         ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	3308      	adds	r3, #8
 8002124:	6819      	ldr	r1, [r3, #0]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3310      	adds	r3, #16
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	1acb      	subs	r3, r1, r3
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	6848      	ldr	r0, [r1, #4]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	3110      	adds	r1, #16
 8002136:	6849      	ldr	r1, [r1, #4]
 8002138:	1a41      	subs	r1, r0, r1
 800213a:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 800213e:	1ad2      	subs	r2, r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	619a      	str	r2, [r3, #24]

    if( matrixPtr->Divider == 0 )
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <setCalibrationMatrix+0x62>
    {
        retValue = NOT_OK ;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e105      	b.n	8002360 <setCalibrationMatrix+0x26e>
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3310      	adds	r3, #16
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	3208      	adds	r2, #8
 8002164:	6851      	ldr	r1, [r2, #4]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	3210      	adds	r2, #16
 800216a:	6852      	ldr	r2, [r2, #4]
 800216c:	1a8a      	subs	r2, r1, r2
 800216e:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3308      	adds	r3, #8
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3310      	adds	r3, #16
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1acb      	subs	r3, r1, r3
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	6848      	ldr	r0, [r1, #4]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	3110      	adds	r1, #16
 8002188:	6849      	ldr	r1, [r1, #4]
 800218a:	1a41      	subs	r1, r0, r1
 800218c:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8002190:	1ad2      	subs	r2, r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	601a      	str	r2, [r3, #0]

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3310      	adds	r3, #16
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	3208      	adds	r2, #8
 80021a6:	6811      	ldr	r1, [r2, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	3210      	adds	r2, #16
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	1a8a      	subs	r2, r1, r2
 80021b0:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6819      	ldr	r1, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3310      	adds	r3, #16
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	1acb      	subs	r3, r1, r3
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	3108      	adds	r1, #8
 80021c4:	6808      	ldr	r0, [r1, #0]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	3110      	adds	r1, #16
 80021ca:	6809      	ldr	r1, [r1, #0]
 80021cc:	1a41      	subs	r1, r0, r1
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 80021d2:	1ad2      	subs	r2, r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	605a      	str	r2, [r3, #4]

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	3310      	adds	r3, #16
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	3208      	adds	r2, #8
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	fb03 f202 	mul.w	r2, r3, r2
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	3308      	adds	r3, #8
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	3110      	adds	r1, #16
 80021f2:	6809      	ldr	r1, [r1, #0]
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	6852      	ldr	r2, [r2, #4]
 80021fe:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	3110      	adds	r1, #16
 800220a:	6809      	ldr	r1, [r1, #0]
 800220c:	fb03 f101 	mul.w	r1, r3, r1
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	3310      	adds	r3, #16
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	6800      	ldr	r0, [r0, #0]
 800221a:	fb00 f303 	mul.w	r3, r0, r3
 800221e:	1acb      	subs	r3, r1, r3
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	3108      	adds	r1, #8
 8002224:	6849      	ldr	r1, [r1, #4]
 8002226:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 800222a:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	3308      	adds	r3, #8
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	6809      	ldr	r1, [r1, #0]
 8002236:	fb03 f101 	mul.w	r1, r3, r1
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	3008      	adds	r0, #8
 8002242:	6800      	ldr	r0, [r0, #0]
 8002244:	fb00 f303 	mul.w	r3, r0, r3
 8002248:	1acb      	subs	r3, r1, r3
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	3110      	adds	r1, #16
 800224e:	6849      	ldr	r1, [r1, #4]
 8002250:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8002254:	441a      	add	r2, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	609a      	str	r2, [r3, #8]

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3310      	adds	r3, #16
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	3208      	adds	r2, #8
 800226a:	6851      	ldr	r1, [r2, #4]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	3210      	adds	r2, #16
 8002270:	6852      	ldr	r2, [r2, #4]
 8002272:	1a8a      	subs	r2, r1, r2
 8002274:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3308      	adds	r3, #8
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3310      	adds	r3, #16
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	1acb      	subs	r3, r1, r3
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	6848      	ldr	r0, [r1, #4]
 800228a:	68b9      	ldr	r1, [r7, #8]
 800228c:	3110      	adds	r1, #16
 800228e:	6849      	ldr	r1, [r1, #4]
 8002290:	1a41      	subs	r1, r0, r1
 8002292:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 8002296:	1ad2      	subs	r2, r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	60da      	str	r2, [r3, #12]

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	3310      	adds	r3, #16
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	3208      	adds	r2, #8
 80022ac:	6851      	ldr	r1, [r2, #4]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	3210      	adds	r2, #16
 80022b2:	6852      	ldr	r2, [r2, #4]
 80022b4:	1a8a      	subs	r2, r1, r2
 80022b6:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6859      	ldr	r1, [r3, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3310      	adds	r3, #16
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	1acb      	subs	r3, r1, r3
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	3108      	adds	r1, #8
 80022ca:	6808      	ldr	r0, [r1, #0]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	3110      	adds	r1, #16
 80022d0:	6809      	ldr	r1, [r1, #0]
 80022d2:	1a41      	subs	r1, r0, r1
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 80022d8:	1ad2      	subs	r2, r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3310      	adds	r3, #16
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	3208      	adds	r2, #8
 80022e8:	6852      	ldr	r2, [r2, #4]
 80022ea:	fb03 f202 	mul.w	r2, r3, r2
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	3308      	adds	r3, #8
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68f9      	ldr	r1, [r7, #12]
 80022f6:	3110      	adds	r1, #16
 80022f8:	6849      	ldr	r1, [r1, #4]
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	6852      	ldr	r2, [r2, #4]
 8002304:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68f9      	ldr	r1, [r7, #12]
 800230e:	3110      	adds	r1, #16
 8002310:	6849      	ldr	r1, [r1, #4]
 8002312:	fb03 f101 	mul.w	r1, r3, r1
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3310      	adds	r3, #16
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	6840      	ldr	r0, [r0, #4]
 8002320:	fb00 f303 	mul.w	r3, r0, r3
 8002324:	1acb      	subs	r3, r1, r3
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	3108      	adds	r1, #8
 800232a:	6849      	ldr	r1, [r1, #4]
 800232c:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8002330:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3308      	adds	r3, #8
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68f9      	ldr	r1, [r7, #12]
 800233a:	6849      	ldr	r1, [r1, #4]
 800233c:	fb03 f101 	mul.w	r1, r3, r1
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	3008      	adds	r0, #8
 8002348:	6840      	ldr	r0, [r0, #4]
 800234a:	fb00 f303 	mul.w	r3, r0, r3
 800234e:	1acb      	subs	r3, r1, r3
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	3110      	adds	r1, #16
 8002354:	6849      	ldr	r1, [r1, #4]
 8002356:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 800235a:	441a      	add	r2, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	615a      	str	r2, [r3, #20]
    }

    return( retValue ) ;
 8002360:	697b      	ldr	r3, [r7, #20]

} /* end of setCalibrationMatrix() */
 8002362:	4618      	mov	r0, r3
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <getDisplayPoint>:
 *
 */
int getDisplayPoint( POINT_T * displayPtr,
					 POINT_T * screenPtr,
                     MATRIX * matrixPtr )
{
 800236e:	b480      	push	{r7}
 8002370:	b087      	sub	sp, #28
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
    int retValue = OK ;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]


    if( matrixPtr->Divider != 0 )
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d02c      	beq.n	80023e0 <getDisplayPoint+0x72>
        /* Operation order is important since we are doing integer */
        /*  math. Make sure you add all terms together before      */
        /*  dividing, so that the remainder is not rounded off     */
        /*  prematurely.                                           */

        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	fb03 f202 	mul.w	r2, r3, r2
                          (matrixPtr->Bn * screenPtr->y) +
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	6849      	ldr	r1, [r1, #4]
 800239a:	fb01 f303 	mul.w	r3, r1, r3
        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 800239e:	441a      	add	r2, r3
                           matrixPtr->Cn
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
                          (matrixPtr->Bn * screenPtr->y) +
 80023a4:	441a      	add	r2, r3
                        ) / matrixPtr->Divider ;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	fb92 f2f3 	sdiv	r2, r2, r3
        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	601a      	str	r2, [r3, #0]

        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	fb03 f202 	mul.w	r2, r3, r2
                          (matrixPtr->En * screenPtr->y) +
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	6849      	ldr	r1, [r1, #4]
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 80023ca:	441a      	add	r2, r3
                           matrixPtr->Fn
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
                          (matrixPtr->En * screenPtr->y) +
 80023d0:	441a      	add	r2, r3
                        ) / matrixPtr->Divider ;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	fb92 f2f3 	sdiv	r2, r2, r3
        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	e002      	b.n	80023e6 <getDisplayPoint+0x78>
    }
    else
    {
        retValue = NOT_OK;
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
 80023e4:	617b      	str	r3, [r7, #20]
    }

    return (retValue);
 80023e6:	697b      	ldr	r3, [r7, #20]

} /* end of getDisplayPoint() */
 80023e8:	4618      	mov	r0, r3
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <DrawCloud>:
  lcdDrawImage(0, (lcdGetHeight() - bmBackGround.ySize) / 2, &bmBackGround);
 }
 return HAL_GetTick() - start;
}

void DrawCloud(int x, int y) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmicon3);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	b29b      	uxth	r3, r3
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	b291      	uxth	r1, r2
 8002406:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <DrawCloud+0x24>)
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fbd5 	bl	8004bb8 <lcdDrawImage>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	08015c48 	.word	0x08015c48

0800241c <TextTitle>:

void TextTitle(int16_t x, int16_t y){
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	460a      	mov	r2, r1
 8002426:	80fb      	strh	r3, [r7, #6]
 8002428:	4613      	mov	r3, r2
 800242a:	80bb      	strh	r3, [r7, #4]
	lcdSetCursor(x, y);
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	88ba      	ldrh	r2, [r7, #4]
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fdda 	bl	8004fec <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8002438:	f249 517f 	movw	r1, #38271	@ 0x957f
 800243c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002440:	f002 fd54 	bl	8004eec <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 8002444:	4804      	ldr	r0, [pc, #16]	@ (8002458 <TextTitle+0x3c>)
 8002446:	f002 fd41 	bl	8004ecc <lcdSetTextFont>
	lcdPrintf("Weather Report\r\n");
 800244a:	4804      	ldr	r0, [pc, #16]	@ (800245c <TextTitle+0x40>)
 800244c:	f002 fcb2 	bl	8004db4 <lcdPrintf>

}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2000001c 	.word	0x2000001c
 800245c:	0800c4c0 	.word	0x0800c4c0

08002460 <CloudRain>:
	lcdDrawThickArc(x0 , y0 ,r , start_angle , -93  , thickness , COLOR_GREEN);
	lcdDrawThickArc(x0 , y0 ,r , -87 , -23  , thickness , COLOR_BLUE);
	lcdDrawThickArc(x0 , y0 ,r , -17 , end_angle  , thickness , COLOR_ORANGE);
}

void CloudRain (int x, int y){
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b085      	sub	sp, #20
 8002464:	af02      	add	r7, sp, #8
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	b218      	sxth	r0, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	b219      	sxth	r1, r3
 8002472:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	2305      	movs	r3, #5
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	230a      	movs	r3, #10
 800247e:	221e      	movs	r2, #30
 8002480:	f002 fb34 	bl	8004aec <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	b29b      	uxth	r3, r3
 8002488:	3318      	adds	r3, #24
 800248a:	b29b      	uxth	r3, r3
 800248c:	b218      	sxth	r0, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	3302      	adds	r3, #2
 8002494:	b29b      	uxth	r3, r3
 8002496:	b219      	sxth	r1, r3
 8002498:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800249c:	2207      	movs	r2, #7
 800249e:	f002 f9f0 	bl	8004882 <lcdFillCircle>
    lcdFillCircle(x + 15, y , 9, COLOR_WHITE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	330f      	adds	r3, #15
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b218      	sxth	r0, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b219      	sxth	r1, r3
 80024b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024b4:	2209      	movs	r2, #9
 80024b6:	f002 f9e4 	bl	8004882 <lcdFillCircle>

    lcdDrawLine(x + 7, y + 13, x + 5, y + 16, COLOR_BLUE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3307      	adds	r3, #7
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	b218      	sxth	r0, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	330d      	adds	r3, #13
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	b219      	sxth	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3305      	adds	r3, #5
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	b21a      	sxth	r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3310      	adds	r3, #16
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	241f      	movs	r4, #31
 80024e4:	9400      	str	r4, [sp, #0]
 80024e6:	f001 fee5 	bl	80042b4 <lcdDrawLine>
    lcdDrawLine(x + 8, y + 13, x + 6, y + 16, COLOR_BLUE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3308      	adds	r3, #8
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b218      	sxth	r0, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	330d      	adds	r3, #13
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	b219      	sxth	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	b29b      	uxth	r3, r3
 8002502:	3306      	adds	r3, #6
 8002504:	b29b      	uxth	r3, r3
 8002506:	b21a      	sxth	r2, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	3310      	adds	r3, #16
 800250e:	b29b      	uxth	r3, r3
 8002510:	b21b      	sxth	r3, r3
 8002512:	241f      	movs	r4, #31
 8002514:	9400      	str	r4, [sp, #0]
 8002516:	f001 fecd 	bl	80042b4 <lcdDrawLine>

    lcdDrawLine(x + 13, y + 13, x + 8, y + 19, COLOR_BLUE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	b29b      	uxth	r3, r3
 800251e:	330d      	adds	r3, #13
 8002520:	b29b      	uxth	r3, r3
 8002522:	b218      	sxth	r0, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	330d      	adds	r3, #13
 800252a:	b29b      	uxth	r3, r3
 800252c:	b219      	sxth	r1, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	b29b      	uxth	r3, r3
 8002532:	3308      	adds	r3, #8
 8002534:	b29b      	uxth	r3, r3
 8002536:	b21a      	sxth	r2, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	3313      	adds	r3, #19
 800253e:	b29b      	uxth	r3, r3
 8002540:	b21b      	sxth	r3, r3
 8002542:	241f      	movs	r4, #31
 8002544:	9400      	str	r4, [sp, #0]
 8002546:	f001 feb5 	bl	80042b4 <lcdDrawLine>
    lcdDrawLine(x + 14, y + 13, x + 9, y + 19, COLOR_BLUE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	b29b      	uxth	r3, r3
 800254e:	330e      	adds	r3, #14
 8002550:	b29b      	uxth	r3, r3
 8002552:	b218      	sxth	r0, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	330d      	adds	r3, #13
 800255a:	b29b      	uxth	r3, r3
 800255c:	b219      	sxth	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	b29b      	uxth	r3, r3
 8002562:	3309      	adds	r3, #9
 8002564:	b29b      	uxth	r3, r3
 8002566:	b21a      	sxth	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	3313      	adds	r3, #19
 800256e:	b29b      	uxth	r3, r3
 8002570:	b21b      	sxth	r3, r3
 8002572:	241f      	movs	r4, #31
 8002574:	9400      	str	r4, [sp, #0]
 8002576:	f001 fe9d 	bl	80042b4 <lcdDrawLine>

    lcdDrawLine(x + 19, y + 13, x + 17, y + 16, COLOR_BLUE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	b29b      	uxth	r3, r3
 800257e:	3313      	adds	r3, #19
 8002580:	b29b      	uxth	r3, r3
 8002582:	b218      	sxth	r0, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	330d      	adds	r3, #13
 800258a:	b29b      	uxth	r3, r3
 800258c:	b219      	sxth	r1, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	b29b      	uxth	r3, r3
 8002592:	3311      	adds	r3, #17
 8002594:	b29b      	uxth	r3, r3
 8002596:	b21a      	sxth	r2, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	3310      	adds	r3, #16
 800259e:	b29b      	uxth	r3, r3
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	241f      	movs	r4, #31
 80025a4:	9400      	str	r4, [sp, #0]
 80025a6:	f001 fe85 	bl	80042b4 <lcdDrawLine>
    lcdDrawLine(x + 20, y + 13, x + 18, y + 16, COLOR_BLUE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3314      	adds	r3, #20
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	b218      	sxth	r0, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	330d      	adds	r3, #13
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	b219      	sxth	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3312      	adds	r3, #18
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	b21a      	sxth	r2, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3310      	adds	r3, #16
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b21b      	sxth	r3, r3
 80025d2:	241f      	movs	r4, #31
 80025d4:	9400      	str	r4, [sp, #0]
 80025d6:	f001 fe6d 	bl	80042b4 <lcdDrawLine>

    lcdDrawLine(x + 25, y + 13, x + 20, y + 19, COLOR_BLUE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3319      	adds	r3, #25
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	b218      	sxth	r0, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	330d      	adds	r3, #13
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	b219      	sxth	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3314      	adds	r3, #20
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	b21a      	sxth	r2, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3313      	adds	r3, #19
 80025fe:	b29b      	uxth	r3, r3
 8002600:	b21b      	sxth	r3, r3
 8002602:	241f      	movs	r4, #31
 8002604:	9400      	str	r4, [sp, #0]
 8002606:	f001 fe55 	bl	80042b4 <lcdDrawLine>
    lcdDrawLine(x + 26, y + 13, x + 21, y + 19, COLOR_BLUE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	b29b      	uxth	r3, r3
 800260e:	331a      	adds	r3, #26
 8002610:	b29b      	uxth	r3, r3
 8002612:	b218      	sxth	r0, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	330d      	adds	r3, #13
 800261a:	b29b      	uxth	r3, r3
 800261c:	b219      	sxth	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	b29b      	uxth	r3, r3
 8002622:	3315      	adds	r3, #21
 8002624:	b29b      	uxth	r3, r3
 8002626:	b21a      	sxth	r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	3313      	adds	r3, #19
 800262e:	b29b      	uxth	r3, r3
 8002630:	b21b      	sxth	r3, r3
 8002632:	241f      	movs	r4, #31
 8002634:	9400      	str	r4, [sp, #0]
 8002636:	f001 fe3d 	bl	80042b4 <lcdDrawLine>
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bd90      	pop	{r4, r7, pc}

08002642 <CloudSun>:
void CloudSun (int x, int y){
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af02      	add	r7, sp, #8
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]

	lcdFillCircle(x + 21, y - 5 , 7, COLOR_DARKYELLOW);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	b29b      	uxth	r3, r3
 8002650:	3315      	adds	r3, #21
 8002652:	b29b      	uxth	r3, r3
 8002654:	b218      	sxth	r0, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b05      	subs	r3, #5
 800265c:	b29b      	uxth	r3, r3
 800265e:	b219      	sxth	r1, r3
 8002660:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002664:	2207      	movs	r2, #7
 8002666:	f002 f90c 	bl	8004882 <lcdFillCircle>
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	b218      	sxth	r0, r3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b219      	sxth	r1, r3
 8002672:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	2305      	movs	r3, #5
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	230a      	movs	r3, #10
 800267e:	221e      	movs	r2, #30
 8002680:	f002 fa34 	bl	8004aec <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	b29b      	uxth	r3, r3
 8002688:	3318      	adds	r3, #24
 800268a:	b29b      	uxth	r3, r3
 800268c:	b218      	sxth	r0, r3
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	3302      	adds	r3, #2
 8002694:	b29b      	uxth	r3, r3
 8002696:	b219      	sxth	r1, r3
 8002698:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800269c:	2207      	movs	r2, #7
 800269e:	f002 f8f0 	bl	8004882 <lcdFillCircle>
    lcdFillCircle(x + 15, y , 9, COLOR_WHITE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	330f      	adds	r3, #15
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	b218      	sxth	r0, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	b219      	sxth	r1, r3
 80026b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026b4:	2209      	movs	r2, #9
 80026b6:	f002 f8e4 	bl	8004882 <lcdFillCircle>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <CloudThunder>:
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
    lcdFillCircle(x + 20, y , 9, COLOR_WHITE);


}
void CloudThunder (int x, int y){
 80026c2:	b590      	push	{r4, r7, lr}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af02      	add	r7, sp, #8
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	b218      	sxth	r0, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b219      	sxth	r1, r3
 80026d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	2305      	movs	r3, #5
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	230a      	movs	r3, #10
 80026e0:	221e      	movs	r2, #30
 80026e2:	f002 fa03 	bl	8004aec <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3318      	adds	r3, #24
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	b218      	sxth	r0, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3302      	adds	r3, #2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	b219      	sxth	r1, r3
 80026fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026fe:	2207      	movs	r2, #7
 8002700:	f002 f8bf 	bl	8004882 <lcdFillCircle>
    lcdFillCircle(x + 15, y , 9, COLOR_WHITE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	b29b      	uxth	r3, r3
 8002708:	330f      	adds	r3, #15
 800270a:	b29b      	uxth	r3, r3
 800270c:	b218      	sxth	r0, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b219      	sxth	r1, r3
 8002712:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002716:	2209      	movs	r2, #9
 8002718:	f002 f8b3 	bl	8004882 <lcdFillCircle>

    // Draw the first thunderbolt using lines for a zigzag shape
        lcdDrawLine(x + 7, y + 10, x + 5, y + 15, COLOR_YELLOW);   // First thunderbolt
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	b29b      	uxth	r3, r3
 8002720:	3307      	adds	r3, #7
 8002722:	b29b      	uxth	r3, r3
 8002724:	b218      	sxth	r0, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	330a      	adds	r3, #10
 800272c:	b29b      	uxth	r3, r3
 800272e:	b219      	sxth	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	b29b      	uxth	r3, r3
 8002734:	3305      	adds	r3, #5
 8002736:	b29b      	uxth	r3, r3
 8002738:	b21a      	sxth	r2, r3
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	b29b      	uxth	r3, r3
 800273e:	330f      	adds	r3, #15
 8002740:	b29b      	uxth	r3, r3
 8002742:	b21b      	sxth	r3, r3
 8002744:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002748:	9400      	str	r4, [sp, #0]
 800274a:	f001 fdb3 	bl	80042b4 <lcdDrawLine>
        lcdDrawLine(x + 5, y + 15, x + 9, y + 15, COLOR_YELLOW);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	b29b      	uxth	r3, r3
 8002752:	3305      	adds	r3, #5
 8002754:	b29b      	uxth	r3, r3
 8002756:	b218      	sxth	r0, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	330f      	adds	r3, #15
 800275e:	b29b      	uxth	r3, r3
 8002760:	b219      	sxth	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	b29b      	uxth	r3, r3
 8002766:	3309      	adds	r3, #9
 8002768:	b29b      	uxth	r3, r3
 800276a:	b21a      	sxth	r2, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	330f      	adds	r3, #15
 8002772:	b29b      	uxth	r3, r3
 8002774:	b21b      	sxth	r3, r3
 8002776:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 800277a:	9400      	str	r4, [sp, #0]
 800277c:	f001 fd9a 	bl	80042b4 <lcdDrawLine>
        lcdDrawLine(x + 9, y + 15, x + 6, y + 21, COLOR_YELLOW);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	b29b      	uxth	r3, r3
 8002784:	3309      	adds	r3, #9
 8002786:	b29b      	uxth	r3, r3
 8002788:	b218      	sxth	r0, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	330f      	adds	r3, #15
 8002790:	b29b      	uxth	r3, r3
 8002792:	b219      	sxth	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	b29b      	uxth	r3, r3
 8002798:	3306      	adds	r3, #6
 800279a:	b29b      	uxth	r3, r3
 800279c:	b21a      	sxth	r2, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3315      	adds	r3, #21
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 80027ac:	9400      	str	r4, [sp, #0]
 80027ae:	f001 fd81 	bl	80042b4 <lcdDrawLine>

        // Draw the second thunderbolt (centered below the cloud)
        lcdDrawLine(x + 15, y + 10, x + 13, y + 15, COLOR_YELLOW);  // Second thunderbolt
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	330f      	adds	r3, #15
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	b218      	sxth	r0, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	330a      	adds	r3, #10
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	b219      	sxth	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	330d      	adds	r3, #13
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	b21a      	sxth	r2, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	330f      	adds	r3, #15
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	b21b      	sxth	r3, r3
 80027da:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 80027de:	9400      	str	r4, [sp, #0]
 80027e0:	f001 fd68 	bl	80042b4 <lcdDrawLine>
        lcdDrawLine(x + 13, y + 15, x + 17, y + 15, COLOR_YELLOW);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	330d      	adds	r3, #13
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	b218      	sxth	r0, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	330f      	adds	r3, #15
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	b219      	sxth	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3311      	adds	r3, #17
 80027fe:	b29b      	uxth	r3, r3
 8002800:	b21a      	sxth	r2, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	330f      	adds	r3, #15
 8002808:	b29b      	uxth	r3, r3
 800280a:	b21b      	sxth	r3, r3
 800280c:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002810:	9400      	str	r4, [sp, #0]
 8002812:	f001 fd4f 	bl	80042b4 <lcdDrawLine>
        lcdDrawLine(x + 17, y + 15, x + 14, y + 21, COLOR_YELLOW);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	b29b      	uxth	r3, r3
 800281a:	3311      	adds	r3, #17
 800281c:	b29b      	uxth	r3, r3
 800281e:	b218      	sxth	r0, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	330f      	adds	r3, #15
 8002826:	b29b      	uxth	r3, r3
 8002828:	b219      	sxth	r1, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	b29b      	uxth	r3, r3
 800282e:	330e      	adds	r3, #14
 8002830:	b29b      	uxth	r3, r3
 8002832:	b21a      	sxth	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	3315      	adds	r3, #21
 800283a:	b29b      	uxth	r3, r3
 800283c:	b21b      	sxth	r3, r3
 800283e:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002842:	9400      	str	r4, [sp, #0]
 8002844:	f001 fd36 	bl	80042b4 <lcdDrawLine>

        // Draw the third thunderbolt (right side)
        lcdDrawLine(x + 23, y + 10, x + 21, y + 15, COLOR_YELLOW);  // Third thunderbolt
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	b29b      	uxth	r3, r3
 800284c:	3317      	adds	r3, #23
 800284e:	b29b      	uxth	r3, r3
 8002850:	b218      	sxth	r0, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	330a      	adds	r3, #10
 8002858:	b29b      	uxth	r3, r3
 800285a:	b219      	sxth	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	b29b      	uxth	r3, r3
 8002860:	3315      	adds	r3, #21
 8002862:	b29b      	uxth	r3, r3
 8002864:	b21a      	sxth	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	330f      	adds	r3, #15
 800286c:	b29b      	uxth	r3, r3
 800286e:	b21b      	sxth	r3, r3
 8002870:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002874:	9400      	str	r4, [sp, #0]
 8002876:	f001 fd1d 	bl	80042b4 <lcdDrawLine>
        lcdDrawLine(x + 21, y + 15, x + 25, y + 15, COLOR_YELLOW);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	b29b      	uxth	r3, r3
 800287e:	3315      	adds	r3, #21
 8002880:	b29b      	uxth	r3, r3
 8002882:	b218      	sxth	r0, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	330f      	adds	r3, #15
 800288a:	b29b      	uxth	r3, r3
 800288c:	b219      	sxth	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	b29b      	uxth	r3, r3
 8002892:	3319      	adds	r3, #25
 8002894:	b29b      	uxth	r3, r3
 8002896:	b21a      	sxth	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	330f      	adds	r3, #15
 800289e:	b29b      	uxth	r3, r3
 80028a0:	b21b      	sxth	r3, r3
 80028a2:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 80028a6:	9400      	str	r4, [sp, #0]
 80028a8:	f001 fd04 	bl	80042b4 <lcdDrawLine>
        lcdDrawLine(x + 25, y + 15, x + 22, y + 21, COLOR_YELLOW);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3319      	adds	r3, #25
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	b218      	sxth	r0, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	330f      	adds	r3, #15
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b219      	sxth	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3316      	adds	r3, #22
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	b21a      	sxth	r2, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3315      	adds	r3, #21
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	b21b      	sxth	r3, r3
 80028d4:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 80028d8:	9400      	str	r4, [sp, #0]
 80028da:	f001 fceb 	bl	80042b4 <lcdDrawLine>

        // Draw the first thunderbolt using lines for a zigzag shape
		lcdDrawLine(x + 7 + 1, y + 10, x + 5 + 1, y + 15, COLOR_YELLOW);   // First thunderbolt
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3308      	adds	r3, #8
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	b218      	sxth	r0, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	330a      	adds	r3, #10
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	b219      	sxth	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3306      	adds	r3, #6
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	330f      	adds	r3, #15
 8002902:	b29b      	uxth	r3, r3
 8002904:	b21b      	sxth	r3, r3
 8002906:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 800290a:	9400      	str	r4, [sp, #0]
 800290c:	f001 fcd2 	bl	80042b4 <lcdDrawLine>
		lcdDrawLine(x + 5 + 1, y + 15, x + 9 + 1, y + 15, COLOR_YELLOW);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	b29b      	uxth	r3, r3
 8002914:	3306      	adds	r3, #6
 8002916:	b29b      	uxth	r3, r3
 8002918:	b218      	sxth	r0, r3
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	330f      	adds	r3, #15
 8002920:	b29b      	uxth	r3, r3
 8002922:	b219      	sxth	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	b29b      	uxth	r3, r3
 8002928:	330a      	adds	r3, #10
 800292a:	b29b      	uxth	r3, r3
 800292c:	b21a      	sxth	r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	330f      	adds	r3, #15
 8002934:	b29b      	uxth	r3, r3
 8002936:	b21b      	sxth	r3, r3
 8002938:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 800293c:	9400      	str	r4, [sp, #0]
 800293e:	f001 fcb9 	bl	80042b4 <lcdDrawLine>
		lcdDrawLine(x + 9 + 1, y + 15, x + 6 + 1, y + 21, COLOR_YELLOW);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	b29b      	uxth	r3, r3
 8002946:	330a      	adds	r3, #10
 8002948:	b29b      	uxth	r3, r3
 800294a:	b218      	sxth	r0, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	330f      	adds	r3, #15
 8002952:	b29b      	uxth	r3, r3
 8002954:	b219      	sxth	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	b29b      	uxth	r3, r3
 800295a:	3307      	adds	r3, #7
 800295c:	b29b      	uxth	r3, r3
 800295e:	b21a      	sxth	r2, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	3315      	adds	r3, #21
 8002966:	b29b      	uxth	r3, r3
 8002968:	b21b      	sxth	r3, r3
 800296a:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 800296e:	9400      	str	r4, [sp, #0]
 8002970:	f001 fca0 	bl	80042b4 <lcdDrawLine>

		// Draw the second thunderbolt (centered below the cloud)
		lcdDrawLine(x + 15 + 1, y + 10, x + 13 + 1, y + 15, COLOR_YELLOW);  // Second thunderbolt
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	b29b      	uxth	r3, r3
 8002978:	3310      	adds	r3, #16
 800297a:	b29b      	uxth	r3, r3
 800297c:	b218      	sxth	r0, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	b29b      	uxth	r3, r3
 8002982:	330a      	adds	r3, #10
 8002984:	b29b      	uxth	r3, r3
 8002986:	b219      	sxth	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	b29b      	uxth	r3, r3
 800298c:	330e      	adds	r3, #14
 800298e:	b29b      	uxth	r3, r3
 8002990:	b21a      	sxth	r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	330f      	adds	r3, #15
 8002998:	b29b      	uxth	r3, r3
 800299a:	b21b      	sxth	r3, r3
 800299c:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 80029a0:	9400      	str	r4, [sp, #0]
 80029a2:	f001 fc87 	bl	80042b4 <lcdDrawLine>
		lcdDrawLine(x + 13 + 1, y + 15, x + 17 + 1, y + 15, COLOR_YELLOW);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	330e      	adds	r3, #14
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b218      	sxth	r0, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	330f      	adds	r3, #15
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	b219      	sxth	r1, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3312      	adds	r3, #18
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	330f      	adds	r3, #15
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	b21b      	sxth	r3, r3
 80029ce:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 80029d2:	9400      	str	r4, [sp, #0]
 80029d4:	f001 fc6e 	bl	80042b4 <lcdDrawLine>
		lcdDrawLine(x + 17 + 1, y + 15, x + 14 + 1, y + 21, COLOR_YELLOW);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3312      	adds	r3, #18
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b218      	sxth	r0, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	330f      	adds	r3, #15
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	b219      	sxth	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	330f      	adds	r3, #15
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	b21a      	sxth	r2, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3315      	adds	r3, #21
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	b21b      	sxth	r3, r3
 8002a00:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002a04:	9400      	str	r4, [sp, #0]
 8002a06:	f001 fc55 	bl	80042b4 <lcdDrawLine>

		// Draw the third thunderbolt (right side)
		lcdDrawLine(x + 23 + 1, y + 10, x + 21 + 1, y + 15, COLOR_YELLOW);  // Third thunderbolt
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3318      	adds	r3, #24
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	b218      	sxth	r0, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	330a      	adds	r3, #10
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	b219      	sxth	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3316      	adds	r3, #22
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	b21a      	sxth	r2, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	330f      	adds	r3, #15
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002a36:	9400      	str	r4, [sp, #0]
 8002a38:	f001 fc3c 	bl	80042b4 <lcdDrawLine>
		lcdDrawLine(x + 21 + 1, y + 15, x + 25 + 1, y + 15, COLOR_YELLOW);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3316      	adds	r3, #22
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	b218      	sxth	r0, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	330f      	adds	r3, #15
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	b219      	sxth	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	331a      	adds	r3, #26
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	b21a      	sxth	r2, r3
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	330f      	adds	r3, #15
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	b21b      	sxth	r3, r3
 8002a64:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002a68:	9400      	str	r4, [sp, #0]
 8002a6a:	f001 fc23 	bl	80042b4 <lcdDrawLine>
		lcdDrawLine(x + 25 + 1, y + 15, x + 22 + 1, y + 21, COLOR_YELLOW);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	331a      	adds	r3, #26
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	b218      	sxth	r0, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	330f      	adds	r3, #15
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b219      	sxth	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3317      	adds	r3, #23
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	b21a      	sxth	r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3315      	adds	r3, #21
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002a9a:	9400      	str	r4, [sp, #0]
 8002a9c:	f001 fc0a 	bl	80042b4 <lcdDrawLine>
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}

08002aa8 <interpolateColor>:

uint16_t interpolateColor(uint16_t color1, uint16_t color2, float ratio) {
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	@ 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	460a      	mov	r2, r1
 8002ab2:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ab6:	81fb      	strh	r3, [r7, #14]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	81bb      	strh	r3, [r7, #12]
    uint8_t r1 = (color1 >> 11) & 0x1F;
 8002abc:	89fb      	ldrh	r3, [r7, #14]
 8002abe:	0adb      	lsrs	r3, r3, #11
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	77fb      	strb	r3, [r7, #31]
    uint8_t g1 = (color1 >> 5) & 0x3F;
 8002aca:	89fb      	ldrh	r3, [r7, #14]
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ad6:	77bb      	strb	r3, [r7, #30]
    uint8_t b1 = color1 & 0x1F;
 8002ad8:	89fb      	ldrh	r3, [r7, #14]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	777b      	strb	r3, [r7, #29]

    uint8_t r2 = (color2 >> 11) & 0x1F;
 8002ae2:	89bb      	ldrh	r3, [r7, #12]
 8002ae4:	0adb      	lsrs	r3, r3, #11
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	773b      	strb	r3, [r7, #28]
    uint8_t g2 = (color2 >> 5) & 0x3F;
 8002af0:	89bb      	ldrh	r3, [r7, #12]
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002afc:	76fb      	strb	r3, [r7, #27]
    uint8_t b2 = color2 & 0x1F;
 8002afe:	89bb      	ldrh	r3, [r7, #12]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	76bb      	strb	r3, [r7, #26]

    uint8_t r = r1 + (r2 - r1) * ratio;
 8002b08:	7ffb      	ldrb	r3, [r7, #31]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b12:	7f3a      	ldrb	r2, [r7, #28]
 8002b14:	7ffb      	ldrb	r3, [r7, #31]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b30:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b34:	793b      	ldrb	r3, [r7, #4]
 8002b36:	767b      	strb	r3, [r7, #25]
    uint8_t g = g1 + (g2 - g1) * ratio;
 8002b38:	7fbb      	ldrb	r3, [r7, #30]
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b42:	7efa      	ldrb	r2, [r7, #27]
 8002b44:	7fbb      	ldrb	r3, [r7, #30]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b50:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b60:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b64:	793b      	ldrb	r3, [r7, #4]
 8002b66:	763b      	strb	r3, [r7, #24]
    uint8_t b = b1 + (b2 - b1) * ratio;
 8002b68:	7f7b      	ldrb	r3, [r7, #29]
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b72:	7eba      	ldrb	r2, [r7, #26]
 8002b74:	7f7b      	ldrb	r3, [r7, #29]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b90:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b94:	793b      	ldrb	r3, [r7, #4]
 8002b96:	75fb      	strb	r3, [r7, #23]

    return (r << 11) | (g << 5) | b;
 8002b98:	7e7b      	ldrb	r3, [r7, #25]
 8002b9a:	02db      	lsls	r3, r3, #11
 8002b9c:	b21a      	sxth	r2, r3
 8002b9e:	7e3b      	ldrb	r3, [r7, #24]
 8002ba0:	015b      	lsls	r3, r3, #5
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	b21a      	sxth	r2, r3
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	b29b      	uxth	r3, r3
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3724      	adds	r7, #36	@ 0x24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <DrawGradientLine>:

void DrawGradientLine(int16_t x, int16_t y, int16_t length, int16_t thickness, uint16_t colorStart, uint16_t colorEnd) {
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	4608      	mov	r0, r1
 8002bca:	4611      	mov	r1, r2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4623      	mov	r3, r4
 8002bd0:	80fb      	strh	r3, [r7, #6]
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	80bb      	strh	r3, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	807b      	strh	r3, [r7, #2]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	803b      	strh	r3, [r7, #0]
    // Radius for rounded ends, equal to half the thickness of the line
    int16_t radius = thickness / 2;
 8002bde:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002be2:	0fda      	lsrs	r2, r3, #31
 8002be4:	4413      	add	r3, r2
 8002be6:	105b      	asrs	r3, r3, #1
 8002be8:	827b      	strh	r3, [r7, #18]

    // Draw the main gradient line with thickness
    for (int16_t i = 0; i < length; i++) {
 8002bea:	2300      	movs	r3, #0
 8002bec:	82fb      	strh	r3, [r7, #22]
 8002bee:	e03d      	b.n	8002c6c <DrawGradientLine+0xac>
        float ratio = (float)i / length;  // Calculate the interpolation ratio
 8002bf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c0c:	edc7 7a03 	vstr	s15, [r7, #12]
        uint16_t color = interpolateColor(colorStart, colorEnd, ratio);
 8002c10:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002c12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002c14:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ff44 	bl	8002aa8 <interpolateColor>
 8002c20:	4603      	mov	r3, r0
 8002c22:	817b      	strh	r3, [r7, #10]

        // Draw a vertical line of "thickness" pixels at each position along the gradient line
        for (int16_t j = -radius + 1; j <= radius; j++) {
 8002c24:	8a7b      	ldrh	r3, [r7, #18]
 8002c26:	f1c3 0301 	rsb	r3, r3, #1
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	82bb      	strh	r3, [r7, #20]
 8002c2e:	e011      	b.n	8002c54 <DrawGradientLine+0x94>
            lcdDrawPixel(x + i , y + j, color);  // Center the thickness vertically
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	8afb      	ldrh	r3, [r7, #22]
 8002c34:	4413      	add	r3, r2
 8002c36:	b298      	uxth	r0, r3
 8002c38:	88ba      	ldrh	r2, [r7, #4]
 8002c3a:	8abb      	ldrh	r3, [r7, #20]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	897a      	ldrh	r2, [r7, #10]
 8002c42:	4619      	mov	r1, r3
 8002c44:	f001 fa7c 	bl	8004140 <lcdDrawPixel>
        for (int16_t j = -radius + 1; j <= radius; j++) {
 8002c48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	82bb      	strh	r3, [r7, #20]
 8002c54:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002c58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	dde7      	ble.n	8002c30 <DrawGradientLine+0x70>
    for (int16_t i = 0; i < length; i++) {
 8002c60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3301      	adds	r3, #1
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	82fb      	strh	r3, [r7, #22]
 8002c6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	dbbb      	blt.n	8002bf0 <DrawGradientLine+0x30>
        }
    }

    // Draw rounded ends as circles with colors matching the ends of the gradient
    lcdFillCircle(x, y  , radius - 1, colorStart);                 // Start of the line
 8002c78:	8a7b      	ldrh	r3, [r7, #18]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	b21a      	sxth	r2, r3
 8002c80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002c82:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002c86:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002c8a:	f001 fdfa 	bl	8004882 <lcdFillCircle>
    lcdFillCircle(x + length - 1, y , radius - 1, colorEnd);      // End of the line
 8002c8e:	88fa      	ldrh	r2, [r7, #6]
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	4413      	add	r3, r2
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	b218      	sxth	r0, r3
 8002c9c:	8a7b      	ldrh	r3, [r7, #18]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b21a      	sxth	r2, r3
 8002ca4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002ca6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002caa:	f001 fdea 	bl	8004882 <lcdFillCircle>
    lcdDrawCircle(x + length / 3, y , radius , COLOR_THEME_SKYBLUE_BASE);
 8002cae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cb2:	4a17      	ldr	r2, [pc, #92]	@ (8002d10 <DrawGradientLine+0x150>)
 8002cb4:	fb82 1203 	smull	r1, r2, r2, r3
 8002cb8:	17db      	asrs	r3, r3, #31
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	b218      	sxth	r0, r3
 8002cc8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ccc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002cd0:	f249 537f 	movw	r3, #38271	@ 0x957f
 8002cd4:	f001 fd01 	bl	80046da <lcdDrawCircle>
    lcdDrawCircle(x + length / 3, y , radius - 1 , COLOR_WHITE);
 8002cd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8002d10 <DrawGradientLine+0x150>)
 8002cde:	fb82 1203 	smull	r1, r2, r2, r3
 8002ce2:	17db      	asrs	r3, r3, #31
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	b21b      	sxth	r3, r3
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	4413      	add	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	b218      	sxth	r0, r3
 8002cf2:	8a7b      	ldrh	r3, [r7, #18]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	b21a      	sxth	r2, r3
 8002cfa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002cfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d02:	f001 fcea 	bl	80046da <lcdDrawCircle>
}
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd90      	pop	{r4, r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	55555556 	.word	0x55555556

08002d14 <WeatherDay>:

void WeatherDay (int x , int y ){
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
	int rate = 8;
 8002d1e:	2308      	movs	r3, #8
 8002d20:	617b      	str	r3, [r7, #20]
	int temperatureMin = -12;
 8002d22:	f06f 030b 	mvn.w	r3, #11
 8002d26:	613b      	str	r3, [r7, #16]
	int temperatureMax = -10;
 8002d28:	f06f 0309 	mvn.w	r3, #9
 8002d2c:	60fb      	str	r3, [r7, #12]

	  lcdSetCursor(x + 5, y + 20);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3305      	adds	r3, #5
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3314      	adds	r3, #20
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4610      	mov	r0, r2
 8002d42:	f002 f953 	bl	8004fec <lcdSetCursor>
	  lcdSetTextFont(&Font16);
 8002d46:	4895      	ldr	r0, [pc, #596]	@ (8002f9c <WeatherDay+0x288>)
 8002d48:	f002 f8c0 	bl	8004ecc <lcdSetTextFont>
	  lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8002d4c:	f249 517f 	movw	r1, #38271	@ 0x957f
 8002d50:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002d54:	f002 f8ca 	bl	8004eec <lcdSetTextColor>

	  CloudRain(x + 45, y + 10);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	330a      	adds	r3, #10
 8002d62:	4619      	mov	r1, r3
 8002d64:	4610      	mov	r0, r2
 8002d66:	f7ff fb7b 	bl	8002460 <CloudRain>
	  lcdSetTextFont(&Font12);
 8002d6a:	488d      	ldr	r0, [pc, #564]	@ (8002fa0 <WeatherDay+0x28c>)
 8002d6c:	f002 f8ae 	bl	8004ecc <lcdSetTextFont>
	  if (rate >= 10)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b09      	cmp	r3, #9
 8002d74:	dd2e      	ble.n	8002dd4 <WeatherDay+0xc0>
	  {
		  lcdSetCursor(x + 51, y + 32);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3333      	adds	r3, #51	@ 0x33
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3320      	adds	r3, #32
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f002 f92f 	bl	8004fec <lcdSetCursor>
		  lcdPrintf("%d/", rate);
 8002d8e:	6979      	ldr	r1, [r7, #20]
 8002d90:	4884      	ldr	r0, [pc, #528]	@ (8002fa4 <WeatherDay+0x290>)
 8002d92:	f002 f80f 	bl	8004db4 <lcdPrintf>
	      lcdDrawCircle(x + 67, y + 33 , 1 , COLOR_WHITE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3343      	adds	r3, #67	@ 0x43
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	b218      	sxth	r0, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3321      	adds	r3, #33	@ 0x21
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	b219      	sxth	r1, r3
 8002daa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dae:	2201      	movs	r2, #1
 8002db0:	f001 fc93 	bl	80046da <lcdDrawCircle>
		  lcdDrawCircle(x + 67, y + 40 , 1 , COLOR_WHITE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3343      	adds	r3, #67	@ 0x43
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	b218      	sxth	r0, r3
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3328      	adds	r3, #40	@ 0x28
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	b219      	sxth	r1, r3
 8002dc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f001 fc84 	bl	80046da <lcdDrawCircle>
 8002dd2:	e02d      	b.n	8002e30 <WeatherDay+0x11c>

	  }
	  else{
		  lcdSetCursor(x + 54, y + 32);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3336      	adds	r3, #54	@ 0x36
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3320      	adds	r3, #32
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	4619      	mov	r1, r3
 8002de6:	4610      	mov	r0, r2
 8002de8:	f002 f900 	bl	8004fec <lcdSetCursor>
		  lcdPrintf("%d/", rate);
 8002dec:	6979      	ldr	r1, [r7, #20]
 8002dee:	486d      	ldr	r0, [pc, #436]	@ (8002fa4 <WeatherDay+0x290>)
 8002df0:	f001 ffe0 	bl	8004db4 <lcdPrintf>
		  lcdDrawCircle(x + 63, y + 33 , 1 , COLOR_WHITE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	333f      	adds	r3, #63	@ 0x3f
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	b218      	sxth	r0, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3321      	adds	r3, #33	@ 0x21
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	b219      	sxth	r1, r3
 8002e08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f001 fc64 	bl	80046da <lcdDrawCircle>
		  lcdDrawCircle(x + 66, y + 40 , 1 , COLOR_WHITE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3342      	adds	r3, #66	@ 0x42
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	b218      	sxth	r0, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3328      	adds	r3, #40	@ 0x28
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	b219      	sxth	r1, r3
 8002e26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f001 fc55 	bl	80046da <lcdDrawCircle>
	  }

	  lcdSetCursor(x + 5, y + 20);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3305      	adds	r3, #5
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3314      	adds	r3, #20
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	4619      	mov	r1, r3
 8002e42:	4610      	mov	r0, r2
 8002e44:	f002 f8d2 	bl	8004fec <lcdSetCursor>
	  lcdSetTextFont(&Font16);
 8002e48:	4854      	ldr	r0, [pc, #336]	@ (8002f9c <WeatherDay+0x288>)
 8002e4a:	f002 f83f 	bl	8004ecc <lcdSetTextFont>
	  lcdPrintf("Now");
 8002e4e:	4856      	ldr	r0, [pc, #344]	@ (8002fa8 <WeatherDay+0x294>)
 8002e50:	f001 ffb0 	bl	8004db4 <lcdPrintf>
	  lcdSetCursor(x + 93, y + 20);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	335d      	adds	r3, #93	@ 0x5d
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3314      	adds	r3, #20
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f002 f8c0 	bl	8004fec <lcdSetCursor>
	  if (10 <= temperatureMin)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2b09      	cmp	r3, #9
 8002e70:	dd2e      	ble.n	8002ed0 <WeatherDay+0x1bc>
	  {
		lcdSetCursor(x + 93, y + 20);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	335d      	adds	r3, #93	@ 0x5d
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3314      	adds	r3, #20
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f002 f8b1 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d" , temperatureMin);
 8002e8a:	6939      	ldr	r1, [r7, #16]
 8002e8c:	4847      	ldr	r0, [pc, #284]	@ (8002fac <WeatherDay+0x298>)
 8002e8e:	f001 ff91 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 121 , y + 19 , 3, COLOR_WHITE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3379      	adds	r3, #121	@ 0x79
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	b218      	sxth	r0, r3
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3313      	adds	r3, #19
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	b219      	sxth	r1, r3
 8002ea6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002eaa:	2203      	movs	r2, #3
 8002eac:	f001 fc15 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 121 , y + 19 , 2, COLOR_WHITE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3379      	adds	r3, #121	@ 0x79
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	b218      	sxth	r0, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3313      	adds	r3, #19
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	b219      	sxth	r1, r3
 8002ec4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f001 fc06 	bl	80046da <lcdDrawCircle>
 8002ece:	e09d      	b.n	800300c <WeatherDay+0x2f8>
	  }
	  else if ( 0 <  temperatureMin)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	dd2e      	ble.n	8002f34 <WeatherDay+0x220>
	  {
		lcdSetCursor(x + 104, y + 20);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3368      	adds	r3, #104	@ 0x68
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3314      	adds	r3, #20
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f002 f87f 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d" , temperatureMin);
 8002eee:	6939      	ldr	r1, [r7, #16]
 8002ef0:	482e      	ldr	r0, [pc, #184]	@ (8002fac <WeatherDay+0x298>)
 8002ef2:	f001 ff5f 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 121 , y + 19 , 3, COLOR_WHITE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3379      	adds	r3, #121	@ 0x79
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	b218      	sxth	r0, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3313      	adds	r3, #19
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	b219      	sxth	r1, r3
 8002f0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f0e:	2203      	movs	r2, #3
 8002f10:	f001 fbe3 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 121 , y + 19 , 2, COLOR_WHITE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3379      	adds	r3, #121	@ 0x79
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	b218      	sxth	r0, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3313      	adds	r3, #19
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	b219      	sxth	r1, r3
 8002f28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f001 fbd4 	bl	80046da <lcdDrawCircle>
 8002f32:	e06b      	b.n	800300c <WeatherDay+0x2f8>
	  }
	  else if (-10 < temperatureMin )
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f113 0f09 	cmn.w	r3, #9
 8002f3a:	db39      	blt.n	8002fb0 <WeatherDay+0x29c>
	  {
		lcdSetCursor(x + 93, y + 20);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	335d      	adds	r3, #93	@ 0x5d
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3314      	adds	r3, #20
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f002 f84c 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d" , temperatureMin);
 8002f54:	6939      	ldr	r1, [r7, #16]
 8002f56:	4815      	ldr	r0, [pc, #84]	@ (8002fac <WeatherDay+0x298>)
 8002f58:	f001 ff2c 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 121 , y + 19 , 3, COLOR_WHITE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3379      	adds	r3, #121	@ 0x79
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	b218      	sxth	r0, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3313      	adds	r3, #19
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	b219      	sxth	r1, r3
 8002f70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f74:	2203      	movs	r2, #3
 8002f76:	f001 fbb0 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 121 , y + 19 , 2, COLOR_WHITE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3379      	adds	r3, #121	@ 0x79
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	b218      	sxth	r0, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3313      	adds	r3, #19
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	b219      	sxth	r1, r3
 8002f8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f92:	2202      	movs	r2, #2
 8002f94:	f001 fba1 	bl	80046da <lcdDrawCircle>
 8002f98:	e038      	b.n	800300c <WeatherDay+0x2f8>
 8002f9a:	bf00      	nop
 8002f9c:	20000014 	.word	0x20000014
 8002fa0:	2000000c 	.word	0x2000000c
 8002fa4:	0800c508 	.word	0x0800c508
 8002fa8:	0800c50c 	.word	0x0800c50c
 8002fac:	0800c4f8 	.word	0x0800c4f8
	  }
	  else
	  {
		lcdSetCursor(x + 82, y + 20);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3352      	adds	r3, #82	@ 0x52
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3314      	adds	r3, #20
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f002 f812 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d" , temperatureMin);
 8002fc8:	6939      	ldr	r1, [r7, #16]
 8002fca:	4885      	ldr	r0, [pc, #532]	@ (80031e0 <WeatherDay+0x4cc>)
 8002fcc:	f001 fef2 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 121 , y + 19 , 3, COLOR_WHITE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3379      	adds	r3, #121	@ 0x79
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	b218      	sxth	r0, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3313      	adds	r3, #19
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	b219      	sxth	r1, r3
 8002fe4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fe8:	2203      	movs	r2, #3
 8002fea:	f001 fb76 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 121 , y + 19 , 2, COLOR_WHITE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3379      	adds	r3, #121	@ 0x79
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	b218      	sxth	r0, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3313      	adds	r3, #19
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	b219      	sxth	r1, r3
 8003002:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003006:	2202      	movs	r2, #2
 8003008:	f001 fb67 	bl	80046da <lcdDrawCircle>
	  }

	  DrawGradientLine(x + 133, y + 25 , 50 , 6 ,  COLOR_ORANGE , COLOR_RED);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	b29b      	uxth	r3, r3
 8003010:	3385      	adds	r3, #133	@ 0x85
 8003012:	b29b      	uxth	r3, r3
 8003014:	b218      	sxth	r0, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	3319      	adds	r3, #25
 800301c:	b29b      	uxth	r3, r3
 800301e:	b219      	sxth	r1, r3
 8003020:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2306      	movs	r3, #6
 800302e:	2232      	movs	r2, #50	@ 0x32
 8003030:	f7ff fdc6 	bl	8002bc0 <DrawGradientLine>

	  lcdSetCursor(x + 188, y + 20);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	b29b      	uxth	r3, r3
 8003038:	33bc      	adds	r3, #188	@ 0xbc
 800303a:	b29a      	uxth	r2, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	3314      	adds	r3, #20
 8003042:	b29b      	uxth	r3, r3
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f001 ffd0 	bl	8004fec <lcdSetCursor>
	  if (10 < temperatureMax)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b0a      	cmp	r3, #10
 8003050:	dd2e      	ble.n	80030b0 <WeatherDay+0x39c>
	  {
		lcdSetCursor(x + 191, y + 20);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	b29b      	uxth	r3, r3
 8003056:	33bf      	adds	r3, #191	@ 0xbf
 8003058:	b29a      	uxth	r2, r3
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	3314      	adds	r3, #20
 8003060:	b29b      	uxth	r3, r3
 8003062:	4619      	mov	r1, r3
 8003064:	4610      	mov	r0, r2
 8003066:	f001 ffc1 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d" , temperatureMax);
 800306a:	68f9      	ldr	r1, [r7, #12]
 800306c:	485c      	ldr	r0, [pc, #368]	@ (80031e0 <WeatherDay+0x4cc>)
 800306e:	f001 fea1 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 218 , y + 19 , 3, COLOR_WHITE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	b29b      	uxth	r3, r3
 8003076:	33da      	adds	r3, #218	@ 0xda
 8003078:	b29b      	uxth	r3, r3
 800307a:	b218      	sxth	r0, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	3313      	adds	r3, #19
 8003082:	b29b      	uxth	r3, r3
 8003084:	b219      	sxth	r1, r3
 8003086:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800308a:	2203      	movs	r2, #3
 800308c:	f001 fb25 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 218 , y + 19 , 2, COLOR_WHITE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	b29b      	uxth	r3, r3
 8003094:	33da      	adds	r3, #218	@ 0xda
 8003096:	b29b      	uxth	r3, r3
 8003098:	b218      	sxth	r0, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	3313      	adds	r3, #19
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	b219      	sxth	r1, r3
 80030a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030a8:	2202      	movs	r2, #2
 80030aa:	f001 fb16 	bl	80046da <lcdDrawCircle>
		lcdSetCursor(x + 191, y + 20);
		lcdPrintf("%d" , temperatureMax);
		lcdDrawCircle( x + 229 , y + 19 , 3, COLOR_WHITE);
		lcdDrawCircle( x + 229 , y + 19 , 2, COLOR_WHITE);
	  }
}
 80030ae:	e092      	b.n	80031d6 <WeatherDay+0x4c2>
	  else if ( 0 <  temperatureMax)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	dd2e      	ble.n	8003114 <WeatherDay+0x400>
		lcdSetCursor(x + 191, y + 20);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	33bf      	adds	r3, #191	@ 0xbf
 80030bc:	b29a      	uxth	r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3314      	adds	r3, #20
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f001 ff8f 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d" , temperatureMax);
 80030ce:	68f9      	ldr	r1, [r7, #12]
 80030d0:	4843      	ldr	r0, [pc, #268]	@ (80031e0 <WeatherDay+0x4cc>)
 80030d2:	f001 fe6f 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 207 , y + 19 , 3, COLOR_WHITE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	33cf      	adds	r3, #207	@ 0xcf
 80030dc:	b29b      	uxth	r3, r3
 80030de:	b218      	sxth	r0, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3313      	adds	r3, #19
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	b219      	sxth	r1, r3
 80030ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030ee:	2203      	movs	r2, #3
 80030f0:	f001 faf3 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 207 , y + 19 , 2, COLOR_WHITE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	33cf      	adds	r3, #207	@ 0xcf
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	b218      	sxth	r0, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	3313      	adds	r3, #19
 8003104:	b29b      	uxth	r3, r3
 8003106:	b219      	sxth	r1, r3
 8003108:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800310c:	2202      	movs	r2, #2
 800310e:	f001 fae4 	bl	80046da <lcdDrawCircle>
}
 8003112:	e060      	b.n	80031d6 <WeatherDay+0x4c2>
	  else if (-10 < temperatureMax )
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f113 0f09 	cmn.w	r3, #9
 800311a:	db2e      	blt.n	800317a <WeatherDay+0x466>
		lcdSetCursor(x + 191, y + 20);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	b29b      	uxth	r3, r3
 8003120:	33bf      	adds	r3, #191	@ 0xbf
 8003122:	b29a      	uxth	r2, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	3314      	adds	r3, #20
 800312a:	b29b      	uxth	r3, r3
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f001 ff5c 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d" , temperatureMax);
 8003134:	68f9      	ldr	r1, [r7, #12]
 8003136:	482a      	ldr	r0, [pc, #168]	@ (80031e0 <WeatherDay+0x4cc>)
 8003138:	f001 fe3c 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 218 , y + 19 , 3, COLOR_WHITE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	b29b      	uxth	r3, r3
 8003140:	33da      	adds	r3, #218	@ 0xda
 8003142:	b29b      	uxth	r3, r3
 8003144:	b218      	sxth	r0, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	3313      	adds	r3, #19
 800314c:	b29b      	uxth	r3, r3
 800314e:	b219      	sxth	r1, r3
 8003150:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003154:	2203      	movs	r2, #3
 8003156:	f001 fac0 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 218 , y + 19 , 2, COLOR_WHITE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	b29b      	uxth	r3, r3
 800315e:	33da      	adds	r3, #218	@ 0xda
 8003160:	b29b      	uxth	r3, r3
 8003162:	b218      	sxth	r0, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	3313      	adds	r3, #19
 800316a:	b29b      	uxth	r3, r3
 800316c:	b219      	sxth	r1, r3
 800316e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003172:	2202      	movs	r2, #2
 8003174:	f001 fab1 	bl	80046da <lcdDrawCircle>
}
 8003178:	e02d      	b.n	80031d6 <WeatherDay+0x4c2>
		lcdSetCursor(x + 191, y + 20);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	b29b      	uxth	r3, r3
 800317e:	33bf      	adds	r3, #191	@ 0xbf
 8003180:	b29a      	uxth	r2, r3
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	3314      	adds	r3, #20
 8003188:	b29b      	uxth	r3, r3
 800318a:	4619      	mov	r1, r3
 800318c:	4610      	mov	r0, r2
 800318e:	f001 ff2d 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d" , temperatureMax);
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	4812      	ldr	r0, [pc, #72]	@ (80031e0 <WeatherDay+0x4cc>)
 8003196:	f001 fe0d 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 229 , y + 19 , 3, COLOR_WHITE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	b29b      	uxth	r3, r3
 800319e:	33e5      	adds	r3, #229	@ 0xe5
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	b218      	sxth	r0, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3313      	adds	r3, #19
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b219      	sxth	r1, r3
 80031ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031b2:	2203      	movs	r2, #3
 80031b4:	f001 fa91 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 229 , y + 19 , 2, COLOR_WHITE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	33e5      	adds	r3, #229	@ 0xe5
 80031be:	b29b      	uxth	r3, r3
 80031c0:	b218      	sxth	r0, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3313      	adds	r3, #19
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	b219      	sxth	r1, r3
 80031cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031d0:	2202      	movs	r2, #2
 80031d2:	f001 fa82 	bl	80046da <lcdDrawCircle>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	0800c4f8 	.word	0x0800c4f8

080031e4 <DrawThermometer>:

void DrawThermometer(int x, int y, int height, int width, int fillHeight, uint16_t borderColor, uint16_t fillColor) {
 80031e4:	b5b0      	push	{r4, r5, r7, lr}
 80031e6:	b090      	sub	sp, #64	@ 0x40
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
    int bulbRadius = width / 2;                  // Radius of the bulb at the bottom
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	0fda      	lsrs	r2, r3, #31
 80031f6:	4413      	add	r3, r2
 80031f8:	105b      	asrs	r3, r3, #1
 80031fa:	633b      	str	r3, [r7, #48]	@ 0x30
    int tubeWidth = width / 2;                   // Width of the thermometer tube
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	0fda      	lsrs	r2, r3, #31
 8003200:	4413      	add	r3, r2
 8003202:	105b      	asrs	r3, r3, #1
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int tubeHeight = height - bulbRadius * 2;    // Height of the thermometer tube
 8003206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Draw the bulb at the bottom
    lcdFillCircle(x, y + height - bulbRadius, bulbRadius , borderColor);           // Outer circle for bulb
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	b218      	sxth	r0, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	b29a      	uxth	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	b29b      	uxth	r3, r3
 800321c:	4413      	add	r3, r2
 800321e:	b29a      	uxth	r2, r3
 8003220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003222:	b29b      	uxth	r3, r3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	b29b      	uxth	r3, r3
 8003228:	b219      	sxth	r1, r3
 800322a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322c:	b21a      	sxth	r2, r3
 800322e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003232:	f001 fb26 	bl	8004882 <lcdFillCircle>
    lcdFillCircle(x, y + height - bulbRadius, bulbRadius - 2, COLOR_WHITE);       // Inner circle for bulb border
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	b218      	sxth	r0, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	b29a      	uxth	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	b29b      	uxth	r3, r3
 8003242:	4413      	add	r3, r2
 8003244:	b29a      	uxth	r2, r3
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	b29b      	uxth	r3, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	b29b      	uxth	r3, r3
 800324e:	b219      	sxth	r1, r3
 8003250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b02      	subs	r3, #2
 8003256:	b29b      	uxth	r3, r3
 8003258:	b21a      	sxth	r2, r3
 800325a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800325e:	f001 fb10 	bl	8004882 <lcdFillCircle>
    lcdFillCircle(x, y + height - bulbRadius, bulbRadius - 3, fillColor);         // Inner fill for "mercury" in bulb
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	b218      	sxth	r0, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	b29a      	uxth	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	b29b      	uxth	r3, r3
 800326e:	4413      	add	r3, r2
 8003270:	b29a      	uxth	r2, r3
 8003272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003274:	b29b      	uxth	r3, r3
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	b29b      	uxth	r3, r3
 800327a:	b219      	sxth	r1, r3
 800327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b03      	subs	r3, #3
 8003282:	b29b      	uxth	r3, r3
 8003284:	b21a      	sxth	r2, r3
 8003286:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800328a:	f001 fafa 	bl	8004882 <lcdFillCircle>

    // Draw the thermometer tube
    lcdFillRoundRect(x - tubeWidth / 2, y, tubeWidth, tubeHeight + 1 , tubeWidth / 2, borderColor);       // Outer tube border
 800328e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003290:	0fda      	lsrs	r2, r3, #31
 8003292:	4413      	add	r3, r2
 8003294:	105b      	asrs	r3, r3, #1
 8003296:	425b      	negs	r3, r3
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	b29b      	uxth	r3, r3
 800329e:	4413      	add	r3, r2
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	b218      	sxth	r0, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	b219      	sxth	r1, r3
 80032a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032aa:	b21c      	sxth	r4, r3
 80032ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3301      	adds	r3, #1
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	b21d      	sxth	r5, r3
 80032b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b8:	0fda      	lsrs	r2, r3, #31
 80032ba:	4413      	add	r3, r2
 80032bc:	105b      	asrs	r3, r3, #1
 80032be:	b21b      	sxth	r3, r3
 80032c0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80032c4:	9201      	str	r2, [sp, #4]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	462b      	mov	r3, r5
 80032ca:	4622      	mov	r2, r4
 80032cc:	f001 fc0e 	bl	8004aec <lcdFillRoundRect>
    lcdFillRoundRect(x - tubeWidth / 2 + 2, y + 2, tubeWidth - 4, tubeHeight - 4, tubeWidth / 2 - 2, COLOR_WHITE); // Inner tube border
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d2:	0fda      	lsrs	r2, r3, #31
 80032d4:	4413      	add	r3, r2
 80032d6:	105b      	asrs	r3, r3, #1
 80032d8:	425b      	negs	r3, r3
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3302      	adds	r3, #2
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	b218      	sxth	r0, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3302      	adds	r3, #2
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	b219      	sxth	r1, r3
 80032f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b04      	subs	r3, #4
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	b21c      	sxth	r4, r3
 80032fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b04      	subs	r3, #4
 8003304:	b29b      	uxth	r3, r3
 8003306:	b21d      	sxth	r5, r3
 8003308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330a:	0fda      	lsrs	r2, r3, #31
 800330c:	4413      	add	r3, r2
 800330e:	105b      	asrs	r3, r3, #1
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b02      	subs	r3, #2
 8003314:	b29b      	uxth	r3, r3
 8003316:	b21b      	sxth	r3, r3
 8003318:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800331c:	9201      	str	r2, [sp, #4]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	462b      	mov	r3, r5
 8003322:	4622      	mov	r2, r4
 8003324:	f001 fbe2 	bl	8004aec <lcdFillRoundRect>

    // Fill the thermometer tube based on the fill height
    int filledTubeHeight = fillHeight * tubeHeight / height;  // Scale fill height to tube height
 8003328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800332a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800332c:	fb03 f202 	mul.w	r2, r3, r2
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	fb92 f3f3 	sdiv	r3, r2, r3
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
    lcdFillRect(x - tubeWidth / 2 + 2, y + tubeHeight - filledTubeHeight + 2, tubeWidth - 5, filledTubeHeight, fillColor);  // Fill tube with "mercury"
 8003338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333a:	0fda      	lsrs	r2, r3, #31
 800333c:	4413      	add	r3, r2
 800333e:	105b      	asrs	r3, r3, #1
 8003340:	425b      	negs	r3, r3
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	b29b      	uxth	r3, r3
 8003348:	4413      	add	r3, r2
 800334a:	b29b      	uxth	r3, r3
 800334c:	3302      	adds	r3, #2
 800334e:	b29b      	uxth	r3, r3
 8003350:	b218      	sxth	r0, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	b29a      	uxth	r2, r3
 8003356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003358:	b29b      	uxth	r3, r3
 800335a:	4413      	add	r3, r2
 800335c:	b29a      	uxth	r2, r3
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	3302      	adds	r3, #2
 8003368:	b29b      	uxth	r3, r3
 800336a:	b219      	sxth	r1, r3
 800336c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b05      	subs	r3, #5
 8003372:	b29b      	uxth	r3, r3
 8003374:	b21a      	sxth	r2, r3
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	b21c      	sxth	r4, r3
 800337a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	4623      	mov	r3, r4
 8003382:	f001 fb57 	bl	8004a34 <lcdFillRect>

    // Draw finer scale marks on the side of the thermometer
    int markCount = 8;  // Increased number of marks for more detail
 8003386:	2308      	movs	r3, #8
 8003388:	623b      	str	r3, [r7, #32]
    int markSpacing = tubeHeight / markCount; // Spacing between marks
 800338a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003392:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i <= markCount; i++) {
 8003394:	2300      	movs	r3, #0
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
 8003398:	e03a      	b.n	8003410 <DrawThermometer+0x22c>
        int markY = y + tubeHeight - i * markSpacing;
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339e:	441a      	add	r2, r3
 80033a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a2:	69f9      	ldr	r1, [r7, #28]
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	61bb      	str	r3, [r7, #24]
        int markLength = (i % 2 == 0) ? 8 : 5;  // Longer marks every other line for a clearer scale
 80033ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <DrawThermometer+0x1d6>
 80033b6:	2308      	movs	r3, #8
 80033b8:	e000      	b.n	80033bc <DrawThermometer+0x1d8>
 80033ba:	2305      	movs	r3, #5
 80033bc:	617b      	str	r3, [r7, #20]
        lcdDrawLine(x + tubeWidth / 2 + 3, markY, x + tubeWidth / 2 + 3 + markLength, markY, borderColor);
 80033be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c0:	0fda      	lsrs	r2, r3, #31
 80033c2:	4413      	add	r3, r2
 80033c4:	105b      	asrs	r3, r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3303      	adds	r3, #3
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	b218      	sxth	r0, r3
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	b219      	sxth	r1, r3
 80033da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033dc:	0fda      	lsrs	r2, r3, #31
 80033de:	4413      	add	r3, r2
 80033e0:	105b      	asrs	r3, r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3303      	adds	r3, #3
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	b21a      	sxth	r2, r3
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	b21c      	sxth	r4, r3
 80033fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	4623      	mov	r3, r4
 8003406:	f000 ff55 	bl	80042b4 <lcdDrawLine>
    for (int i = 0; i <= markCount; i++) {
 800340a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340c:	3301      	adds	r3, #1
 800340e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	429a      	cmp	r2, r3
 8003416:	ddc0      	ble.n	800339a <DrawThermometer+0x1b6>
    }
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	3738      	adds	r7, #56	@ 0x38
 800341e:	46bd      	mov	sp, r7
 8003420:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003424 <DrawIconHumidyti1>:

void DrawIconHumidyti1 (int x, int y)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmicon1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	b29b      	uxth	r3, r3
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	b291      	uxth	r1, r2
 8003436:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <DrawIconHumidyti1+0x24>)
 8003438:	4618      	mov	r0, r3
 800343a:	f001 fbbd 	bl	8004bb8 <lcdDrawImage>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	08012968 	.word	0x08012968

0800344c <DrawIconDate>:

void DrawIconDate (int x, int y)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmicon2);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	b29b      	uxth	r3, r3
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	b291      	uxth	r1, r2
 800345e:	4a04      	ldr	r2, [pc, #16]	@ (8003470 <DrawIconDate+0x24>)
 8003460:	4618      	mov	r0, r3
 8003462:	f001 fba9 	bl	8004bb8 <lcdDrawImage>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	080135f4 	.word	0x080135f4

08003474 <DrawIconWeather>:
void DrawIconWeather (int x, int y)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmwether);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	b29b      	uxth	r3, r3
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	b291      	uxth	r1, r2
 8003486:	4a04      	ldr	r2, [pc, #16]	@ (8003498 <DrawIconWeather+0x24>)
 8003488:	4618      	mov	r0, r3
 800348a:	f001 fb95 	bl	8004bb8 <lcdDrawImage>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	08017714 	.word	0x08017714

0800349c <DrawIconTem>:
void DrawIconTem (int x, int y)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmTem);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	b291      	uxth	r1, r2
 80034ae:	4a04      	ldr	r2, [pc, #16]	@ (80034c0 <DrawIconTem+0x24>)
 80034b0:	4618      	mov	r0, r3
 80034b2:	f001 fb81 	bl	8004bb8 <lcdDrawImage>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	0800d480 	.word	0x0800d480

080034c4 <DrawIconWind>:
void DrawIconWind (int x, int y)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmwind);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	b291      	uxth	r1, r2
 80034d6:	4a04      	ldr	r2, [pc, #16]	@ (80034e8 <DrawIconWind+0x24>)
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 fb6d 	bl	8004bb8 <lcdDrawImage>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	08017dec 	.word	0x08017dec

080034ec <TextTemperature16>:
void TextTemperature16 (int x , int y , int temperature){
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 80034f8:	f249 517f 	movw	r1, #38271	@ 0x957f
 80034fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003500:	f001 fcf4 	bl	8004eec <lcdSetTextColor>
	lcdSetTextFont(&Font24);
 8003504:	4861      	ldr	r0, [pc, #388]	@ (800368c <TextTemperature16+0x1a0>)
 8003506:	f001 fce1 	bl	8004ecc <lcdSetTextFont>
	if (10 <= temperature)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b09      	cmp	r3, #9
 800350e:	dd2c      	ble.n	800356a <TextTemperature16+0x7e>
	{
		lcdSetCursor(x + 5 , y );
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	b29b      	uxth	r3, r3
 8003514:	3305      	adds	r3, #5
 8003516:	b29b      	uxth	r3, r3
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	b292      	uxth	r2, r2
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fd64 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	485a      	ldr	r0, [pc, #360]	@ (8003690 <TextTemperature16+0x1a4>)
 8003528:	f001 fc44 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 47 , y + 3 , 3, COLOR_WHITE);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	b29b      	uxth	r3, r3
 8003530:	332f      	adds	r3, #47	@ 0x2f
 8003532:	b29b      	uxth	r3, r3
 8003534:	b218      	sxth	r0, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	b29b      	uxth	r3, r3
 800353a:	3303      	adds	r3, #3
 800353c:	b29b      	uxth	r3, r3
 800353e:	b219      	sxth	r1, r3
 8003540:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003544:	2203      	movs	r2, #3
 8003546:	f001 f8c8 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 47 , y + 3 , 2, COLOR_WHITE);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	b29b      	uxth	r3, r3
 800354e:	332f      	adds	r3, #47	@ 0x2f
 8003550:	b29b      	uxth	r3, r3
 8003552:	b218      	sxth	r0, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	b29b      	uxth	r3, r3
 8003558:	3303      	adds	r3, #3
 800355a:	b29b      	uxth	r3, r3
 800355c:	b219      	sxth	r1, r3
 800355e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003562:	2202      	movs	r2, #2
 8003564:	f001 f8b9 	bl	80046da <lcdDrawCircle>
		lcdSetCursor(x - 3  , y );
		lcdPrintf("%d C\r\n" , temperature);
		lcdDrawCircle( x + 56 , y + 3 , 3, COLOR_WHITE);
		lcdDrawCircle( x + 56 , y + 3 , 2, COLOR_WHITE);
	}
}
 8003568:	e08c      	b.n	8003684 <TextTemperature16+0x198>
	else if ( 0 <  temperature)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	dd2c      	ble.n	80035ca <TextTemperature16+0xde>
		lcdSetCursor(x + 12  , y );
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	b29b      	uxth	r3, r3
 8003574:	330c      	adds	r3, #12
 8003576:	b29b      	uxth	r3, r3
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	b292      	uxth	r2, r2
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f001 fd34 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4842      	ldr	r0, [pc, #264]	@ (8003690 <TextTemperature16+0x1a4>)
 8003588:	f001 fc14 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 36 , y + 3 , 3, COLOR_WHITE);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	b29b      	uxth	r3, r3
 8003590:	3324      	adds	r3, #36	@ 0x24
 8003592:	b29b      	uxth	r3, r3
 8003594:	b218      	sxth	r0, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	b29b      	uxth	r3, r3
 800359a:	3303      	adds	r3, #3
 800359c:	b29b      	uxth	r3, r3
 800359e:	b219      	sxth	r1, r3
 80035a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035a4:	2203      	movs	r2, #3
 80035a6:	f001 f898 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 36 , y + 3 , 2, COLOR_WHITE);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3324      	adds	r3, #36	@ 0x24
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	b218      	sxth	r0, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3303      	adds	r3, #3
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	b219      	sxth	r1, r3
 80035be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035c2:	2202      	movs	r2, #2
 80035c4:	f001 f889 	bl	80046da <lcdDrawCircle>
}
 80035c8:	e05c      	b.n	8003684 <TextTemperature16+0x198>
	else if (-10 < temperature )
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f113 0f09 	cmn.w	r3, #9
 80035d0:	db2c      	blt.n	800362c <TextTemperature16+0x140>
		lcdSetCursor(x + 5  , y );
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3305      	adds	r3, #5
 80035d8:	b29b      	uxth	r3, r3
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	b292      	uxth	r2, r2
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f001 fd03 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4829      	ldr	r0, [pc, #164]	@ (8003690 <TextTemperature16+0x1a4>)
 80035ea:	f001 fbe3 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 47 , y + 3 , 3, COLOR_WHITE);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	332f      	adds	r3, #47	@ 0x2f
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	b218      	sxth	r0, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3303      	adds	r3, #3
 80035fe:	b29b      	uxth	r3, r3
 8003600:	b219      	sxth	r1, r3
 8003602:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003606:	2203      	movs	r2, #3
 8003608:	f001 f867 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 47 , y + 3 , 2, COLOR_WHITE);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	b29b      	uxth	r3, r3
 8003610:	332f      	adds	r3, #47	@ 0x2f
 8003612:	b29b      	uxth	r3, r3
 8003614:	b218      	sxth	r0, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	b29b      	uxth	r3, r3
 800361a:	3303      	adds	r3, #3
 800361c:	b29b      	uxth	r3, r3
 800361e:	b219      	sxth	r1, r3
 8003620:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003624:	2202      	movs	r2, #2
 8003626:	f001 f858 	bl	80046da <lcdDrawCircle>
}
 800362a:	e02b      	b.n	8003684 <TextTemperature16+0x198>
		lcdSetCursor(x - 3  , y );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b03      	subs	r3, #3
 8003632:	b29b      	uxth	r3, r3
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	b292      	uxth	r2, r2
 8003638:	4611      	mov	r1, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fcd6 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4813      	ldr	r0, [pc, #76]	@ (8003690 <TextTemperature16+0x1a4>)
 8003644:	f001 fbb6 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 56 , y + 3 , 3, COLOR_WHITE);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	b29b      	uxth	r3, r3
 800364c:	3338      	adds	r3, #56	@ 0x38
 800364e:	b29b      	uxth	r3, r3
 8003650:	b218      	sxth	r0, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	b29b      	uxth	r3, r3
 8003656:	3303      	adds	r3, #3
 8003658:	b29b      	uxth	r3, r3
 800365a:	b219      	sxth	r1, r3
 800365c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003660:	2203      	movs	r2, #3
 8003662:	f001 f83a 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 56 , y + 3 , 2, COLOR_WHITE);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	b29b      	uxth	r3, r3
 800366a:	3338      	adds	r3, #56	@ 0x38
 800366c:	b29b      	uxth	r3, r3
 800366e:	b218      	sxth	r0, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	b29b      	uxth	r3, r3
 8003674:	3303      	adds	r3, #3
 8003676:	b29b      	uxth	r3, r3
 8003678:	b219      	sxth	r1, r3
 800367a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800367e:	2202      	movs	r2, #2
 8003680:	f001 f82b 	bl	80046da <lcdDrawCircle>
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000024 	.word	0x20000024
 8003690:	0800c4f0 	.word	0x0800c4f0

08003694 <TextHumidyti16>:

void TextHumidyti16 (int x , int y , int humidyti){
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 80036a0:	f249 517f 	movw	r1, #38271	@ 0x957f
 80036a4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80036a8:	f001 fc20 	bl	8004eec <lcdSetTextColor>
	lcdSetTextFont(&Font24);
 80036ac:	4830      	ldr	r0, [pc, #192]	@ (8003770 <TextHumidyti16+0xdc>)
 80036ae:	f001 fc0d 	bl	8004ecc <lcdSetTextFont>
	if (humidyti < 10){
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b09      	cmp	r3, #9
 80036b6:	dc2a      	bgt.n	800370e <TextHumidyti16+0x7a>
		lcdSetCursor(x  , y );
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	b292      	uxth	r2, r2
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 fc92 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d/\r\n" , humidyti);
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	482a      	ldr	r0, [pc, #168]	@ (8003774 <TextHumidyti16+0xe0>)
 80036cc:	f001 fb72 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 20 , y + 3 , 2, COLOR_WHITE);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3314      	adds	r3, #20
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	b218      	sxth	r0, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3303      	adds	r3, #3
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	b219      	sxth	r1, r3
 80036e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036e8:	2202      	movs	r2, #2
 80036ea:	f000 fff6 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 29 , y + 16 , 2, COLOR_WHITE);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	331d      	adds	r3, #29
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	b218      	sxth	r0, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3310      	adds	r3, #16
 80036fe:	b29b      	uxth	r3, r3
 8003700:	b219      	sxth	r1, r3
 8003702:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003706:	2202      	movs	r2, #2
 8003708:	f000 ffe7 	bl	80046da <lcdDrawCircle>
		lcdSetCursor(x - 5  , y );
		lcdPrintf("%d/\r\n" , humidyti);
		lcdDrawCircle( x + 33 , y + 3 , 2, COLOR_WHITE);
		lcdDrawCircle( x + 41 , y + 15 , 2, COLOR_WHITE);
	}
}
 800370c:	e02b      	b.n	8003766 <TextHumidyti16+0xd2>
		lcdSetCursor(x - 5  , y );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b05      	subs	r3, #5
 8003714:	b29b      	uxth	r3, r3
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	b292      	uxth	r2, r2
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fc65 	bl	8004fec <lcdSetCursor>
		lcdPrintf("%d/\r\n" , humidyti);
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4813      	ldr	r0, [pc, #76]	@ (8003774 <TextHumidyti16+0xe0>)
 8003726:	f001 fb45 	bl	8004db4 <lcdPrintf>
		lcdDrawCircle( x + 33 , y + 3 , 2, COLOR_WHITE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	b29b      	uxth	r3, r3
 800372e:	3321      	adds	r3, #33	@ 0x21
 8003730:	b29b      	uxth	r3, r3
 8003732:	b218      	sxth	r0, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	b29b      	uxth	r3, r3
 8003738:	3303      	adds	r3, #3
 800373a:	b29b      	uxth	r3, r3
 800373c:	b219      	sxth	r1, r3
 800373e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003742:	2202      	movs	r2, #2
 8003744:	f000 ffc9 	bl	80046da <lcdDrawCircle>
		lcdDrawCircle( x + 41 , y + 15 , 2, COLOR_WHITE);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	b29b      	uxth	r3, r3
 800374c:	3329      	adds	r3, #41	@ 0x29
 800374e:	b29b      	uxth	r3, r3
 8003750:	b218      	sxth	r0, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	b29b      	uxth	r3, r3
 8003756:	330f      	adds	r3, #15
 8003758:	b29b      	uxth	r3, r3
 800375a:	b219      	sxth	r1, r3
 800375c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003760:	2202      	movs	r2, #2
 8003762:	f000 ffba 	bl	80046da <lcdDrawCircle>
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000024 	.word	0x20000024
 8003774:	0800c500 	.word	0x0800c500

08003778 <TextTime>:
void TextTime(int x , int y){
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
	lcdSetCursor(x, y);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	b29b      	uxth	r3, r3
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	b292      	uxth	r2, r2
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f001 fc2d 	bl	8004fec <lcdSetCursor>
	lcdSetTextFont(&Font12);
 8003792:	4809      	ldr	r0, [pc, #36]	@ (80037b8 <TextTime+0x40>)
 8003794:	f001 fb9a 	bl	8004ecc <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003798:	f249 517f 	movw	r1, #38271	@ 0x957f
 800379c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80037a0:	f001 fba4 	bl	8004eec <lcdSetTextColor>
	lcdPrintf("Time: %d:%d:%d" , 15 , 24 , 47);
 80037a4:	232f      	movs	r3, #47	@ 0x2f
 80037a6:	2218      	movs	r2, #24
 80037a8:	210f      	movs	r1, #15
 80037aa:	4804      	ldr	r0, [pc, #16]	@ (80037bc <TextTime+0x44>)
 80037ac:	f001 fb02 	bl	8004db4 <lcdPrintf>
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	2000000c 	.word	0x2000000c
 80037bc:	0800c510 	.word	0x0800c510

080037c0 <TextDate>:
void TextDate(int x , int y){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
	lcdSetCursor(x, y);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	b292      	uxth	r2, r2
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 fc09 	bl	8004fec <lcdSetCursor>
	lcdSetTextFont(&Font12);
 80037da:	480a      	ldr	r0, [pc, #40]	@ (8003804 <TextDate+0x44>)
 80037dc:	f001 fb76 	bl	8004ecc <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 80037e0:	f249 517f 	movw	r1, #38271	@ 0x957f
 80037e4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80037e8:	f001 fb80 	bl	8004eec <lcdSetTextColor>
	lcdPrintf("Date: %d/%d/%d" , 21,12,2024);
 80037ec:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
 80037f0:	220c      	movs	r2, #12
 80037f2:	2115      	movs	r1, #21
 80037f4:	4804      	ldr	r0, [pc, #16]	@ (8003808 <TextDate+0x48>)
 80037f6:	f001 fadd 	bl	8004db4 <lcdPrintf>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	2000000c 	.word	0x2000000c
 8003808:	0800c520 	.word	0x0800c520

0800380c <TextLocation>:
void TextLocation(int x , int y)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
	lcdSetCursor(x, y);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	b29b      	uxth	r3, r3
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	b292      	uxth	r2, r2
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f001 fbe3 	bl	8004fec <lcdSetCursor>
	lcdSetTextFont(&Font12);
 8003826:	4808      	ldr	r0, [pc, #32]	@ (8003848 <TextLocation+0x3c>)
 8003828:	f001 fb50 	bl	8004ecc <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 800382c:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003830:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003834:	f001 fb5a 	bl	8004eec <lcdSetTextColor>
	lcdPrintf("Location: TP Ho Chi Minh");
 8003838:	4804      	ldr	r0, [pc, #16]	@ (800384c <TextLocation+0x40>)
 800383a:	f001 fabb 	bl	8004db4 <lcdPrintf>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	2000000c 	.word	0x2000000c
 800384c:	0800c530 	.word	0x0800c530

08003850 <TextSensor>:
void TextSensor(int x , int y){
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
	lcdSetCursor(x + 40, y);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	b29b      	uxth	r3, r3
 800385e:	3328      	adds	r3, #40	@ 0x28
 8003860:	b29b      	uxth	r3, r3
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	b292      	uxth	r2, r2
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f001 fbbf 	bl	8004fec <lcdSetCursor>
	lcdSetTextFont(&Font16);
 800386e:	4808      	ldr	r0, [pc, #32]	@ (8003890 <TextSensor+0x40>)
 8003870:	f001 fb2c 	bl	8004ecc <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003874:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003878:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800387c:	f001 fb36 	bl	8004eec <lcdSetTextColor>
	lcdPrintf("Sensor");
 8003880:	4804      	ldr	r0, [pc, #16]	@ (8003894 <TextSensor+0x44>)
 8003882:	f001 fa97 	bl	8004db4 <lcdPrintf>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000014 	.word	0x20000014
 8003894:	0800c54c 	.word	0x0800c54c

08003898 <DrawIconHot>:
void DrawIconHot (int x, int y){
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmhot);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	b291      	uxth	r1, r2
 80038aa:	4a04      	ldr	r2, [pc, #16]	@ (80038bc <DrawIconHot+0x24>)
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 f983 	bl	8004bb8 <lcdDrawImage>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	08011578 	.word	0x08011578

080038c0 <DrawIconIce>:
void DrawIconIce (int x, int y){
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmice);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	b291      	uxth	r1, r2
 80038d2:	4a04      	ldr	r2, [pc, #16]	@ (80038e4 <DrawIconIce+0x24>)
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 f96f 	bl	8004bb8 <lcdDrawImage>
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	08011c8c 	.word	0x08011c8c

080038e8 <DrawIconTree>:
void DrawIconTree (int x, int y){
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmtree1);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	b291      	uxth	r1, r2
 80038fa:	4a04      	ldr	r2, [pc, #16]	@ (800390c <DrawIconTree+0x24>)
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 f95b 	bl	8004bb8 <lcdDrawImage>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	08016374 	.word	0x08016374

08003910 <DrawIconWater>:
void DrawIconWater (int x, int y){
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmwater);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	b29b      	uxth	r3, r3
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	b291      	uxth	r1, r2
 8003922:	4a04      	ldr	r2, [pc, #16]	@ (8003934 <DrawIconWater+0x24>)
 8003924:	4618      	mov	r0, r3
 8003926:	f001 f947 	bl	8004bb8 <lcdDrawImage>
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	08016a88 	.word	0x08016a88

08003938 <OneDay>:
void OneDay(int x , int y, int MinTem , int MaxTem , int wind , char day_name[] , int day_code , char date[]){
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
	  lcdSetCursor(x + 7 , y - 6);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	b29b      	uxth	r3, r3
 800394a:	3307      	adds	r3, #7
 800394c:	b29a      	uxth	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b06      	subs	r3, #6
 8003954:	b29b      	uxth	r3, r3
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f001 fb47 	bl	8004fec <lcdSetCursor>
	  lcdSetTextFont(&Font12);
 800395e:	4866      	ldr	r0, [pc, #408]	@ (8003af8 <OneDay+0x1c0>)
 8003960:	f001 fab4 	bl	8004ecc <lcdSetTextFont>
	  lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003964:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003968:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800396c:	f001 fabe 	bl	8004eec <lcdSetTextColor>
	  lcdPrintf(day_name);
 8003970:	69f8      	ldr	r0, [r7, #28]
 8003972:	f001 fa1f 	bl	8004db4 <lcdPrintf>
	  lcdSetCursor(x , y + 7);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	b29a      	uxth	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	b29b      	uxth	r3, r3
 800397e:	3307      	adds	r3, #7
 8003980:	b29b      	uxth	r3, r3
 8003982:	4619      	mov	r1, r3
 8003984:	4610      	mov	r0, r2
 8003986:	f001 fb31 	bl	8004fec <lcdSetCursor>
	  lcdPrintf(date);
 800398a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800398c:	f001 fa12 	bl	8004db4 <lcdPrintf>
	  lcdSetTextFont(&Font16);
 8003990:	485a      	ldr	r0, [pc, #360]	@ (8003afc <OneDay+0x1c4>)
 8003992:	f001 fa9b 	bl	8004ecc <lcdSetTextFont>

	  lcdSetCursor(x + 103, y);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	b29b      	uxth	r3, r3
 800399a:	3367      	adds	r3, #103	@ 0x67
 800399c:	b29b      	uxth	r3, r3
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	b292      	uxth	r2, r2
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 fb21 	bl	8004fec <lcdSetCursor>
	  if (MinTem < 10){
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b09      	cmp	r3, #9
 80039ae:	dc0e      	bgt.n	80039ce <OneDay+0x96>
		  if (MaxTem < 10){
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b09      	cmp	r3, #9
 80039b4:	dc05      	bgt.n	80039c2 <OneDay+0x8a>
			lcdPrintf("0%d-0%d", MinTem , MaxTem);
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4851      	ldr	r0, [pc, #324]	@ (8003b00 <OneDay+0x1c8>)
 80039bc:	f001 f9fa 	bl	8004db4 <lcdPrintf>
 80039c0:	e013      	b.n	80039ea <OneDay+0xb2>
		  }
		  else {
			  lcdPrintf("0%d-%d", MinTem , MaxTem);
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	484f      	ldr	r0, [pc, #316]	@ (8003b04 <OneDay+0x1cc>)
 80039c8:	f001 f9f4 	bl	8004db4 <lcdPrintf>
 80039cc:	e00d      	b.n	80039ea <OneDay+0xb2>
		  }
	  }
	  else{
		  if (MaxTem < 10){
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b09      	cmp	r3, #9
 80039d2:	dc05      	bgt.n	80039e0 <OneDay+0xa8>
			  lcdPrintf("%d-0%d", MinTem , MaxTem);
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	484b      	ldr	r0, [pc, #300]	@ (8003b08 <OneDay+0x1d0>)
 80039da:	f001 f9eb 	bl	8004db4 <lcdPrintf>
 80039de:	e004      	b.n	80039ea <OneDay+0xb2>
		  }
		  else {
			  lcdPrintf("%d-%d", MinTem , MaxTem);
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4849      	ldr	r0, [pc, #292]	@ (8003b0c <OneDay+0x1d4>)
 80039e6:	f001 f9e5 	bl	8004db4 <lcdPrintf>
		  }
	  }

	  lcdDrawCircle(x + 163, y - 2, 2, COLOR_WHITE);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	33a3      	adds	r3, #163	@ 0xa3
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	b218      	sxth	r0, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b02      	subs	r3, #2
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	b219      	sxth	r1, r3
 80039fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a02:	2202      	movs	r2, #2
 8003a04:	f000 fe69 	bl	80046da <lcdDrawCircle>
	  lcdDrawCircle(x + 163, y - 2, 3, COLOR_WHITE);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	33a3      	adds	r3, #163	@ 0xa3
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	b218      	sxth	r0, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b02      	subs	r3, #2
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	b219      	sxth	r1, r3
 8003a1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a20:	2203      	movs	r2, #3
 8003a22:	f000 fe5a 	bl	80046da <lcdDrawCircle>

	  if ( day_code == 61)
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	2b3d      	cmp	r3, #61	@ 0x3d
 8003a2a:	d109      	bne.n	8003a40 <OneDay+0x108>
	  {
		  CloudThunder (x + 51, y - 1);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f7fe fe42 	bl	80026c2 <CloudThunder>
 8003a3e:	e012      	b.n	8003a66 <OneDay+0x12e>
	  }
	  else if (day_code == 50){
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	2b32      	cmp	r3, #50	@ 0x32
 8003a44:	d106      	bne.n	8003a54 <OneDay+0x11c>
		  CloudRain(x + 51 , y );
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3333      	adds	r3, #51	@ 0x33
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe fd07 	bl	8002460 <CloudRain>
 8003a52:	e008      	b.n	8003a66 <OneDay+0x12e>
	  }
	  else{
		  CloudSun(x + 51, y + 5);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3305      	adds	r3, #5
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4610      	mov	r0, r2
 8003a62:	f7fe fdee 	bl	8002642 <CloudSun>
	  }

	  if (wind >= 10){
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b09      	cmp	r3, #9
 8003a6a:	dd20      	ble.n	8003aae <OneDay+0x176>
		  lcdSetCursor(x + 178, y);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	33b2      	adds	r3, #178	@ 0xb2
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	b292      	uxth	r2, r2
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f001 fab6 	bl	8004fec <lcdSetCursor>
		  lcdPrintf("%d",wind);
 8003a80:	69b9      	ldr	r1, [r7, #24]
 8003a82:	4823      	ldr	r0, [pc, #140]	@ (8003b10 <OneDay+0x1d8>)
 8003a84:	f001 f996 	bl	8004db4 <lcdPrintf>

		  lcdSetCursor(x + 202, y+1);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	33ca      	adds	r3, #202	@ 0xca
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3301      	adds	r3, #1
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f001 faa6 	bl	8004fec <lcdSetCursor>
		  lcdSetTextFont(&Font12);
 8003aa0:	4815      	ldr	r0, [pc, #84]	@ (8003af8 <OneDay+0x1c0>)
 8003aa2:	f001 fa13 	bl	8004ecc <lcdSetTextFont>
		  lcdPrintf("km/h");
 8003aa6:	481b      	ldr	r0, [pc, #108]	@ (8003b14 <OneDay+0x1dc>)
 8003aa8:	f001 f984 	bl	8004db4 <lcdPrintf>
		  lcdSetTextFont(&Font12);
		  lcdPrintf("km/h");
//		  lcdDrawCircle(x + 209, y + 2, 2, COLOR_WHITE);
//		  lcdDrawCircle(x + 215, y + 10, 2, COLOR_WHITE);
	  }
}
 8003aac:	e01f      	b.n	8003aee <OneDay+0x1b6>
		  lcdSetCursor(x + 178, y);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	33b2      	adds	r3, #178	@ 0xb2
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	b292      	uxth	r2, r2
 8003aba:	4611      	mov	r1, r2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 fa95 	bl	8004fec <lcdSetCursor>
		  lcdPrintf("0%d",wind);
 8003ac2:	69b9      	ldr	r1, [r7, #24]
 8003ac4:	4814      	ldr	r0, [pc, #80]	@ (8003b18 <OneDay+0x1e0>)
 8003ac6:	f001 f975 	bl	8004db4 <lcdPrintf>
		  lcdSetCursor(x + 202, y+1);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	33ca      	adds	r3, #202	@ 0xca
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f001 fa85 	bl	8004fec <lcdSetCursor>
		  lcdSetTextFont(&Font12);
 8003ae2:	4805      	ldr	r0, [pc, #20]	@ (8003af8 <OneDay+0x1c0>)
 8003ae4:	f001 f9f2 	bl	8004ecc <lcdSetTextFont>
		  lcdPrintf("km/h");
 8003ae8:	480a      	ldr	r0, [pc, #40]	@ (8003b14 <OneDay+0x1dc>)
 8003aea:	f001 f963 	bl	8004db4 <lcdPrintf>
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2000000c 	.word	0x2000000c
 8003afc:	20000014 	.word	0x20000014
 8003b00:	0800c554 	.word	0x0800c554
 8003b04:	0800c55c 	.word	0x0800c55c
 8003b08:	0800c564 	.word	0x0800c564
 8003b0c:	0800c56c 	.word	0x0800c56c
 8003b10:	0800c4f8 	.word	0x0800c4f8
 8003b14:	0800c574 	.word	0x0800c574
 8003b18:	0800c57c 	.word	0x0800c57c

08003b1c <Screen1>:
void Screen1(){
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af04      	add	r7, sp, #16
	int temperatre = 23;
 8003b22:	2317      	movs	r3, #23
 8003b24:	607b      	str	r3, [r7, #4]
	lcdFillRGB(COLOR_THEME_SKYBLUE_BASE);
 8003b26:	f249 507f 	movw	r0, #38271	@ 0x957f
 8003b2a:	f000 fadf 	bl	80040ec <lcdFillRGB>
	// Divide layout
	lcdDrawRoundRect(76, 70, 163, 110, 6, COLOR_THEME_SKYBLUE_SHADOW);
 8003b2e:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	2306      	movs	r3, #6
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	236e      	movs	r3, #110	@ 0x6e
 8003b3a:	22a3      	movs	r2, #163	@ 0xa3
 8003b3c:	2146      	movs	r1, #70	@ 0x46
 8003b3e:	204c      	movs	r0, #76	@ 0x4c
 8003b40:	f000 fc56 	bl	80043f0 <lcdDrawRoundRect>

	lcdDrawRoundRect(1, 70, 73, 110, 6, COLOR_THEME_SKYBLUE_SHADOW);
 8003b44:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	2306      	movs	r3, #6
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	236e      	movs	r3, #110	@ 0x6e
 8003b50:	2249      	movs	r2, #73	@ 0x49
 8003b52:	2146      	movs	r1, #70	@ 0x46
 8003b54:	2001      	movs	r0, #1
 8003b56:	f000 fc4b 	bl	80043f0 <lcdDrawRoundRect>

	lcdDrawRoundRect(1, 187, 238, 50, 6, COLOR_THEME_SKYBLUE_SHADOW);
 8003b5a:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	2306      	movs	r3, #6
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	2332      	movs	r3, #50	@ 0x32
 8003b66:	22ee      	movs	r2, #238	@ 0xee
 8003b68:	21bb      	movs	r1, #187	@ 0xbb
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f000 fc40 	bl	80043f0 <lcdDrawRoundRect>



	lcdDrawRoundRect(1, 240, 150, 78, 6, COLOR_THEME_SKYBLUE_SHADOW);
 8003b70:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	2306      	movs	r3, #6
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	234e      	movs	r3, #78	@ 0x4e
 8003b7c:	2296      	movs	r2, #150	@ 0x96
 8003b7e:	21f0      	movs	r1, #240	@ 0xf0
 8003b80:	2001      	movs	r0, #1
 8003b82:	f000 fc35 	bl	80043f0 <lcdDrawRoundRect>

	lcdDrawRoundRect(155, 240, 84, 78, 6, COLOR_THEME_SKYBLUE_SHADOW);
 8003b86:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	2306      	movs	r3, #6
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	234e      	movs	r3, #78	@ 0x4e
 8003b92:	2254      	movs	r2, #84	@ 0x54
 8003b94:	21f0      	movs	r1, #240	@ 0xf0
 8003b96:	209b      	movs	r0, #155	@ 0x9b
 8003b98:	f000 fc2a 	bl	80043f0 <lcdDrawRoundRect>
	TextTitle( 22 , 2);
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	2016      	movs	r0, #22
 8003ba0:	f7fe fc3c 	bl	800241c <TextTitle>
	TextTime(5, 25);
 8003ba4:	2119      	movs	r1, #25
 8003ba6:	2005      	movs	r0, #5
 8003ba8:	f7ff fde6 	bl	8003778 <TextTime>
	TextDate(5, 40);
 8003bac:	2128      	movs	r1, #40	@ 0x28
 8003bae:	2005      	movs	r0, #5
 8003bb0:	f7ff fe06 	bl	80037c0 <TextDate>
	TextLocation(5, 55);
 8003bb4:	2137      	movs	r1, #55	@ 0x37
 8003bb6:	2005      	movs	r0, #5
 8003bb8:	f7ff fe28 	bl	800380c <TextLocation>
	TextSensor(5, 245);
 8003bbc:	21f5      	movs	r1, #245	@ 0xf5
 8003bbe:	2005      	movs	r0, #5
 8003bc0:	f7ff fe46 	bl	8003850 <TextSensor>
	DrawCloud (3 , 80);
 8003bc4:	2150      	movs	r1, #80	@ 0x50
 8003bc6:	2003      	movs	r0, #3
 8003bc8:	f7fe fc14 	bl	80023f4 <DrawCloud>


	DrawThermometer(95, 80 , 40, 12, 25, COLOR_BLACK, COLOR_RED);
 8003bcc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003bd0:	9302      	str	r3, [sp, #8]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	2319      	movs	r3, #25
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	230c      	movs	r3, #12
 8003bdc:	2228      	movs	r2, #40	@ 0x28
 8003bde:	2150      	movs	r1, #80	@ 0x50
 8003be0:	205f      	movs	r0, #95	@ 0x5f
 8003be2:	f7ff faff 	bl	80031e4 <DrawThermometer>
	TextTemperature16(120, 95, temperatre);
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	215f      	movs	r1, #95	@ 0x5f
 8003bea:	2078      	movs	r0, #120	@ 0x78
 8003bec:	f7ff fc7e 	bl	80034ec <TextTemperature16>
	if (temperatre >= 29){
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b1c      	cmp	r3, #28
 8003bf4:	dd04      	ble.n	8003c00 <Screen1+0xe4>
	  DrawIconHot(205 , 85);
 8003bf6:	2155      	movs	r1, #85	@ 0x55
 8003bf8:	20cd      	movs	r0, #205	@ 0xcd
 8003bfa:	f7ff fe4d 	bl	8003898 <DrawIconHot>
 8003bfe:	e00b      	b.n	8003c18 <Screen1+0xfc>
	}
	else if ( temperatre < 20){
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b13      	cmp	r3, #19
 8003c04:	dc04      	bgt.n	8003c10 <Screen1+0xf4>
	  DrawIconIce(205 , 85);
 8003c06:	2155      	movs	r1, #85	@ 0x55
 8003c08:	20cd      	movs	r0, #205	@ 0xcd
 8003c0a:	f7ff fe59 	bl	80038c0 <DrawIconIce>
 8003c0e:	e003      	b.n	8003c18 <Screen1+0xfc>
	}
	else {
	  DrawIconTree(205 , 85);
 8003c10:	2155      	movs	r1, #85	@ 0x55
 8003c12:	20cd      	movs	r0, #205	@ 0xcd
 8003c14:	f7ff fe68 	bl	80038e8 <DrawIconTree>
	}

	WeatherDay(0, 190 );
 8003c18:	21be      	movs	r1, #190	@ 0xbe
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	f7ff f87a 	bl	8002d14 <WeatherDay>
	DrawIconHumidyti1(77, 130);
 8003c20:	2182      	movs	r1, #130	@ 0x82
 8003c22:	204d      	movs	r0, #77	@ 0x4d
 8003c24:	f7ff fbfe 	bl	8003424 <DrawIconHumidyti1>
	TextHumidyti16 (140, 146 , 12);
 8003c28:	220c      	movs	r2, #12
 8003c2a:	2192      	movs	r1, #146	@ 0x92
 8003c2c:	208c      	movs	r0, #140	@ 0x8c
 8003c2e:	f7ff fd31 	bl	8003694 <TextHumidyti16>
	DrawIconWater(205 , 138);
 8003c32:	218a      	movs	r1, #138	@ 0x8a
 8003c34:	20cd      	movs	r0, #205	@ 0xcd
 8003c36:	f7ff fe6b 	bl	8003910 <DrawIconWater>

}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <Screen2>:

void Screen2(int Max_temp[] , int Min_temp[] , int day_code[] , char day_name[][4] , int Wind_speed[] , char date [][6]){
 8003c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c46:	b08d      	sub	sp, #52	@ 0x34
 8003c48:	af04      	add	r7, sp, #16
 8003c4a:	6178      	str	r0, [r7, #20]
 8003c4c:	6139      	str	r1, [r7, #16]
 8003c4e:	60fa      	str	r2, [r7, #12]
 8003c50:	60bb      	str	r3, [r7, #8]

	lcdFillRGB(COLOR_THEME_SKYBLUE_BASE);
 8003c52:	f249 507f 	movw	r0, #38271	@ 0x957f
 8003c56:	f000 fa49 	bl	80040ec <lcdFillRGB>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003c5a:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003c5e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003c62:	f001 f943 	bl	8004eec <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 8003c66:	4865      	ldr	r0, [pc, #404]	@ (8003dfc <Screen2+0x1b8>)
 8003c68:	f001 f930 	bl	8004ecc <lcdSetTextFont>
	lcdSetCursor(15, 6);
 8003c6c:	2106      	movs	r1, #6
 8003c6e:	200f      	movs	r0, #15
 8003c70:	f001 f9bc 	bl	8004fec <lcdSetCursor>
	lcdPrintf("7 Forecast Days");
 8003c74:	4862      	ldr	r0, [pc, #392]	@ (8003e00 <Screen2+0x1bc>)
 8003c76:	f001 f89d 	bl	8004db4 <lcdPrintf>


	  DrawIconDate(5, 30);
 8003c7a:	211e      	movs	r1, #30
 8003c7c:	2005      	movs	r0, #5
 8003c7e:	f7ff fbe5 	bl	800344c <DrawIconDate>
	  DrawIconWeather(55, 30);
 8003c82:	211e      	movs	r1, #30
 8003c84:	2037      	movs	r0, #55	@ 0x37
 8003c86:	f7ff fbf5 	bl	8003474 <DrawIconWeather>
	  DrawIconTem(120, 30);
 8003c8a:	211e      	movs	r1, #30
 8003c8c:	2078      	movs	r0, #120	@ 0x78
 8003c8e:	f7ff fc05 	bl	800349c <DrawIconTem>
	  DrawIconWind(195, 37);
 8003c92:	2125      	movs	r1, #37	@ 0x25
 8003c94:	20c3      	movs	r0, #195	@ 0xc3
 8003c96:	f7ff fc15 	bl	80034c4 <DrawIconWind>

	  lcdDrawLine(0, 0, 0, 319, COLOR_BLACK);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	f240 133f 	movw	r3, #319	@ 0x13f
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f000 fb04 	bl	80042b4 <lcdDrawLine>
	  lcdDrawLine(239, 0, 239, 319, COLOR_BLACK);
 8003cac:	2300      	movs	r3, #0
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	f240 133f 	movw	r3, #319	@ 0x13f
 8003cb4:	22ef      	movs	r2, #239	@ 0xef
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	20ef      	movs	r0, #239	@ 0xef
 8003cba:	f000 fafb 	bl	80042b4 <lcdDrawLine>
	  lcdDrawLine(50, 30, 50, 319, COLOR_BLACK);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	f240 133f 	movw	r3, #319	@ 0x13f
 8003cc6:	2232      	movs	r2, #50	@ 0x32
 8003cc8:	211e      	movs	r1, #30
 8003cca:	2032      	movs	r0, #50	@ 0x32
 8003ccc:	f000 faf2 	bl	80042b4 <lcdDrawLine>
	  lcdDrawLine(100, 30, 100, 319, COLOR_BLACK);
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	f240 133f 	movw	r3, #319	@ 0x13f
 8003cd8:	2264      	movs	r2, #100	@ 0x64
 8003cda:	211e      	movs	r1, #30
 8003cdc:	2064      	movs	r0, #100	@ 0x64
 8003cde:	f000 fae9 	bl	80042b4 <lcdDrawLine>
	  lcdDrawLine(180, 30, 180, 319, COLOR_BLACK);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	f240 133f 	movw	r3, #319	@ 0x13f
 8003cea:	22b4      	movs	r2, #180	@ 0xb4
 8003cec:	211e      	movs	r1, #30
 8003cee:	20b4      	movs	r0, #180	@ 0xb4
 8003cf0:	f000 fae0 	bl	80042b4 <lcdDrawLine>

	  lcdDrawLine(0, 30 , 239, 30  , COLOR_BLACK);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	231e      	movs	r3, #30
 8003cfa:	22ef      	movs	r2, #239	@ 0xef
 8003cfc:	211e      	movs	r1, #30
 8003cfe:	2000      	movs	r0, #0
 8003d00:	f000 fad8 	bl	80042b4 <lcdDrawLine>
	  lcdDrawLine(0, 73 , 239, 73  , COLOR_BLACK);
 8003d04:	2300      	movs	r3, #0
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	2349      	movs	r3, #73	@ 0x49
 8003d0a:	22ef      	movs	r2, #239	@ 0xef
 8003d0c:	2149      	movs	r1, #73	@ 0x49
 8003d0e:	2000      	movs	r0, #0
 8003d10:	f000 fad0 	bl	80042b4 <lcdDrawLine>
	  lcdDrawLine(0, 108, 239, 108 , COLOR_BLACK);
 8003d14:	2300      	movs	r3, #0
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	236c      	movs	r3, #108	@ 0x6c
 8003d1a:	22ef      	movs	r2, #239	@ 0xef
 8003d1c:	216c      	movs	r1, #108	@ 0x6c
 8003d1e:	2000      	movs	r0, #0
 8003d20:	f000 fac8 	bl	80042b4 <lcdDrawLine>
	  lcdDrawLine(0, 143, 239, 143 , COLOR_BLACK);
 8003d24:	2300      	movs	r3, #0
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	238f      	movs	r3, #143	@ 0x8f
 8003d2a:	22ef      	movs	r2, #239	@ 0xef
 8003d2c:	218f      	movs	r1, #143	@ 0x8f
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f000 fac0 	bl	80042b4 <lcdDrawLine>
	  lcdDrawLine(0, 178, 239, 178 , COLOR_BLACK);
 8003d34:	2300      	movs	r3, #0
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	23b2      	movs	r3, #178	@ 0xb2
 8003d3a:	22ef      	movs	r2, #239	@ 0xef
 8003d3c:	21b2      	movs	r1, #178	@ 0xb2
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f000 fab8 	bl	80042b4 <lcdDrawLine>
	  lcdDrawLine(0, 213, 239, 213 , COLOR_BLACK);
 8003d44:	2300      	movs	r3, #0
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	23d5      	movs	r3, #213	@ 0xd5
 8003d4a:	22ef      	movs	r2, #239	@ 0xef
 8003d4c:	21d5      	movs	r1, #213	@ 0xd5
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f000 fab0 	bl	80042b4 <lcdDrawLine>
	  lcdDrawLine(0, 248, 239, 248 , COLOR_BLACK);
 8003d54:	2300      	movs	r3, #0
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	23f8      	movs	r3, #248	@ 0xf8
 8003d5a:	22ef      	movs	r2, #239	@ 0xef
 8003d5c:	21f8      	movs	r1, #248	@ 0xf8
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f000 faa8 	bl	80042b4 <lcdDrawLine>
	  lcdDrawLine(0, 283, 239, 283 , COLOR_BLACK);
 8003d64:	2300      	movs	r3, #0
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	f240 131b 	movw	r3, #283	@ 0x11b
 8003d6c:	22ef      	movs	r2, #239	@ 0xef
 8003d6e:	f240 111b 	movw	r1, #283	@ 0x11b
 8003d72:	2000      	movs	r0, #0
 8003d74:	f000 fa9e 	bl	80042b4 <lcdDrawLine>
	  for (int i = 0 ; i < 7 ; i++)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	e035      	b.n	8003dea <Screen2+0x1a6>
	  {

		  OneDay(7, 85 + i * 35, Min_temp[i]  , Max_temp[i] , Wind_speed[i] , day_name[i] , day_code[i] , date[i]);
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	00da      	lsls	r2, r3, #3
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f103 0555 	add.w	r5, r3, #85	@ 0x55
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4413      	add	r3, r2
 8003d96:	681e      	ldr	r6, [r3, #0]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4413      	add	r3, r2
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	607b      	str	r3, [r7, #4]
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003daa:	4413      	add	r3, r2
 8003dac:	6819      	ldr	r1, [r3, #0]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	18d0      	adds	r0, r2, r3
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	681c      	ldr	r4, [r3, #0]
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	4413      	add	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dce:	4413      	add	r3, r2
 8003dd0:	9303      	str	r3, [sp, #12]
 8003dd2:	9402      	str	r4, [sp, #8]
 8003dd4:	9001      	str	r0, [sp, #4]
 8003dd6:	9100      	str	r1, [sp, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4632      	mov	r2, r6
 8003ddc:	4629      	mov	r1, r5
 8003dde:	2007      	movs	r0, #7
 8003de0:	f7ff fdaa 	bl	8003938 <OneDay>
	  for (int i = 0 ; i < 7 ; i++)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	3301      	adds	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2b06      	cmp	r3, #6
 8003dee:	ddc6      	ble.n	8003d7e <Screen2+0x13a>
	  }
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3724      	adds	r7, #36	@ 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	2000001c 	.word	0x2000001c
 8003e00:	0800c580 	.word	0x0800c580

08003e04 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	2301      	movs	r3, #1
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	2200      	movs	r2, #0
 8003e16:	2101      	movs	r1, #1
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f001 f9a3 	bl	8005164 <lcdBuildMemoryAccessControlConfig>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	4bae      	ldr	r3, [pc, #696]	@ (80040dc <lcdInit+0x2d8>)
 8003e24:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8003e26:	2300      	movs	r3, #0
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2201      	movs	r2, #1
 8003e32:	2100      	movs	r1, #0
 8003e34:	2000      	movs	r0, #0
 8003e36:	f001 f995 	bl	8005164 <lcdBuildMemoryAccessControlConfig>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4ba8      	ldr	r3, [pc, #672]	@ (80040e0 <lcdInit+0x2dc>)
 8003e40:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8003e42:	2300      	movs	r3, #0
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	2301      	movs	r3, #1
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2100      	movs	r1, #0
 8003e50:	2001      	movs	r0, #1
 8003e52:	f001 f987 	bl	8005164 <lcdBuildMemoryAccessControlConfig>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4ba2      	ldr	r3, [pc, #648]	@ (80040e4 <lcdInit+0x2e0>)
 8003e5c:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8003e5e:	2300      	movs	r3, #0
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	2301      	movs	r3, #1
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2300      	movs	r3, #0
 8003e68:	2201      	movs	r2, #1
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f001 f979 	bl	8005164 <lcdBuildMemoryAccessControlConfig>
 8003e72:	4603      	mov	r3, r0
 8003e74:	461a      	mov	r2, r3
 8003e76:	4b9c      	ldr	r3, [pc, #624]	@ (80040e8 <lcdInit+0x2e4>)
 8003e78:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 8003e7a:	f001 f949 	bl	8005110 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 8003e7e:	2028      	movs	r0, #40	@ 0x28
 8003e80:	f001 f950 	bl	8005124 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 8003e84:	20cf      	movs	r0, #207	@ 0xcf
 8003e86:	f001 f94d 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x00);
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	f001 f95a 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x83);
 8003e90:	2083      	movs	r0, #131	@ 0x83
 8003e92:	f001 f957 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x30);
 8003e96:	2030      	movs	r0, #48	@ 0x30
 8003e98:	f001 f954 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(0xED);
 8003e9c:	20ed      	movs	r0, #237	@ 0xed
 8003e9e:	f001 f941 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x64);
 8003ea2:	2064      	movs	r0, #100	@ 0x64
 8003ea4:	f001 f94e 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x03);
 8003ea8:	2003      	movs	r0, #3
 8003eaa:	f001 f94b 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x12);
 8003eae:	2012      	movs	r0, #18
 8003eb0:	f001 f948 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x81);
 8003eb4:	2081      	movs	r0, #129	@ 0x81
 8003eb6:	f001 f945 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(0xE8);
 8003eba:	20e8      	movs	r0, #232	@ 0xe8
 8003ebc:	f001 f932 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x85);
 8003ec0:	2085      	movs	r0, #133	@ 0x85
 8003ec2:	f001 f93f 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x01);
 8003ec6:	2001      	movs	r0, #1
 8003ec8:	f001 f93c 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x79);
 8003ecc:	2079      	movs	r0, #121	@ 0x79
 8003ece:	f001 f939 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(0xCB);
 8003ed2:	20cb      	movs	r0, #203	@ 0xcb
 8003ed4:	f001 f926 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x39);
 8003ed8:	2039      	movs	r0, #57	@ 0x39
 8003eda:	f001 f933 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x2C);
 8003ede:	202c      	movs	r0, #44	@ 0x2c
 8003ee0:	f001 f930 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x00);
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f001 f92d 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x34);
 8003eea:	2034      	movs	r0, #52	@ 0x34
 8003eec:	f001 f92a 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x02);
 8003ef0:	2002      	movs	r0, #2
 8003ef2:	f001 f927 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(0xF7);
 8003ef6:	20f7      	movs	r0, #247	@ 0xf7
 8003ef8:	f001 f914 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x20);
 8003efc:	2020      	movs	r0, #32
 8003efe:	f001 f921 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(0xEA);
 8003f02:	20ea      	movs	r0, #234	@ 0xea
 8003f04:	f001 f90e 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x00);
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f001 f91b 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x00);
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f001 f918 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8003f14:	20c0      	movs	r0, #192	@ 0xc0
 8003f16:	f001 f905 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x26);
 8003f1a:	2026      	movs	r0, #38	@ 0x26
 8003f1c:	f001 f912 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8003f20:	20c1      	movs	r0, #193	@ 0xc1
 8003f22:	f001 f8ff 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x11);
 8003f26:	2011      	movs	r0, #17
 8003f28:	f001 f90c 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8003f2c:	20c5      	movs	r0, #197	@ 0xc5
 8003f2e:	f001 f8f9 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x35);
 8003f32:	2035      	movs	r0, #53	@ 0x35
 8003f34:	f001 f906 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x3E);
 8003f38:	203e      	movs	r0, #62	@ 0x3e
 8003f3a:	f001 f903 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8003f3e:	20c7      	movs	r0, #199	@ 0xc7
 8003f40:	f001 f8f0 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0xBE);
 8003f44:	20be      	movs	r0, #190	@ 0xbe
 8003f46:	f001 f8fd 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 8003f4a:	2036      	movs	r0, #54	@ 0x36
 8003f4c:	f001 f8ea 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8003f50:	4b62      	ldr	r3, [pc, #392]	@ (80040dc <lcdInit+0x2d8>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 f8f5 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 8003f5a:	203a      	movs	r0, #58	@ 0x3a
 8003f5c:	f001 f8e2 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x55);
 8003f60:	2055      	movs	r0, #85	@ 0x55
 8003f62:	f001 f8ef 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 8003f66:	20b1      	movs	r0, #177	@ 0xb1
 8003f68:	f001 f8dc 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x00);
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f001 f8e9 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x1B);
 8003f72:	201b      	movs	r0, #27
 8003f74:	f001 f8e6 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(0xF2);
 8003f78:	20f2      	movs	r0, #242	@ 0xf2
 8003f7a:	f001 f8d3 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x08);
 8003f7e:	2008      	movs	r0, #8
 8003f80:	f001 f8e0 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 8003f84:	2026      	movs	r0, #38	@ 0x26
 8003f86:	f001 f8cd 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x01);
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f001 f8da 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 8003f90:	20e0      	movs	r0, #224	@ 0xe0
 8003f92:	f001 f8c7 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x1F);
 8003f96:	201f      	movs	r0, #31
 8003f98:	f001 f8d4 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x1A);
 8003f9c:	201a      	movs	r0, #26
 8003f9e:	f001 f8d1 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x18);
 8003fa2:	2018      	movs	r0, #24
 8003fa4:	f001 f8ce 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x0A);
 8003fa8:	200a      	movs	r0, #10
 8003faa:	f001 f8cb 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x0F);
 8003fae:	200f      	movs	r0, #15
 8003fb0:	f001 f8c8 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x06);
 8003fb4:	2006      	movs	r0, #6
 8003fb6:	f001 f8c5 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x45);
 8003fba:	2045      	movs	r0, #69	@ 0x45
 8003fbc:	f001 f8c2 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x87);
 8003fc0:	2087      	movs	r0, #135	@ 0x87
 8003fc2:	f001 f8bf 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x32);
 8003fc6:	2032      	movs	r0, #50	@ 0x32
 8003fc8:	f001 f8bc 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x0A);
 8003fcc:	200a      	movs	r0, #10
 8003fce:	f001 f8b9 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x07);
 8003fd2:	2007      	movs	r0, #7
 8003fd4:	f001 f8b6 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x02);
 8003fd8:	2002      	movs	r0, #2
 8003fda:	f001 f8b3 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x07);
 8003fde:	2007      	movs	r0, #7
 8003fe0:	f001 f8b0 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x05);
 8003fe4:	2005      	movs	r0, #5
 8003fe6:	f001 f8ad 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x00);
 8003fea:	2000      	movs	r0, #0
 8003fec:	f001 f8aa 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8003ff0:	20e1      	movs	r0, #225	@ 0xe1
 8003ff2:	f001 f897 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x00);
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	f001 f8a4 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x25);
 8003ffc:	2025      	movs	r0, #37	@ 0x25
 8003ffe:	f001 f8a1 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x27);
 8004002:	2027      	movs	r0, #39	@ 0x27
 8004004:	f001 f89e 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x05);
 8004008:	2005      	movs	r0, #5
 800400a:	f001 f89b 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x10);
 800400e:	2010      	movs	r0, #16
 8004010:	f001 f898 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x09);
 8004014:	2009      	movs	r0, #9
 8004016:	f001 f895 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x3A);
 800401a:	203a      	movs	r0, #58	@ 0x3a
 800401c:	f001 f892 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x78);
 8004020:	2078      	movs	r0, #120	@ 0x78
 8004022:	f001 f88f 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x4D);
 8004026:	204d      	movs	r0, #77	@ 0x4d
 8004028:	f001 f88c 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x05);
 800402c:	2005      	movs	r0, #5
 800402e:	f001 f889 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x18);
 8004032:	2018      	movs	r0, #24
 8004034:	f001 f886 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x0D);
 8004038:	200d      	movs	r0, #13
 800403a:	f001 f883 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x38);
 800403e:	2038      	movs	r0, #56	@ 0x38
 8004040:	f001 f880 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x3A);
 8004044:	203a      	movs	r0, #58	@ 0x3a
 8004046:	f001 f87d 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x1F);
 800404a:	201f      	movs	r0, #31
 800404c:	f001 f87a 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8004050:	202a      	movs	r0, #42	@ 0x2a
 8004052:	f001 f867 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x00);
 8004056:	2000      	movs	r0, #0
 8004058:	f001 f874 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x00);
 800405c:	2000      	movs	r0, #0
 800405e:	f001 f871 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x00);
 8004062:	2000      	movs	r0, #0
 8004064:	f001 f86e 	bl	8005144 <lcdWriteData>
  lcdWriteData(0xEF);
 8004068:	20ef      	movs	r0, #239	@ 0xef
 800406a:	f001 f86b 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 800406e:	202b      	movs	r0, #43	@ 0x2b
 8004070:	f001 f858 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x00);
 8004074:	2000      	movs	r0, #0
 8004076:	f001 f865 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x00);
 800407a:	2000      	movs	r0, #0
 800407c:	f001 f862 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x01);
 8004080:	2001      	movs	r0, #1
 8004082:	f001 f85f 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x3F);
 8004086:	203f      	movs	r0, #63	@ 0x3f
 8004088:	f001 f85c 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 800408c:	20b7      	movs	r0, #183	@ 0xb7
 800408e:	f001 f849 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x07);
 8004092:	2007      	movs	r0, #7
 8004094:	f001 f856 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 8004098:	20b6      	movs	r0, #182	@ 0xb6
 800409a:	f001 f843 	bl	8005124 <lcdWriteCommand>
  lcdWriteData(0x0A);
 800409e:	200a      	movs	r0, #10
 80040a0:	f001 f850 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x82);
 80040a4:	2082      	movs	r0, #130	@ 0x82
 80040a6:	f001 f84d 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x27);
 80040aa:	2027      	movs	r0, #39	@ 0x27
 80040ac:	f001 f84a 	bl	8005144 <lcdWriteData>
  lcdWriteData(0x00);
 80040b0:	2000      	movs	r0, #0
 80040b2:	f001 f847 	bl	8005144 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80040b6:	2011      	movs	r0, #17
 80040b8:	f001 f834 	bl	8005124 <lcdWriteCommand>
  HAL_Delay(100);
 80040bc:	2064      	movs	r0, #100	@ 0x64
 80040be:	f002 f91b 	bl	80062f8 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 80040c2:	2029      	movs	r0, #41	@ 0x29
 80040c4:	f001 f82e 	bl	8005124 <lcdWriteCommand>
  HAL_Delay(100);
 80040c8:	2064      	movs	r0, #100	@ 0x64
 80040ca:	f002 f915 	bl	80062f8 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80040ce:	202c      	movs	r0, #44	@ 0x2c
 80040d0:	f001 f828 	bl	8005124 <lcdWriteCommand>
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000a40 	.word	0x20000a40
 80040e0:	20000a41 	.word	0x20000a41
 80040e4:	20000a42 	.word	0x20000a42
 80040e8:	20000a43 	.word	0x20000a43

080040ec <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80040f6:	4b11      	ldr	r3, [pc, #68]	@ (800413c <lcdFillRGB+0x50>)
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	4b0f      	ldr	r3, [pc, #60]	@ (800413c <lcdFillRGB+0x50>)
 8004100:	885b      	ldrh	r3, [r3, #2]
 8004102:	3b01      	subs	r3, #1
 8004104:	b29b      	uxth	r3, r3
 8004106:	2100      	movs	r1, #0
 8004108:	2000      	movs	r0, #0
 800410a:	f000 ff89 	bl	8005020 <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 800410e:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <lcdFillRGB+0x50>)
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	4b09      	ldr	r3, [pc, #36]	@ (800413c <lcdFillRGB+0x50>)
 8004116:	885b      	ldrh	r3, [r3, #2]
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 800411e:	e003      	b.n	8004128 <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	4618      	mov	r0, r3
 8004124:	f001 f80e 	bl	8005144 <lcdWriteData>
  while(dimensions--)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e5a      	subs	r2, r3, #1
 800412c:	60fa      	str	r2, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f6      	bne.n	8004120 <lcdFillRGB+0x34>
  }
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	2000002c 	.word	0x2000002c

08004140 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	80fb      	strh	r3, [r7, #6]
 800414a:	460b      	mov	r3, r1
 800414c:	80bb      	strh	r3, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8004152:	4b0c      	ldr	r3, [pc, #48]	@ (8004184 <lcdDrawPixel+0x44>)
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	88fa      	ldrh	r2, [r7, #6]
 8004158:	429a      	cmp	r2, r3
 800415a:	d20f      	bcs.n	800417c <lcdDrawPixel+0x3c>
 800415c:	4b09      	ldr	r3, [pc, #36]	@ (8004184 <lcdDrawPixel+0x44>)
 800415e:	885b      	ldrh	r3, [r3, #2]
 8004160:	88ba      	ldrh	r2, [r7, #4]
 8004162:	429a      	cmp	r2, r3
 8004164:	d20a      	bcs.n	800417c <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8004166:	88bb      	ldrh	r3, [r7, #4]
 8004168:	88fa      	ldrh	r2, [r7, #6]
 800416a:	88b9      	ldrh	r1, [r7, #4]
 800416c:	88f8      	ldrh	r0, [r7, #6]
 800416e:	f000 ff57 	bl	8005020 <lcdSetWindow>
    lcdWriteData(color);
 8004172:	887b      	ldrh	r3, [r7, #2]
 8004174:	4618      	mov	r0, r3
 8004176:	f000 ffe5 	bl	8005144 <lcdWriteData>
 800417a:	e000      	b.n	800417e <lcdDrawPixel+0x3e>
        return;
 800417c:	bf00      	nop
}
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	2000002c 	.word	0x2000002c

08004188 <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8004188:	b590      	push	{r4, r7, lr}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	4611      	mov	r1, r2
 8004194:	461a      	mov	r2, r3
 8004196:	4623      	mov	r3, r4
 8004198:	80fb      	strh	r3, [r7, #6]
 800419a:	4603      	mov	r3, r0
 800419c:	80bb      	strh	r3, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	807b      	strh	r3, [r7, #2]
 80041a2:	4613      	mov	r3, r2
 80041a4:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 80041a6:	88ba      	ldrh	r2, [r7, #4]
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d205      	bcs.n	80041ba <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	817b      	strh	r3, [r7, #10]
 80041b2:	88bb      	ldrh	r3, [r7, #4]
 80041b4:	80fb      	strh	r3, [r7, #6]
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 80041ba:	4b15      	ldr	r3, [pc, #84]	@ (8004210 <lcdDrawHLine+0x88>)
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	88ba      	ldrh	r2, [r7, #4]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d303      	bcc.n	80041cc <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <lcdDrawHLine+0x88>)
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 80041cc:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <lcdDrawHLine+0x88>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	88fa      	ldrh	r2, [r7, #6]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d303      	bcc.n	80041de <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 80041d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004210 <lcdDrawHLine+0x88>)
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	3b01      	subs	r3, #1
 80041dc:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	88ba      	ldrh	r2, [r7, #4]
 80041e2:	8879      	ldrh	r1, [r7, #2]
 80041e4:	88f8      	ldrh	r0, [r7, #6]
 80041e6:	f000 ff1b 	bl	8005020 <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	e006      	b.n	80041fe <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 80041f0:	883b      	ldrh	r3, [r7, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 ffa6 	bl	8005144 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	88bb      	ldrh	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	429a      	cmp	r2, r3
 8004204:	ddf4      	ble.n	80041f0 <lcdDrawHLine+0x68>
	}
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	bd90      	pop	{r4, r7, pc}
 8004210:	2000002c 	.word	0x2000002c

08004214 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	4604      	mov	r4, r0
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	461a      	mov	r2, r3
 8004222:	4623      	mov	r3, r4
 8004224:	80fb      	strh	r3, [r7, #6]
 8004226:	4603      	mov	r3, r0
 8004228:	80bb      	strh	r3, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	807b      	strh	r3, [r7, #2]
 800422e:	4613      	mov	r3, r2
 8004230:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8004232:	887a      	ldrh	r2, [r7, #2]
 8004234:	88bb      	ldrh	r3, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d205      	bcs.n	8004246 <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 800423a:	88bb      	ldrh	r3, [r7, #4]
 800423c:	817b      	strh	r3, [r7, #10]
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	80bb      	strh	r3, [r7, #4]
 8004242:	897b      	ldrh	r3, [r7, #10]
 8004244:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8004246:	4b1a      	ldr	r3, [pc, #104]	@ (80042b0 <lcdDrawVLine+0x9c>)
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	429a      	cmp	r2, r3
 800424e:	d303      	bcc.n	8004258 <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8004250:	4b17      	ldr	r3, [pc, #92]	@ (80042b0 <lcdDrawVLine+0x9c>)
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	3b01      	subs	r3, #1
 8004256:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8004258:	4b15      	ldr	r3, [pc, #84]	@ (80042b0 <lcdDrawVLine+0x9c>)
 800425a:	885b      	ldrh	r3, [r3, #2]
 800425c:	88ba      	ldrh	r2, [r7, #4]
 800425e:	429a      	cmp	r2, r3
 8004260:	d303      	bcc.n	800426a <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8004262:	4b13      	ldr	r3, [pc, #76]	@ (80042b0 <lcdDrawVLine+0x9c>)
 8004264:	885b      	ldrh	r3, [r3, #2]
 8004266:	3b01      	subs	r3, #1
 8004268:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 800426a:	4b11      	ldr	r3, [pc, #68]	@ (80042b0 <lcdDrawVLine+0x9c>)
 800426c:	885b      	ldrh	r3, [r3, #2]
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	429a      	cmp	r2, r3
 8004272:	d303      	bcc.n	800427c <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8004274:	4b0e      	ldr	r3, [pc, #56]	@ (80042b0 <lcdDrawVLine+0x9c>)
 8004276:	885b      	ldrh	r3, [r3, #2]
 8004278:	3b01      	subs	r3, #1
 800427a:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 800427c:	887b      	ldrh	r3, [r7, #2]
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	88b9      	ldrh	r1, [r7, #4]
 8004282:	88f8      	ldrh	r0, [r7, #6]
 8004284:	f000 fecc 	bl	8005020 <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8004288:	88bb      	ldrh	r3, [r7, #4]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e006      	b.n	800429c <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 800428e:	883b      	ldrh	r3, [r7, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f000 ff57 	bl	8005144 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3301      	adds	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	887b      	ldrh	r3, [r7, #2]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	ddf4      	ble.n	800428e <lcdDrawVLine+0x7a>
  }
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd90      	pop	{r4, r7, pc}
 80042ae:	bf00      	nop
 80042b0:	2000002c 	.word	0x2000002c

080042b4 <lcdDrawLine>:
 * \param color	Color
 *
 * \return void
 */
void lcdDrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b089      	sub	sp, #36	@ 0x24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4604      	mov	r4, r0
 80042bc:	4608      	mov	r0, r1
 80042be:	4611      	mov	r1, r2
 80042c0:	461a      	mov	r2, r3
 80042c2:	4623      	mov	r3, r4
 80042c4:	80fb      	strh	r3, [r7, #6]
 80042c6:	4603      	mov	r3, r0
 80042c8:	80bb      	strh	r3, [r7, #4]
 80042ca:	460b      	mov	r3, r1
 80042cc:	807b      	strh	r3, [r7, #2]
 80042ce:	4613      	mov	r3, r2
 80042d0:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 80042d2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80042d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80042e0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80042e4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80042e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ec:	1acb      	subs	r3, r1, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bfb8      	it	lt
 80042f2:	425b      	neglt	r3, r3
 80042f4:	429a      	cmp	r2, r3
 80042f6:	bfcc      	ite	gt
 80042f8:	2301      	movgt	r3, #1
 80042fa:	2300      	movle	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	837b      	strh	r3, [r7, #26]
	if (steep)
 8004300:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00b      	beq.n	8004320 <lcdDrawLine+0x6c>
	{
		swap(x1, y1);
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	833b      	strh	r3, [r7, #24]
 800430c:	88bb      	ldrh	r3, [r7, #4]
 800430e:	80fb      	strh	r3, [r7, #6]
 8004310:	8b3b      	ldrh	r3, [r7, #24]
 8004312:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8004314:	887b      	ldrh	r3, [r7, #2]
 8004316:	82fb      	strh	r3, [r7, #22]
 8004318:	883b      	ldrh	r3, [r7, #0]
 800431a:	807b      	strh	r3, [r7, #2]
 800431c:	8afb      	ldrh	r3, [r7, #22]
 800431e:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2)
 8004320:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004324:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004328:	429a      	cmp	r2, r3
 800432a:	dd0b      	ble.n	8004344 <lcdDrawLine+0x90>
	{
		swap(x1, x2);
 800432c:	88fb      	ldrh	r3, [r7, #6]
 800432e:	82bb      	strh	r3, [r7, #20]
 8004330:	887b      	ldrh	r3, [r7, #2]
 8004332:	80fb      	strh	r3, [r7, #6]
 8004334:	8abb      	ldrh	r3, [r7, #20]
 8004336:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8004338:	88bb      	ldrh	r3, [r7, #4]
 800433a:	827b      	strh	r3, [r7, #18]
 800433c:	883b      	ldrh	r3, [r7, #0]
 800433e:	80bb      	strh	r3, [r7, #4]
 8004340:	8a7b      	ldrh	r3, [r7, #18]
 8004342:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8004344:	887a      	ldrh	r2, [r7, #2]
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	b29b      	uxth	r3, r3
 800434c:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 800434e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004352:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	bfb8      	it	lt
 800435c:	425b      	neglt	r3, r3
 800435e:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8004360:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004364:	0fda      	lsrs	r2, r3, #31
 8004366:	4413      	add	r3, r2
 8004368:	105b      	asrs	r3, r3, #1
 800436a:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2)
 800436c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004370:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004374:	429a      	cmp	r2, r3
 8004376:	da02      	bge.n	800437e <lcdDrawLine+0xca>
	{
		ystep = 1;
 8004378:	2301      	movs	r3, #1
 800437a:	83bb      	strh	r3, [r7, #28]
 800437c:	e02d      	b.n	80043da <lcdDrawLine+0x126>
	}
	else
	{
		ystep = -1;
 800437e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004382:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++)
 8004384:	e029      	b.n	80043da <lcdDrawLine+0x126>
	{
		if (steep)
 8004386:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d006      	beq.n	800439c <lcdDrawLine+0xe8>
		{
			lcdDrawPixel(y1, x1, color);
 800438e:	88bb      	ldrh	r3, [r7, #4]
 8004390:	88f9      	ldrh	r1, [r7, #6]
 8004392:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fed3 	bl	8004140 <lcdDrawPixel>
 800439a:	e005      	b.n	80043a8 <lcdDrawLine+0xf4>
		}
		else
		{
			lcdDrawPixel(x1, y1, color);
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	88b9      	ldrh	r1, [r7, #4]
 80043a0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fecc 	bl	8004140 <lcdDrawPixel>
		}
		err -= dy;
 80043a8:	8bfa      	ldrh	r2, [r7, #30]
 80043aa:	89fb      	ldrh	r3, [r7, #14]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 80043b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	da09      	bge.n	80043ce <lcdDrawLine+0x11a>
		{
			y1 += ystep;
 80043ba:	88ba      	ldrh	r2, [r7, #4]
 80043bc:	8bbb      	ldrh	r3, [r7, #28]
 80043be:	4413      	add	r3, r2
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	80bb      	strh	r3, [r7, #4]
			err += dx;
 80043c4:	8bfa      	ldrh	r2, [r7, #30]
 80043c6:	8a3b      	ldrh	r3, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++)
 80043ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3301      	adds	r3, #1
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	80fb      	strh	r3, [r7, #6]
 80043da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80043de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	ddcf      	ble.n	8004386 <lcdDrawLine+0xd2>
		}
	}
}
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	3724      	adds	r7, #36	@ 0x24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd90      	pop	{r4, r7, pc}

080043f0 <lcdDrawRoundRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	4604      	mov	r4, r0
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4623      	mov	r3, r4
 8004400:	80fb      	strh	r3, [r7, #6]
 8004402:	4603      	mov	r3, r0
 8004404:	80bb      	strh	r3, [r7, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	807b      	strh	r3, [r7, #2]
 800440a:	4613      	mov	r3, r2
 800440c:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdDrawHLine(x + r, x + w - r, y, color);
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	8b3b      	ldrh	r3, [r7, #24]
 8004412:	4413      	add	r3, r2
 8004414:	b298      	uxth	r0, r3
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	887b      	ldrh	r3, [r7, #2]
 800441a:	4413      	add	r3, r2
 800441c:	b29a      	uxth	r2, r3
 800441e:	8b3b      	ldrh	r3, [r7, #24]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	b299      	uxth	r1, r3
 8004424:	88ba      	ldrh	r2, [r7, #4]
 8004426:	8bbb      	ldrh	r3, [r7, #28]
 8004428:	f7ff feae 	bl	8004188 <lcdDrawHLine>
	lcdDrawHLine(x + r, x + w - r, y + h - 1, color);
 800442c:	88fa      	ldrh	r2, [r7, #6]
 800442e:	8b3b      	ldrh	r3, [r7, #24]
 8004430:	4413      	add	r3, r2
 8004432:	b298      	uxth	r0, r3
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	887b      	ldrh	r3, [r7, #2]
 8004438:	4413      	add	r3, r2
 800443a:	b29a      	uxth	r2, r3
 800443c:	8b3b      	ldrh	r3, [r7, #24]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	b299      	uxth	r1, r3
 8004442:	88ba      	ldrh	r2, [r7, #4]
 8004444:	883b      	ldrh	r3, [r7, #0]
 8004446:	4413      	add	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	8bbb      	ldrh	r3, [r7, #28]
 8004450:	f7ff fe9a 	bl	8004188 <lcdDrawHLine>
	lcdDrawVLine(x, y + r, y + h - r, color);
 8004454:	88f8      	ldrh	r0, [r7, #6]
 8004456:	88ba      	ldrh	r2, [r7, #4]
 8004458:	8b3b      	ldrh	r3, [r7, #24]
 800445a:	4413      	add	r3, r2
 800445c:	b299      	uxth	r1, r3
 800445e:	88ba      	ldrh	r2, [r7, #4]
 8004460:	883b      	ldrh	r3, [r7, #0]
 8004462:	4413      	add	r3, r2
 8004464:	b29a      	uxth	r2, r3
 8004466:	8b3b      	ldrh	r3, [r7, #24]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	b29a      	uxth	r2, r3
 800446c:	8bbb      	ldrh	r3, [r7, #28]
 800446e:	f7ff fed1 	bl	8004214 <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y + r, y + h - r, color);
 8004472:	88fa      	ldrh	r2, [r7, #6]
 8004474:	887b      	ldrh	r3, [r7, #2]
 8004476:	4413      	add	r3, r2
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b298      	uxth	r0, r3
 800447e:	88ba      	ldrh	r2, [r7, #4]
 8004480:	8b3b      	ldrh	r3, [r7, #24]
 8004482:	4413      	add	r3, r2
 8004484:	b299      	uxth	r1, r3
 8004486:	88ba      	ldrh	r2, [r7, #4]
 8004488:	883b      	ldrh	r3, [r7, #0]
 800448a:	4413      	add	r3, r2
 800448c:	b29a      	uxth	r2, r3
 800448e:	8b3b      	ldrh	r3, [r7, #24]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	b29a      	uxth	r2, r3
 8004494:	8bbb      	ldrh	r3, [r7, #28]
 8004496:	f7ff febd 	bl	8004214 <lcdDrawVLine>

	// draw four corners
	lcdDrawCircleHelper(x + r, y + r, r, 1, color);
 800449a:	88fa      	ldrh	r2, [r7, #6]
 800449c:	8b3b      	ldrh	r3, [r7, #24]
 800449e:	4413      	add	r3, r2
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	b218      	sxth	r0, r3
 80044a4:	88ba      	ldrh	r2, [r7, #4]
 80044a6:	8b3b      	ldrh	r3, [r7, #24]
 80044a8:	4413      	add	r3, r2
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	b219      	sxth	r1, r3
 80044ae:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80044b2:	8bbb      	ldrh	r3, [r7, #28]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2301      	movs	r3, #1
 80044b8:	f000 f84b 	bl	8004552 <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 80044bc:	88fa      	ldrh	r2, [r7, #6]
 80044be:	887b      	ldrh	r3, [r7, #2]
 80044c0:	4413      	add	r3, r2
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	8b3b      	ldrh	r3, [r7, #24]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	b218      	sxth	r0, r3
 80044d0:	88ba      	ldrh	r2, [r7, #4]
 80044d2:	8b3b      	ldrh	r3, [r7, #24]
 80044d4:	4413      	add	r3, r2
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	b219      	sxth	r1, r3
 80044da:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80044de:	8bbb      	ldrh	r3, [r7, #28]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2302      	movs	r3, #2
 80044e4:	f000 f835 	bl	8004552 <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 80044e8:	88fa      	ldrh	r2, [r7, #6]
 80044ea:	887b      	ldrh	r3, [r7, #2]
 80044ec:	4413      	add	r3, r2
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	8b3b      	ldrh	r3, [r7, #24]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	b218      	sxth	r0, r3
 80044fc:	88ba      	ldrh	r2, [r7, #4]
 80044fe:	883b      	ldrh	r3, [r7, #0]
 8004500:	4413      	add	r3, r2
 8004502:	b29a      	uxth	r2, r3
 8004504:	8b3b      	ldrh	r3, [r7, #24]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29b      	uxth	r3, r3
 800450e:	b219      	sxth	r1, r3
 8004510:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004514:	8bbb      	ldrh	r3, [r7, #28]
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	2304      	movs	r3, #4
 800451a:	f000 f81a 	bl	8004552 <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 800451e:	88fa      	ldrh	r2, [r7, #6]
 8004520:	8b3b      	ldrh	r3, [r7, #24]
 8004522:	4413      	add	r3, r2
 8004524:	b29b      	uxth	r3, r3
 8004526:	b218      	sxth	r0, r3
 8004528:	88ba      	ldrh	r2, [r7, #4]
 800452a:	883b      	ldrh	r3, [r7, #0]
 800452c:	4413      	add	r3, r2
 800452e:	b29a      	uxth	r2, r3
 8004530:	8b3b      	ldrh	r3, [r7, #24]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29b      	uxth	r3, r3
 800453a:	b219      	sxth	r1, r3
 800453c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004540:	8bbb      	ldrh	r3, [r7, #28]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	2308      	movs	r3, #8
 8004546:	f000 f804 	bl	8004552 <lcdDrawCircleHelper>
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bd90      	pop	{r4, r7, pc}

08004552 <lcdDrawCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdDrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8004552:	b590      	push	{r4, r7, lr}
 8004554:	b087      	sub	sp, #28
 8004556:	af00      	add	r7, sp, #0
 8004558:	4604      	mov	r4, r0
 800455a:	4608      	mov	r0, r1
 800455c:	4611      	mov	r1, r2
 800455e:	461a      	mov	r2, r3
 8004560:	4623      	mov	r3, r4
 8004562:	80fb      	strh	r3, [r7, #6]
 8004564:	4603      	mov	r3, r0
 8004566:	80bb      	strh	r3, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	807b      	strh	r3, [r7, #2]
 800456c:	4613      	mov	r3, r2
 800456e:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004570:	887b      	ldrh	r3, [r7, #2]
 8004572:	f1c3 0301 	rsb	r3, r3, #1
 8004576:	b29b      	uxth	r3, r3
 8004578:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800457a:	2301      	movs	r3, #1
 800457c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800457e:	887b      	ldrh	r3, [r7, #2]
 8004580:	461a      	mov	r2, r3
 8004582:	03d2      	lsls	r2, r2, #15
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	b29b      	uxth	r3, r3
 800458a:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004590:	887b      	ldrh	r3, [r7, #2]
 8004592:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 8004594:	e095      	b.n	80046c2 <lcdDrawCircleHelper+0x170>
	{
		if (f >= 0)
 8004596:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800459a:	2b00      	cmp	r3, #0
 800459c:	db0e      	blt.n	80045bc <lcdDrawCircleHelper+0x6a>
		{
			y--;
 800459e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80045aa:	8a7b      	ldrh	r3, [r7, #18]
 80045ac:	3302      	adds	r3, #2
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80045b2:	8afa      	ldrh	r2, [r7, #22]
 80045b4:	8a7b      	ldrh	r3, [r7, #18]
 80045b6:	4413      	add	r3, r2
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80045bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3301      	adds	r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80045c8:	8abb      	ldrh	r3, [r7, #20]
 80045ca:	3302      	adds	r3, #2
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80045d0:	8afa      	ldrh	r2, [r7, #22]
 80045d2:	8abb      	ldrh	r3, [r7, #20]
 80045d4:	4413      	add	r3, r2
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4)
 80045da:	787b      	ldrb	r3, [r7, #1]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d017      	beq.n	8004614 <lcdDrawCircleHelper+0xc2>
		{
			lcdDrawPixel(x0 + x, y0 + y, color);
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	8a3b      	ldrh	r3, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	b298      	uxth	r0, r3
 80045ec:	88ba      	ldrh	r2, [r7, #4]
 80045ee:	89fb      	ldrh	r3, [r7, #14]
 80045f0:	4413      	add	r3, r2
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80045f6:	4619      	mov	r1, r3
 80045f8:	f7ff fda2 	bl	8004140 <lcdDrawPixel>
			lcdDrawPixel(x0 + y, y0 + x, color);
 80045fc:	88fa      	ldrh	r2, [r7, #6]
 80045fe:	89fb      	ldrh	r3, [r7, #14]
 8004600:	4413      	add	r3, r2
 8004602:	b298      	uxth	r0, r3
 8004604:	88ba      	ldrh	r2, [r7, #4]
 8004606:	8a3b      	ldrh	r3, [r7, #16]
 8004608:	4413      	add	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800460e:	4619      	mov	r1, r3
 8004610:	f7ff fd96 	bl	8004140 <lcdDrawPixel>
		}
		if (cornername & 0x2)
 8004614:	787b      	ldrb	r3, [r7, #1]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d017      	beq.n	800464e <lcdDrawCircleHelper+0xfc>
		{
			lcdDrawPixel(x0 + x, y0 - y, color);
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	8a3b      	ldrh	r3, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	b298      	uxth	r0, r3
 8004626:	88ba      	ldrh	r2, [r7, #4]
 8004628:	89fb      	ldrh	r3, [r7, #14]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	b29b      	uxth	r3, r3
 800462e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004630:	4619      	mov	r1, r3
 8004632:	f7ff fd85 	bl	8004140 <lcdDrawPixel>
			lcdDrawPixel(x0 + y, y0 - x, color);
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	89fb      	ldrh	r3, [r7, #14]
 800463a:	4413      	add	r3, r2
 800463c:	b298      	uxth	r0, r3
 800463e:	88ba      	ldrh	r2, [r7, #4]
 8004640:	8a3b      	ldrh	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	b29b      	uxth	r3, r3
 8004646:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004648:	4619      	mov	r1, r3
 800464a:	f7ff fd79 	bl	8004140 <lcdDrawPixel>
		}
		if (cornername & 0x8)
 800464e:	787b      	ldrb	r3, [r7, #1]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d017      	beq.n	8004688 <lcdDrawCircleHelper+0x136>
		{
			lcdDrawPixel(x0 - y, y0 + x, color);
 8004658:	88fa      	ldrh	r2, [r7, #6]
 800465a:	89fb      	ldrh	r3, [r7, #14]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	b298      	uxth	r0, r3
 8004660:	88ba      	ldrh	r2, [r7, #4]
 8004662:	8a3b      	ldrh	r3, [r7, #16]
 8004664:	4413      	add	r3, r2
 8004666:	b29b      	uxth	r3, r3
 8004668:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800466a:	4619      	mov	r1, r3
 800466c:	f7ff fd68 	bl	8004140 <lcdDrawPixel>
			lcdDrawPixel(x0 - x, y0 + y, color);
 8004670:	88fa      	ldrh	r2, [r7, #6]
 8004672:	8a3b      	ldrh	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	b298      	uxth	r0, r3
 8004678:	88ba      	ldrh	r2, [r7, #4]
 800467a:	89fb      	ldrh	r3, [r7, #14]
 800467c:	4413      	add	r3, r2
 800467e:	b29b      	uxth	r3, r3
 8004680:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004682:	4619      	mov	r1, r3
 8004684:	f7ff fd5c 	bl	8004140 <lcdDrawPixel>
		}
		if (cornername & 0x1)
 8004688:	787b      	ldrb	r3, [r7, #1]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d017      	beq.n	80046c2 <lcdDrawCircleHelper+0x170>
		{
			lcdDrawPixel(x0 - y, y0 - x, color);
 8004692:	88fa      	ldrh	r2, [r7, #6]
 8004694:	89fb      	ldrh	r3, [r7, #14]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	b298      	uxth	r0, r3
 800469a:	88ba      	ldrh	r2, [r7, #4]
 800469c:	8a3b      	ldrh	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80046a4:	4619      	mov	r1, r3
 80046a6:	f7ff fd4b 	bl	8004140 <lcdDrawPixel>
			lcdDrawPixel(x0 - x, y0 - y, color);
 80046aa:	88fa      	ldrh	r2, [r7, #6]
 80046ac:	8a3b      	ldrh	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	b298      	uxth	r0, r3
 80046b2:	88ba      	ldrh	r2, [r7, #4]
 80046b4:	89fb      	ldrh	r3, [r7, #14]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80046bc:	4619      	mov	r1, r3
 80046be:	f7ff fd3f 	bl	8004140 <lcdDrawPixel>
	while (x < y)
 80046c2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80046c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	f6ff af63 	blt.w	8004596 <lcdDrawCircleHelper+0x44>
		}
	}
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd90      	pop	{r4, r7, pc}

080046da <lcdDrawCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80046da:	b590      	push	{r4, r7, lr}
 80046dc:	b087      	sub	sp, #28
 80046de:	af00      	add	r7, sp, #0
 80046e0:	4604      	mov	r4, r0
 80046e2:	4608      	mov	r0, r1
 80046e4:	4611      	mov	r1, r2
 80046e6:	461a      	mov	r2, r3
 80046e8:	4623      	mov	r3, r4
 80046ea:	80fb      	strh	r3, [r7, #6]
 80046ec:	4603      	mov	r3, r0
 80046ee:	80bb      	strh	r3, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	807b      	strh	r3, [r7, #2]
 80046f4:	4613      	mov	r3, r2
 80046f6:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 80046f8:	887b      	ldrh	r3, [r7, #2]
 80046fa:	f1c3 0301 	rsb	r3, r3, #1
 80046fe:	b29b      	uxth	r3, r3
 8004700:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004702:	2301      	movs	r3, #1
 8004704:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004706:	887b      	ldrh	r3, [r7, #2]
 8004708:	461a      	mov	r2, r3
 800470a:	03d2      	lsls	r2, r2, #15
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004718:	887b      	ldrh	r3, [r7, #2]
 800471a:	81fb      	strh	r3, [r7, #14]

	lcdDrawPixel(x0, y0 + r, color);
 800471c:	88f8      	ldrh	r0, [r7, #6]
 800471e:	88ba      	ldrh	r2, [r7, #4]
 8004720:	887b      	ldrh	r3, [r7, #2]
 8004722:	4413      	add	r3, r2
 8004724:	b29b      	uxth	r3, r3
 8004726:	883a      	ldrh	r2, [r7, #0]
 8004728:	4619      	mov	r1, r3
 800472a:	f7ff fd09 	bl	8004140 <lcdDrawPixel>
	lcdDrawPixel(x0, y0 - r, color);
 800472e:	88f8      	ldrh	r0, [r7, #6]
 8004730:	88ba      	ldrh	r2, [r7, #4]
 8004732:	887b      	ldrh	r3, [r7, #2]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	b29b      	uxth	r3, r3
 8004738:	883a      	ldrh	r2, [r7, #0]
 800473a:	4619      	mov	r1, r3
 800473c:	f7ff fd00 	bl	8004140 <lcdDrawPixel>
	lcdDrawPixel(x0 + r, y0, color);
 8004740:	88fa      	ldrh	r2, [r7, #6]
 8004742:	887b      	ldrh	r3, [r7, #2]
 8004744:	4413      	add	r3, r2
 8004746:	b29b      	uxth	r3, r3
 8004748:	88b9      	ldrh	r1, [r7, #4]
 800474a:	883a      	ldrh	r2, [r7, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fcf7 	bl	8004140 <lcdDrawPixel>
	lcdDrawPixel(x0 - r, y0, color);
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	887b      	ldrh	r3, [r7, #2]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	b29b      	uxth	r3, r3
 800475a:	88b9      	ldrh	r1, [r7, #4]
 800475c:	883a      	ldrh	r2, [r7, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fcee 	bl	8004140 <lcdDrawPixel>

	while (x < y)
 8004764:	e081      	b.n	800486a <lcdDrawCircle+0x190>
	{
		if (f >= 0)
 8004766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800476a:	2b00      	cmp	r3, #0
 800476c:	db0e      	blt.n	800478c <lcdDrawCircle+0xb2>
		{
			y--;
 800476e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29b      	uxth	r3, r3
 8004778:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800477a:	8a7b      	ldrh	r3, [r7, #18]
 800477c:	3302      	adds	r3, #2
 800477e:	b29b      	uxth	r3, r3
 8004780:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004782:	8afa      	ldrh	r2, [r7, #22]
 8004784:	8a7b      	ldrh	r3, [r7, #18]
 8004786:	4413      	add	r3, r2
 8004788:	b29b      	uxth	r3, r3
 800478a:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800478c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004790:	b29b      	uxth	r3, r3
 8004792:	3301      	adds	r3, #1
 8004794:	b29b      	uxth	r3, r3
 8004796:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004798:	8abb      	ldrh	r3, [r7, #20]
 800479a:	3302      	adds	r3, #2
 800479c:	b29b      	uxth	r3, r3
 800479e:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80047a0:	8afa      	ldrh	r2, [r7, #22]
 80047a2:	8abb      	ldrh	r3, [r7, #20]
 80047a4:	4413      	add	r3, r2
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	82fb      	strh	r3, [r7, #22]

		lcdDrawPixel(x0 + x, y0 + y, color);
 80047aa:	88fa      	ldrh	r2, [r7, #6]
 80047ac:	8a3b      	ldrh	r3, [r7, #16]
 80047ae:	4413      	add	r3, r2
 80047b0:	b298      	uxth	r0, r3
 80047b2:	88ba      	ldrh	r2, [r7, #4]
 80047b4:	89fb      	ldrh	r3, [r7, #14]
 80047b6:	4413      	add	r3, r2
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	883a      	ldrh	r2, [r7, #0]
 80047bc:	4619      	mov	r1, r3
 80047be:	f7ff fcbf 	bl	8004140 <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 + y, color);
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	8a3b      	ldrh	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	b298      	uxth	r0, r3
 80047ca:	88ba      	ldrh	r2, [r7, #4]
 80047cc:	89fb      	ldrh	r3, [r7, #14]
 80047ce:	4413      	add	r3, r2
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	883a      	ldrh	r2, [r7, #0]
 80047d4:	4619      	mov	r1, r3
 80047d6:	f7ff fcb3 	bl	8004140 <lcdDrawPixel>
		lcdDrawPixel(x0 + x, y0 - y, color);
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	8a3b      	ldrh	r3, [r7, #16]
 80047de:	4413      	add	r3, r2
 80047e0:	b298      	uxth	r0, r3
 80047e2:	88ba      	ldrh	r2, [r7, #4]
 80047e4:	89fb      	ldrh	r3, [r7, #14]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	883a      	ldrh	r2, [r7, #0]
 80047ec:	4619      	mov	r1, r3
 80047ee:	f7ff fca7 	bl	8004140 <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 - y, color);
 80047f2:	88fa      	ldrh	r2, [r7, #6]
 80047f4:	8a3b      	ldrh	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	b298      	uxth	r0, r3
 80047fa:	88ba      	ldrh	r2, [r7, #4]
 80047fc:	89fb      	ldrh	r3, [r7, #14]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	b29b      	uxth	r3, r3
 8004802:	883a      	ldrh	r2, [r7, #0]
 8004804:	4619      	mov	r1, r3
 8004806:	f7ff fc9b 	bl	8004140 <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 + x, color);
 800480a:	88fa      	ldrh	r2, [r7, #6]
 800480c:	89fb      	ldrh	r3, [r7, #14]
 800480e:	4413      	add	r3, r2
 8004810:	b298      	uxth	r0, r3
 8004812:	88ba      	ldrh	r2, [r7, #4]
 8004814:	8a3b      	ldrh	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	b29b      	uxth	r3, r3
 800481a:	883a      	ldrh	r2, [r7, #0]
 800481c:	4619      	mov	r1, r3
 800481e:	f7ff fc8f 	bl	8004140 <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 + x, color);
 8004822:	88fa      	ldrh	r2, [r7, #6]
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	b298      	uxth	r0, r3
 800482a:	88ba      	ldrh	r2, [r7, #4]
 800482c:	8a3b      	ldrh	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	b29b      	uxth	r3, r3
 8004832:	883a      	ldrh	r2, [r7, #0]
 8004834:	4619      	mov	r1, r3
 8004836:	f7ff fc83 	bl	8004140 <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 - x, color);
 800483a:	88fa      	ldrh	r2, [r7, #6]
 800483c:	89fb      	ldrh	r3, [r7, #14]
 800483e:	4413      	add	r3, r2
 8004840:	b298      	uxth	r0, r3
 8004842:	88ba      	ldrh	r2, [r7, #4]
 8004844:	8a3b      	ldrh	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	b29b      	uxth	r3, r3
 800484a:	883a      	ldrh	r2, [r7, #0]
 800484c:	4619      	mov	r1, r3
 800484e:	f7ff fc77 	bl	8004140 <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 - x, color);
 8004852:	88fa      	ldrh	r2, [r7, #6]
 8004854:	89fb      	ldrh	r3, [r7, #14]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	b298      	uxth	r0, r3
 800485a:	88ba      	ldrh	r2, [r7, #4]
 800485c:	8a3b      	ldrh	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	b29b      	uxth	r3, r3
 8004862:	883a      	ldrh	r2, [r7, #0]
 8004864:	4619      	mov	r1, r3
 8004866:	f7ff fc6b 	bl	8004140 <lcdDrawPixel>
	while (x < y)
 800486a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800486e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004872:	429a      	cmp	r2, r3
 8004874:	f6ff af77 	blt.w	8004766 <lcdDrawCircle+0x8c>
	}
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	bd90      	pop	{r4, r7, pc}

08004882 <lcdFillCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdFillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8004882:	b590      	push	{r4, r7, lr}
 8004884:	b085      	sub	sp, #20
 8004886:	af02      	add	r7, sp, #8
 8004888:	4604      	mov	r4, r0
 800488a:	4608      	mov	r0, r1
 800488c:	4611      	mov	r1, r2
 800488e:	461a      	mov	r2, r3
 8004890:	4623      	mov	r3, r4
 8004892:	80fb      	strh	r3, [r7, #6]
 8004894:	4603      	mov	r3, r0
 8004896:	80bb      	strh	r3, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]
 800489c:	4613      	mov	r3, r2
 800489e:	803b      	strh	r3, [r7, #0]
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 80048a0:	88f8      	ldrh	r0, [r7, #6]
 80048a2:	88ba      	ldrh	r2, [r7, #4]
 80048a4:	887b      	ldrh	r3, [r7, #2]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	b299      	uxth	r1, r3
 80048aa:	88ba      	ldrh	r2, [r7, #4]
 80048ac:	887b      	ldrh	r3, [r7, #2]
 80048ae:	4413      	add	r3, r2
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	883b      	ldrh	r3, [r7, #0]
 80048b8:	f7ff fcac 	bl	8004214 <lcdDrawVLine>
	lcdFillCircleHelper(x0, y0, r, 3, 0, color);
 80048bc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80048c0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80048c4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80048c8:	883b      	ldrh	r3, [r7, #0]
 80048ca:	9301      	str	r3, [sp, #4]
 80048cc:	2300      	movs	r3, #0
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	2303      	movs	r3, #3
 80048d2:	f000 f804 	bl	80048de <lcdFillCircleHelper>
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd90      	pop	{r4, r7, pc}

080048de <lcdFillCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 80048de:	b590      	push	{r4, r7, lr}
 80048e0:	b087      	sub	sp, #28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	4604      	mov	r4, r0
 80048e6:	4608      	mov	r0, r1
 80048e8:	4611      	mov	r1, r2
 80048ea:	461a      	mov	r2, r3
 80048ec:	4623      	mov	r3, r4
 80048ee:	80fb      	strh	r3, [r7, #6]
 80048f0:	4603      	mov	r3, r0
 80048f2:	80bb      	strh	r3, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	807b      	strh	r3, [r7, #2]
 80048f8:	4613      	mov	r3, r2
 80048fa:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	f1c3 0301 	rsb	r3, r3, #1
 8004902:	b29b      	uxth	r3, r3
 8004904:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004906:	2301      	movs	r3, #1
 8004908:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800490a:	887b      	ldrh	r3, [r7, #2]
 800490c:	461a      	mov	r2, r3
 800490e:	03d2      	lsls	r2, r2, #15
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	b29b      	uxth	r3, r3
 8004916:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800491c:	887b      	ldrh	r3, [r7, #2]
 800491e:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 8004920:	e07b      	b.n	8004a1a <lcdFillCircleHelper+0x13c>
	{
		if (f >= 0)
 8004922:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004926:	2b00      	cmp	r3, #0
 8004928:	db0e      	blt.n	8004948 <lcdFillCircleHelper+0x6a>
		{
			y--;
 800492a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29b      	uxth	r3, r3
 8004934:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004936:	8a7b      	ldrh	r3, [r7, #18]
 8004938:	3302      	adds	r3, #2
 800493a:	b29b      	uxth	r3, r3
 800493c:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800493e:	8afa      	ldrh	r2, [r7, #22]
 8004940:	8a7b      	ldrh	r3, [r7, #18]
 8004942:	4413      	add	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004948:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800494c:	b29b      	uxth	r3, r3
 800494e:	3301      	adds	r3, #1
 8004950:	b29b      	uxth	r3, r3
 8004952:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004954:	8abb      	ldrh	r3, [r7, #20]
 8004956:	3302      	adds	r3, #2
 8004958:	b29b      	uxth	r3, r3
 800495a:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800495c:	8afa      	ldrh	r2, [r7, #22]
 800495e:	8abb      	ldrh	r3, [r7, #20]
 8004960:	4413      	add	r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1)
 8004966:	787b      	ldrb	r3, [r7, #1]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d027      	beq.n	80049c0 <lcdFillCircleHelper+0xe2>
		{
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 8004970:	88fa      	ldrh	r2, [r7, #6]
 8004972:	8a3b      	ldrh	r3, [r7, #16]
 8004974:	4413      	add	r3, r2
 8004976:	b298      	uxth	r0, r3
 8004978:	88ba      	ldrh	r2, [r7, #4]
 800497a:	89fb      	ldrh	r3, [r7, #14]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	b299      	uxth	r1, r3
 8004980:	88ba      	ldrh	r2, [r7, #4]
 8004982:	89fb      	ldrh	r3, [r7, #14]
 8004984:	4413      	add	r3, r2
 8004986:	b29a      	uxth	r2, r3
 8004988:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800498a:	4413      	add	r3, r2
 800498c:	b29b      	uxth	r3, r3
 800498e:	3301      	adds	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004994:	f7ff fc3e 	bl	8004214 <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 8004998:	88fa      	ldrh	r2, [r7, #6]
 800499a:	89fb      	ldrh	r3, [r7, #14]
 800499c:	4413      	add	r3, r2
 800499e:	b298      	uxth	r0, r3
 80049a0:	88ba      	ldrh	r2, [r7, #4]
 80049a2:	8a3b      	ldrh	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	b299      	uxth	r1, r3
 80049a8:	88ba      	ldrh	r2, [r7, #4]
 80049aa:	8a3b      	ldrh	r3, [r7, #16]
 80049ac:	4413      	add	r3, r2
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80049b2:	4413      	add	r3, r2
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3301      	adds	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80049bc:	f7ff fc2a 	bl	8004214 <lcdDrawVLine>
		}
		if (cornername & 0x2)
 80049c0:	787b      	ldrb	r3, [r7, #1]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d027      	beq.n	8004a1a <lcdFillCircleHelper+0x13c>
		{
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	8a3b      	ldrh	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	b298      	uxth	r0, r3
 80049d2:	88ba      	ldrh	r2, [r7, #4]
 80049d4:	89fb      	ldrh	r3, [r7, #14]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	b299      	uxth	r1, r3
 80049da:	88ba      	ldrh	r2, [r7, #4]
 80049dc:	89fb      	ldrh	r3, [r7, #14]
 80049de:	4413      	add	r3, r2
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80049e4:	4413      	add	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3301      	adds	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80049ee:	f7ff fc11 	bl	8004214 <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	89fb      	ldrh	r3, [r7, #14]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	b298      	uxth	r0, r3
 80049fa:	88ba      	ldrh	r2, [r7, #4]
 80049fc:	8a3b      	ldrh	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	b299      	uxth	r1, r3
 8004a02:	88ba      	ldrh	r2, [r7, #4]
 8004a04:	8a3b      	ldrh	r3, [r7, #16]
 8004a06:	4413      	add	r3, r2
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004a0c:	4413      	add	r3, r2
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3301      	adds	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004a16:	f7ff fbfd 	bl	8004214 <lcdDrawVLine>
	while (x < y)
 8004a1a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004a1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	f6ff af7d 	blt.w	8004922 <lcdFillCircleHelper+0x44>
		}
	}
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd90      	pop	{r4, r7, pc}
	...

08004a34 <lcdFillRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	461a      	mov	r2, r3
 8004a42:	4623      	mov	r3, r4
 8004a44:	80fb      	strh	r3, [r7, #6]
 8004a46:	4603      	mov	r3, r0
 8004a48:	80bb      	strh	r3, [r7, #4]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	807b      	strh	r3, [r7, #2]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8004a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a56:	4a24      	ldr	r2, [pc, #144]	@ (8004ae8 <lcdFillRect+0xb4>)
 8004a58:	8812      	ldrh	r2, [r2, #0]
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	da3f      	bge.n	8004ade <lcdFillRect+0xaa>
 8004a5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a62:	4a21      	ldr	r2, [pc, #132]	@ (8004ae8 <lcdFillRect+0xb4>)
 8004a64:	8852      	ldrh	r2, [r2, #2]
 8004a66:	4293      	cmp	r3, r2
 8004a68:	da39      	bge.n	8004ade <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 8004a6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a72:	4413      	add	r3, r2
 8004a74:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae8 <lcdFillRect+0xb4>)
 8004a76:	8812      	ldrh	r2, [r2, #0]
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	dd05      	ble.n	8004a88 <lcdFillRect+0x54>
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae8 <lcdFillRect+0xb4>)
 8004a7e:	881a      	ldrh	r2, [r3, #0]
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8004a88:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004a8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004a90:	4413      	add	r3, r2
 8004a92:	4a15      	ldr	r2, [pc, #84]	@ (8004ae8 <lcdFillRect+0xb4>)
 8004a94:	8852      	ldrh	r2, [r2, #2]
 8004a96:	4293      	cmp	r3, r2
 8004a98:	dd05      	ble.n	8004aa6 <lcdFillRect+0x72>
 8004a9a:	4b13      	ldr	r3, [pc, #76]	@ (8004ae8 <lcdFillRect+0xb4>)
 8004a9c:	885a      	ldrh	r2, [r3, #2]
 8004a9e:	88bb      	ldrh	r3, [r7, #4]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 8004aa6:	88bb      	ldrh	r3, [r7, #4]
 8004aa8:	81fb      	strh	r3, [r7, #14]
 8004aaa:	e00e      	b.n	8004aca <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8004aac:	88f8      	ldrh	r0, [r7, #6]
 8004aae:	88fa      	ldrh	r2, [r7, #6]
 8004ab0:	887b      	ldrh	r3, [r7, #2]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	b299      	uxth	r1, r3
 8004ab6:	89fa      	ldrh	r2, [r7, #14]
 8004ab8:	8c3b      	ldrh	r3, [r7, #32]
 8004aba:	f7ff fb65 	bl	8004188 <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 8004abe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	81fb      	strh	r3, [r7, #14]
 8004aca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004ace:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004ad2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004ad6:	440b      	add	r3, r1
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	dde7      	ble.n	8004aac <lcdFillRect+0x78>
 8004adc:	e000      	b.n	8004ae0 <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8004ade:	bf00      	nop
	}
}
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd90      	pop	{r4, r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	2000002c 	.word	0x2000002c

08004aec <lcdFillRoundRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	4604      	mov	r4, r0
 8004af4:	4608      	mov	r0, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	461a      	mov	r2, r3
 8004afa:	4623      	mov	r3, r4
 8004afc:	80fb      	strh	r3, [r7, #6]
 8004afe:	4603      	mov	r3, r0
 8004b00:	80bb      	strh	r3, [r7, #4]
 8004b02:	460b      	mov	r3, r1
 8004b04:	807b      	strh	r3, [r7, #2]
 8004b06:	4613      	mov	r3, r2
 8004b08:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdFillRect(x + r, y, w - 2 * r, h, color);
 8004b0a:	88fa      	ldrh	r2, [r7, #6]
 8004b0c:	8b3b      	ldrh	r3, [r7, #24]
 8004b0e:	4413      	add	r3, r2
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	b218      	sxth	r0, r3
 8004b14:	887a      	ldrh	r2, [r7, #2]
 8004b16:	8b3b      	ldrh	r3, [r7, #24]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	b21a      	sxth	r2, r3
 8004b22:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004b26:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004b2a:	8bbb      	ldrh	r3, [r7, #28]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4623      	mov	r3, r4
 8004b30:	f7ff ff80 	bl	8004a34 <lcdFillRect>

	// draw four corners
	lcdFillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8004b34:	88fa      	ldrh	r2, [r7, #6]
 8004b36:	887b      	ldrh	r3, [r7, #2]
 8004b38:	4413      	add	r3, r2
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	8b3b      	ldrh	r3, [r7, #24]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	b218      	sxth	r0, r3
 8004b48:	88ba      	ldrh	r2, [r7, #4]
 8004b4a:	8b3b      	ldrh	r3, [r7, #24]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	b219      	sxth	r1, r3
 8004b52:	883a      	ldrh	r2, [r7, #0]
 8004b54:	8b3b      	ldrh	r3, [r7, #24]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	b21b      	sxth	r3, r3
 8004b64:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8004b68:	8bba      	ldrh	r2, [r7, #28]
 8004b6a:	9201      	str	r2, [sp, #4]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	2301      	movs	r3, #1
 8004b70:	4622      	mov	r2, r4
 8004b72:	f7ff feb4 	bl	80048de <lcdFillCircleHelper>
	lcdFillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	8b3b      	ldrh	r3, [r7, #24]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	b218      	sxth	r0, r3
 8004b80:	88ba      	ldrh	r2, [r7, #4]
 8004b82:	8b3b      	ldrh	r3, [r7, #24]
 8004b84:	4413      	add	r3, r2
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	b219      	sxth	r1, r3
 8004b8a:	883a      	ldrh	r2, [r7, #0]
 8004b8c:	8b3b      	ldrh	r3, [r7, #24]
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	b21b      	sxth	r3, r3
 8004b9c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8004ba0:	8bba      	ldrh	r2, [r7, #28]
 8004ba2:	9201      	str	r2, [sp, #4]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	4622      	mov	r2, r4
 8004baa:	f7ff fe98 	bl	80048de <lcdFillCircleHelper>
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd90      	pop	{r4, r7, pc}
	...

08004bb8 <lcdDrawImage>:
        lcdDrawHLine(a, b + 1, y, color);
    }
}

void lcdDrawImage(uint16_t x, uint16_t y, GUI_CONST_STORAGE GUI_BITMAP* pBitmap)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	603a      	str	r2, [r7, #0]
 8004bc2:	80fb      	strh	r3, [r7, #6]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	80bb      	strh	r3, [r7, #4]
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8004bc8:	4b24      	ldr	r3, [pc, #144]	@ (8004c5c <lcdDrawImage+0xa4>)
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	88fa      	ldrh	r2, [r7, #6]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d23b      	bcs.n	8004c4a <lcdDrawImage+0x92>
 8004bd2:	4b22      	ldr	r3, [pc, #136]	@ (8004c5c <lcdDrawImage+0xa4>)
 8004bd4:	885b      	ldrh	r3, [r3, #2]
 8004bd6:	88ba      	ldrh	r2, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d236      	bcs.n	8004c4a <lcdDrawImage+0x92>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	8812      	ldrh	r2, [r2, #0]
 8004be2:	4413      	add	r3, r2
 8004be4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c5c <lcdDrawImage+0xa4>)
 8004be6:	8812      	ldrh	r2, [r2, #0]
 8004be8:	4293      	cmp	r3, r2
 8004bea:	dc30      	bgt.n	8004c4e <lcdDrawImage+0x96>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8004bec:	88bb      	ldrh	r3, [r7, #4]
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	8852      	ldrh	r2, [r2, #2]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	4a19      	ldr	r2, [pc, #100]	@ (8004c5c <lcdDrawImage+0xa4>)
 8004bf6:	8852      	ldrh	r2, [r2, #2]
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	dc2a      	bgt.n	8004c52 <lcdDrawImage+0x9a>

	for (int i = 0; i < pBitmap->ySize; ++i)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e01c      	b.n	8004c3c <lcdDrawImage+0x84>
	{
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	88bb      	ldrh	r3, [r7, #4]
 8004c08:	4413      	add	r3, r2
 8004c0a:	b299      	uxth	r1, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	8892      	ldrh	r2, [r2, #4]
 8004c14:	4610      	mov	r0, r2
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	fb00 f202 	mul.w	r2, r0, r2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	889b      	ldrh	r3, [r3, #4]
 8004c22:	4618      	mov	r0, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	799b      	ldrb	r3, [r3, #6]
 8004c28:	08db      	lsrs	r3, r3, #3
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	fb90 f3f3 	sdiv	r3, r0, r3
 8004c30:	88f8      	ldrh	r0, [r7, #6]
 8004c32:	f000 fa41 	bl	80050b8 <lcdDrawPixels>
	for (int i = 0; i < pBitmap->ySize; ++i)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	885b      	ldrh	r3, [r3, #2]
 8004c40:	461a      	mov	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4293      	cmp	r3, r2
 8004c46:	dbdc      	blt.n	8004c02 <lcdDrawImage+0x4a>
 8004c48:	e004      	b.n	8004c54 <lcdDrawImage+0x9c>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8004c4a:	bf00      	nop
 8004c4c:	e002      	b.n	8004c54 <lcdDrawImage+0x9c>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <lcdDrawImage+0x9c>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8004c52:	bf00      	nop
	}
}
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	2000002c 	.word	0x2000002c

08004c60 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4604      	mov	r4, r0
 8004c68:	4608      	mov	r0, r1
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	80fb      	strh	r3, [r7, #6]
 8004c72:	4603      	mov	r3, r0
 8004c74:	80bb      	strh	r3, [r7, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	70fb      	strb	r3, [r7, #3]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8004c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c82:	4a4a      	ldr	r2, [pc, #296]	@ (8004dac <lcdDrawChar+0x14c>)
 8004c84:	8812      	ldrh	r2, [r2, #0]
 8004c86:	4293      	cmp	r3, r2
 8004c88:	f280 808c 	bge.w	8004da4 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8004c8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c90:	4a46      	ldr	r2, [pc, #280]	@ (8004dac <lcdDrawChar+0x14c>)
 8004c92:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8004c94:	4293      	cmp	r3, r2
 8004c96:	f280 8085 	bge.w	8004da4 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8004c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c9e:	4a44      	ldr	r2, [pc, #272]	@ (8004db0 <lcdDrawChar+0x150>)
 8004ca0:	6892      	ldr	r2, [r2, #8]
 8004ca2:	8892      	ldrh	r2, [r2, #4]
 8004ca4:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	db7c      	blt.n	8004da4 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8004caa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004cae:	4a40      	ldr	r2, [pc, #256]	@ (8004db0 <lcdDrawChar+0x150>)
 8004cb0:	6892      	ldr	r2, [r2, #8]
 8004cb2:	88d2      	ldrh	r2, [r2, #6]
 8004cb4:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	db74      	blt.n	8004da4 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8004cba:	4b3d      	ldr	r3, [pc, #244]	@ (8004db0 <lcdDrawChar+0x150>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	88db      	ldrh	r3, [r3, #6]
 8004cc0:	08db      	lsrs	r3, r3, #3
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8004cca:	2300      	movs	r3, #0
 8004ccc:	73bb      	strb	r3, [r7, #14]
 8004cce:	e061      	b.n	8004d94 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	733b      	strb	r3, [r7, #12]
 8004cd4:	e055      	b.n	8004d82 <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8004cd6:	4b36      	ldr	r3, [pc, #216]	@ (8004db0 <lcdDrawChar+0x150>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	78fa      	ldrb	r2, [r7, #3]
 8004cde:	3a20      	subs	r2, #32
 8004ce0:	4933      	ldr	r1, [pc, #204]	@ (8004db0 <lcdDrawChar+0x150>)
 8004ce2:	6889      	ldr	r1, [r1, #8]
 8004ce4:	88c9      	ldrh	r1, [r1, #6]
 8004ce6:	fb01 f202 	mul.w	r2, r1, r2
 8004cea:	7ab9      	ldrb	r1, [r7, #10]
 8004cec:	fb02 f101 	mul.w	r1, r2, r1
 8004cf0:	7bba      	ldrb	r2, [r7, #14]
 8004cf2:	7ab8      	ldrb	r0, [r7, #10]
 8004cf4:	fb00 f202 	mul.w	r2, r0, r2
 8004cf8:	4411      	add	r1, r2
 8004cfa:	7b3a      	ldrb	r2, [r7, #12]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	4413      	add	r3, r2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8004d04:	2300      	movs	r3, #0
 8004d06:	72fb      	strb	r3, [r7, #11]
 8004d08:	e032      	b.n	8004d70 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8004d0a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	da12      	bge.n	8004d38 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8004d12:	7afb      	ldrb	r3, [r7, #11]
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	4413      	add	r3, r2
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	4413      	add	r3, r2
 8004d22:	b298      	uxth	r0, r3
 8004d24:	7bbb      	ldrb	r3, [r7, #14]
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	88bb      	ldrh	r3, [r7, #4]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	883a      	ldrh	r2, [r7, #0]
 8004d30:	4619      	mov	r1, r3
 8004d32:	f7ff fa05 	bl	8004140 <lcdDrawPixel>
 8004d36:	e015      	b.n	8004d64 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8004d38:	8c3a      	ldrh	r2, [r7, #32]
 8004d3a:	883b      	ldrh	r3, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d011      	beq.n	8004d64 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8004d40:	7afb      	ldrb	r3, [r7, #11]
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	4413      	add	r3, r2
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	4413      	add	r3, r2
 8004d50:	b298      	uxth	r0, r3
 8004d52:	7bbb      	ldrb	r3, [r7, #14]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	88bb      	ldrh	r3, [r7, #4]
 8004d58:	4413      	add	r3, r2
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	8c3a      	ldrh	r2, [r7, #32]
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f7ff f9ee 	bl	8004140 <lcdDrawPixel>
				}
				line <<= 1;
 8004d64:	7b7b      	ldrb	r3, [r7, #13]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8004d6a:	7afb      	ldrb	r3, [r7, #11]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	72fb      	strb	r3, [r7, #11]
 8004d70:	7afb      	ldrb	r3, [r7, #11]
 8004d72:	2b07      	cmp	r3, #7
 8004d74:	d9c9      	bls.n	8004d0a <lcdDrawChar+0xaa>
			}

			xP += 8;
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8004d7c:	7b3b      	ldrb	r3, [r7, #12]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	733b      	strb	r3, [r7, #12]
 8004d82:	7b3a      	ldrb	r2, [r7, #12]
 8004d84:	7abb      	ldrb	r3, [r7, #10]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d3a5      	bcc.n	8004cd6 <lcdDrawChar+0x76>
		}

		xP = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8004d8e:	7bbb      	ldrb	r3, [r7, #14]
 8004d90:	3301      	adds	r3, #1
 8004d92:	73bb      	strb	r3, [r7, #14]
 8004d94:	7bbb      	ldrb	r3, [r7, #14]
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <lcdDrawChar+0x150>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	88db      	ldrh	r3, [r3, #6]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d396      	bcc.n	8004cd0 <lcdDrawChar+0x70>
 8004da2:	e000      	b.n	8004da6 <lcdDrawChar+0x146>
		return;
 8004da4:	bf00      	nop
	}
}
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd90      	pop	{r4, r7, pc}
 8004dac:	2000002c 	.word	0x2000002c
 8004db0:	20000034 	.word	0x20000034

08004db4 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8004db4:	b40f      	push	{r0, r1, r2, r3}
 8004db6:	b590      	push	{r4, r7, lr}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8004dbc:	f107 031c 	add.w	r3, r7, #28
 8004dc0:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	69b9      	ldr	r1, [r7, #24]
 8004dc6:	483d      	ldr	r0, [pc, #244]	@ (8004ebc <lcdPrintf+0x108>)
 8004dc8:	f004 fe72 	bl	8009ab0 <vsiprintf>
	va_end(lst);

	p = buf;
 8004dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ebc <lcdPrintf+0x108>)
 8004dce:	607b      	str	r3, [r7, #4]
	while (*p)
 8004dd0:	e067      	b.n	8004ea2 <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b0a      	cmp	r3, #10
 8004dd8:	d10c      	bne.n	8004df4 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8004dda:	4b39      	ldr	r3, [pc, #228]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004ddc:	885a      	ldrh	r2, [r3, #2]
 8004dde:	4b39      	ldr	r3, [pc, #228]	@ (8004ec4 <lcdPrintf+0x110>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	88db      	ldrh	r3, [r3, #6]
 8004de4:	4413      	add	r3, r2
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	4b35      	ldr	r3, [pc, #212]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004dea:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8004dec:	4b34      	ldr	r3, [pc, #208]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	e04a      	b.n	8004e8a <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b0d      	cmp	r3, #13
 8004dfa:	d046      	beq.n	8004e8a <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b09      	cmp	r3, #9
 8004e02:	d10b      	bne.n	8004e1c <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8004e04:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004e06:	881a      	ldrh	r2, [r3, #0]
 8004e08:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec4 <lcdPrintf+0x110>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	889b      	ldrh	r3, [r3, #4]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	4413      	add	r3, r2
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004e18:	801a      	strh	r2, [r3, #0]
 8004e1a:	e036      	b.n	8004e8a <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8004e1c:	4b28      	ldr	r3, [pc, #160]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b218      	sxth	r0, r3
 8004e22:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004e24:	885b      	ldrh	r3, [r3, #2]
 8004e26:	b219      	sxth	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	781a      	ldrb	r2, [r3, #0]
 8004e2c:	4b25      	ldr	r3, [pc, #148]	@ (8004ec4 <lcdPrintf+0x110>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	b29c      	uxth	r4, r3
 8004e32:	4b24      	ldr	r3, [pc, #144]	@ (8004ec4 <lcdPrintf+0x110>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	4623      	mov	r3, r4
 8004e3c:	f7ff ff10 	bl	8004c60 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8004e40:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004e42:	881a      	ldrh	r2, [r3, #0]
 8004e44:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec4 <lcdPrintf+0x110>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	889b      	ldrh	r3, [r3, #4]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004e50:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8004e52:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec4 <lcdPrintf+0x110>)
 8004e54:	7b1b      	ldrb	r3, [r3, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d017      	beq.n	8004e8a <lcdPrintf+0xd6>
 8004e5a:	4b19      	ldr	r3, [pc, #100]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	4b19      	ldr	r3, [pc, #100]	@ (8004ec8 <lcdPrintf+0x114>)
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	4619      	mov	r1, r3
 8004e66:	4b17      	ldr	r3, [pc, #92]	@ (8004ec4 <lcdPrintf+0x110>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	889b      	ldrh	r3, [r3, #4]
 8004e6c:	1acb      	subs	r3, r1, r3
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	dd0b      	ble.n	8004e8a <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8004e72:	4b13      	ldr	r3, [pc, #76]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004e74:	885a      	ldrh	r2, [r3, #2]
 8004e76:	4b13      	ldr	r3, [pc, #76]	@ (8004ec4 <lcdPrintf+0x110>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	88db      	ldrh	r3, [r3, #6]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004e82:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8004e84:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8004e90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004e92:	885a      	ldrh	r2, [r3, #2]
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <lcdPrintf+0x114>)
 8004e96:	885b      	ldrh	r3, [r3, #2]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d302      	bcc.n	8004ea2 <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8004e9c:	4b08      	ldr	r3, [pc, #32]	@ (8004ec0 <lcdPrintf+0x10c>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	805a      	strh	r2, [r3, #2]
	while (*p)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d193      	bne.n	8004dd2 <lcdPrintf+0x1e>
		}
	}
}
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004eb6:	b004      	add	sp, #16
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000a44 	.word	0x20000a44
 8004ec0:	20000a3c 	.word	0x20000a3c
 8004ec4:	20000034 	.word	0x20000034
 8004ec8:	2000002c 	.word	0x2000002c

08004ecc <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8004ed4:	4a04      	ldr	r2, [pc, #16]	@ (8004ee8 <lcdSetTextFont+0x1c>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6093      	str	r3, [r2, #8]
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000034 	.word	0x20000034

08004eec <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	460a      	mov	r2, r1
 8004ef6:	80fb      	strh	r3, [r7, #6]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	4a05      	ldr	r2, [pc, #20]	@ (8004f14 <lcdSetTextColor+0x28>)
 8004f00:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8004f02:	88bb      	ldrh	r3, [r7, #4]
 8004f04:	4a03      	ldr	r2, [pc, #12]	@ (8004f14 <lcdSetTextColor+0x28>)
 8004f06:	6053      	str	r3, [r2, #4]
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	20000034 	.word	0x20000034

08004f18 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8004f22:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd8 <lcdSetOrientation+0xc0>)
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8004f28:	2036      	movs	r0, #54	@ 0x36
 8004f2a:	f000 f8fb 	bl	8005124 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8004f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd8 <lcdSetOrientation+0xc0>)
 8004f30:	791b      	ldrb	r3, [r3, #4]
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d83e      	bhi.n	8004fb4 <lcdSetOrientation+0x9c>
 8004f36:	a201      	add	r2, pc, #4	@ (adr r2, 8004f3c <lcdSetOrientation+0x24>)
 8004f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f81 	.word	0x08004f81
 8004f44:	08004f67 	.word	0x08004f67
 8004f48:	08004f9b 	.word	0x08004f9b
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8004f4c:	4b23      	ldr	r3, [pc, #140]	@ (8004fdc <lcdSetOrientation+0xc4>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 f8f7 	bl	8005144 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8004f56:	4b20      	ldr	r3, [pc, #128]	@ (8004fd8 <lcdSetOrientation+0xc0>)
 8004f58:	22f0      	movs	r2, #240	@ 0xf0
 8004f5a:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8004f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd8 <lcdSetOrientation+0xc0>)
 8004f5e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004f62:	805a      	strh	r2, [r3, #2]
			break;
 8004f64:	e027      	b.n	8004fb6 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8004f66:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe0 <lcdSetOrientation+0xc8>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 f8ea 	bl	8005144 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8004f70:	4b19      	ldr	r3, [pc, #100]	@ (8004fd8 <lcdSetOrientation+0xc0>)
 8004f72:	22f0      	movs	r2, #240	@ 0xf0
 8004f74:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8004f76:	4b18      	ldr	r3, [pc, #96]	@ (8004fd8 <lcdSetOrientation+0xc0>)
 8004f78:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004f7c:	805a      	strh	r2, [r3, #2]
			break;
 8004f7e:	e01a      	b.n	8004fb6 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8004f80:	4b18      	ldr	r3, [pc, #96]	@ (8004fe4 <lcdSetOrientation+0xcc>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f8dd 	bl	8005144 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8004f8a:	4b13      	ldr	r3, [pc, #76]	@ (8004fd8 <lcdSetOrientation+0xc0>)
 8004f8c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004f90:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8004f92:	4b11      	ldr	r3, [pc, #68]	@ (8004fd8 <lcdSetOrientation+0xc0>)
 8004f94:	22f0      	movs	r2, #240	@ 0xf0
 8004f96:	805a      	strh	r2, [r3, #2]
			break;
 8004f98:	e00d      	b.n	8004fb6 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8004f9a:	4b13      	ldr	r3, [pc, #76]	@ (8004fe8 <lcdSetOrientation+0xd0>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f8d0 	bl	8005144 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <lcdSetOrientation+0xc0>)
 8004fa6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004faa:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8004fac:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd8 <lcdSetOrientation+0xc0>)
 8004fae:	22f0      	movs	r2, #240	@ 0xf0
 8004fb0:	805a      	strh	r2, [r3, #2]
			break;
 8004fb2:	e000      	b.n	8004fb6 <lcdSetOrientation+0x9e>
		default:
			break;
 8004fb4:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8004fb6:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <lcdSetOrientation+0xc0>)
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <lcdSetOrientation+0xc0>)
 8004fc0:	885b      	ldrh	r3, [r3, #2]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	2000      	movs	r0, #0
 8004fca:	f000 f829 	bl	8005020 <lcdSetWindow>
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	2000002c 	.word	0x2000002c
 8004fdc:	20000a40 	.word	0x20000a40
 8004fe0:	20000a42 	.word	0x20000a42
 8004fe4:	20000a41 	.word	0x20000a41
 8004fe8:	20000a43 	.word	0x20000a43

08004fec <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	460a      	mov	r2, r1
 8004ff6:	80fb      	strh	r3, [r7, #6]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8004ffc:	4a07      	ldr	r2, [pc, #28]	@ (800501c <lcdSetCursor+0x30>)
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8005002:	4a06      	ldr	r2, [pc, #24]	@ (800501c <lcdSetCursor+0x30>)
 8005004:	88bb      	ldrh	r3, [r7, #4]
 8005006:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8005008:	88bb      	ldrh	r3, [r7, #4]
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	88b9      	ldrh	r1, [r7, #4]
 800500e:	88f8      	ldrh	r0, [r7, #6]
 8005010:	f000 f806 	bl	8005020 <lcdSetWindow>
}
 8005014:	bf00      	nop
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000a3c 	.word	0x20000a3c

08005020 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	4604      	mov	r4, r0
 8005028:	4608      	mov	r0, r1
 800502a:	4611      	mov	r1, r2
 800502c:	461a      	mov	r2, r3
 800502e:	4623      	mov	r3, r4
 8005030:	80fb      	strh	r3, [r7, #6]
 8005032:	4603      	mov	r3, r0
 8005034:	80bb      	strh	r3, [r7, #4]
 8005036:	460b      	mov	r3, r1
 8005038:	807b      	strh	r3, [r7, #2]
 800503a:	4613      	mov	r3, r2
 800503c:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 800503e:	202a      	movs	r0, #42	@ 0x2a
 8005040:	f000 f870 	bl	8005124 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8005044:	88fb      	ldrh	r3, [r7, #6]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	b29b      	uxth	r3, r3
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f87a 	bl	8005144 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	b29b      	uxth	r3, r3
 8005056:	4618      	mov	r0, r3
 8005058:	f000 f874 	bl	8005144 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	b29b      	uxth	r3, r3
 8005062:	4618      	mov	r0, r3
 8005064:	f000 f86e 	bl	8005144 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8005068:	887b      	ldrh	r3, [r7, #2]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	b29b      	uxth	r3, r3
 800506e:	4618      	mov	r0, r3
 8005070:	f000 f868 	bl	8005144 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8005074:	202b      	movs	r0, #43	@ 0x2b
 8005076:	f000 f855 	bl	8005124 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 800507a:	88bb      	ldrh	r3, [r7, #4]
 800507c:	0a1b      	lsrs	r3, r3, #8
 800507e:	b29b      	uxth	r3, r3
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f85f 	bl	8005144 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 8005086:	88bb      	ldrh	r3, [r7, #4]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	b29b      	uxth	r3, r3
 800508c:	4618      	mov	r0, r3
 800508e:	f000 f859 	bl	8005144 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8005092:	883b      	ldrh	r3, [r7, #0]
 8005094:	0a1b      	lsrs	r3, r3, #8
 8005096:	b29b      	uxth	r3, r3
 8005098:	4618      	mov	r0, r3
 800509a:	f000 f853 	bl	8005144 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 800509e:	883b      	ldrh	r3, [r7, #0]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 f84d 	bl	8005144 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80050aa:	202c      	movs	r0, #44	@ 0x2c
 80050ac:	f000 f83a 	bl	8005124 <lcdWriteCommand>
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd90      	pop	{r4, r7, pc}

080050b8 <lcdDrawPixels>:
}

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60ba      	str	r2, [r7, #8]
 80050c0:	607b      	str	r3, [r7, #4]
 80050c2:	4603      	mov	r3, r0
 80050c4:	81fb      	strh	r3, [r7, #14]
 80050c6:	460b      	mov	r3, r1
 80050c8:	81bb      	strh	r3, [r7, #12]
  uint32_t i = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]

  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 80050ce:	4b0f      	ldr	r3, [pc, #60]	@ (800510c <lcdDrawPixels+0x54>)
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	4b0d      	ldr	r3, [pc, #52]	@ (800510c <lcdDrawPixels+0x54>)
 80050d8:	885b      	ldrh	r3, [r3, #2]
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29b      	uxth	r3, r3
 80050de:	89b9      	ldrh	r1, [r7, #12]
 80050e0:	89f8      	ldrh	r0, [r7, #14]
 80050e2:	f7ff ff9d 	bl	8005020 <lcdSetWindow>

  do
  {
    lcdWriteData(data[i++]);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	617a      	str	r2, [r7, #20]
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 f825 	bl	8005144 <lcdWriteData>
  }
  while (i < dataLength);
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d3f1      	bcc.n	80050e6 <lcdDrawPixels+0x2e>
}
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	2000002c 	.word	0x2000002c

08005110 <lcdReset>:

static void lcdReset(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8005114:	2001      	movs	r0, #1
 8005116:	f000 f805 	bl	8005124 <lcdWriteCommand>
	HAL_Delay(50);
 800511a:	2032      	movs	r0, #50	@ 0x32
 800511c:	f001 f8ec 	bl	80062f8 <HAL_Delay>
}
 8005120:	bf00      	nop
 8005122:	bd80      	pop	{r7, pc}

08005124 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 800512e:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8005132:	79fa      	ldrb	r2, [r7, #7]
 8005134:	b292      	uxth	r2, r2
 8005136:	801a      	strh	r2, [r3, #0]
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 800514e:	4a04      	ldr	r2, [pc, #16]	@ (8005160 <lcdWriteData+0x1c>)
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	8013      	strh	r3, [r2, #0]
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	60080000 	.word	0x60080000

08005164 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8005164:	b490      	push	{r4, r7}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	4604      	mov	r4, r0
 800516c:	4608      	mov	r0, r1
 800516e:	4611      	mov	r1, r2
 8005170:	461a      	mov	r2, r3
 8005172:	4623      	mov	r3, r4
 8005174:	71fb      	strb	r3, [r7, #7]
 8005176:	4603      	mov	r3, r0
 8005178:	71bb      	strb	r3, [r7, #6]
 800517a:	460b      	mov	r3, r1
 800517c:	717b      	strb	r3, [r7, #5]
 800517e:	4613      	mov	r3, r2
 8005180:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8005186:	7f3b      	ldrb	r3, [r7, #28]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <lcdBuildMemoryAccessControlConfig+0x30>
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	f043 0304 	orr.w	r3, r3, #4
 8005192:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8005194:	7e3b      	ldrb	r3, [r7, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <lcdBuildMemoryAccessControlConfig+0x3e>
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	f043 0308 	orr.w	r3, r3, #8
 80051a0:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 80051a2:	793b      	ldrb	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <lcdBuildMemoryAccessControlConfig+0x4c>
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	f043 0310 	orr.w	r3, r3, #16
 80051ae:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 80051b0:	797b      	ldrb	r3, [r7, #5]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <lcdBuildMemoryAccessControlConfig+0x5a>
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	f043 0320 	orr.w	r3, r3, #32
 80051bc:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 80051be:	79bb      	ldrb	r3, [r7, #6]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <lcdBuildMemoryAccessControlConfig+0x68>
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051ca:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <lcdBuildMemoryAccessControlConfig+0x76>
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051d8:	73fb      	strb	r3, [r7, #15]
  return value;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc90      	pop	{r4, r7}
 80051e4:	4770      	bx	lr
	...

080051e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80051ee:	f001 f811 	bl	8006214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80051f2:	f000 f8a3 	bl	800533c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80051f6:	f000 f96b 	bl	80054d0 <MX_GPIO_Init>
  MX_FSMC_Init();
 80051fa:	f000 f9f3 	bl	80055e4 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80051fe:	f000 f93d 	bl	800547c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8005202:	f000 f905 	bl	8005410 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  LCD_BL_ON();
 8005206:	2201      	movs	r2, #1
 8005208:	2102      	movs	r1, #2
 800520a:	4844      	ldr	r0, [pc, #272]	@ (800531c <main+0x134>)
 800520c:	f001 fbf0 	bl	80069f0 <HAL_GPIO_WritePin>
  TouchCalibrate();
 8005210:	f000 ffa8 	bl	8006164 <TouchCalibrate>

  lcdInit();
 8005214:	f7fe fdf6 	bl	8003e04 <lcdInit>
  int i = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	607b      	str	r3, [r7, #4]
  lcdSetOrientation(i%4);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	425a      	negs	r2, r3
 8005220:	f003 0303 	and.w	r3, r3, #3
 8005224:	f002 0203 	and.w	r2, r2, #3
 8005228:	bf58      	it	pl
 800522a:	4253      	negpl	r3, r2
 800522c:	b2db      	uxtb	r3, r3
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff fe72 	bl	8004f18 <lcdSetOrientation>
  lcdFillRGB(COLOR_BLACK);
 8005234:	2000      	movs	r0, #0
 8005236:	f7fe ff59 	bl	80040ec <lcdFillRGB>


  int current = 1;
 800523a:	2301      	movs	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
  bool updated = true;
 800523e:	2301      	movs	r3, #1
 8005240:	72fb      	strb	r3, [r7, #11]
  int16_t tx , ty;
  processWeather(jsonString);
 8005242:	4837      	ldr	r0, [pc, #220]	@ (8005320 <main+0x138>)
 8005244:	f000 fa38 	bl	80056b8 <processWeather>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (current == 1){
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d12b      	bne.n	80052a6 <main+0xbe>
		  if (updated == true){
 800524e:	7afb      	ldrb	r3, [r7, #11]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <main+0x7c>
			  Screen1();
 8005254:	f7fe fc62 	bl	8003b1c <Screen1>
			  HAL_Delay(1000);
 8005258:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800525c:	f001 f84c 	bl	80062f8 <HAL_Delay>
			  updated = false;
 8005260:	2300      	movs	r3, #0
 8005262:	72fb      	strb	r3, [r7, #11]
		  }
		  if (TouchGetCalibratedPoint(&tx, &ty)){
 8005264:	463a      	mov	r2, r7
 8005266:	1cbb      	adds	r3, r7, #2
 8005268:	4611      	mov	r1, r2
 800526a:	4618      	mov	r0, r3
 800526c:	f000 ff34 	bl	80060d8 <TouchGetCalibratedPoint>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0e8      	beq.n	8005248 <main+0x60>
			  if (tx >= 180 && tx <= 230 && ty >= 10 && ty <= 100){
 8005276:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800527a:	2bb3      	cmp	r3, #179	@ 0xb3
 800527c:	dde4      	ble.n	8005248 <main+0x60>
 800527e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005282:	2be6      	cmp	r3, #230	@ 0xe6
 8005284:	dce0      	bgt.n	8005248 <main+0x60>
 8005286:	f9b7 3000 	ldrsh.w	r3, [r7]
 800528a:	2b09      	cmp	r3, #9
 800528c:	dddc      	ble.n	8005248 <main+0x60>
 800528e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005292:	2b64      	cmp	r3, #100	@ 0x64
 8005294:	dcd8      	bgt.n	8005248 <main+0x60>
				  current = 2;
 8005296:	2302      	movs	r3, #2
 8005298:	60fb      	str	r3, [r7, #12]
				  updated = true;
 800529a:	2301      	movs	r3, #1
 800529c:	72fb      	strb	r3, [r7, #11]
				  HAL_Delay(100);
 800529e:	2064      	movs	r0, #100	@ 0x64
 80052a0:	f001 f82a 	bl	80062f8 <HAL_Delay>
 80052a4:	e7d0      	b.n	8005248 <main+0x60>
			  }
		  }
	  }
	  else if (current == 2){
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d1cd      	bne.n	8005248 <main+0x60>
		  if (updated == true){
 80052ac:	7afb      	ldrb	r3, [r7, #11]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d013      	beq.n	80052da <main+0xf2>
			  Screen2(temp_max, temp_min, day_code, day_name, wind_speed, Date);
 80052b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005324 <main+0x13c>)
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005328 <main+0x140>)
 80052b8:	6819      	ldr	r1, [r3, #0]
 80052ba:	4b1c      	ldr	r3, [pc, #112]	@ (800532c <main+0x144>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b1c      	ldr	r3, [pc, #112]	@ (8005330 <main+0x148>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4c1c      	ldr	r4, [pc, #112]	@ (8005334 <main+0x14c>)
 80052c4:	9401      	str	r4, [sp, #4]
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005338 <main+0x150>)
 80052ca:	f7fe fcbb 	bl	8003c44 <Screen2>
			  HAL_Delay(1000);
 80052ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052d2:	f001 f811 	bl	80062f8 <HAL_Delay>
			  updated = false;
 80052d6:	2300      	movs	r3, #0
 80052d8:	72fb      	strb	r3, [r7, #11]
		  }
		  if (TouchGetCalibratedPoint(&tx, &ty)){
 80052da:	463a      	mov	r2, r7
 80052dc:	1cbb      	adds	r3, r7, #2
 80052de:	4611      	mov	r1, r2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fef9 	bl	80060d8 <TouchGetCalibratedPoint>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0ad      	beq.n	8005248 <main+0x60>
			  if (tx >= 180 && tx <= 230 && ty >= 10 && ty <= 100){
 80052ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052f0:	2bb3      	cmp	r3, #179	@ 0xb3
 80052f2:	dda9      	ble.n	8005248 <main+0x60>
 80052f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052f8:	2be6      	cmp	r3, #230	@ 0xe6
 80052fa:	dca5      	bgt.n	8005248 <main+0x60>
 80052fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005300:	2b09      	cmp	r3, #9
 8005302:	dda1      	ble.n	8005248 <main+0x60>
 8005304:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005308:	2b64      	cmp	r3, #100	@ 0x64
 800530a:	dc9d      	bgt.n	8005248 <main+0x60>
				  current = 1;
 800530c:	2301      	movs	r3, #1
 800530e:	60fb      	str	r3, [r7, #12]
				  updated = true;
 8005310:	2301      	movs	r3, #1
 8005312:	72fb      	strb	r3, [r7, #11]
				  HAL_Delay(100);
 8005314:	2064      	movs	r0, #100	@ 0x64
 8005316:	f000 ffef 	bl	80062f8 <HAL_Delay>
	  if (current == 1){
 800531a:	e795      	b.n	8005248 <main+0x60>
 800531c:	40020400 	.word	0x40020400
 8005320:	20000044 	.word	0x20000044
 8005324:	20000c34 	.word	0x20000c34
 8005328:	20000c38 	.word	0x20000c38
 800532c:	20000c40 	.word	0x20000c40
 8005330:	20000c3c 	.word	0x20000c3c
 8005334:	20000c60 	.word	0x20000c60
 8005338:	20000c44 	.word	0x20000c44

0800533c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b094      	sub	sp, #80	@ 0x50
 8005340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005342:	f107 0320 	add.w	r3, r7, #32
 8005346:	2230      	movs	r2, #48	@ 0x30
 8005348:	2100      	movs	r1, #0
 800534a:	4618      	mov	r0, r3
 800534c:	f004 fbba 	bl	8009ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005350:	f107 030c 	add.w	r3, r7, #12
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	60da      	str	r2, [r3, #12]
 800535e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005360:	2300      	movs	r3, #0
 8005362:	60bb      	str	r3, [r7, #8]
 8005364:	4b28      	ldr	r3, [pc, #160]	@ (8005408 <SystemClock_Config+0xcc>)
 8005366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005368:	4a27      	ldr	r2, [pc, #156]	@ (8005408 <SystemClock_Config+0xcc>)
 800536a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800536e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005370:	4b25      	ldr	r3, [pc, #148]	@ (8005408 <SystemClock_Config+0xcc>)
 8005372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800537c:	2300      	movs	r3, #0
 800537e:	607b      	str	r3, [r7, #4]
 8005380:	4b22      	ldr	r3, [pc, #136]	@ (800540c <SystemClock_Config+0xd0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a21      	ldr	r2, [pc, #132]	@ (800540c <SystemClock_Config+0xd0>)
 8005386:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	4b1f      	ldr	r3, [pc, #124]	@ (800540c <SystemClock_Config+0xd0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005394:	607b      	str	r3, [r7, #4]
 8005396:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005398:	2301      	movs	r3, #1
 800539a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800539c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053a2:	2302      	movs	r3, #2
 80053a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80053aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80053ac:	2304      	movs	r3, #4
 80053ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80053b0:	23a8      	movs	r3, #168	@ 0xa8
 80053b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053b4:	2302      	movs	r3, #2
 80053b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80053b8:	2304      	movs	r3, #4
 80053ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053bc:	f107 0320 	add.w	r3, r7, #32
 80053c0:	4618      	mov	r0, r3
 80053c2:	f001 fb2f 	bl	8006a24 <HAL_RCC_OscConfig>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80053cc:	f000 fb02 	bl	80059d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053d0:	230f      	movs	r3, #15
 80053d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053d4:	2302      	movs	r3, #2
 80053d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80053dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80053e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80053e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80053e8:	f107 030c 	add.w	r3, r7, #12
 80053ec:	2105      	movs	r1, #5
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 fd90 	bl	8006f14 <HAL_RCC_ClockConfig>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80053fa:	f000 faeb 	bl	80059d4 <Error_Handler>
  }
}
 80053fe:	bf00      	nop
 8005400:	3750      	adds	r7, #80	@ 0x50
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40023800 	.word	0x40023800
 800540c:	40007000 	.word	0x40007000

08005410 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005414:	4b17      	ldr	r3, [pc, #92]	@ (8005474 <MX_SPI2_Init+0x64>)
 8005416:	4a18      	ldr	r2, [pc, #96]	@ (8005478 <MX_SPI2_Init+0x68>)
 8005418:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800541a:	4b16      	ldr	r3, [pc, #88]	@ (8005474 <MX_SPI2_Init+0x64>)
 800541c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005420:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005422:	4b14      	ldr	r3, [pc, #80]	@ (8005474 <MX_SPI2_Init+0x64>)
 8005424:	2200      	movs	r2, #0
 8005426:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005428:	4b12      	ldr	r3, [pc, #72]	@ (8005474 <MX_SPI2_Init+0x64>)
 800542a:	2200      	movs	r2, #0
 800542c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800542e:	4b11      	ldr	r3, [pc, #68]	@ (8005474 <MX_SPI2_Init+0x64>)
 8005430:	2200      	movs	r2, #0
 8005432:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005434:	4b0f      	ldr	r3, [pc, #60]	@ (8005474 <MX_SPI2_Init+0x64>)
 8005436:	2200      	movs	r2, #0
 8005438:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800543a:	4b0e      	ldr	r3, [pc, #56]	@ (8005474 <MX_SPI2_Init+0x64>)
 800543c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005440:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005442:	4b0c      	ldr	r3, [pc, #48]	@ (8005474 <MX_SPI2_Init+0x64>)
 8005444:	2228      	movs	r2, #40	@ 0x28
 8005446:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005448:	4b0a      	ldr	r3, [pc, #40]	@ (8005474 <MX_SPI2_Init+0x64>)
 800544a:	2200      	movs	r2, #0
 800544c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800544e:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <MX_SPI2_Init+0x64>)
 8005450:	2200      	movs	r2, #0
 8005452:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005454:	4b07      	ldr	r3, [pc, #28]	@ (8005474 <MX_SPI2_Init+0x64>)
 8005456:	2200      	movs	r2, #0
 8005458:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800545a:	4b06      	ldr	r3, [pc, #24]	@ (8005474 <MX_SPI2_Init+0x64>)
 800545c:	220a      	movs	r2, #10
 800545e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005460:	4804      	ldr	r0, [pc, #16]	@ (8005474 <MX_SPI2_Init+0x64>)
 8005462:	f001 ff77 	bl	8007354 <HAL_SPI_Init>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800546c:	f000 fab2 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005470:	bf00      	nop
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000b44 	.word	0x20000b44
 8005478:	40003800 	.word	0x40003800

0800547c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005480:	4b11      	ldr	r3, [pc, #68]	@ (80054c8 <MX_USART1_UART_Init+0x4c>)
 8005482:	4a12      	ldr	r2, [pc, #72]	@ (80054cc <MX_USART1_UART_Init+0x50>)
 8005484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005486:	4b10      	ldr	r3, [pc, #64]	@ (80054c8 <MX_USART1_UART_Init+0x4c>)
 8005488:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800548c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800548e:	4b0e      	ldr	r3, [pc, #56]	@ (80054c8 <MX_USART1_UART_Init+0x4c>)
 8005490:	2200      	movs	r2, #0
 8005492:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005494:	4b0c      	ldr	r3, [pc, #48]	@ (80054c8 <MX_USART1_UART_Init+0x4c>)
 8005496:	2200      	movs	r2, #0
 8005498:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800549a:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <MX_USART1_UART_Init+0x4c>)
 800549c:	2200      	movs	r2, #0
 800549e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054a0:	4b09      	ldr	r3, [pc, #36]	@ (80054c8 <MX_USART1_UART_Init+0x4c>)
 80054a2:	220c      	movs	r2, #12
 80054a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054a6:	4b08      	ldr	r3, [pc, #32]	@ (80054c8 <MX_USART1_UART_Init+0x4c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054ac:	4b06      	ldr	r3, [pc, #24]	@ (80054c8 <MX_USART1_UART_Init+0x4c>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80054b2:	4805      	ldr	r0, [pc, #20]	@ (80054c8 <MX_USART1_UART_Init+0x4c>)
 80054b4:	f002 faa4 	bl	8007a00 <HAL_UART_Init>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80054be:	f000 fa89 	bl	80059d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80054c2:	bf00      	nop
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000b9c 	.word	0x20000b9c
 80054cc:	40011000 	.word	0x40011000

080054d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08c      	sub	sp, #48	@ 0x30
 80054d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d6:	f107 031c 	add.w	r3, r7, #28
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	605a      	str	r2, [r3, #4]
 80054e0:	609a      	str	r2, [r3, #8]
 80054e2:	60da      	str	r2, [r3, #12]
 80054e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	4b3b      	ldr	r3, [pc, #236]	@ (80055d8 <MX_GPIO_Init+0x108>)
 80054ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ee:	4a3a      	ldr	r2, [pc, #232]	@ (80055d8 <MX_GPIO_Init+0x108>)
 80054f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80054f6:	4b38      	ldr	r3, [pc, #224]	@ (80055d8 <MX_GPIO_Init+0x108>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fe:	61bb      	str	r3, [r7, #24]
 8005500:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	4b34      	ldr	r3, [pc, #208]	@ (80055d8 <MX_GPIO_Init+0x108>)
 8005508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550a:	4a33      	ldr	r2, [pc, #204]	@ (80055d8 <MX_GPIO_Init+0x108>)
 800550c:	f043 0304 	orr.w	r3, r3, #4
 8005510:	6313      	str	r3, [r2, #48]	@ 0x30
 8005512:	4b31      	ldr	r3, [pc, #196]	@ (80055d8 <MX_GPIO_Init+0x108>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	4b2d      	ldr	r3, [pc, #180]	@ (80055d8 <MX_GPIO_Init+0x108>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	4a2c      	ldr	r2, [pc, #176]	@ (80055d8 <MX_GPIO_Init+0x108>)
 8005528:	f043 0302 	orr.w	r3, r3, #2
 800552c:	6313      	str	r3, [r2, #48]	@ 0x30
 800552e:	4b2a      	ldr	r3, [pc, #168]	@ (80055d8 <MX_GPIO_Init+0x108>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	4b26      	ldr	r3, [pc, #152]	@ (80055d8 <MX_GPIO_Init+0x108>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005542:	4a25      	ldr	r2, [pc, #148]	@ (80055d8 <MX_GPIO_Init+0x108>)
 8005544:	f043 0310 	orr.w	r3, r3, #16
 8005548:	6313      	str	r3, [r2, #48]	@ 0x30
 800554a:	4b23      	ldr	r3, [pc, #140]	@ (80055d8 <MX_GPIO_Init+0x108>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005556:	2300      	movs	r3, #0
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	4b1f      	ldr	r3, [pc, #124]	@ (80055d8 <MX_GPIO_Init+0x108>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555e:	4a1e      	ldr	r2, [pc, #120]	@ (80055d8 <MX_GPIO_Init+0x108>)
 8005560:	f043 0308 	orr.w	r3, r3, #8
 8005564:	6313      	str	r3, [r2, #48]	@ 0x30
 8005566:	4b1c      	ldr	r3, [pc, #112]	@ (80055d8 <MX_GPIO_Init+0x108>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005572:	2300      	movs	r3, #0
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	4b18      	ldr	r3, [pc, #96]	@ (80055d8 <MX_GPIO_Init+0x108>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557a:	4a17      	ldr	r2, [pc, #92]	@ (80055d8 <MX_GPIO_Init+0x108>)
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	6313      	str	r3, [r2, #48]	@ 0x30
 8005582:	4b15      	ldr	r3, [pc, #84]	@ (80055d8 <MX_GPIO_Init+0x108>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);
 800558e:	2200      	movs	r2, #0
 8005590:	f241 0102 	movw	r1, #4098	@ 0x1002
 8005594:	4811      	ldr	r0, [pc, #68]	@ (80055dc <MX_GPIO_Init+0x10c>)
 8005596:	f001 fa2b 	bl	80069f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TC_PEN_Pin */
  GPIO_InitStruct.Pin = TC_PEN_Pin;
 800559a:	2320      	movs	r3, #32
 800559c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800559e:	2300      	movs	r3, #0
 80055a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TC_PEN_GPIO_Port, &GPIO_InitStruct);
 80055a6:	f107 031c 	add.w	r3, r7, #28
 80055aa:	4619      	mov	r1, r3
 80055ac:	480c      	ldr	r0, [pc, #48]	@ (80055e0 <MX_GPIO_Init+0x110>)
 80055ae:	f001 f86b 	bl	8006688 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|TOUCH_CS_Pin;
 80055b2:	f241 0302 	movw	r3, #4098	@ 0x1002
 80055b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055b8:	2301      	movs	r3, #1
 80055ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c0:	2300      	movs	r3, #0
 80055c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055c4:	f107 031c 	add.w	r3, r7, #28
 80055c8:	4619      	mov	r1, r3
 80055ca:	4804      	ldr	r0, [pc, #16]	@ (80055dc <MX_GPIO_Init+0x10c>)
 80055cc:	f001 f85c 	bl	8006688 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80055d0:	bf00      	nop
 80055d2:	3730      	adds	r7, #48	@ 0x30
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40023800 	.word	0x40023800
 80055dc:	40020400 	.word	0x40020400
 80055e0:	40020800 	.word	0x40020800

080055e4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80055ea:	1d3b      	adds	r3, r7, #4
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	60da      	str	r2, [r3, #12]
 80055f6:	611a      	str	r2, [r3, #16]
 80055f8:	615a      	str	r2, [r3, #20]
 80055fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80055fc:	4b27      	ldr	r3, [pc, #156]	@ (800569c <MX_FSMC_Init+0xb8>)
 80055fe:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8005602:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8005604:	4b25      	ldr	r3, [pc, #148]	@ (800569c <MX_FSMC_Init+0xb8>)
 8005606:	4a26      	ldr	r2, [pc, #152]	@ (80056a0 <MX_FSMC_Init+0xbc>)
 8005608:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800560a:	4b24      	ldr	r3, [pc, #144]	@ (800569c <MX_FSMC_Init+0xb8>)
 800560c:	2200      	movs	r2, #0
 800560e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8005610:	4b22      	ldr	r3, [pc, #136]	@ (800569c <MX_FSMC_Init+0xb8>)
 8005612:	2200      	movs	r2, #0
 8005614:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8005616:	4b21      	ldr	r3, [pc, #132]	@ (800569c <MX_FSMC_Init+0xb8>)
 8005618:	2200      	movs	r2, #0
 800561a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800561c:	4b1f      	ldr	r3, [pc, #124]	@ (800569c <MX_FSMC_Init+0xb8>)
 800561e:	2210      	movs	r2, #16
 8005620:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8005622:	4b1e      	ldr	r3, [pc, #120]	@ (800569c <MX_FSMC_Init+0xb8>)
 8005624:	2200      	movs	r2, #0
 8005626:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8005628:	4b1c      	ldr	r3, [pc, #112]	@ (800569c <MX_FSMC_Init+0xb8>)
 800562a:	2200      	movs	r2, #0
 800562c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800562e:	4b1b      	ldr	r3, [pc, #108]	@ (800569c <MX_FSMC_Init+0xb8>)
 8005630:	2200      	movs	r2, #0
 8005632:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8005634:	4b19      	ldr	r3, [pc, #100]	@ (800569c <MX_FSMC_Init+0xb8>)
 8005636:	2200      	movs	r2, #0
 8005638:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800563a:	4b18      	ldr	r3, [pc, #96]	@ (800569c <MX_FSMC_Init+0xb8>)
 800563c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005640:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8005642:	4b16      	ldr	r3, [pc, #88]	@ (800569c <MX_FSMC_Init+0xb8>)
 8005644:	2200      	movs	r2, #0
 8005646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8005648:	4b14      	ldr	r3, [pc, #80]	@ (800569c <MX_FSMC_Init+0xb8>)
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800564e:	4b13      	ldr	r3, [pc, #76]	@ (800569c <MX_FSMC_Init+0xb8>)
 8005650:	2200      	movs	r2, #0
 8005652:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8005654:	4b11      	ldr	r3, [pc, #68]	@ (800569c <MX_FSMC_Init+0xb8>)
 8005656:	2200      	movs	r2, #0
 8005658:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800565a:	4b10      	ldr	r3, [pc, #64]	@ (800569c <MX_FSMC_Init+0xb8>)
 800565c:	2200      	movs	r2, #0
 800565e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8005660:	2301      	movs	r3, #1
 8005662:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8005664:	230f      	movs	r3, #15
 8005666:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8005668:	2305      	movs	r3, #5
 800566a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8005670:	2310      	movs	r3, #16
 8005672:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8005674:	2311      	movs	r3, #17
 8005676:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8005678:	2300      	movs	r3, #0
 800567a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800567c:	1d3b      	adds	r3, r7, #4
 800567e:	2200      	movs	r2, #0
 8005680:	4619      	mov	r1, r3
 8005682:	4806      	ldr	r0, [pc, #24]	@ (800569c <MX_FSMC_Init+0xb8>)
 8005684:	f002 f974 	bl	8007970 <HAL_SRAM_Init>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800568e:	f000 f9a1 	bl	80059d4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8005692:	bf00      	nop
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000be4 	.word	0x20000be4
 80056a0:	a0000104 	.word	0xa0000104

080056a4 <HAL_UART_RxCpltCallback>:




}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {

    }
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <processWeather>:

void processWeather(const char *jsonString) {
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b095      	sub	sp, #84	@ 0x54
 80056bc:	af02      	add	r7, sp, #8
 80056be:	6078      	str	r0, [r7, #4]
    // Parse chuỗi JSON
    cJSON *json = cJSON_Parse(jsonString);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fc f99d 	bl	8001a00 <cJSON_Parse>
 80056c6:	6438      	str	r0, [r7, #64]	@ 0x40
    if (json == NULL) {
 80056c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10c      	bne.n	80056e8 <processWeather+0x30>
        lcdSetCursor(10, 10);
 80056ce:	210a      	movs	r1, #10
 80056d0:	200a      	movs	r0, #10
 80056d2:	f7ff fc8b 	bl	8004fec <lcdSetCursor>
        lcdSetTextColor(COLOR_RED, COLOR_BLACK);
 80056d6:	2100      	movs	r1, #0
 80056d8:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80056dc:	f7ff fc06 	bl	8004eec <lcdSetTextColor>
        lcdPrintf("Error parsing JSON!");
 80056e0:	48a4      	ldr	r0, [pc, #656]	@ (8005974 <processWeather+0x2bc>)
 80056e2:	f7ff fb67 	bl	8004db4 <lcdPrintf>
        return;
 80056e6:	e142      	b.n	800596e <processWeather+0x2b6>
    }

    // Lấy thông tin dự báo hàng ngày
    	cJSON *daily = cJSON_GetObjectItem(json, "daily");
 80056e8:	49a3      	ldr	r1, [pc, #652]	@ (8005978 <processWeather+0x2c0>)
 80056ea:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80056ec:	f7fc fcf2 	bl	80020d4 <cJSON_GetObjectItem>
 80056f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    	if (!daily) {
 80056f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10f      	bne.n	8005718 <processWeather+0x60>
    	        lcdSetCursor(10, 10);
 80056f8:	210a      	movs	r1, #10
 80056fa:	200a      	movs	r0, #10
 80056fc:	f7ff fc76 	bl	8004fec <lcdSetCursor>
    	        lcdSetTextColor(COLOR_RED, COLOR_BLACK);
 8005700:	2100      	movs	r1, #0
 8005702:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8005706:	f7ff fbf1 	bl	8004eec <lcdSetTextColor>
    	        lcdPrintf("Error: Missing 'daily' object!");
 800570a:	489c      	ldr	r0, [pc, #624]	@ (800597c <processWeather+0x2c4>)
 800570c:	f7ff fb52 	bl	8004db4 <lcdPrintf>
    	        cJSON_Delete(json);
 8005710:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005712:	f7fb fc93 	bl	800103c <cJSON_Delete>
    	        return;
 8005716:	e12a      	b.n	800596e <processWeather+0x2b6>
    	    }
    	cJSON *dates = cJSON_GetObjectItem(daily, "time");
 8005718:	4999      	ldr	r1, [pc, #612]	@ (8005980 <processWeather+0x2c8>)
 800571a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800571c:	f7fc fcda 	bl	80020d4 <cJSON_GetObjectItem>
 8005720:	63b8      	str	r0, [r7, #56]	@ 0x38
        cJSON *temp_max_json = cJSON_GetObjectItem(daily, "apparent_temperature_max");
 8005722:	4998      	ldr	r1, [pc, #608]	@ (8005984 <processWeather+0x2cc>)
 8005724:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005726:	f7fc fcd5 	bl	80020d4 <cJSON_GetObjectItem>
 800572a:	6378      	str	r0, [r7, #52]	@ 0x34
        cJSON *temp_min_json = cJSON_GetObjectItem(daily, "apparent_temperature_min");
 800572c:	4996      	ldr	r1, [pc, #600]	@ (8005988 <processWeather+0x2d0>)
 800572e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005730:	f7fc fcd0 	bl	80020d4 <cJSON_GetObjectItem>
 8005734:	6338      	str	r0, [r7, #48]	@ 0x30
        cJSON *weather_code = cJSON_GetObjectItem(daily, "weather_code");
 8005736:	4995      	ldr	r1, [pc, #596]	@ (800598c <processWeather+0x2d4>)
 8005738:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800573a:	f7fc fccb 	bl	80020d4 <cJSON_GetObjectItem>
 800573e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        cJSON *wind_speed_json = cJSON_GetObjectItem(daily, "wind_speed_10m_max");
 8005740:	4993      	ldr	r1, [pc, #588]	@ (8005990 <processWeather+0x2d8>)
 8005742:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005744:	f7fc fcc6 	bl	80020d4 <cJSON_GetObjectItem>
 8005748:	62b8      	str	r0, [r7, #40]	@ 0x28
    // Cấp phát bộ nhớ cho các biến toàn cục
    int num_days = cJSON_GetArraySize(dates);
 800574a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800574c:	f7fc fc22 	bl	8001f94 <cJSON_GetArraySize>
 8005750:	6278      	str	r0, [r7, #36]	@ 0x24
        temp_max = (int *)malloc(num_days * sizeof(int));
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4618      	mov	r0, r3
 8005758:	f003 f93e 	bl	80089d8 <malloc>
 800575c:	4603      	mov	r3, r0
 800575e:	461a      	mov	r2, r3
 8005760:	4b8c      	ldr	r3, [pc, #560]	@ (8005994 <processWeather+0x2dc>)
 8005762:	601a      	str	r2, [r3, #0]
        temp_min = (int *)malloc(num_days * sizeof(int));
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4618      	mov	r0, r3
 800576a:	f003 f935 	bl	80089d8 <malloc>
 800576e:	4603      	mov	r3, r0
 8005770:	461a      	mov	r2, r3
 8005772:	4b89      	ldr	r3, [pc, #548]	@ (8005998 <processWeather+0x2e0>)
 8005774:	601a      	str	r2, [r3, #0]
        wind_speed = (int *)malloc(num_days * sizeof(int));
 8005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4618      	mov	r0, r3
 800577c:	f003 f92c 	bl	80089d8 <malloc>
 8005780:	4603      	mov	r3, r0
 8005782:	461a      	mov	r2, r3
 8005784:	4b85      	ldr	r3, [pc, #532]	@ (800599c <processWeather+0x2e4>)
 8005786:	601a      	str	r2, [r3, #0]
        day_code = (int *)malloc(num_days * sizeof(int));
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4618      	mov	r0, r3
 800578e:	f003 f923 	bl	80089d8 <malloc>
 8005792:	4603      	mov	r3, r0
 8005794:	461a      	mov	r2, r3
 8005796:	4b82      	ldr	r3, [pc, #520]	@ (80059a0 <processWeather+0x2e8>)
 8005798:	601a      	str	r2, [r3, #0]

            // Chuyển đổi ngày từ chuỗi thành tên ngày (ví dụ: "Mon")
        for (int i = 0; i < num_days; i++) {
 800579a:	2300      	movs	r3, #0
 800579c:	647b      	str	r3, [r7, #68]	@ 0x44
 800579e:	e0de      	b.n	800595e <processWeather+0x2a6>
        		char *date = cJSON_GetArrayItem(dates, i)->valuestring;
 80057a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80057a4:	f7fc fc3a 	bl	800201c <cJSON_GetArrayItem>
 80057a8:	4603      	mov	r3, r0
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	623b      	str	r3, [r7, #32]
        		temp_max[i] = (int)cJSON_GetArrayItem(temp_max_json, i)->valuedouble;
 80057ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80057b2:	f7fc fc33 	bl	800201c <cJSON_GetArrayItem>
 80057b6:	4603      	mov	r3, r0
 80057b8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80057bc:	4975      	ldr	r1, [pc, #468]	@ (8005994 <processWeather+0x2dc>)
 80057be:	6808      	ldr	r0, [r1, #0]
 80057c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057c2:	0089      	lsls	r1, r1, #2
 80057c4:	1844      	adds	r4, r0, r1
 80057c6:	4610      	mov	r0, r2
 80057c8:	4619      	mov	r1, r3
 80057ca:	f7fb f9bf 	bl	8000b4c <__aeabi_d2iz>
 80057ce:	4603      	mov	r3, r0
 80057d0:	6023      	str	r3, [r4, #0]
        		temp_min[i] = (int)cJSON_GetArrayItem(temp_min_json, i)->valuedouble;
 80057d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057d6:	f7fc fc21 	bl	800201c <cJSON_GetArrayItem>
 80057da:	4603      	mov	r3, r0
 80057dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80057e0:	496d      	ldr	r1, [pc, #436]	@ (8005998 <processWeather+0x2e0>)
 80057e2:	6808      	ldr	r0, [r1, #0]
 80057e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057e6:	0089      	lsls	r1, r1, #2
 80057e8:	1844      	adds	r4, r0, r1
 80057ea:	4610      	mov	r0, r2
 80057ec:	4619      	mov	r1, r3
 80057ee:	f7fb f9ad 	bl	8000b4c <__aeabi_d2iz>
 80057f2:	4603      	mov	r3, r0
 80057f4:	6023      	str	r3, [r4, #0]
        		wind_speed[i] = (int)cJSON_GetArrayItem(wind_speed_json, i)->valuedouble;
 80057f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057fa:	f7fc fc0f 	bl	800201c <cJSON_GetArrayItem>
 80057fe:	4603      	mov	r3, r0
 8005800:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005804:	4965      	ldr	r1, [pc, #404]	@ (800599c <processWeather+0x2e4>)
 8005806:	6808      	ldr	r0, [r1, #0]
 8005808:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800580a:	0089      	lsls	r1, r1, #2
 800580c:	1844      	adds	r4, r0, r1
 800580e:	4610      	mov	r0, r2
 8005810:	4619      	mov	r1, r3
 8005812:	f7fb f99b 	bl	8000b4c <__aeabi_d2iz>
 8005816:	4603      	mov	r3, r0
 8005818:	6023      	str	r3, [r4, #0]
        		day_code[i] = cJSON_GetArrayItem(weather_code, i)->valueint;
 800581a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800581c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800581e:	f7fc fbfd 	bl	800201c <cJSON_GetArrayItem>
 8005822:	4601      	mov	r1, r0
 8005824:	4b5e      	ldr	r3, [pc, #376]	@ (80059a0 <processWeather+0x2e8>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	694a      	ldr	r2, [r1, #20]
 8005830:	601a      	str	r2, [r3, #0]

        		// Extract month and day from date string
				int year, month, days;
				char tmp[6];
				sscanf(date, "%d-%d-%d", &year, &month, &days);
 8005832:	f107 0118 	add.w	r1, r7, #24
 8005836:	f107 021c 	add.w	r2, r7, #28
 800583a:	f107 0314 	add.w	r3, r7, #20
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	460b      	mov	r3, r1
 8005842:	4958      	ldr	r1, [pc, #352]	@ (80059a4 <processWeather+0x2ec>)
 8005844:	6a38      	ldr	r0, [r7, #32]
 8005846:	f004 f8ad 	bl	80099a4 <siscanf>
				sprintf(tmp, "%02d-%02d", days, month);
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f107 000c 	add.w	r0, r7, #12
 8005852:	4955      	ldr	r1, [pc, #340]	@ (80059a8 <processWeather+0x2f0>)
 8005854:	f004 f886 	bl	8009964 <siprintf>
				strncat(Date[i], tmp, sizeof(Date[i]) - strlen(Date[i]) - 1);
 8005858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800585a:	4613      	mov	r3, r2
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	4413      	add	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4a52      	ldr	r2, [pc, #328]	@ (80059ac <processWeather+0x2f4>)
 8005864:	189c      	adds	r4, r3, r2
 8005866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005868:	4613      	mov	r3, r2
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	4413      	add	r3, r2
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	4a4e      	ldr	r2, [pc, #312]	@ (80059ac <processWeather+0x2f4>)
 8005872:	4413      	add	r3, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f7fa fcb5 	bl	80001e4 <strlen>
 800587a:	4603      	mov	r3, r0
 800587c:	f1c3 0205 	rsb	r2, r3, #5
 8005880:	f107 030c 	add.w	r3, r7, #12
 8005884:	4619      	mov	r1, r3
 8005886:	4620      	mov	r0, r4
 8005888:	f004 f924 	bl	8009ad4 <strncat>
        		char day[4];
				switch ((i + 2) % 7) {
 800588c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800588e:	1c9a      	adds	r2, r3, #2
 8005890:	4b47      	ldr	r3, [pc, #284]	@ (80059b0 <processWeather+0x2f8>)
 8005892:	fb83 1302 	smull	r1, r3, r3, r2
 8005896:	4413      	add	r3, r2
 8005898:	1099      	asrs	r1, r3, #2
 800589a:	17d3      	asrs	r3, r2, #31
 800589c:	1ac9      	subs	r1, r1, r3
 800589e:	460b      	mov	r3, r1
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	1a5b      	subs	r3, r3, r1
 80058a4:	1ad1      	subs	r1, r2, r3
 80058a6:	2906      	cmp	r1, #6
 80058a8:	d841      	bhi.n	800592e <processWeather+0x276>
 80058aa:	a301      	add	r3, pc, #4	@ (adr r3, 80058b0 <processWeather+0x1f8>)
 80058ac:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80058b0:	080058cd 	.word	0x080058cd
 80058b4:	080058db 	.word	0x080058db
 80058b8:	080058e9 	.word	0x080058e9
 80058bc:	080058f7 	.word	0x080058f7
 80058c0:	08005905 	.word	0x08005905
 80058c4:	08005913 	.word	0x08005913
 80058c8:	08005921 	.word	0x08005921
					case 0: sprintf(day, "Sun"); break;
 80058cc:	f107 0308 	add.w	r3, r7, #8
 80058d0:	4938      	ldr	r1, [pc, #224]	@ (80059b4 <processWeather+0x2fc>)
 80058d2:	4618      	mov	r0, r3
 80058d4:	f004 f846 	bl	8009964 <siprintf>
 80058d8:	e02a      	b.n	8005930 <processWeather+0x278>
					case 1: sprintf(day, "Mon"); break;
 80058da:	f107 0308 	add.w	r3, r7, #8
 80058de:	4936      	ldr	r1, [pc, #216]	@ (80059b8 <processWeather+0x300>)
 80058e0:	4618      	mov	r0, r3
 80058e2:	f004 f83f 	bl	8009964 <siprintf>
 80058e6:	e023      	b.n	8005930 <processWeather+0x278>
					case 2: sprintf(day, "Tue"); break;
 80058e8:	f107 0308 	add.w	r3, r7, #8
 80058ec:	4933      	ldr	r1, [pc, #204]	@ (80059bc <processWeather+0x304>)
 80058ee:	4618      	mov	r0, r3
 80058f0:	f004 f838 	bl	8009964 <siprintf>
 80058f4:	e01c      	b.n	8005930 <processWeather+0x278>
					case 3: sprintf(day, "Wed"); break;
 80058f6:	f107 0308 	add.w	r3, r7, #8
 80058fa:	4931      	ldr	r1, [pc, #196]	@ (80059c0 <processWeather+0x308>)
 80058fc:	4618      	mov	r0, r3
 80058fe:	f004 f831 	bl	8009964 <siprintf>
 8005902:	e015      	b.n	8005930 <processWeather+0x278>
					case 4: sprintf(day, "Thu"); break;
 8005904:	f107 0308 	add.w	r3, r7, #8
 8005908:	492e      	ldr	r1, [pc, #184]	@ (80059c4 <processWeather+0x30c>)
 800590a:	4618      	mov	r0, r3
 800590c:	f004 f82a 	bl	8009964 <siprintf>
 8005910:	e00e      	b.n	8005930 <processWeather+0x278>
					case 5: sprintf(day, "Fri"); break;
 8005912:	f107 0308 	add.w	r3, r7, #8
 8005916:	492c      	ldr	r1, [pc, #176]	@ (80059c8 <processWeather+0x310>)
 8005918:	4618      	mov	r0, r3
 800591a:	f004 f823 	bl	8009964 <siprintf>
 800591e:	e007      	b.n	8005930 <processWeather+0x278>
					case 6: sprintf(day, "Sat"); break;
 8005920:	f107 0308 	add.w	r3, r7, #8
 8005924:	4929      	ldr	r1, [pc, #164]	@ (80059cc <processWeather+0x314>)
 8005926:	4618      	mov	r0, r3
 8005928:	f004 f81c 	bl	8009964 <siprintf>
 800592c:	e000      	b.n	8005930 <processWeather+0x278>
					default: break;
 800592e:	bf00      	nop
				}
				strncat(day_name[i], day, sizeof(day_name[i]) - strlen(day_name[i]) - 1);
 8005930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4a26      	ldr	r2, [pc, #152]	@ (80059d0 <processWeather+0x318>)
 8005936:	189c      	adds	r4, r3, r2
 8005938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4a24      	ldr	r2, [pc, #144]	@ (80059d0 <processWeather+0x318>)
 800593e:	4413      	add	r3, r2
 8005940:	4618      	mov	r0, r3
 8005942:	f7fa fc4f 	bl	80001e4 <strlen>
 8005946:	4603      	mov	r3, r0
 8005948:	f1c3 0203 	rsb	r2, r3, #3
 800594c:	f107 0308 	add.w	r3, r7, #8
 8005950:	4619      	mov	r1, r3
 8005952:	4620      	mov	r0, r4
 8005954:	f004 f8be 	bl	8009ad4 <strncat>
        for (int i = 0; i < num_days; i++) {
 8005958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800595a:	3301      	adds	r3, #1
 800595c:	647b      	str	r3, [r7, #68]	@ 0x44
 800595e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	429a      	cmp	r2, r3
 8005964:	f6ff af1c 	blt.w	80057a0 <processWeather+0xe8>
        }
    // D�?n dẹp bộ nhớ
    cJSON_Delete(json);
 8005968:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800596a:	f7fb fb67 	bl	800103c <cJSON_Delete>
}
 800596e:	374c      	adds	r7, #76	@ 0x4c
 8005970:	46bd      	mov	sp, r7
 8005972:	bd90      	pop	{r4, r7, pc}
 8005974:	0800c708 	.word	0x0800c708
 8005978:	0800c71c 	.word	0x0800c71c
 800597c:	0800c724 	.word	0x0800c724
 8005980:	0800c744 	.word	0x0800c744
 8005984:	0800c74c 	.word	0x0800c74c
 8005988:	0800c768 	.word	0x0800c768
 800598c:	0800c784 	.word	0x0800c784
 8005990:	0800c794 	.word	0x0800c794
 8005994:	20000c34 	.word	0x20000c34
 8005998:	20000c38 	.word	0x20000c38
 800599c:	20000c3c 	.word	0x20000c3c
 80059a0:	20000c40 	.word	0x20000c40
 80059a4:	0800c7a8 	.word	0x0800c7a8
 80059a8:	0800c7b4 	.word	0x0800c7b4
 80059ac:	20000c60 	.word	0x20000c60
 80059b0:	92492493 	.word	0x92492493
 80059b4:	0800c7c0 	.word	0x0800c7c0
 80059b8:	0800c7c4 	.word	0x0800c7c4
 80059bc:	0800c7c8 	.word	0x0800c7c8
 80059c0:	0800c7cc 	.word	0x0800c7cc
 80059c4:	0800c7d0 	.word	0x0800c7d0
 80059c8:	0800c7d4 	.word	0x0800c7d4
 80059cc:	0800c7d8 	.word	0x0800c7d8
 80059d0:	20000c44 	.word	0x20000c44

080059d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80059d8:	b672      	cpsid	i
}
 80059da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80059dc:	bf00      	nop
 80059de:	e7fd      	b.n	80059dc <Error_Handler+0x8>

080059e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059e6:	2300      	movs	r3, #0
 80059e8:	607b      	str	r3, [r7, #4]
 80059ea:	4b10      	ldr	r3, [pc, #64]	@ (8005a2c <HAL_MspInit+0x4c>)
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	4a0f      	ldr	r2, [pc, #60]	@ (8005a2c <HAL_MspInit+0x4c>)
 80059f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80059f6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a2c <HAL_MspInit+0x4c>)
 80059f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059fe:	607b      	str	r3, [r7, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a02:	2300      	movs	r3, #0
 8005a04:	603b      	str	r3, [r7, #0]
 8005a06:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <HAL_MspInit+0x4c>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0a:	4a08      	ldr	r2, [pc, #32]	@ (8005a2c <HAL_MspInit+0x4c>)
 8005a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a12:	4b06      	ldr	r3, [pc, #24]	@ (8005a2c <HAL_MspInit+0x4c>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40023800 	.word	0x40023800

08005a30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	@ 0x28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a38:	f107 0314 	add.w	r3, r7, #20
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	60da      	str	r2, [r3, #12]
 8005a46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a19      	ldr	r2, [pc, #100]	@ (8005ab4 <HAL_SPI_MspInit+0x84>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d12c      	bne.n	8005aac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	4b18      	ldr	r3, [pc, #96]	@ (8005ab8 <HAL_SPI_MspInit+0x88>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	4a17      	ldr	r2, [pc, #92]	@ (8005ab8 <HAL_SPI_MspInit+0x88>)
 8005a5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a62:	4b15      	ldr	r3, [pc, #84]	@ (8005ab8 <HAL_SPI_MspInit+0x88>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	4b11      	ldr	r3, [pc, #68]	@ (8005ab8 <HAL_SPI_MspInit+0x88>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a76:	4a10      	ldr	r2, [pc, #64]	@ (8005ab8 <HAL_SPI_MspInit+0x88>)
 8005a78:	f043 0302 	orr.w	r3, r3, #2
 8005a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab8 <HAL_SPI_MspInit+0x88>)
 8005a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005a8a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a90:	2302      	movs	r3, #2
 8005a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a9c:	2305      	movs	r3, #5
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aa0:	f107 0314 	add.w	r3, r7, #20
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4805      	ldr	r0, [pc, #20]	@ (8005abc <HAL_SPI_MspInit+0x8c>)
 8005aa8:	f000 fdee 	bl	8006688 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8005aac:	bf00      	nop
 8005aae:	3728      	adds	r7, #40	@ 0x28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40003800 	.word	0x40003800
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	40020400 	.word	0x40020400

08005ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08a      	sub	sp, #40	@ 0x28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ac8:	f107 0314 	add.w	r3, r7, #20
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	605a      	str	r2, [r3, #4]
 8005ad2:	609a      	str	r2, [r3, #8]
 8005ad4:	60da      	str	r2, [r3, #12]
 8005ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a1d      	ldr	r2, [pc, #116]	@ (8005b54 <HAL_UART_MspInit+0x94>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d134      	bne.n	8005b4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8005b58 <HAL_UART_MspInit+0x98>)
 8005ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aea:	4a1b      	ldr	r2, [pc, #108]	@ (8005b58 <HAL_UART_MspInit+0x98>)
 8005aec:	f043 0310 	orr.w	r3, r3, #16
 8005af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005af2:	4b19      	ldr	r3, [pc, #100]	@ (8005b58 <HAL_UART_MspInit+0x98>)
 8005af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	613b      	str	r3, [r7, #16]
 8005afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	4b15      	ldr	r3, [pc, #84]	@ (8005b58 <HAL_UART_MspInit+0x98>)
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	4a14      	ldr	r2, [pc, #80]	@ (8005b58 <HAL_UART_MspInit+0x98>)
 8005b08:	f043 0301 	orr.w	r3, r3, #1
 8005b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b0e:	4b12      	ldr	r3, [pc, #72]	@ (8005b58 <HAL_UART_MspInit+0x98>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005b1a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b20:	2302      	movs	r3, #2
 8005b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b2c:	2307      	movs	r3, #7
 8005b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b30:	f107 0314 	add.w	r3, r7, #20
 8005b34:	4619      	mov	r1, r3
 8005b36:	4809      	ldr	r0, [pc, #36]	@ (8005b5c <HAL_UART_MspInit+0x9c>)
 8005b38:	f000 fda6 	bl	8006688 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2100      	movs	r1, #0
 8005b40:	2025      	movs	r0, #37	@ 0x25
 8005b42:	f000 fcd8 	bl	80064f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005b46:	2025      	movs	r0, #37	@ 0x25
 8005b48:	f000 fcf1 	bl	800652e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8005b4c:	bf00      	nop
 8005b4e:	3728      	adds	r7, #40	@ 0x28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	40011000 	.word	0x40011000
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	40020000 	.word	0x40020000

08005b60 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005b66:	1d3b      	adds	r3, r7, #4
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	605a      	str	r2, [r3, #4]
 8005b6e:	609a      	str	r2, [r3, #8]
 8005b70:	60da      	str	r2, [r3, #12]
 8005b72:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005b74:	4b1c      	ldr	r3, [pc, #112]	@ (8005be8 <HAL_FSMC_MspInit+0x88>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d131      	bne.n	8005be0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005be8 <HAL_FSMC_MspInit+0x88>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005b82:	2300      	movs	r3, #0
 8005b84:	603b      	str	r3, [r7, #0]
 8005b86:	4b19      	ldr	r3, [pc, #100]	@ (8005bec <HAL_FSMC_MspInit+0x8c>)
 8005b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8a:	4a18      	ldr	r2, [pc, #96]	@ (8005bec <HAL_FSMC_MspInit+0x8c>)
 8005b8c:	f043 0301 	orr.w	r3, r3, #1
 8005b90:	6393      	str	r3, [r2, #56]	@ 0x38
 8005b92:	4b16      	ldr	r3, [pc, #88]	@ (8005bec <HAL_FSMC_MspInit+0x8c>)
 8005b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005b9e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8005ba2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bac:	2303      	movs	r3, #3
 8005bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005bb0:	230c      	movs	r3, #12
 8005bb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005bb4:	1d3b      	adds	r3, r7, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	480d      	ldr	r0, [pc, #52]	@ (8005bf0 <HAL_FSMC_MspInit+0x90>)
 8005bba:	f000 fd65 	bl	8006688 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005bbe:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 8005bc2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005bd0:	230c      	movs	r3, #12
 8005bd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bd4:	1d3b      	adds	r3, r7, #4
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4806      	ldr	r0, [pc, #24]	@ (8005bf4 <HAL_FSMC_MspInit+0x94>)
 8005bda:	f000 fd55 	bl	8006688 <HAL_GPIO_Init>
 8005bde:	e000      	b.n	8005be2 <HAL_FSMC_MspInit+0x82>
    return;
 8005be0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000c8c 	.word	0x20000c8c
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	40020c00 	.word	0x40020c00

08005bf8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005c00:	f7ff ffae 	bl	8005b60 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005c04:	bf00      	nop
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005c10:	bf00      	nop
 8005c12:	e7fd      	b.n	8005c10 <NMI_Handler+0x4>

08005c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c18:	bf00      	nop
 8005c1a:	e7fd      	b.n	8005c18 <HardFault_Handler+0x4>

08005c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c20:	bf00      	nop
 8005c22:	e7fd      	b.n	8005c20 <MemManage_Handler+0x4>

08005c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c28:	bf00      	nop
 8005c2a:	e7fd      	b.n	8005c28 <BusFault_Handler+0x4>

08005c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c30:	bf00      	nop
 8005c32:	e7fd      	b.n	8005c30 <UsageFault_Handler+0x4>

08005c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c38:	bf00      	nop
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c42:	b480      	push	{r7}
 8005c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c46:	bf00      	nop
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c54:	bf00      	nop
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c62:	f000 fb29 	bl	80062b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c66:	bf00      	nop
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005c70:	4802      	ldr	r0, [pc, #8]	@ (8005c7c <USART1_IRQHandler+0x10>)
 8005c72:	f001 ff15 	bl	8007aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005c76:	bf00      	nop
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000b9c 	.word	0x20000b9c

08005c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  return 1;
 8005c84:	2301      	movs	r3, #1
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <_kill>:

int _kill(int pid, int sig)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005c9a:	f003 ff97 	bl	8009bcc <__errno>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2216      	movs	r2, #22
 8005ca2:	601a      	str	r2, [r3, #0]
  return -1;
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <_exit>:

void _exit (int status)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff ffe7 	bl	8005c90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <_exit+0x12>

08005cc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b086      	sub	sp, #24
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	e00a      	b.n	8005cee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005cd8:	f3af 8000 	nop.w
 8005cdc:	4601      	mov	r1, r0
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	60ba      	str	r2, [r7, #8]
 8005ce4:	b2ca      	uxtb	r2, r1
 8005ce6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	3301      	adds	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	dbf0      	blt.n	8005cd8 <_read+0x12>
  }

  return len;
 8005cf6:	687b      	ldr	r3, [r7, #4]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	e009      	b.n	8005d26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	60ba      	str	r2, [r7, #8]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	3301      	adds	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	dbf1      	blt.n	8005d12 <_write+0x12>
  }
  return len;
 8005d2e:	687b      	ldr	r3, [r7, #4]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <_close>:

int _close(int file)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005d60:	605a      	str	r2, [r3, #4]
  return 0;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <_isatty>:

int _isatty(int file)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005d78:	2301      	movs	r3, #1
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005da8:	4a14      	ldr	r2, [pc, #80]	@ (8005dfc <_sbrk+0x5c>)
 8005daa:	4b15      	ldr	r3, [pc, #84]	@ (8005e00 <_sbrk+0x60>)
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005db4:	4b13      	ldr	r3, [pc, #76]	@ (8005e04 <_sbrk+0x64>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005dbc:	4b11      	ldr	r3, [pc, #68]	@ (8005e04 <_sbrk+0x64>)
 8005dbe:	4a12      	ldr	r2, [pc, #72]	@ (8005e08 <_sbrk+0x68>)
 8005dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005dc2:	4b10      	ldr	r3, [pc, #64]	@ (8005e04 <_sbrk+0x64>)
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4413      	add	r3, r2
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d207      	bcs.n	8005de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005dd0:	f003 fefc 	bl	8009bcc <__errno>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	220c      	movs	r2, #12
 8005dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005dda:	f04f 33ff 	mov.w	r3, #4294967295
 8005dde:	e009      	b.n	8005df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005de0:	4b08      	ldr	r3, [pc, #32]	@ (8005e04 <_sbrk+0x64>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005de6:	4b07      	ldr	r3, [pc, #28]	@ (8005e04 <_sbrk+0x64>)
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4413      	add	r3, r2
 8005dee:	4a05      	ldr	r2, [pc, #20]	@ (8005e04 <_sbrk+0x64>)
 8005df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005df2:	68fb      	ldr	r3, [r7, #12]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20020000 	.word	0x20020000
 8005e00:	00000400 	.word	0x00000400
 8005e04:	20000c90 	.word	0x20000c90
 8005e08:	20000e00 	.word	0x20000e00

08005e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e10:	4b06      	ldr	r3, [pc, #24]	@ (8005e2c <SystemInit+0x20>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e16:	4a05      	ldr	r2, [pc, #20]	@ (8005e2c <SystemInit+0x20>)
 8005e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e20:	bf00      	nop
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	e000ed00 	.word	0xe000ed00

08005e30 <SpiTransfer>:
//static void DrawCross(int16_t x, int16_t y, int16_t length);
static uint8_t SpiTransfer(uint8_t byte);
static bool GetPointRaw(uint16_t* x, uint16_t* y);

static uint8_t SpiTransfer(uint8_t byte)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	4603      	mov	r3, r0
 8005e38:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	(void)HAL_SPI_TransmitReceive(&hspi2, &byte, &result, 1U, 1000U);
 8005e3a:	f107 020f 	add.w	r2, r7, #15
 8005e3e:	1df9      	adds	r1, r7, #7
 8005e40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	2301      	movs	r3, #1
 8005e48:	4803      	ldr	r0, [pc, #12]	@ (8005e58 <SpiTransfer+0x28>)
 8005e4a:	f001 fb0c 	bl	8007466 <HAL_SPI_TransmitReceive>

	return (result);
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000b44 	.word	0x20000b44

08005e5c <GetPointRaw>:
//    lcdSetCursor(50,150);
//	lcdPrintf("Touch centre of cross");
//}

static bool GetPointRaw(uint16_t* x, uint16_t* y)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b090      	sub	sp, #64	@ 0x40
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
	uint16_t x_raw;
	uint16_t y_raw;
	uint16_t databuffer[2][MW_HAL_TOUCH_READ_POINTS_COUNT];
	uint8_t touch_count;

	if (!TouchIsTouched())
 8005e66:	f000 f921 	bl	80060ac <TouchIsTouched>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f083 0301 	eor.w	r3, r3, #1
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <GetPointRaw+0x1e>
	{
		return false;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e111      	b.n	800609e <GetPointRaw+0x242>
	}

	// get set of readings
	CS_ON;
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e80:	4889      	ldr	r0, [pc, #548]	@ (80060a8 <GetPointRaw+0x24c>)
 8005e82:	f000 fdb5 	bl	80069f0 <HAL_GPIO_WritePin>
	touch_count = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	do
	{
		SpiTransfer(COMMAND_READ_X);
 8005e8c:	20d0      	movs	r0, #208	@ 0xd0
 8005e8e:	f7ff ffcf 	bl	8005e30 <SpiTransfer>
		x_raw = (uint16_t)SpiTransfer(0U) << 8;
 8005e92:	2000      	movs	r0, #0
 8005e94:	f7ff ffcc 	bl	8005e30 <SpiTransfer>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	877b      	strh	r3, [r7, #58]	@ 0x3a
		x_raw |= (uint16_t)SpiTransfer(0U);
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	f7ff ffc6 	bl	8005e30 <SpiTransfer>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	877b      	strh	r3, [r7, #58]	@ 0x3a
		x_raw >>= 3;
 8005eae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005eb0:	08db      	lsrs	r3, r3, #3
 8005eb2:	877b      	strh	r3, [r7, #58]	@ 0x3a

		SpiTransfer(COMMAND_READ_Y);
 8005eb4:	2090      	movs	r0, #144	@ 0x90
 8005eb6:	f7ff ffbb 	bl	8005e30 <SpiTransfer>
		y_raw = (uint16_t)SpiTransfer(0U) << 8;
 8005eba:	2000      	movs	r0, #0
 8005ebc:	f7ff ffb8 	bl	8005e30 <SpiTransfer>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	873b      	strh	r3, [r7, #56]	@ 0x38
		y_raw |= (uint16_t)SpiTransfer(0U);
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f7ff ffb2 	bl	8005e30 <SpiTransfer>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	873b      	strh	r3, [r7, #56]	@ 0x38
		y_raw >>= 3;
 8005ed6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005ed8:	08db      	lsrs	r3, r3, #3
 8005eda:	873b      	strh	r3, [r7, #56]	@ 0x38

		databuffer[0][touch_count] = x_raw;
 8005edc:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	3340      	adds	r3, #64	@ 0x40
 8005ee4:	443b      	add	r3, r7
 8005ee6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005ee8:	f823 2c34 	strh.w	r2, [r3, #-52]
		databuffer[1][touch_count] = y_raw;
 8005eec:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005ef0:	330a      	adds	r3, #10
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	3340      	adds	r3, #64	@ 0x40
 8005ef6:	443b      	add	r3, r7
 8005ef8:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8005efa:	f823 2c34 	strh.w	r2, [r3, #-52]
		touch_count++;
 8005efe:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005f02:	3301      	adds	r3, #1
 8005f04:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	}
	while (TouchIsTouched() == true && touch_count < MW_HAL_TOUCH_READ_POINTS_COUNT);
 8005f08:	f000 f8d0 	bl	80060ac <TouchIsTouched>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <GetPointRaw+0xbe>
 8005f12:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005f16:	2b09      	cmp	r3, #9
 8005f18:	d9b8      	bls.n	8005e8c <GetPointRaw+0x30>
	CS_OFF;
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f20:	4861      	ldr	r0, [pc, #388]	@ (80060a8 <GetPointRaw+0x24c>)
 8005f22:	f000 fd65 	bl	80069f0 <HAL_GPIO_WritePin>

	// check that the touch was held down during all the readings
	if (touch_count != MW_HAL_TOUCH_READ_POINTS_COUNT)
 8005f26:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005f2a:	2b0a      	cmp	r3, #10
 8005f2c:	d001      	beq.n	8005f32 <GetPointRaw+0xd6>
	{
		return (false);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e0b5      	b.n	800609e <GetPointRaw+0x242>
	}

	// sort the x readings
	do
	{
		sorted = true;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005f3e:	e039      	b.n	8005fb4 <GetPointRaw+0x158>
		{
			if(databuffer[0][i] > databuffer[0][i + 1U])
 8005f40:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	3340      	adds	r3, #64	@ 0x40
 8005f48:	443b      	add	r3, r7
 8005f4a:	f833 2c34 	ldrh.w	r2, [r3, #-52]
 8005f4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005f52:	3301      	adds	r3, #1
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	3340      	adds	r3, #64	@ 0x40
 8005f58:	443b      	add	r3, r7
 8005f5a:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d923      	bls.n	8005faa <GetPointRaw+0x14e>
			{
				swap_value = databuffer[0][i + 1U];
 8005f62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005f66:	3301      	adds	r3, #1
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	3340      	adds	r3, #64	@ 0x40
 8005f6c:	443b      	add	r3, r7
 8005f6e:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8005f72:	86fb      	strh	r3, [r7, #54]	@ 0x36
				databuffer[0][i + 1U] = databuffer[0][i];
 8005f74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005f78:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005f7c:	3201      	adds	r2, #1
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	3340      	adds	r3, #64	@ 0x40
 8005f82:	443b      	add	r3, r7
 8005f84:	f833 1c34 	ldrh.w	r1, [r3, #-52]
 8005f88:	0053      	lsls	r3, r2, #1
 8005f8a:	3340      	adds	r3, #64	@ 0x40
 8005f8c:	443b      	add	r3, r7
 8005f8e:	460a      	mov	r2, r1
 8005f90:	f823 2c34 	strh.w	r2, [r3, #-52]
				databuffer[0][i] = swap_value;
 8005f94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	3340      	adds	r3, #64	@ 0x40
 8005f9c:	443b      	add	r3, r7
 8005f9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005fa0:	f823 2c34 	strh.w	r2, [r3, #-52]
				sorted = false;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8005faa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005fae:	3301      	adds	r3, #1
 8005fb0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005fb4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005fb8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d3be      	bcc.n	8005f40 <GetPointRaw+0xe4>
			}
		}
	}
	while (!sorted);
 8005fc2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005fc6:	f083 0301 	eor.w	r3, r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1b0      	bne.n	8005f32 <GetPointRaw+0xd6>

	// sort the y readings
	do
	{
		sorted = true;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005fdc:	e040      	b.n	8006060 <GetPointRaw+0x204>
		{
			if (databuffer[1][i] > databuffer[1][i + 1U])
 8005fde:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005fe2:	330a      	adds	r3, #10
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	3340      	adds	r3, #64	@ 0x40
 8005fe8:	443b      	add	r3, r7
 8005fea:	f833 2c34 	ldrh.w	r2, [r3, #-52]
 8005fee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	330a      	adds	r3, #10
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	3340      	adds	r3, #64	@ 0x40
 8005ffa:	443b      	add	r3, r7
 8005ffc:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8006000:	429a      	cmp	r2, r3
 8006002:	d928      	bls.n	8006056 <GetPointRaw+0x1fa>
			{
				swap_value = databuffer[1][i + 1U];
 8006004:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006008:	3301      	adds	r3, #1
 800600a:	330a      	adds	r3, #10
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	3340      	adds	r3, #64	@ 0x40
 8006010:	443b      	add	r3, r7
 8006012:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8006016:	86fb      	strh	r3, [r7, #54]	@ 0x36
				databuffer[1][i + 1U] = databuffer[1][i];
 8006018:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800601c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8006020:	3201      	adds	r2, #1
 8006022:	330a      	adds	r3, #10
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	3340      	adds	r3, #64	@ 0x40
 8006028:	443b      	add	r3, r7
 800602a:	f833 1c34 	ldrh.w	r1, [r3, #-52]
 800602e:	f102 030a 	add.w	r3, r2, #10
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	3340      	adds	r3, #64	@ 0x40
 8006036:	443b      	add	r3, r7
 8006038:	460a      	mov	r2, r1
 800603a:	f823 2c34 	strh.w	r2, [r3, #-52]
				databuffer[1][i] = swap_value;
 800603e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006042:	330a      	adds	r3, #10
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	3340      	adds	r3, #64	@ 0x40
 8006048:	443b      	add	r3, r7
 800604a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800604c:	f823 2c34 	strh.w	r2, [r3, #-52]
				sorted = false;
 8006050:	2300      	movs	r3, #0
 8006052:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8006056:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800605a:	3301      	adds	r3, #1
 800605c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006060:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8006064:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8006068:	3b01      	subs	r3, #1
 800606a:	429a      	cmp	r2, r3
 800606c:	d3b7      	bcc.n	8005fde <GetPointRaw+0x182>
			}
		}
	}
	while (!sorted);
 800606e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006072:	f083 0301 	eor.w	r3, r3, #1
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1a9      	bne.n	8005fd0 <GetPointRaw+0x174>

	// take averaged middle 2 readings
	*x = (databuffer[0][4] + databuffer[0][5]) / 2U;
 800607c:	8abb      	ldrh	r3, [r7, #20]
 800607e:	461a      	mov	r2, r3
 8006080:	8afb      	ldrh	r3, [r7, #22]
 8006082:	4413      	add	r3, r2
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	801a      	strh	r2, [r3, #0]
	*y = (databuffer[1][4] + databuffer[1][5]) / 2U;
 800608c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800608e:	461a      	mov	r2, r3
 8006090:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006092:	4413      	add	r3, r2
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	801a      	strh	r2, [r3, #0]

	return (true);
 800609c:	2301      	movs	r3, #1
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3740      	adds	r7, #64	@ 0x40
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	40020400 	.word	0x40020400

080060ac <TouchIsTouched>:

bool TouchIsTouched(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
	GPIO_PinState pin_state = HAL_GPIO_ReadPin(TOUCH_IRQ_PORT, TOUCH_IRQ_PIN);
 80060b2:	2120      	movs	r1, #32
 80060b4:	4807      	ldr	r0, [pc, #28]	@ (80060d4 <TouchIsTouched+0x28>)
 80060b6:	f000 fc83 	bl	80069c0 <HAL_GPIO_ReadPin>
 80060ba:	4603      	mov	r3, r0
 80060bc:	71fb      	strb	r3, [r7, #7]
	return pin_state == GPIO_PIN_RESET;
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40020800 	.word	0x40020800

080060d8 <TouchGetCalibratedPoint>:

bool TouchGetCalibratedPoint(int16_t* x, int16_t* y)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
	POINT_T display_point;
	uint16_t raw_x;
	uint16_t raw_y;

	// get raw reading
	if (GetPointRaw(&raw_x, &raw_y) == false)
 80060e2:	f107 020c 	add.w	r2, r7, #12
 80060e6:	f107 030e 	add.w	r3, r7, #14
 80060ea:	4611      	mov	r1, r2
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff feb5 	bl	8005e5c <GetPointRaw>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f083 0301 	eor.w	r3, r3, #1
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <TouchGetCalibratedPoint+0x2a>
	{
		return false;
 80060fe:	2300      	movs	r3, #0
 8006100:	e02a      	b.n	8006158 <TouchGetCalibratedPoint+0x80>
	}

	raw_point.x = (INT_32)raw_x;
 8006102:	89fb      	ldrh	r3, [r7, #14]
 8006104:	61bb      	str	r3, [r7, #24]
	raw_point.y = (INT_32)raw_y;
 8006106:	89bb      	ldrh	r3, [r7, #12]
 8006108:	61fb      	str	r3, [r7, #28]

	// apply calibration matrix
	(void)getDisplayPoint(&display_point, &raw_point, &matrix);
 800610a:	f107 0118 	add.w	r1, r7, #24
 800610e:	f107 0310 	add.w	r3, r7, #16
 8006112:	4a13      	ldr	r2, [pc, #76]	@ (8006160 <TouchGetCalibratedPoint+0x88>)
 8006114:	4618      	mov	r0, r3
 8006116:	f7fc f92a 	bl	800236e <getDisplayPoint>

	// range check results
	if (display_point.x > 239)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2bef      	cmp	r3, #239	@ 0xef
 800611e:	dd01      	ble.n	8006124 <TouchGetCalibratedPoint+0x4c>
	{
		display_point.x = 239;
 8006120:	23ef      	movs	r3, #239	@ 0xef
 8006122:	613b      	str	r3, [r7, #16]
	}
	if (display_point.y > 319)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800612a:	db02      	blt.n	8006132 <TouchGetCalibratedPoint+0x5a>
	{
		display_point.y = 319;
 800612c:	f240 133f 	movw	r3, #319	@ 0x13f
 8006130:	617b      	str	r3, [r7, #20]
	}

	if (display_point.x < 0)
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	da01      	bge.n	800613c <TouchGetCalibratedPoint+0x64>
	{
		display_point.x = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	613b      	str	r3, [r7, #16]
	}
	if (display_point.y < 0)
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2b00      	cmp	r3, #0
 8006140:	da01      	bge.n	8006146 <TouchGetCalibratedPoint+0x6e>
	{
		display_point.y = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
	}

	*x = (int16_t)display_point.x;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	b21a      	sxth	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)display_point.y;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	b21a      	sxth	r2, r3
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	801a      	strh	r2, [r3, #0]

	return true;
 8006156:	2301      	movs	r3, #1
}
 8006158:	4618      	mov	r0, r3
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20000c94 	.word	0x20000c94

08006164 <TouchCalibrate>:

void TouchCalibrate(void)
{
 8006164:	b5b0      	push	{r4, r5, r7, lr}
 8006166:	b08c      	sub	sp, #48	@ 0x30
 8006168:	af00      	add	r7, sp, #0
//	uint16_t x;
//	uint16_t y;
	POINT_T raw_points[3];
	POINT_T display_points[3] = {{40, 40}, {200, 40}, {200, 280}};
 800616a:	4b13      	ldr	r3, [pc, #76]	@ (80061b8 <TouchCalibrate+0x54>)
 800616c:	463c      	mov	r4, r7
 800616e:	461d      	mov	r5, r3
 8006170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006174:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006178:	e884 0003 	stmia.w	r4, {r0, r1}

	raw_points[0].x = 2970;
 800617c:	f640 339a 	movw	r3, #2970	@ 0xb9a
 8006180:	61bb      	str	r3, [r7, #24]
	raw_points[0].y = 670;
 8006182:	f240 239e 	movw	r3, #670	@ 0x29e
 8006186:	61fb      	str	r3, [r7, #28]



    /* second point */

	raw_points[1].x = 865;
 8006188:	f240 3361 	movw	r3, #865	@ 0x361
 800618c:	623b      	str	r3, [r7, #32]
	raw_points[1].y = 711;
 800618e:	f240 23c7 	movw	r3, #711	@ 0x2c7
 8006192:	627b      	str	r3, [r7, #36]	@ 0x24




	raw_points[2].x = 789;
 8006194:	f240 3315 	movw	r3, #789	@ 0x315
 8006198:	62bb      	str	r3, [r7, #40]	@ 0x28
	raw_points[2].y = 3239;
 800619a:	f640 43a7 	movw	r3, #3239	@ 0xca7
 800619e:	62fb      	str	r3, [r7, #44]	@ 0x2c



	(void)setCalibrationMatrix(display_points, raw_points, &matrix);
 80061a0:	f107 0118 	add.w	r1, r7, #24
 80061a4:	463b      	mov	r3, r7
 80061a6:	4a05      	ldr	r2, [pc, #20]	@ (80061bc <TouchCalibrate+0x58>)
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fb ffa2 	bl	80020f2 <setCalibrationMatrix>
}
 80061ae:	bf00      	nop
 80061b0:	3730      	adds	r7, #48	@ 0x30
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bdb0      	pop	{r4, r5, r7, pc}
 80061b6:	bf00      	nop
 80061b8:	0800c7dc 	.word	0x0800c7dc
 80061bc:	20000c94 	.word	0x20000c94

080061c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80061c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80061f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80061c4:	f7ff fe22 	bl	8005e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80061c8:	480c      	ldr	r0, [pc, #48]	@ (80061fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80061ca:	490d      	ldr	r1, [pc, #52]	@ (8006200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80061cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80061ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061d0:	e002      	b.n	80061d8 <LoopCopyDataInit>

080061d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061d6:	3304      	adds	r3, #4

080061d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061dc:	d3f9      	bcc.n	80061d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061de:	4a0a      	ldr	r2, [pc, #40]	@ (8006208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80061e0:	4c0a      	ldr	r4, [pc, #40]	@ (800620c <LoopFillZerobss+0x22>)
  movs r3, #0
 80061e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061e4:	e001      	b.n	80061ea <LoopFillZerobss>

080061e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061e8:	3204      	adds	r2, #4

080061ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061ec:	d3fb      	bcc.n	80061e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80061ee:	f003 fcf3 	bl	8009bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061f2:	f7fe fff9 	bl	80051e8 <main>
  bx  lr    
 80061f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80061f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80061fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006200:	20000a18 	.word	0x20000a18
  ldr r2, =_sidata
 8006204:	080181dc 	.word	0x080181dc
  ldr r2, =_sbss
 8006208:	20000a18 	.word	0x20000a18
  ldr r4, =_ebss
 800620c:	20000e00 	.word	0x20000e00

08006210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006210:	e7fe      	b.n	8006210 <ADC_IRQHandler>
	...

08006214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006218:	4b0e      	ldr	r3, [pc, #56]	@ (8006254 <HAL_Init+0x40>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a0d      	ldr	r2, [pc, #52]	@ (8006254 <HAL_Init+0x40>)
 800621e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006224:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <HAL_Init+0x40>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a0a      	ldr	r2, [pc, #40]	@ (8006254 <HAL_Init+0x40>)
 800622a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800622e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006230:	4b08      	ldr	r3, [pc, #32]	@ (8006254 <HAL_Init+0x40>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a07      	ldr	r2, [pc, #28]	@ (8006254 <HAL_Init+0x40>)
 8006236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800623a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800623c:	2003      	movs	r0, #3
 800623e:	f000 f94f 	bl	80064e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006242:	200f      	movs	r0, #15
 8006244:	f000 f808 	bl	8006258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006248:	f7ff fbca 	bl	80059e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40023c00 	.word	0x40023c00

08006258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006260:	4b12      	ldr	r3, [pc, #72]	@ (80062ac <HAL_InitTick+0x54>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4b12      	ldr	r3, [pc, #72]	@ (80062b0 <HAL_InitTick+0x58>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	4619      	mov	r1, r3
 800626a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800626e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006272:	fbb2 f3f3 	udiv	r3, r2, r3
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f967 	bl	800654a <HAL_SYSTICK_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e00e      	b.n	80062a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b0f      	cmp	r3, #15
 800628a:	d80a      	bhi.n	80062a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800628c:	2200      	movs	r2, #0
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	f000 f92f 	bl	80064f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006298:	4a06      	ldr	r2, [pc, #24]	@ (80062b4 <HAL_InitTick+0x5c>)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	e000      	b.n	80062a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000844 	.word	0x20000844
 80062b0:	2000084c 	.word	0x2000084c
 80062b4:	20000848 	.word	0x20000848

080062b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062bc:	4b06      	ldr	r3, [pc, #24]	@ (80062d8 <HAL_IncTick+0x20>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	4b06      	ldr	r3, [pc, #24]	@ (80062dc <HAL_IncTick+0x24>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4413      	add	r3, r2
 80062c8:	4a04      	ldr	r2, [pc, #16]	@ (80062dc <HAL_IncTick+0x24>)
 80062ca:	6013      	str	r3, [r2, #0]
}
 80062cc:	bf00      	nop
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	2000084c 	.word	0x2000084c
 80062dc:	20000cb0 	.word	0x20000cb0

080062e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  return uwTick;
 80062e4:	4b03      	ldr	r3, [pc, #12]	@ (80062f4 <HAL_GetTick+0x14>)
 80062e6:	681b      	ldr	r3, [r3, #0]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000cb0 	.word	0x20000cb0

080062f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006300:	f7ff ffee 	bl	80062e0 <HAL_GetTick>
 8006304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006310:	d005      	beq.n	800631e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006312:	4b0a      	ldr	r3, [pc, #40]	@ (800633c <HAL_Delay+0x44>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800631e:	bf00      	nop
 8006320:	f7ff ffde 	bl	80062e0 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	429a      	cmp	r2, r3
 800632e:	d8f7      	bhi.n	8006320 <HAL_Delay+0x28>
  {
  }
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	2000084c 	.word	0x2000084c

08006340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006350:	4b0c      	ldr	r3, [pc, #48]	@ (8006384 <__NVIC_SetPriorityGrouping+0x44>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800635c:	4013      	ands	r3, r2
 800635e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800636c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006372:	4a04      	ldr	r2, [pc, #16]	@ (8006384 <__NVIC_SetPriorityGrouping+0x44>)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	60d3      	str	r3, [r2, #12]
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	e000ed00 	.word	0xe000ed00

08006388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800638c:	4b04      	ldr	r3, [pc, #16]	@ (80063a0 <__NVIC_GetPriorityGrouping+0x18>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	0a1b      	lsrs	r3, r3, #8
 8006392:	f003 0307 	and.w	r3, r3, #7
}
 8006396:	4618      	mov	r0, r3
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	e000ed00 	.word	0xe000ed00

080063a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	4603      	mov	r3, r0
 80063ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	db0b      	blt.n	80063ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	f003 021f 	and.w	r2, r3, #31
 80063bc:	4907      	ldr	r1, [pc, #28]	@ (80063dc <__NVIC_EnableIRQ+0x38>)
 80063be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	2001      	movs	r0, #1
 80063c6:	fa00 f202 	lsl.w	r2, r0, r2
 80063ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	e000e100 	.word	0xe000e100

080063e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	6039      	str	r1, [r7, #0]
 80063ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	db0a      	blt.n	800640a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	490c      	ldr	r1, [pc, #48]	@ (800642c <__NVIC_SetPriority+0x4c>)
 80063fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063fe:	0112      	lsls	r2, r2, #4
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	440b      	add	r3, r1
 8006404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006408:	e00a      	b.n	8006420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	b2da      	uxtb	r2, r3
 800640e:	4908      	ldr	r1, [pc, #32]	@ (8006430 <__NVIC_SetPriority+0x50>)
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	3b04      	subs	r3, #4
 8006418:	0112      	lsls	r2, r2, #4
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	440b      	add	r3, r1
 800641e:	761a      	strb	r2, [r3, #24]
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	e000e100 	.word	0xe000e100
 8006430:	e000ed00 	.word	0xe000ed00

08006434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006434:	b480      	push	{r7}
 8006436:	b089      	sub	sp, #36	@ 0x24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f1c3 0307 	rsb	r3, r3, #7
 800644e:	2b04      	cmp	r3, #4
 8006450:	bf28      	it	cs
 8006452:	2304      	movcs	r3, #4
 8006454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	3304      	adds	r3, #4
 800645a:	2b06      	cmp	r3, #6
 800645c:	d902      	bls.n	8006464 <NVIC_EncodePriority+0x30>
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	3b03      	subs	r3, #3
 8006462:	e000      	b.n	8006466 <NVIC_EncodePriority+0x32>
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006468:	f04f 32ff 	mov.w	r2, #4294967295
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	43da      	mvns	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	401a      	ands	r2, r3
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800647c:	f04f 31ff 	mov.w	r1, #4294967295
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	fa01 f303 	lsl.w	r3, r1, r3
 8006486:	43d9      	mvns	r1, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800648c:	4313      	orrs	r3, r2
         );
}
 800648e:	4618      	mov	r0, r3
 8006490:	3724      	adds	r7, #36	@ 0x24
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
	...

0800649c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064ac:	d301      	bcc.n	80064b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064ae:	2301      	movs	r3, #1
 80064b0:	e00f      	b.n	80064d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064b2:	4a0a      	ldr	r2, [pc, #40]	@ (80064dc <SysTick_Config+0x40>)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064ba:	210f      	movs	r1, #15
 80064bc:	f04f 30ff 	mov.w	r0, #4294967295
 80064c0:	f7ff ff8e 	bl	80063e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064c4:	4b05      	ldr	r3, [pc, #20]	@ (80064dc <SysTick_Config+0x40>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064ca:	4b04      	ldr	r3, [pc, #16]	@ (80064dc <SysTick_Config+0x40>)
 80064cc:	2207      	movs	r2, #7
 80064ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	e000e010 	.word	0xe000e010

080064e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff ff29 	bl	8006340 <__NVIC_SetPriorityGrouping>
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b086      	sub	sp, #24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	4603      	mov	r3, r0
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	607a      	str	r2, [r7, #4]
 8006502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006504:	2300      	movs	r3, #0
 8006506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006508:	f7ff ff3e 	bl	8006388 <__NVIC_GetPriorityGrouping>
 800650c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	6978      	ldr	r0, [r7, #20]
 8006514:	f7ff ff8e 	bl	8006434 <NVIC_EncodePriority>
 8006518:	4602      	mov	r2, r0
 800651a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800651e:	4611      	mov	r1, r2
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff ff5d 	bl	80063e0 <__NVIC_SetPriority>
}
 8006526:	bf00      	nop
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	4603      	mov	r3, r0
 8006536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff ff31 	bl	80063a4 <__NVIC_EnableIRQ>
}
 8006542:	bf00      	nop
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff ffa2 	bl	800649c <SysTick_Config>
 8006558:	4603      	mov	r3, r0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006570:	f7ff feb6 	bl	80062e0 <HAL_GetTick>
 8006574:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d008      	beq.n	8006594 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2280      	movs	r2, #128	@ 0x80
 8006586:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e052      	b.n	800663a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0216 	bic.w	r2, r2, #22
 80065a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695a      	ldr	r2, [r3, #20]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d103      	bne.n	80065c4 <HAL_DMA_Abort+0x62>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0208 	bic.w	r2, r2, #8
 80065d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0201 	bic.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065e4:	e013      	b.n	800660e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065e6:	f7ff fe7b 	bl	80062e0 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b05      	cmp	r3, #5
 80065f2:	d90c      	bls.n	800660e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2203      	movs	r2, #3
 80065fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e015      	b.n	800663a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e4      	bne.n	80065e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006620:	223f      	movs	r2, #63	@ 0x3f
 8006622:	409a      	lsls	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d004      	beq.n	8006660 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2280      	movs	r2, #128	@ 0x80
 800665a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e00c      	b.n	800667a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2205      	movs	r2, #5
 8006664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0201 	bic.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006688:	b480      	push	{r7}
 800668a:	b089      	sub	sp, #36	@ 0x24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800669a:	2300      	movs	r3, #0
 800669c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800669e:	2300      	movs	r3, #0
 80066a0:	61fb      	str	r3, [r7, #28]
 80066a2:	e16b      	b.n	800697c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80066a4:	2201      	movs	r2, #1
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4013      	ands	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	429a      	cmp	r2, r3
 80066be:	f040 815a 	bne.w	8006976 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f003 0303 	and.w	r3, r3, #3
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d005      	beq.n	80066da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d130      	bne.n	800673c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	2203      	movs	r2, #3
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43db      	mvns	r3, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	4013      	ands	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	4313      	orrs	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006710:	2201      	movs	r2, #1
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	43db      	mvns	r3, r3
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	4013      	ands	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	f003 0201 	and.w	r2, r3, #1
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	fa02 f303 	lsl.w	r3, r2, r3
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	4313      	orrs	r3, r2
 8006734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	2b03      	cmp	r3, #3
 8006746:	d017      	beq.n	8006778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	2203      	movs	r2, #3
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	43db      	mvns	r3, r3
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	4013      	ands	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	4313      	orrs	r3, r2
 8006770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f003 0303 	and.w	r3, r3, #3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d123      	bne.n	80067cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	08da      	lsrs	r2, r3, #3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3208      	adds	r2, #8
 800678c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	220f      	movs	r2, #15
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	43db      	mvns	r3, r3
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	4013      	ands	r3, r2
 80067a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	08da      	lsrs	r2, r3, #3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3208      	adds	r2, #8
 80067c6:	69b9      	ldr	r1, [r7, #24]
 80067c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	2203      	movs	r2, #3
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	43db      	mvns	r3, r3
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4013      	ands	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f003 0203 	and.w	r2, r3, #3
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	fa02 f303 	lsl.w	r3, r2, r3
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 80b4 	beq.w	8006976 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	4b60      	ldr	r3, [pc, #384]	@ (8006994 <HAL_GPIO_Init+0x30c>)
 8006814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006816:	4a5f      	ldr	r2, [pc, #380]	@ (8006994 <HAL_GPIO_Init+0x30c>)
 8006818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800681c:	6453      	str	r3, [r2, #68]	@ 0x44
 800681e:	4b5d      	ldr	r3, [pc, #372]	@ (8006994 <HAL_GPIO_Init+0x30c>)
 8006820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800682a:	4a5b      	ldr	r2, [pc, #364]	@ (8006998 <HAL_GPIO_Init+0x310>)
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	089b      	lsrs	r3, r3, #2
 8006830:	3302      	adds	r3, #2
 8006832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	220f      	movs	r2, #15
 8006842:	fa02 f303 	lsl.w	r3, r2, r3
 8006846:	43db      	mvns	r3, r3
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	4013      	ands	r3, r2
 800684c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a52      	ldr	r2, [pc, #328]	@ (800699c <HAL_GPIO_Init+0x314>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d02b      	beq.n	80068ae <HAL_GPIO_Init+0x226>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a51      	ldr	r2, [pc, #324]	@ (80069a0 <HAL_GPIO_Init+0x318>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d025      	beq.n	80068aa <HAL_GPIO_Init+0x222>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a50      	ldr	r2, [pc, #320]	@ (80069a4 <HAL_GPIO_Init+0x31c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d01f      	beq.n	80068a6 <HAL_GPIO_Init+0x21e>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a4f      	ldr	r2, [pc, #316]	@ (80069a8 <HAL_GPIO_Init+0x320>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d019      	beq.n	80068a2 <HAL_GPIO_Init+0x21a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a4e      	ldr	r2, [pc, #312]	@ (80069ac <HAL_GPIO_Init+0x324>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <HAL_GPIO_Init+0x216>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a4d      	ldr	r2, [pc, #308]	@ (80069b0 <HAL_GPIO_Init+0x328>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00d      	beq.n	800689a <HAL_GPIO_Init+0x212>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a4c      	ldr	r2, [pc, #304]	@ (80069b4 <HAL_GPIO_Init+0x32c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d007      	beq.n	8006896 <HAL_GPIO_Init+0x20e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a4b      	ldr	r2, [pc, #300]	@ (80069b8 <HAL_GPIO_Init+0x330>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d101      	bne.n	8006892 <HAL_GPIO_Init+0x20a>
 800688e:	2307      	movs	r3, #7
 8006890:	e00e      	b.n	80068b0 <HAL_GPIO_Init+0x228>
 8006892:	2308      	movs	r3, #8
 8006894:	e00c      	b.n	80068b0 <HAL_GPIO_Init+0x228>
 8006896:	2306      	movs	r3, #6
 8006898:	e00a      	b.n	80068b0 <HAL_GPIO_Init+0x228>
 800689a:	2305      	movs	r3, #5
 800689c:	e008      	b.n	80068b0 <HAL_GPIO_Init+0x228>
 800689e:	2304      	movs	r3, #4
 80068a0:	e006      	b.n	80068b0 <HAL_GPIO_Init+0x228>
 80068a2:	2303      	movs	r3, #3
 80068a4:	e004      	b.n	80068b0 <HAL_GPIO_Init+0x228>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e002      	b.n	80068b0 <HAL_GPIO_Init+0x228>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <HAL_GPIO_Init+0x228>
 80068ae:	2300      	movs	r3, #0
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	f002 0203 	and.w	r2, r2, #3
 80068b6:	0092      	lsls	r2, r2, #2
 80068b8:	4093      	lsls	r3, r2
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	4313      	orrs	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068c0:	4935      	ldr	r1, [pc, #212]	@ (8006998 <HAL_GPIO_Init+0x310>)
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	089b      	lsrs	r3, r3, #2
 80068c6:	3302      	adds	r3, #2
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068ce:	4b3b      	ldr	r3, [pc, #236]	@ (80069bc <HAL_GPIO_Init+0x334>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	43db      	mvns	r3, r3
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	4013      	ands	r3, r2
 80068dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068f2:	4a32      	ldr	r2, [pc, #200]	@ (80069bc <HAL_GPIO_Init+0x334>)
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068f8:	4b30      	ldr	r3, [pc, #192]	@ (80069bc <HAL_GPIO_Init+0x334>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	43db      	mvns	r3, r3
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	4013      	ands	r3, r2
 8006906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800691c:	4a27      	ldr	r2, [pc, #156]	@ (80069bc <HAL_GPIO_Init+0x334>)
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006922:	4b26      	ldr	r3, [pc, #152]	@ (80069bc <HAL_GPIO_Init+0x334>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	43db      	mvns	r3, r3
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	4013      	ands	r3, r2
 8006930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006946:	4a1d      	ldr	r2, [pc, #116]	@ (80069bc <HAL_GPIO_Init+0x334>)
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800694c:	4b1b      	ldr	r3, [pc, #108]	@ (80069bc <HAL_GPIO_Init+0x334>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	43db      	mvns	r3, r3
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	4013      	ands	r3, r2
 800695a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006970:	4a12      	ldr	r2, [pc, #72]	@ (80069bc <HAL_GPIO_Init+0x334>)
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	3301      	adds	r3, #1
 800697a:	61fb      	str	r3, [r7, #28]
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	2b0f      	cmp	r3, #15
 8006980:	f67f ae90 	bls.w	80066a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	3724      	adds	r7, #36	@ 0x24
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	40023800 	.word	0x40023800
 8006998:	40013800 	.word	0x40013800
 800699c:	40020000 	.word	0x40020000
 80069a0:	40020400 	.word	0x40020400
 80069a4:	40020800 	.word	0x40020800
 80069a8:	40020c00 	.word	0x40020c00
 80069ac:	40021000 	.word	0x40021000
 80069b0:	40021400 	.word	0x40021400
 80069b4:	40021800 	.word	0x40021800
 80069b8:	40021c00 	.word	0x40021c00
 80069bc:	40013c00 	.word	0x40013c00

080069c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	887b      	ldrh	r3, [r7, #2]
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
 80069dc:	e001      	b.n	80069e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069de:	2300      	movs	r3, #0
 80069e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	807b      	strh	r3, [r7, #2]
 80069fc:	4613      	mov	r3, r2
 80069fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a00:	787b      	ldrb	r3, [r7, #1]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a06:	887a      	ldrh	r2, [r7, #2]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a0c:	e003      	b.n	8006a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a0e:	887b      	ldrh	r3, [r7, #2]
 8006a10:	041a      	lsls	r2, r3, #16
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	619a      	str	r2, [r3, #24]
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e267      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d075      	beq.n	8006b2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a42:	4b88      	ldr	r3, [pc, #544]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 030c 	and.w	r3, r3, #12
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d00c      	beq.n	8006a68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a4e:	4b85      	ldr	r3, [pc, #532]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d112      	bne.n	8006a80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a5a:	4b82      	ldr	r3, [pc, #520]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a66:	d10b      	bne.n	8006a80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a68:	4b7e      	ldr	r3, [pc, #504]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d05b      	beq.n	8006b2c <HAL_RCC_OscConfig+0x108>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d157      	bne.n	8006b2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e242      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a88:	d106      	bne.n	8006a98 <HAL_RCC_OscConfig+0x74>
 8006a8a:	4b76      	ldr	r3, [pc, #472]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a75      	ldr	r2, [pc, #468]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e01d      	b.n	8006ad4 <HAL_RCC_OscConfig+0xb0>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006aa0:	d10c      	bne.n	8006abc <HAL_RCC_OscConfig+0x98>
 8006aa2:	4b70      	ldr	r3, [pc, #448]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a6f      	ldr	r2, [pc, #444]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	4b6d      	ldr	r3, [pc, #436]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a6c      	ldr	r2, [pc, #432]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	e00b      	b.n	8006ad4 <HAL_RCC_OscConfig+0xb0>
 8006abc:	4b69      	ldr	r3, [pc, #420]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a68      	ldr	r2, [pc, #416]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	4b66      	ldr	r3, [pc, #408]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a65      	ldr	r2, [pc, #404]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d013      	beq.n	8006b04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006adc:	f7ff fc00 	bl	80062e0 <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae4:	f7ff fbfc 	bl	80062e0 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b64      	cmp	r3, #100	@ 0x64
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e207      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006af6:	4b5b      	ldr	r3, [pc, #364]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f0      	beq.n	8006ae4 <HAL_RCC_OscConfig+0xc0>
 8006b02:	e014      	b.n	8006b2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b04:	f7ff fbec 	bl	80062e0 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b0c:	f7ff fbe8 	bl	80062e0 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b64      	cmp	r3, #100	@ 0x64
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e1f3      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b1e:	4b51      	ldr	r3, [pc, #324]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f0      	bne.n	8006b0c <HAL_RCC_OscConfig+0xe8>
 8006b2a:	e000      	b.n	8006b2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d063      	beq.n	8006c02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 030c 	and.w	r3, r3, #12
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b46:	4b47      	ldr	r3, [pc, #284]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d11c      	bne.n	8006b8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b52:	4b44      	ldr	r3, [pc, #272]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d116      	bne.n	8006b8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b5e:	4b41      	ldr	r3, [pc, #260]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <HAL_RCC_OscConfig+0x152>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d001      	beq.n	8006b76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e1c7      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b76:	4b3b      	ldr	r3, [pc, #236]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	4937      	ldr	r1, [pc, #220]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b8a:	e03a      	b.n	8006c02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d020      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b94:	4b34      	ldr	r3, [pc, #208]	@ (8006c68 <HAL_RCC_OscConfig+0x244>)
 8006b96:	2201      	movs	r2, #1
 8006b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9a:	f7ff fba1 	bl	80062e0 <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba0:	e008      	b.n	8006bb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba2:	f7ff fb9d 	bl	80062e0 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e1a8      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0f0      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc0:	4b28      	ldr	r3, [pc, #160]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	4925      	ldr	r1, [pc, #148]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	600b      	str	r3, [r1, #0]
 8006bd4:	e015      	b.n	8006c02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bd6:	4b24      	ldr	r3, [pc, #144]	@ (8006c68 <HAL_RCC_OscConfig+0x244>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bdc:	f7ff fb80 	bl	80062e0 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006be4:	f7ff fb7c 	bl	80062e0 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e187      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d036      	beq.n	8006c7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d016      	beq.n	8006c44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c16:	4b15      	ldr	r3, [pc, #84]	@ (8006c6c <HAL_RCC_OscConfig+0x248>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1c:	f7ff fb60 	bl	80062e0 <HAL_GetTick>
 8006c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c24:	f7ff fb5c 	bl	80062e0 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e167      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c36:	4b0b      	ldr	r3, [pc, #44]	@ (8006c64 <HAL_RCC_OscConfig+0x240>)
 8006c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0f0      	beq.n	8006c24 <HAL_RCC_OscConfig+0x200>
 8006c42:	e01b      	b.n	8006c7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c44:	4b09      	ldr	r3, [pc, #36]	@ (8006c6c <HAL_RCC_OscConfig+0x248>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c4a:	f7ff fb49 	bl	80062e0 <HAL_GetTick>
 8006c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c50:	e00e      	b.n	8006c70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c52:	f7ff fb45 	bl	80062e0 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d907      	bls.n	8006c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e150      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
 8006c64:	40023800 	.word	0x40023800
 8006c68:	42470000 	.word	0x42470000
 8006c6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c70:	4b88      	ldr	r3, [pc, #544]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1ea      	bne.n	8006c52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8097 	beq.w	8006db8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c8e:	4b81      	ldr	r3, [pc, #516]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10f      	bne.n	8006cba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60bb      	str	r3, [r7, #8]
 8006c9e:	4b7d      	ldr	r3, [pc, #500]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca2:	4a7c      	ldr	r2, [pc, #496]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006caa:	4b7a      	ldr	r3, [pc, #488]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cb2:	60bb      	str	r3, [r7, #8]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cba:	4b77      	ldr	r3, [pc, #476]	@ (8006e98 <HAL_RCC_OscConfig+0x474>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d118      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cc6:	4b74      	ldr	r3, [pc, #464]	@ (8006e98 <HAL_RCC_OscConfig+0x474>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a73      	ldr	r2, [pc, #460]	@ (8006e98 <HAL_RCC_OscConfig+0x474>)
 8006ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cd2:	f7ff fb05 	bl	80062e0 <HAL_GetTick>
 8006cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cd8:	e008      	b.n	8006cec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cda:	f7ff fb01 	bl	80062e0 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e10c      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cec:	4b6a      	ldr	r3, [pc, #424]	@ (8006e98 <HAL_RCC_OscConfig+0x474>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d106      	bne.n	8006d0e <HAL_RCC_OscConfig+0x2ea>
 8006d00:	4b64      	ldr	r3, [pc, #400]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d04:	4a63      	ldr	r2, [pc, #396]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d0c:	e01c      	b.n	8006d48 <HAL_RCC_OscConfig+0x324>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b05      	cmp	r3, #5
 8006d14:	d10c      	bne.n	8006d30 <HAL_RCC_OscConfig+0x30c>
 8006d16:	4b5f      	ldr	r3, [pc, #380]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d1a:	4a5e      	ldr	r2, [pc, #376]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006d1c:	f043 0304 	orr.w	r3, r3, #4
 8006d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d22:	4b5c      	ldr	r3, [pc, #368]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d26:	4a5b      	ldr	r2, [pc, #364]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006d28:	f043 0301 	orr.w	r3, r3, #1
 8006d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d2e:	e00b      	b.n	8006d48 <HAL_RCC_OscConfig+0x324>
 8006d30:	4b58      	ldr	r3, [pc, #352]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d34:	4a57      	ldr	r2, [pc, #348]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006d36:	f023 0301 	bic.w	r3, r3, #1
 8006d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d3c:	4b55      	ldr	r3, [pc, #340]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d40:	4a54      	ldr	r2, [pc, #336]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006d42:	f023 0304 	bic.w	r3, r3, #4
 8006d46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d015      	beq.n	8006d7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d50:	f7ff fac6 	bl	80062e0 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d56:	e00a      	b.n	8006d6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d58:	f7ff fac2 	bl	80062e0 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e0cb      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d6e:	4b49      	ldr	r3, [pc, #292]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0ee      	beq.n	8006d58 <HAL_RCC_OscConfig+0x334>
 8006d7a:	e014      	b.n	8006da6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d7c:	f7ff fab0 	bl	80062e0 <HAL_GetTick>
 8006d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d82:	e00a      	b.n	8006d9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d84:	f7ff faac 	bl	80062e0 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e0b5      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1ee      	bne.n	8006d84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d105      	bne.n	8006db8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dac:	4b39      	ldr	r3, [pc, #228]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db0:	4a38      	ldr	r2, [pc, #224]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006db6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80a1 	beq.w	8006f04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dc2:	4b34      	ldr	r3, [pc, #208]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 030c 	and.w	r3, r3, #12
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d05c      	beq.n	8006e88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d141      	bne.n	8006e5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dd6:	4b31      	ldr	r3, [pc, #196]	@ (8006e9c <HAL_RCC_OscConfig+0x478>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ddc:	f7ff fa80 	bl	80062e0 <HAL_GetTick>
 8006de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de2:	e008      	b.n	8006df6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de4:	f7ff fa7c 	bl	80062e0 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e087      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006df6:	4b27      	ldr	r3, [pc, #156]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1f0      	bne.n	8006de4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69da      	ldr	r2, [r3, #28]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e10:	019b      	lsls	r3, r3, #6
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e18:	085b      	lsrs	r3, r3, #1
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	041b      	lsls	r3, r3, #16
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e24:	061b      	lsls	r3, r3, #24
 8006e26:	491b      	ldr	r1, [pc, #108]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006e9c <HAL_RCC_OscConfig+0x478>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e32:	f7ff fa55 	bl	80062e0 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e3a:	f7ff fa51 	bl	80062e0 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e05c      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e4c:	4b11      	ldr	r3, [pc, #68]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0f0      	beq.n	8006e3a <HAL_RCC_OscConfig+0x416>
 8006e58:	e054      	b.n	8006f04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e5a:	4b10      	ldr	r3, [pc, #64]	@ (8006e9c <HAL_RCC_OscConfig+0x478>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e60:	f7ff fa3e 	bl	80062e0 <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e68:	f7ff fa3a 	bl	80062e0 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e045      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e7a:	4b06      	ldr	r3, [pc, #24]	@ (8006e94 <HAL_RCC_OscConfig+0x470>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f0      	bne.n	8006e68 <HAL_RCC_OscConfig+0x444>
 8006e86:	e03d      	b.n	8006f04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d107      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e038      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
 8006e94:	40023800 	.word	0x40023800
 8006e98:	40007000 	.word	0x40007000
 8006e9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f10 <HAL_RCC_OscConfig+0x4ec>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d028      	beq.n	8006f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d121      	bne.n	8006f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d11a      	bne.n	8006f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ed6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d111      	bne.n	8006f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee6:	085b      	lsrs	r3, r3, #1
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d107      	bne.n	8006f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d001      	beq.n	8006f04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e000      	b.n	8006f06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	40023800 	.word	0x40023800

08006f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0cc      	b.n	80070c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f28:	4b68      	ldr	r3, [pc, #416]	@ (80070cc <HAL_RCC_ClockConfig+0x1b8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d90c      	bls.n	8006f50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f36:	4b65      	ldr	r3, [pc, #404]	@ (80070cc <HAL_RCC_ClockConfig+0x1b8>)
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f3e:	4b63      	ldr	r3, [pc, #396]	@ (80070cc <HAL_RCC_ClockConfig+0x1b8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d001      	beq.n	8006f50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e0b8      	b.n	80070c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d020      	beq.n	8006f9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f68:	4b59      	ldr	r3, [pc, #356]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	4a58      	ldr	r2, [pc, #352]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006f72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0308 	and.w	r3, r3, #8
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d005      	beq.n	8006f8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f80:	4b53      	ldr	r3, [pc, #332]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	4a52      	ldr	r2, [pc, #328]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006f8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f8c:	4b50      	ldr	r3, [pc, #320]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	494d      	ldr	r1, [pc, #308]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d044      	beq.n	8007034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d107      	bne.n	8006fc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fb2:	4b47      	ldr	r3, [pc, #284]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d119      	bne.n	8006ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e07f      	b.n	80070c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d003      	beq.n	8006fd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d107      	bne.n	8006fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fd2:	4b3f      	ldr	r3, [pc, #252]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d109      	bne.n	8006ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e06f      	b.n	80070c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e067      	b.n	80070c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ff2:	4b37      	ldr	r3, [pc, #220]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f023 0203 	bic.w	r2, r3, #3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	4934      	ldr	r1, [pc, #208]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007000:	4313      	orrs	r3, r2
 8007002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007004:	f7ff f96c 	bl	80062e0 <HAL_GetTick>
 8007008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800700a:	e00a      	b.n	8007022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800700c:	f7ff f968 	bl	80062e0 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800701a:	4293      	cmp	r3, r2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e04f      	b.n	80070c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007022:	4b2b      	ldr	r3, [pc, #172]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 020c 	and.w	r2, r3, #12
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	429a      	cmp	r2, r3
 8007032:	d1eb      	bne.n	800700c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007034:	4b25      	ldr	r3, [pc, #148]	@ (80070cc <HAL_RCC_ClockConfig+0x1b8>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d20c      	bcs.n	800705c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007042:	4b22      	ldr	r3, [pc, #136]	@ (80070cc <HAL_RCC_ClockConfig+0x1b8>)
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800704a:	4b20      	ldr	r3, [pc, #128]	@ (80070cc <HAL_RCC_ClockConfig+0x1b8>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d001      	beq.n	800705c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e032      	b.n	80070c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d008      	beq.n	800707a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007068:	4b19      	ldr	r3, [pc, #100]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	4916      	ldr	r1, [pc, #88]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007076:	4313      	orrs	r3, r2
 8007078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007086:	4b12      	ldr	r3, [pc, #72]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	490e      	ldr	r1, [pc, #56]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007096:	4313      	orrs	r3, r2
 8007098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800709a:	f000 f821 	bl	80070e0 <HAL_RCC_GetSysClockFreq>
 800709e:	4602      	mov	r2, r0
 80070a0:	4b0b      	ldr	r3, [pc, #44]	@ (80070d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	091b      	lsrs	r3, r3, #4
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	490a      	ldr	r1, [pc, #40]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c0>)
 80070ac:	5ccb      	ldrb	r3, [r1, r3]
 80070ae:	fa22 f303 	lsr.w	r3, r2, r3
 80070b2:	4a09      	ldr	r2, [pc, #36]	@ (80070d8 <HAL_RCC_ClockConfig+0x1c4>)
 80070b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80070b6:	4b09      	ldr	r3, [pc, #36]	@ (80070dc <HAL_RCC_ClockConfig+0x1c8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff f8cc 	bl	8006258 <HAL_InitTick>

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	40023c00 	.word	0x40023c00
 80070d0:	40023800 	.word	0x40023800
 80070d4:	08015c54 	.word	0x08015c54
 80070d8:	20000844 	.word	0x20000844
 80070dc:	20000848 	.word	0x20000848

080070e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070e4:	b094      	sub	sp, #80	@ 0x50
 80070e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070f8:	4b79      	ldr	r3, [pc, #484]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f003 030c 	and.w	r3, r3, #12
 8007100:	2b08      	cmp	r3, #8
 8007102:	d00d      	beq.n	8007120 <HAL_RCC_GetSysClockFreq+0x40>
 8007104:	2b08      	cmp	r3, #8
 8007106:	f200 80e1 	bhi.w	80072cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <HAL_RCC_GetSysClockFreq+0x34>
 800710e:	2b04      	cmp	r3, #4
 8007110:	d003      	beq.n	800711a <HAL_RCC_GetSysClockFreq+0x3a>
 8007112:	e0db      	b.n	80072cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007114:	4b73      	ldr	r3, [pc, #460]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007116:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007118:	e0db      	b.n	80072d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800711a:	4b73      	ldr	r3, [pc, #460]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800711c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800711e:	e0d8      	b.n	80072d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007120:	4b6f      	ldr	r3, [pc, #444]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007128:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800712a:	4b6d      	ldr	r3, [pc, #436]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d063      	beq.n	80071fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007136:	4b6a      	ldr	r3, [pc, #424]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	099b      	lsrs	r3, r3, #6
 800713c:	2200      	movs	r2, #0
 800713e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007140:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007148:	633b      	str	r3, [r7, #48]	@ 0x30
 800714a:	2300      	movs	r3, #0
 800714c:	637b      	str	r3, [r7, #52]	@ 0x34
 800714e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007152:	4622      	mov	r2, r4
 8007154:	462b      	mov	r3, r5
 8007156:	f04f 0000 	mov.w	r0, #0
 800715a:	f04f 0100 	mov.w	r1, #0
 800715e:	0159      	lsls	r1, r3, #5
 8007160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007164:	0150      	lsls	r0, r2, #5
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	4621      	mov	r1, r4
 800716c:	1a51      	subs	r1, r2, r1
 800716e:	6139      	str	r1, [r7, #16]
 8007170:	4629      	mov	r1, r5
 8007172:	eb63 0301 	sbc.w	r3, r3, r1
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	f04f 0200 	mov.w	r2, #0
 800717c:	f04f 0300 	mov.w	r3, #0
 8007180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007184:	4659      	mov	r1, fp
 8007186:	018b      	lsls	r3, r1, #6
 8007188:	4651      	mov	r1, sl
 800718a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800718e:	4651      	mov	r1, sl
 8007190:	018a      	lsls	r2, r1, #6
 8007192:	4651      	mov	r1, sl
 8007194:	ebb2 0801 	subs.w	r8, r2, r1
 8007198:	4659      	mov	r1, fp
 800719a:	eb63 0901 	sbc.w	r9, r3, r1
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071b2:	4690      	mov	r8, r2
 80071b4:	4699      	mov	r9, r3
 80071b6:	4623      	mov	r3, r4
 80071b8:	eb18 0303 	adds.w	r3, r8, r3
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	462b      	mov	r3, r5
 80071c0:	eb49 0303 	adc.w	r3, r9, r3
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80071d2:	4629      	mov	r1, r5
 80071d4:	024b      	lsls	r3, r1, #9
 80071d6:	4621      	mov	r1, r4
 80071d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80071dc:	4621      	mov	r1, r4
 80071de:	024a      	lsls	r2, r1, #9
 80071e0:	4610      	mov	r0, r2
 80071e2:	4619      	mov	r1, r3
 80071e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071e6:	2200      	movs	r2, #0
 80071e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071f0:	f7f9 fcf4 	bl	8000bdc <__aeabi_uldivmod>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4613      	mov	r3, r2
 80071fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071fc:	e058      	b.n	80072b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071fe:	4b38      	ldr	r3, [pc, #224]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	099b      	lsrs	r3, r3, #6
 8007204:	2200      	movs	r2, #0
 8007206:	4618      	mov	r0, r3
 8007208:	4611      	mov	r1, r2
 800720a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800720e:	623b      	str	r3, [r7, #32]
 8007210:	2300      	movs	r3, #0
 8007212:	627b      	str	r3, [r7, #36]	@ 0x24
 8007214:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007218:	4642      	mov	r2, r8
 800721a:	464b      	mov	r3, r9
 800721c:	f04f 0000 	mov.w	r0, #0
 8007220:	f04f 0100 	mov.w	r1, #0
 8007224:	0159      	lsls	r1, r3, #5
 8007226:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800722a:	0150      	lsls	r0, r2, #5
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4641      	mov	r1, r8
 8007232:	ebb2 0a01 	subs.w	sl, r2, r1
 8007236:	4649      	mov	r1, r9
 8007238:	eb63 0b01 	sbc.w	fp, r3, r1
 800723c:	f04f 0200 	mov.w	r2, #0
 8007240:	f04f 0300 	mov.w	r3, #0
 8007244:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007248:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800724c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007250:	ebb2 040a 	subs.w	r4, r2, sl
 8007254:	eb63 050b 	sbc.w	r5, r3, fp
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	f04f 0300 	mov.w	r3, #0
 8007260:	00eb      	lsls	r3, r5, #3
 8007262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007266:	00e2      	lsls	r2, r4, #3
 8007268:	4614      	mov	r4, r2
 800726a:	461d      	mov	r5, r3
 800726c:	4643      	mov	r3, r8
 800726e:	18e3      	adds	r3, r4, r3
 8007270:	603b      	str	r3, [r7, #0]
 8007272:	464b      	mov	r3, r9
 8007274:	eb45 0303 	adc.w	r3, r5, r3
 8007278:	607b      	str	r3, [r7, #4]
 800727a:	f04f 0200 	mov.w	r2, #0
 800727e:	f04f 0300 	mov.w	r3, #0
 8007282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007286:	4629      	mov	r1, r5
 8007288:	028b      	lsls	r3, r1, #10
 800728a:	4621      	mov	r1, r4
 800728c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007290:	4621      	mov	r1, r4
 8007292:	028a      	lsls	r2, r1, #10
 8007294:	4610      	mov	r0, r2
 8007296:	4619      	mov	r1, r3
 8007298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800729a:	2200      	movs	r2, #0
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	61fa      	str	r2, [r7, #28]
 80072a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072a4:	f7f9 fc9a 	bl	8000bdc <__aeabi_uldivmod>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4613      	mov	r3, r2
 80072ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80072b0:	4b0b      	ldr	r3, [pc, #44]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	0c1b      	lsrs	r3, r3, #16
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	3301      	adds	r3, #1
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80072c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072ca:	e002      	b.n	80072d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072cc:	4b05      	ldr	r3, [pc, #20]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80072ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3750      	adds	r7, #80	@ 0x50
 80072d8:	46bd      	mov	sp, r7
 80072da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072de:	bf00      	nop
 80072e0:	40023800 	.word	0x40023800
 80072e4:	00f42400 	.word	0x00f42400
 80072e8:	007a1200 	.word	0x007a1200

080072ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072f0:	4b03      	ldr	r3, [pc, #12]	@ (8007300 <HAL_RCC_GetHCLKFreq+0x14>)
 80072f2:	681b      	ldr	r3, [r3, #0]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	20000844 	.word	0x20000844

08007304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007308:	f7ff fff0 	bl	80072ec <HAL_RCC_GetHCLKFreq>
 800730c:	4602      	mov	r2, r0
 800730e:	4b05      	ldr	r3, [pc, #20]	@ (8007324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	0a9b      	lsrs	r3, r3, #10
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	4903      	ldr	r1, [pc, #12]	@ (8007328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800731a:	5ccb      	ldrb	r3, [r1, r3]
 800731c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007320:	4618      	mov	r0, r3
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40023800 	.word	0x40023800
 8007328:	08015c64 	.word	0x08015c64

0800732c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007330:	f7ff ffdc 	bl	80072ec <HAL_RCC_GetHCLKFreq>
 8007334:	4602      	mov	r2, r0
 8007336:	4b05      	ldr	r3, [pc, #20]	@ (800734c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	0b5b      	lsrs	r3, r3, #13
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	4903      	ldr	r1, [pc, #12]	@ (8007350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007342:	5ccb      	ldrb	r3, [r1, r3]
 8007344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007348:	4618      	mov	r0, r3
 800734a:	bd80      	pop	{r7, pc}
 800734c:	40023800 	.word	0x40023800
 8007350:	08015c64 	.word	0x08015c64

08007354 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e07b      	b.n	800745e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736a:	2b00      	cmp	r3, #0
 800736c:	d108      	bne.n	8007380 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007376:	d009      	beq.n	800738c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	61da      	str	r2, [r3, #28]
 800737e:	e005      	b.n	800738c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7fe fb42 	bl	8005a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007410:	ea42 0103 	orr.w	r1, r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007418:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	0c1b      	lsrs	r3, r3, #16
 800742a:	f003 0104 	and.w	r1, r3, #4
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007432:	f003 0210 	and.w	r2, r3, #16
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69da      	ldr	r2, [r3, #28]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800744c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b08a      	sub	sp, #40	@ 0x28
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007474:	2301      	movs	r3, #1
 8007476:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007478:	f7fe ff32 	bl	80062e0 <HAL_GetTick>
 800747c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007484:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800748c:	887b      	ldrh	r3, [r7, #2]
 800748e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007490:	7ffb      	ldrb	r3, [r7, #31]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d00c      	beq.n	80074b0 <HAL_SPI_TransmitReceive+0x4a>
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800749c:	d106      	bne.n	80074ac <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d102      	bne.n	80074ac <HAL_SPI_TransmitReceive+0x46>
 80074a6:	7ffb      	ldrb	r3, [r7, #31]
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d001      	beq.n	80074b0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80074ac:	2302      	movs	r3, #2
 80074ae:	e17f      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <HAL_SPI_TransmitReceive+0x5c>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <HAL_SPI_TransmitReceive+0x5c>
 80074bc:	887b      	ldrh	r3, [r7, #2]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e174      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d101      	bne.n	80074d4 <HAL_SPI_TransmitReceive+0x6e>
 80074d0:	2302      	movs	r3, #2
 80074d2:	e16d      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34a>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d003      	beq.n	80074f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2205      	movs	r2, #5
 80074ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	887a      	ldrh	r2, [r7, #2]
 8007500:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	887a      	ldrh	r2, [r7, #2]
 8007506:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	887a      	ldrh	r2, [r7, #2]
 8007512:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	887a      	ldrh	r2, [r7, #2]
 8007518:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007530:	2b40      	cmp	r3, #64	@ 0x40
 8007532:	d007      	beq.n	8007544 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007542:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800754c:	d17e      	bne.n	800764c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <HAL_SPI_TransmitReceive+0xf6>
 8007556:	8afb      	ldrh	r3, [r7, #22]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d16c      	bne.n	8007636 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007560:	881a      	ldrh	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756c:	1c9a      	adds	r2, r3, #2
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007576:	b29b      	uxth	r3, r3
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007580:	e059      	b.n	8007636 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b02      	cmp	r3, #2
 800758e:	d11b      	bne.n	80075c8 <HAL_SPI_TransmitReceive+0x162>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d016      	beq.n	80075c8 <HAL_SPI_TransmitReceive+0x162>
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	2b01      	cmp	r3, #1
 800759e:	d113      	bne.n	80075c8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a4:	881a      	ldrh	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b0:	1c9a      	adds	r2, r3, #2
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d119      	bne.n	800760a <HAL_SPI_TransmitReceive+0x1a4>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d014      	beq.n	800760a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ea:	b292      	uxth	r2, r2
 80075ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f2:	1c9a      	adds	r2, r3, #2
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007606:	2301      	movs	r3, #1
 8007608:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800760a:	f7fe fe69 	bl	80062e0 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007616:	429a      	cmp	r2, r3
 8007618:	d80d      	bhi.n	8007636 <HAL_SPI_TransmitReceive+0x1d0>
 800761a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d009      	beq.n	8007636 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e0bc      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1a0      	bne.n	8007582 <HAL_SPI_TransmitReceive+0x11c>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007644:	b29b      	uxth	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d19b      	bne.n	8007582 <HAL_SPI_TransmitReceive+0x11c>
 800764a:	e082      	b.n	8007752 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <HAL_SPI_TransmitReceive+0x1f4>
 8007654:	8afb      	ldrh	r3, [r7, #22]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d171      	bne.n	800773e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	330c      	adds	r3, #12
 8007664:	7812      	ldrb	r2, [r2, #0]
 8007666:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007676:	b29b      	uxth	r3, r3
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007680:	e05d      	b.n	800773e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b02      	cmp	r3, #2
 800768e:	d11c      	bne.n	80076ca <HAL_SPI_TransmitReceive+0x264>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d017      	beq.n	80076ca <HAL_SPI_TransmitReceive+0x264>
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	2b01      	cmp	r3, #1
 800769e:	d114      	bne.n	80076ca <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	330c      	adds	r3, #12
 80076aa:	7812      	ldrb	r2, [r2, #0]
 80076ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d119      	bne.n	800770c <HAL_SPI_TransmitReceive+0x2a6>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d014      	beq.n	800770c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007708:	2301      	movs	r3, #1
 800770a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800770c:	f7fe fde8 	bl	80062e0 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007718:	429a      	cmp	r2, r3
 800771a:	d803      	bhi.n	8007724 <HAL_SPI_TransmitReceive+0x2be>
 800771c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007722:	d102      	bne.n	800772a <HAL_SPI_TransmitReceive+0x2c4>
 8007724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e038      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007742:	b29b      	uxth	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d19c      	bne.n	8007682 <HAL_SPI_TransmitReceive+0x21c>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d197      	bne.n	8007682 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007752:	6a3a      	ldr	r2, [r7, #32]
 8007754:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 f8b6 	bl	80078c8 <SPI_EndRxTxTransaction>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d008      	beq.n	8007774 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2220      	movs	r2, #32
 8007766:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e01d      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10a      	bne.n	8007792 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800777c:	2300      	movs	r3, #0
 800777e:	613b      	str	r3, [r7, #16]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	613b      	str	r3, [r7, #16]
 8007790:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e000      	b.n	80077b0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80077ae:	2300      	movs	r3, #0
  }
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3728      	adds	r7, #40	@ 0x28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b088      	sub	sp, #32
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	4613      	mov	r3, r2
 80077c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077c8:	f7fe fd8a 	bl	80062e0 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d0:	1a9b      	subs	r3, r3, r2
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	4413      	add	r3, r2
 80077d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077d8:	f7fe fd82 	bl	80062e0 <HAL_GetTick>
 80077dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077de:	4b39      	ldr	r3, [pc, #228]	@ (80078c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	015b      	lsls	r3, r3, #5
 80077e4:	0d1b      	lsrs	r3, r3, #20
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	fb02 f303 	mul.w	r3, r2, r3
 80077ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077ee:	e054      	b.n	800789a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d050      	beq.n	800789a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077f8:	f7fe fd72 	bl	80062e0 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	429a      	cmp	r2, r3
 8007806:	d902      	bls.n	800780e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d13d      	bne.n	800788a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800781c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007826:	d111      	bne.n	800784c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007830:	d004      	beq.n	800783c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800783a:	d107      	bne.n	800784c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800784a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007854:	d10f      	bne.n	8007876 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007874:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e017      	b.n	80078ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	3b01      	subs	r3, #1
 8007898:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	4013      	ands	r3, r2
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	bf0c      	ite	eq
 80078aa:	2301      	moveq	r3, #1
 80078ac:	2300      	movne	r3, #0
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	461a      	mov	r2, r3
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d19b      	bne.n	80077f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000844 	.word	0x20000844

080078c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2201      	movs	r2, #1
 80078dc:	2102      	movs	r1, #2
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f7ff ff6a 	bl	80077b8 <SPI_WaitFlagStateUntilTimeout>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ee:	f043 0220 	orr.w	r2, r3, #32
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e032      	b.n	8007960 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80078fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007968 <SPI_EndRxTxTransaction+0xa0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a1b      	ldr	r2, [pc, #108]	@ (800796c <SPI_EndRxTxTransaction+0xa4>)
 8007900:	fba2 2303 	umull	r2, r3, r2, r3
 8007904:	0d5b      	lsrs	r3, r3, #21
 8007906:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800790a:	fb02 f303 	mul.w	r3, r2, r3
 800790e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007918:	d112      	bne.n	8007940 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2200      	movs	r2, #0
 8007922:	2180      	movs	r1, #128	@ 0x80
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff ff47 	bl	80077b8 <SPI_WaitFlagStateUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d016      	beq.n	800795e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007934:	f043 0220 	orr.w	r2, r3, #32
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e00f      	b.n	8007960 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	3b01      	subs	r3, #1
 800794a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007956:	2b80      	cmp	r3, #128	@ 0x80
 8007958:	d0f2      	beq.n	8007940 <SPI_EndRxTxTransaction+0x78>
 800795a:	e000      	b.n	800795e <SPI_EndRxTxTransaction+0x96>
        break;
 800795c:	bf00      	nop
  }

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000844 	.word	0x20000844
 800796c:	165e9f81 	.word	0x165e9f81

08007970 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e038      	b.n	80079f8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f7fe f92c 	bl	8005bf8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3308      	adds	r3, #8
 80079a8:	4619      	mov	r1, r3
 80079aa:	4610      	mov	r0, r2
 80079ac:	f000 ff3c 	bl	8008828 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6818      	ldr	r0, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	461a      	mov	r2, r3
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	f000 ff9e 	bl	80088fc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6858      	ldr	r0, [r3, #4]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	f000 ffcb 	bl	8008968 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	6892      	ldr	r2, [r2, #8]
 80079da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	6892      	ldr	r2, [r2, #8]
 80079e6:	f041 0101 	orr.w	r1, r1, #1
 80079ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e042      	b.n	8007a98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7fe f84a 	bl	8005ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2224      	movs	r2, #36	@ 0x24
 8007a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fc7b 	bl	8008340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	691a      	ldr	r2, [r3, #16]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	695a      	ldr	r2, [r3, #20]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68da      	ldr	r2, [r3, #12]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b0ba      	sub	sp, #232	@ 0xe8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ad6:	f003 030f 	and.w	r3, r3, #15
 8007ada:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10f      	bne.n	8007b06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d009      	beq.n	8007b06 <HAL_UART_IRQHandler+0x66>
 8007af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fb5f 	bl	80081c2 <UART_Receive_IT>
      return;
 8007b04:	e25b      	b.n	8007fbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 80de 	beq.w	8007ccc <HAL_UART_IRQHandler+0x22c>
 8007b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d106      	bne.n	8007b2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b20:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 80d1 	beq.w	8007ccc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00b      	beq.n	8007b4e <HAL_UART_IRQHandler+0xae>
 8007b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d005      	beq.n	8007b4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b46:	f043 0201 	orr.w	r2, r3, #1
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00b      	beq.n	8007b72 <HAL_UART_IRQHandler+0xd2>
 8007b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b6a:	f043 0202 	orr.w	r2, r3, #2
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00b      	beq.n	8007b96 <HAL_UART_IRQHandler+0xf6>
 8007b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d005      	beq.n	8007b96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b8e:	f043 0204 	orr.w	r2, r3, #4
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d011      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x126>
 8007ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d105      	bne.n	8007bba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d005      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bbe:	f043 0208 	orr.w	r2, r3, #8
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 81f2 	beq.w	8007fb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bd4:	f003 0320 	and.w	r3, r3, #32
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d008      	beq.n	8007bee <HAL_UART_IRQHandler+0x14e>
 8007bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 faea 	bl	80081c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf8:	2b40      	cmp	r3, #64	@ 0x40
 8007bfa:	bf0c      	ite	eq
 8007bfc:	2301      	moveq	r3, #1
 8007bfe:	2300      	movne	r3, #0
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d103      	bne.n	8007c1a <HAL_UART_IRQHandler+0x17a>
 8007c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d04f      	beq.n	8007cba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f9f2 	bl	8008004 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c2a:	2b40      	cmp	r3, #64	@ 0x40
 8007c2c:	d141      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3314      	adds	r3, #20
 8007c34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3314      	adds	r3, #20
 8007c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c6a:	e841 2300 	strex	r3, r2, [r1]
 8007c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1d9      	bne.n	8007c2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d013      	beq.n	8007caa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c86:	4a7e      	ldr	r2, [pc, #504]	@ (8007e80 <HAL_UART_IRQHandler+0x3e0>)
 8007c88:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe fcd7 	bl	8006642 <HAL_DMA_Abort_IT>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d016      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca8:	e00e      	b.n	8007cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f994 	bl	8007fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb0:	e00a      	b.n	8007cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f990 	bl	8007fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb8:	e006      	b.n	8007cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f98c 	bl	8007fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007cc6:	e175      	b.n	8007fb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc8:	bf00      	nop
    return;
 8007cca:	e173      	b.n	8007fb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	f040 814f 	bne.w	8007f74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 8148 	beq.w	8007f74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ce8:	f003 0310 	and.w	r3, r3, #16
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 8141 	beq.w	8007f74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60bb      	str	r3, [r7, #8]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	60bb      	str	r3, [r7, #8]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	60bb      	str	r3, [r7, #8]
 8007d06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d12:	2b40      	cmp	r3, #64	@ 0x40
 8007d14:	f040 80b6 	bne.w	8007e84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 8145 	beq.w	8007fb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d36:	429a      	cmp	r2, r3
 8007d38:	f080 813e 	bcs.w	8007fb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d4e:	f000 8088 	beq.w	8007e62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	330c      	adds	r3, #12
 8007d58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007d7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1d9      	bne.n	8007d52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3314      	adds	r3, #20
 8007da4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007dae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007db0:	f023 0301 	bic.w	r3, r3, #1
 8007db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3314      	adds	r3, #20
 8007dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007dc2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007dc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e1      	bne.n	8007d9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3314      	adds	r3, #20
 8007de0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3314      	adds	r3, #20
 8007dfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007dfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e3      	bne.n	8007dda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	330c      	adds	r3, #12
 8007e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e32:	f023 0310 	bic.w	r3, r3, #16
 8007e36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	330c      	adds	r3, #12
 8007e40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007e44:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007e46:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e4c:	e841 2300 	strex	r3, r2, [r1]
 8007e50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1e3      	bne.n	8007e20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe fb80 	bl	8006562 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2202      	movs	r2, #2
 8007e66:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f8b7 	bl	8007fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e7e:	e09b      	b.n	8007fb8 <HAL_UART_IRQHandler+0x518>
 8007e80:	080080cb 	.word	0x080080cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 808e 	beq.w	8007fbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 8089 	beq.w	8007fbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	330c      	adds	r3, #12
 8007eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ebc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	330c      	adds	r3, #12
 8007eca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007ece:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ed0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ed4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ed6:	e841 2300 	strex	r3, r2, [r1]
 8007eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e3      	bne.n	8007eaa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3314      	adds	r3, #20
 8007ee8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	f023 0301 	bic.w	r3, r3, #1
 8007ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3314      	adds	r3, #20
 8007f02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f06:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e3      	bne.n	8007ee2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	330c      	adds	r3, #12
 8007f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0310 	bic.w	r3, r3, #16
 8007f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	330c      	adds	r3, #12
 8007f48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007f4c:	61fa      	str	r2, [r7, #28]
 8007f4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	69b9      	ldr	r1, [r7, #24]
 8007f52:	69fa      	ldr	r2, [r7, #28]
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	617b      	str	r3, [r7, #20]
   return(result);
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e3      	bne.n	8007f28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f83d 	bl	8007fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f72:	e023      	b.n	8007fbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d009      	beq.n	8007f94 <HAL_UART_IRQHandler+0x4f4>
 8007f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f8b0 	bl	80080f2 <UART_Transmit_IT>
    return;
 8007f92:	e014      	b.n	8007fbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00e      	beq.n	8007fbe <HAL_UART_IRQHandler+0x51e>
 8007fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d008      	beq.n	8007fbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f8f0 	bl	8008192 <UART_EndTransmit_IT>
    return;
 8007fb2:	e004      	b.n	8007fbe <HAL_UART_IRQHandler+0x51e>
    return;
 8007fb4:	bf00      	nop
 8007fb6:	e002      	b.n	8007fbe <HAL_UART_IRQHandler+0x51e>
      return;
 8007fb8:	bf00      	nop
 8007fba:	e000      	b.n	8007fbe <HAL_UART_IRQHandler+0x51e>
      return;
 8007fbc:	bf00      	nop
  }
}
 8007fbe:	37e8      	adds	r7, #232	@ 0xe8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008004:	b480      	push	{r7}
 8008006:	b095      	sub	sp, #84	@ 0x54
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	330c      	adds	r3, #12
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	330c      	adds	r3, #12
 800802a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800802c:	643a      	str	r2, [r7, #64]	@ 0x40
 800802e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e5      	bne.n	800800c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3314      	adds	r3, #20
 8008046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f023 0301 	bic.w	r3, r3, #1
 8008056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3314      	adds	r3, #20
 800805e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e5      	bne.n	8008040 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008078:	2b01      	cmp	r3, #1
 800807a:	d119      	bne.n	80080b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	330c      	adds	r3, #12
 8008082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	e853 3f00 	ldrex	r3, [r3]
 800808a:	60bb      	str	r3, [r7, #8]
   return(result);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f023 0310 	bic.w	r3, r3, #16
 8008092:	647b      	str	r3, [r7, #68]	@ 0x44
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	330c      	adds	r3, #12
 800809a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800809c:	61ba      	str	r2, [r7, #24]
 800809e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6979      	ldr	r1, [r7, #20]
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	613b      	str	r3, [r7, #16]
   return(result);
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e5      	bne.n	800807c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80080be:	bf00      	nop
 80080c0:	3754      	adds	r7, #84	@ 0x54
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f7ff ff77 	bl	8007fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080ea:	bf00      	nop
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b085      	sub	sp, #20
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b21      	cmp	r3, #33	@ 0x21
 8008104:	d13e      	bne.n	8008184 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800810e:	d114      	bne.n	800813a <UART_Transmit_IT+0x48>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d110      	bne.n	800813a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800812c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	1c9a      	adds	r2, r3, #2
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	621a      	str	r2, [r3, #32]
 8008138:	e008      	b.n	800814c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	1c59      	adds	r1, r3, #1
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	6211      	str	r1, [r2, #32]
 8008144:	781a      	ldrb	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b01      	subs	r3, #1
 8008154:	b29b      	uxth	r3, r3
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4619      	mov	r1, r3
 800815a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10f      	bne.n	8008180 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800816e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800817e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	e000      	b.n	8008186 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008184:	2302      	movs	r3, #2
  }
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b082      	sub	sp, #8
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68da      	ldr	r2, [r3, #12]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7ff ff06 	bl	8007fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b08c      	sub	sp, #48	@ 0x30
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b22      	cmp	r3, #34	@ 0x22
 80081d4:	f040 80ae 	bne.w	8008334 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e0:	d117      	bne.n	8008212 <UART_Receive_IT+0x50>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d113      	bne.n	8008212 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008200:	b29a      	uxth	r2, r3
 8008202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008204:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820a:	1c9a      	adds	r2, r3, #2
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008210:	e026      	b.n	8008260 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008216:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008218:	2300      	movs	r3, #0
 800821a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008224:	d007      	beq.n	8008236 <UART_Receive_IT+0x74>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10a      	bne.n	8008244 <UART_Receive_IT+0x82>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d106      	bne.n	8008244 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	b2da      	uxtb	r2, r3
 800823e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008240:	701a      	strb	r2, [r3, #0]
 8008242:	e008      	b.n	8008256 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008250:	b2da      	uxtb	r2, r3
 8008252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008254:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008264:	b29b      	uxth	r3, r3
 8008266:	3b01      	subs	r3, #1
 8008268:	b29b      	uxth	r3, r3
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	4619      	mov	r1, r3
 800826e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008270:	2b00      	cmp	r3, #0
 8008272:	d15d      	bne.n	8008330 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0220 	bic.w	r2, r2, #32
 8008282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68da      	ldr	r2, [r3, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008292:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695a      	ldr	r2, [r3, #20]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 0201 	bic.w	r2, r2, #1
 80082a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d135      	bne.n	8008326 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	330c      	adds	r3, #12
 80082c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	e853 3f00 	ldrex	r3, [r3]
 80082ce:	613b      	str	r3, [r7, #16]
   return(result);
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f023 0310 	bic.w	r3, r3, #16
 80082d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	330c      	adds	r3, #12
 80082de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082e0:	623a      	str	r2, [r7, #32]
 80082e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e4:	69f9      	ldr	r1, [r7, #28]
 80082e6:	6a3a      	ldr	r2, [r7, #32]
 80082e8:	e841 2300 	strex	r3, r2, [r1]
 80082ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e5      	bne.n	80082c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0310 	and.w	r3, r3, #16
 80082fe:	2b10      	cmp	r3, #16
 8008300:	d10a      	bne.n	8008318 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008302:	2300      	movs	r3, #0
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff fe64 	bl	8007fec <HAL_UARTEx_RxEventCallback>
 8008324:	e002      	b.n	800832c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7fd f9bc 	bl	80056a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	e002      	b.n	8008336 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	e000      	b.n	8008336 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008334:	2302      	movs	r3, #2
  }
}
 8008336:	4618      	mov	r0, r3
 8008338:	3730      	adds	r7, #48	@ 0x30
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008344:	b0c0      	sub	sp, #256	@ 0x100
 8008346:	af00      	add	r7, sp, #0
 8008348:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800834c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800835c:	68d9      	ldr	r1, [r3, #12]
 800835e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	ea40 0301 	orr.w	r3, r0, r1
 8008368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800836a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	431a      	orrs	r2, r3
 8008378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	431a      	orrs	r2, r3
 8008380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	4313      	orrs	r3, r2
 8008388:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800838c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008398:	f021 010c 	bic.w	r1, r1, #12
 800839c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80083a6:	430b      	orrs	r3, r1
 80083a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80083b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ba:	6999      	ldr	r1, [r3, #24]
 80083bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	ea40 0301 	orr.w	r3, r0, r1
 80083c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b8f      	ldr	r3, [pc, #572]	@ (800860c <UART_SetConfig+0x2cc>)
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d005      	beq.n	80083e0 <UART_SetConfig+0xa0>
 80083d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	4b8d      	ldr	r3, [pc, #564]	@ (8008610 <UART_SetConfig+0x2d0>)
 80083dc:	429a      	cmp	r2, r3
 80083de:	d104      	bne.n	80083ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083e0:	f7fe ffa4 	bl	800732c <HAL_RCC_GetPCLK2Freq>
 80083e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80083e8:	e003      	b.n	80083f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083ea:	f7fe ff8b 	bl	8007304 <HAL_RCC_GetPCLK1Freq>
 80083ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083fc:	f040 810c 	bne.w	8008618 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008404:	2200      	movs	r2, #0
 8008406:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800840a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800840e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008412:	4622      	mov	r2, r4
 8008414:	462b      	mov	r3, r5
 8008416:	1891      	adds	r1, r2, r2
 8008418:	65b9      	str	r1, [r7, #88]	@ 0x58
 800841a:	415b      	adcs	r3, r3
 800841c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800841e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008422:	4621      	mov	r1, r4
 8008424:	eb12 0801 	adds.w	r8, r2, r1
 8008428:	4629      	mov	r1, r5
 800842a:	eb43 0901 	adc.w	r9, r3, r1
 800842e:	f04f 0200 	mov.w	r2, #0
 8008432:	f04f 0300 	mov.w	r3, #0
 8008436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800843a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800843e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008442:	4690      	mov	r8, r2
 8008444:	4699      	mov	r9, r3
 8008446:	4623      	mov	r3, r4
 8008448:	eb18 0303 	adds.w	r3, r8, r3
 800844c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008450:	462b      	mov	r3, r5
 8008452:	eb49 0303 	adc.w	r3, r9, r3
 8008456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800845a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008466:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800846a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800846e:	460b      	mov	r3, r1
 8008470:	18db      	adds	r3, r3, r3
 8008472:	653b      	str	r3, [r7, #80]	@ 0x50
 8008474:	4613      	mov	r3, r2
 8008476:	eb42 0303 	adc.w	r3, r2, r3
 800847a:	657b      	str	r3, [r7, #84]	@ 0x54
 800847c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008480:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008484:	f7f8 fbaa 	bl	8000bdc <__aeabi_uldivmod>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4b61      	ldr	r3, [pc, #388]	@ (8008614 <UART_SetConfig+0x2d4>)
 800848e:	fba3 2302 	umull	r2, r3, r3, r2
 8008492:	095b      	lsrs	r3, r3, #5
 8008494:	011c      	lsls	r4, r3, #4
 8008496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800849a:	2200      	movs	r2, #0
 800849c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80084a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80084a8:	4642      	mov	r2, r8
 80084aa:	464b      	mov	r3, r9
 80084ac:	1891      	adds	r1, r2, r2
 80084ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80084b0:	415b      	adcs	r3, r3
 80084b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80084b8:	4641      	mov	r1, r8
 80084ba:	eb12 0a01 	adds.w	sl, r2, r1
 80084be:	4649      	mov	r1, r9
 80084c0:	eb43 0b01 	adc.w	fp, r3, r1
 80084c4:	f04f 0200 	mov.w	r2, #0
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084d8:	4692      	mov	sl, r2
 80084da:	469b      	mov	fp, r3
 80084dc:	4643      	mov	r3, r8
 80084de:	eb1a 0303 	adds.w	r3, sl, r3
 80084e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084e6:	464b      	mov	r3, r9
 80084e8:	eb4b 0303 	adc.w	r3, fp, r3
 80084ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008500:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008504:	460b      	mov	r3, r1
 8008506:	18db      	adds	r3, r3, r3
 8008508:	643b      	str	r3, [r7, #64]	@ 0x40
 800850a:	4613      	mov	r3, r2
 800850c:	eb42 0303 	adc.w	r3, r2, r3
 8008510:	647b      	str	r3, [r7, #68]	@ 0x44
 8008512:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800851a:	f7f8 fb5f 	bl	8000bdc <__aeabi_uldivmod>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	4611      	mov	r1, r2
 8008524:	4b3b      	ldr	r3, [pc, #236]	@ (8008614 <UART_SetConfig+0x2d4>)
 8008526:	fba3 2301 	umull	r2, r3, r3, r1
 800852a:	095b      	lsrs	r3, r3, #5
 800852c:	2264      	movs	r2, #100	@ 0x64
 800852e:	fb02 f303 	mul.w	r3, r2, r3
 8008532:	1acb      	subs	r3, r1, r3
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800853a:	4b36      	ldr	r3, [pc, #216]	@ (8008614 <UART_SetConfig+0x2d4>)
 800853c:	fba3 2302 	umull	r2, r3, r3, r2
 8008540:	095b      	lsrs	r3, r3, #5
 8008542:	005b      	lsls	r3, r3, #1
 8008544:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008548:	441c      	add	r4, r3
 800854a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800854e:	2200      	movs	r2, #0
 8008550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008554:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008558:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800855c:	4642      	mov	r2, r8
 800855e:	464b      	mov	r3, r9
 8008560:	1891      	adds	r1, r2, r2
 8008562:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008564:	415b      	adcs	r3, r3
 8008566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800856c:	4641      	mov	r1, r8
 800856e:	1851      	adds	r1, r2, r1
 8008570:	6339      	str	r1, [r7, #48]	@ 0x30
 8008572:	4649      	mov	r1, r9
 8008574:	414b      	adcs	r3, r1
 8008576:	637b      	str	r3, [r7, #52]	@ 0x34
 8008578:	f04f 0200 	mov.w	r2, #0
 800857c:	f04f 0300 	mov.w	r3, #0
 8008580:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008584:	4659      	mov	r1, fp
 8008586:	00cb      	lsls	r3, r1, #3
 8008588:	4651      	mov	r1, sl
 800858a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800858e:	4651      	mov	r1, sl
 8008590:	00ca      	lsls	r2, r1, #3
 8008592:	4610      	mov	r0, r2
 8008594:	4619      	mov	r1, r3
 8008596:	4603      	mov	r3, r0
 8008598:	4642      	mov	r2, r8
 800859a:	189b      	adds	r3, r3, r2
 800859c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085a0:	464b      	mov	r3, r9
 80085a2:	460a      	mov	r2, r1
 80085a4:	eb42 0303 	adc.w	r3, r2, r3
 80085a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80085b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80085bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80085c0:	460b      	mov	r3, r1
 80085c2:	18db      	adds	r3, r3, r3
 80085c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085c6:	4613      	mov	r3, r2
 80085c8:	eb42 0303 	adc.w	r3, r2, r3
 80085cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80085d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80085d6:	f7f8 fb01 	bl	8000bdc <__aeabi_uldivmod>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4b0d      	ldr	r3, [pc, #52]	@ (8008614 <UART_SetConfig+0x2d4>)
 80085e0:	fba3 1302 	umull	r1, r3, r3, r2
 80085e4:	095b      	lsrs	r3, r3, #5
 80085e6:	2164      	movs	r1, #100	@ 0x64
 80085e8:	fb01 f303 	mul.w	r3, r1, r3
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	3332      	adds	r3, #50	@ 0x32
 80085f2:	4a08      	ldr	r2, [pc, #32]	@ (8008614 <UART_SetConfig+0x2d4>)
 80085f4:	fba2 2303 	umull	r2, r3, r2, r3
 80085f8:	095b      	lsrs	r3, r3, #5
 80085fa:	f003 0207 	and.w	r2, r3, #7
 80085fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4422      	add	r2, r4
 8008606:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008608:	e106      	b.n	8008818 <UART_SetConfig+0x4d8>
 800860a:	bf00      	nop
 800860c:	40011000 	.word	0x40011000
 8008610:	40011400 	.word	0x40011400
 8008614:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800861c:	2200      	movs	r2, #0
 800861e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008622:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008626:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800862a:	4642      	mov	r2, r8
 800862c:	464b      	mov	r3, r9
 800862e:	1891      	adds	r1, r2, r2
 8008630:	6239      	str	r1, [r7, #32]
 8008632:	415b      	adcs	r3, r3
 8008634:	627b      	str	r3, [r7, #36]	@ 0x24
 8008636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800863a:	4641      	mov	r1, r8
 800863c:	1854      	adds	r4, r2, r1
 800863e:	4649      	mov	r1, r9
 8008640:	eb43 0501 	adc.w	r5, r3, r1
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	f04f 0300 	mov.w	r3, #0
 800864c:	00eb      	lsls	r3, r5, #3
 800864e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008652:	00e2      	lsls	r2, r4, #3
 8008654:	4614      	mov	r4, r2
 8008656:	461d      	mov	r5, r3
 8008658:	4643      	mov	r3, r8
 800865a:	18e3      	adds	r3, r4, r3
 800865c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008660:	464b      	mov	r3, r9
 8008662:	eb45 0303 	adc.w	r3, r5, r3
 8008666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800866a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008676:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800867a:	f04f 0200 	mov.w	r2, #0
 800867e:	f04f 0300 	mov.w	r3, #0
 8008682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008686:	4629      	mov	r1, r5
 8008688:	008b      	lsls	r3, r1, #2
 800868a:	4621      	mov	r1, r4
 800868c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008690:	4621      	mov	r1, r4
 8008692:	008a      	lsls	r2, r1, #2
 8008694:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008698:	f7f8 faa0 	bl	8000bdc <__aeabi_uldivmod>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4b60      	ldr	r3, [pc, #384]	@ (8008824 <UART_SetConfig+0x4e4>)
 80086a2:	fba3 2302 	umull	r2, r3, r3, r2
 80086a6:	095b      	lsrs	r3, r3, #5
 80086a8:	011c      	lsls	r4, r3, #4
 80086aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80086b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80086bc:	4642      	mov	r2, r8
 80086be:	464b      	mov	r3, r9
 80086c0:	1891      	adds	r1, r2, r2
 80086c2:	61b9      	str	r1, [r7, #24]
 80086c4:	415b      	adcs	r3, r3
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086cc:	4641      	mov	r1, r8
 80086ce:	1851      	adds	r1, r2, r1
 80086d0:	6139      	str	r1, [r7, #16]
 80086d2:	4649      	mov	r1, r9
 80086d4:	414b      	adcs	r3, r1
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	f04f 0200 	mov.w	r2, #0
 80086dc:	f04f 0300 	mov.w	r3, #0
 80086e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086e4:	4659      	mov	r1, fp
 80086e6:	00cb      	lsls	r3, r1, #3
 80086e8:	4651      	mov	r1, sl
 80086ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ee:	4651      	mov	r1, sl
 80086f0:	00ca      	lsls	r2, r1, #3
 80086f2:	4610      	mov	r0, r2
 80086f4:	4619      	mov	r1, r3
 80086f6:	4603      	mov	r3, r0
 80086f8:	4642      	mov	r2, r8
 80086fa:	189b      	adds	r3, r3, r2
 80086fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008700:	464b      	mov	r3, r9
 8008702:	460a      	mov	r2, r1
 8008704:	eb42 0303 	adc.w	r3, r2, r3
 8008708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800870c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008716:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008718:	f04f 0200 	mov.w	r2, #0
 800871c:	f04f 0300 	mov.w	r3, #0
 8008720:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008724:	4649      	mov	r1, r9
 8008726:	008b      	lsls	r3, r1, #2
 8008728:	4641      	mov	r1, r8
 800872a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800872e:	4641      	mov	r1, r8
 8008730:	008a      	lsls	r2, r1, #2
 8008732:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008736:	f7f8 fa51 	bl	8000bdc <__aeabi_uldivmod>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4611      	mov	r1, r2
 8008740:	4b38      	ldr	r3, [pc, #224]	@ (8008824 <UART_SetConfig+0x4e4>)
 8008742:	fba3 2301 	umull	r2, r3, r3, r1
 8008746:	095b      	lsrs	r3, r3, #5
 8008748:	2264      	movs	r2, #100	@ 0x64
 800874a:	fb02 f303 	mul.w	r3, r2, r3
 800874e:	1acb      	subs	r3, r1, r3
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	3332      	adds	r3, #50	@ 0x32
 8008754:	4a33      	ldr	r2, [pc, #204]	@ (8008824 <UART_SetConfig+0x4e4>)
 8008756:	fba2 2303 	umull	r2, r3, r2, r3
 800875a:	095b      	lsrs	r3, r3, #5
 800875c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008760:	441c      	add	r4, r3
 8008762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008766:	2200      	movs	r2, #0
 8008768:	673b      	str	r3, [r7, #112]	@ 0x70
 800876a:	677a      	str	r2, [r7, #116]	@ 0x74
 800876c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008770:	4642      	mov	r2, r8
 8008772:	464b      	mov	r3, r9
 8008774:	1891      	adds	r1, r2, r2
 8008776:	60b9      	str	r1, [r7, #8]
 8008778:	415b      	adcs	r3, r3
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008780:	4641      	mov	r1, r8
 8008782:	1851      	adds	r1, r2, r1
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	4649      	mov	r1, r9
 8008788:	414b      	adcs	r3, r1
 800878a:	607b      	str	r3, [r7, #4]
 800878c:	f04f 0200 	mov.w	r2, #0
 8008790:	f04f 0300 	mov.w	r3, #0
 8008794:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008798:	4659      	mov	r1, fp
 800879a:	00cb      	lsls	r3, r1, #3
 800879c:	4651      	mov	r1, sl
 800879e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087a2:	4651      	mov	r1, sl
 80087a4:	00ca      	lsls	r2, r1, #3
 80087a6:	4610      	mov	r0, r2
 80087a8:	4619      	mov	r1, r3
 80087aa:	4603      	mov	r3, r0
 80087ac:	4642      	mov	r2, r8
 80087ae:	189b      	adds	r3, r3, r2
 80087b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087b2:	464b      	mov	r3, r9
 80087b4:	460a      	mov	r2, r1
 80087b6:	eb42 0303 	adc.w	r3, r2, r3
 80087ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80087c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80087c8:	f04f 0200 	mov.w	r2, #0
 80087cc:	f04f 0300 	mov.w	r3, #0
 80087d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80087d4:	4649      	mov	r1, r9
 80087d6:	008b      	lsls	r3, r1, #2
 80087d8:	4641      	mov	r1, r8
 80087da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087de:	4641      	mov	r1, r8
 80087e0:	008a      	lsls	r2, r1, #2
 80087e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80087e6:	f7f8 f9f9 	bl	8000bdc <__aeabi_uldivmod>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008824 <UART_SetConfig+0x4e4>)
 80087f0:	fba3 1302 	umull	r1, r3, r3, r2
 80087f4:	095b      	lsrs	r3, r3, #5
 80087f6:	2164      	movs	r1, #100	@ 0x64
 80087f8:	fb01 f303 	mul.w	r3, r1, r3
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	3332      	adds	r3, #50	@ 0x32
 8008802:	4a08      	ldr	r2, [pc, #32]	@ (8008824 <UART_SetConfig+0x4e4>)
 8008804:	fba2 2303 	umull	r2, r3, r2, r3
 8008808:	095b      	lsrs	r3, r3, #5
 800880a:	f003 020f 	and.w	r2, r3, #15
 800880e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4422      	add	r2, r4
 8008816:	609a      	str	r2, [r3, #8]
}
 8008818:	bf00      	nop
 800881a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800881e:	46bd      	mov	sp, r7
 8008820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008824:	51eb851f 	.word	0x51eb851f

08008828 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	6812      	ldr	r2, [r2, #0]
 8008840:	f023 0101 	bic.w	r1, r3, #1
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	2b08      	cmp	r3, #8
 8008850:	d102      	bne.n	8008858 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008852:	2340      	movs	r3, #64	@ 0x40
 8008854:	617b      	str	r3, [r7, #20]
 8008856:	e001      	b.n	800885c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008868:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800886e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008874:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800887a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008880:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008886:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800888c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8008892:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8008898:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800889e:	4313      	orrs	r3, r2
 80088a0:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80088b6:	4b10      	ldr	r3, [pc, #64]	@ (80088f8 <FSMC_NORSRAM_Init+0xd0>)
 80088b8:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80088c0:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80088c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	43db      	mvns	r3, r3
 80088d8:	ea02 0103 	and.w	r1, r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	4319      	orrs	r1, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	0008fb7f 	.word	0x0008fb7f

080088fc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008912:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	431a      	orrs	r2, r3
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	021b      	lsls	r3, r3, #8
 8008928:	431a      	orrs	r2, r3
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	041b      	lsls	r3, r3, #16
 8008930:	431a      	orrs	r2, r3
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	3b01      	subs	r3, #1
 8008938:	051b      	lsls	r3, r3, #20
 800893a:	431a      	orrs	r2, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	3b02      	subs	r3, #2
 8008942:	061b      	lsls	r3, r3, #24
 8008944:	431a      	orrs	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	4313      	orrs	r3, r2
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	3201      	adds	r2, #1
 8008950:	4319      	orrs	r1, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
	...

08008968 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800897c:	d11d      	bne.n	80089ba <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008986:	4b13      	ldr	r3, [pc, #76]	@ (80089d4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008988:	4013      	ands	r3, r2
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	6811      	ldr	r1, [r2, #0]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	6852      	ldr	r2, [r2, #4]
 8008992:	0112      	lsls	r2, r2, #4
 8008994:	4311      	orrs	r1, r2
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	6892      	ldr	r2, [r2, #8]
 800899a:	0212      	lsls	r2, r2, #8
 800899c:	4311      	orrs	r1, r2
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	6992      	ldr	r2, [r2, #24]
 80089a2:	4311      	orrs	r1, r2
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	68d2      	ldr	r2, [r2, #12]
 80089a8:	0412      	lsls	r2, r2, #16
 80089aa:	430a      	orrs	r2, r1
 80089ac:	ea43 0102 	orr.w	r1, r3, r2
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80089b8:	e005      	b.n	80089c6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80089c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	cff00000 	.word	0xcff00000

080089d8 <malloc>:
 80089d8:	4b02      	ldr	r3, [pc, #8]	@ (80089e4 <malloc+0xc>)
 80089da:	4601      	mov	r1, r0
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	f000 b82d 	b.w	8008a3c <_malloc_r>
 80089e2:	bf00      	nop
 80089e4:	200009c8 	.word	0x200009c8

080089e8 <free>:
 80089e8:	4b02      	ldr	r3, [pc, #8]	@ (80089f4 <free+0xc>)
 80089ea:	4601      	mov	r1, r0
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	f001 b933 	b.w	8009c58 <_free_r>
 80089f2:	bf00      	nop
 80089f4:	200009c8 	.word	0x200009c8

080089f8 <sbrk_aligned>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	4e0f      	ldr	r6, [pc, #60]	@ (8008a38 <sbrk_aligned+0x40>)
 80089fc:	460c      	mov	r4, r1
 80089fe:	6831      	ldr	r1, [r6, #0]
 8008a00:	4605      	mov	r5, r0
 8008a02:	b911      	cbnz	r1, 8008a0a <sbrk_aligned+0x12>
 8008a04:	f001 f8c0 	bl	8009b88 <_sbrk_r>
 8008a08:	6030      	str	r0, [r6, #0]
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f001 f8bb 	bl	8009b88 <_sbrk_r>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	d103      	bne.n	8008a1e <sbrk_aligned+0x26>
 8008a16:	f04f 34ff 	mov.w	r4, #4294967295
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	bd70      	pop	{r4, r5, r6, pc}
 8008a1e:	1cc4      	adds	r4, r0, #3
 8008a20:	f024 0403 	bic.w	r4, r4, #3
 8008a24:	42a0      	cmp	r0, r4
 8008a26:	d0f8      	beq.n	8008a1a <sbrk_aligned+0x22>
 8008a28:	1a21      	subs	r1, r4, r0
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f001 f8ac 	bl	8009b88 <_sbrk_r>
 8008a30:	3001      	adds	r0, #1
 8008a32:	d1f2      	bne.n	8008a1a <sbrk_aligned+0x22>
 8008a34:	e7ef      	b.n	8008a16 <sbrk_aligned+0x1e>
 8008a36:	bf00      	nop
 8008a38:	20000cb4 	.word	0x20000cb4

08008a3c <_malloc_r>:
 8008a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a40:	1ccd      	adds	r5, r1, #3
 8008a42:	f025 0503 	bic.w	r5, r5, #3
 8008a46:	3508      	adds	r5, #8
 8008a48:	2d0c      	cmp	r5, #12
 8008a4a:	bf38      	it	cc
 8008a4c:	250c      	movcc	r5, #12
 8008a4e:	2d00      	cmp	r5, #0
 8008a50:	4606      	mov	r6, r0
 8008a52:	db01      	blt.n	8008a58 <_malloc_r+0x1c>
 8008a54:	42a9      	cmp	r1, r5
 8008a56:	d904      	bls.n	8008a62 <_malloc_r+0x26>
 8008a58:	230c      	movs	r3, #12
 8008a5a:	6033      	str	r3, [r6, #0]
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b38 <_malloc_r+0xfc>
 8008a66:	f000 f869 	bl	8008b3c <__malloc_lock>
 8008a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a6e:	461c      	mov	r4, r3
 8008a70:	bb44      	cbnz	r4, 8008ac4 <_malloc_r+0x88>
 8008a72:	4629      	mov	r1, r5
 8008a74:	4630      	mov	r0, r6
 8008a76:	f7ff ffbf 	bl	80089f8 <sbrk_aligned>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	d158      	bne.n	8008b32 <_malloc_r+0xf6>
 8008a80:	f8d8 4000 	ldr.w	r4, [r8]
 8008a84:	4627      	mov	r7, r4
 8008a86:	2f00      	cmp	r7, #0
 8008a88:	d143      	bne.n	8008b12 <_malloc_r+0xd6>
 8008a8a:	2c00      	cmp	r4, #0
 8008a8c:	d04b      	beq.n	8008b26 <_malloc_r+0xea>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	4639      	mov	r1, r7
 8008a92:	4630      	mov	r0, r6
 8008a94:	eb04 0903 	add.w	r9, r4, r3
 8008a98:	f001 f876 	bl	8009b88 <_sbrk_r>
 8008a9c:	4581      	cmp	r9, r0
 8008a9e:	d142      	bne.n	8008b26 <_malloc_r+0xea>
 8008aa0:	6821      	ldr	r1, [r4, #0]
 8008aa2:	1a6d      	subs	r5, r5, r1
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7ff ffa6 	bl	80089f8 <sbrk_aligned>
 8008aac:	3001      	adds	r0, #1
 8008aae:	d03a      	beq.n	8008b26 <_malloc_r+0xea>
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	442b      	add	r3, r5
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	bb62      	cbnz	r2, 8008b18 <_malloc_r+0xdc>
 8008abe:	f8c8 7000 	str.w	r7, [r8]
 8008ac2:	e00f      	b.n	8008ae4 <_malloc_r+0xa8>
 8008ac4:	6822      	ldr	r2, [r4, #0]
 8008ac6:	1b52      	subs	r2, r2, r5
 8008ac8:	d420      	bmi.n	8008b0c <_malloc_r+0xd0>
 8008aca:	2a0b      	cmp	r2, #11
 8008acc:	d917      	bls.n	8008afe <_malloc_r+0xc2>
 8008ace:	1961      	adds	r1, r4, r5
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	6025      	str	r5, [r4, #0]
 8008ad4:	bf18      	it	ne
 8008ad6:	6059      	strne	r1, [r3, #4]
 8008ad8:	6863      	ldr	r3, [r4, #4]
 8008ada:	bf08      	it	eq
 8008adc:	f8c8 1000 	streq.w	r1, [r8]
 8008ae0:	5162      	str	r2, [r4, r5]
 8008ae2:	604b      	str	r3, [r1, #4]
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	f000 f82f 	bl	8008b48 <__malloc_unlock>
 8008aea:	f104 000b 	add.w	r0, r4, #11
 8008aee:	1d23      	adds	r3, r4, #4
 8008af0:	f020 0007 	bic.w	r0, r0, #7
 8008af4:	1ac2      	subs	r2, r0, r3
 8008af6:	bf1c      	itt	ne
 8008af8:	1a1b      	subne	r3, r3, r0
 8008afa:	50a3      	strne	r3, [r4, r2]
 8008afc:	e7af      	b.n	8008a5e <_malloc_r+0x22>
 8008afe:	6862      	ldr	r2, [r4, #4]
 8008b00:	42a3      	cmp	r3, r4
 8008b02:	bf0c      	ite	eq
 8008b04:	f8c8 2000 	streq.w	r2, [r8]
 8008b08:	605a      	strne	r2, [r3, #4]
 8008b0a:	e7eb      	b.n	8008ae4 <_malloc_r+0xa8>
 8008b0c:	4623      	mov	r3, r4
 8008b0e:	6864      	ldr	r4, [r4, #4]
 8008b10:	e7ae      	b.n	8008a70 <_malloc_r+0x34>
 8008b12:	463c      	mov	r4, r7
 8008b14:	687f      	ldr	r7, [r7, #4]
 8008b16:	e7b6      	b.n	8008a86 <_malloc_r+0x4a>
 8008b18:	461a      	mov	r2, r3
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	d1fb      	bne.n	8008b18 <_malloc_r+0xdc>
 8008b20:	2300      	movs	r3, #0
 8008b22:	6053      	str	r3, [r2, #4]
 8008b24:	e7de      	b.n	8008ae4 <_malloc_r+0xa8>
 8008b26:	230c      	movs	r3, #12
 8008b28:	6033      	str	r3, [r6, #0]
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f000 f80c 	bl	8008b48 <__malloc_unlock>
 8008b30:	e794      	b.n	8008a5c <_malloc_r+0x20>
 8008b32:	6005      	str	r5, [r0, #0]
 8008b34:	e7d6      	b.n	8008ae4 <_malloc_r+0xa8>
 8008b36:	bf00      	nop
 8008b38:	20000cb8 	.word	0x20000cb8

08008b3c <__malloc_lock>:
 8008b3c:	4801      	ldr	r0, [pc, #4]	@ (8008b44 <__malloc_lock+0x8>)
 8008b3e:	f001 b870 	b.w	8009c22 <__retarget_lock_acquire_recursive>
 8008b42:	bf00      	nop
 8008b44:	20000dfc 	.word	0x20000dfc

08008b48 <__malloc_unlock>:
 8008b48:	4801      	ldr	r0, [pc, #4]	@ (8008b50 <__malloc_unlock+0x8>)
 8008b4a:	f001 b86b 	b.w	8009c24 <__retarget_lock_release_recursive>
 8008b4e:	bf00      	nop
 8008b50:	20000dfc 	.word	0x20000dfc

08008b54 <realloc>:
 8008b54:	4b02      	ldr	r3, [pc, #8]	@ (8008b60 <realloc+0xc>)
 8008b56:	460a      	mov	r2, r1
 8008b58:	4601      	mov	r1, r0
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	f000 b802 	b.w	8008b64 <_realloc_r>
 8008b60:	200009c8 	.word	0x200009c8

08008b64 <_realloc_r>:
 8008b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b68:	4680      	mov	r8, r0
 8008b6a:	4615      	mov	r5, r2
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	b921      	cbnz	r1, 8008b7a <_realloc_r+0x16>
 8008b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b74:	4611      	mov	r1, r2
 8008b76:	f7ff bf61 	b.w	8008a3c <_malloc_r>
 8008b7a:	b92a      	cbnz	r2, 8008b88 <_realloc_r+0x24>
 8008b7c:	f001 f86c 	bl	8009c58 <_free_r>
 8008b80:	2400      	movs	r4, #0
 8008b82:	4620      	mov	r0, r4
 8008b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b88:	f002 f8ae 	bl	800ace8 <_malloc_usable_size_r>
 8008b8c:	4285      	cmp	r5, r0
 8008b8e:	4606      	mov	r6, r0
 8008b90:	d802      	bhi.n	8008b98 <_realloc_r+0x34>
 8008b92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b96:	d8f4      	bhi.n	8008b82 <_realloc_r+0x1e>
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4640      	mov	r0, r8
 8008b9c:	f7ff ff4e 	bl	8008a3c <_malloc_r>
 8008ba0:	4607      	mov	r7, r0
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d0ec      	beq.n	8008b80 <_realloc_r+0x1c>
 8008ba6:	42b5      	cmp	r5, r6
 8008ba8:	462a      	mov	r2, r5
 8008baa:	4621      	mov	r1, r4
 8008bac:	bf28      	it	cs
 8008bae:	4632      	movcs	r2, r6
 8008bb0:	f001 f839 	bl	8009c26 <memcpy>
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	f001 f84e 	bl	8009c58 <_free_r>
 8008bbc:	463c      	mov	r4, r7
 8008bbe:	e7e0      	b.n	8008b82 <_realloc_r+0x1e>

08008bc0 <sulp>:
 8008bc0:	b570      	push	{r4, r5, r6, lr}
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	460d      	mov	r5, r1
 8008bc6:	ec45 4b10 	vmov	d0, r4, r5
 8008bca:	4616      	mov	r6, r2
 8008bcc:	f001 ff4e 	bl	800aa6c <__ulp>
 8008bd0:	ec51 0b10 	vmov	r0, r1, d0
 8008bd4:	b17e      	cbz	r6, 8008bf6 <sulp+0x36>
 8008bd6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bda:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dd09      	ble.n	8008bf6 <sulp+0x36>
 8008be2:	051b      	lsls	r3, r3, #20
 8008be4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008be8:	2400      	movs	r4, #0
 8008bea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008bee:	4622      	mov	r2, r4
 8008bf0:	462b      	mov	r3, r5
 8008bf2:	f7f7 fd11 	bl	8000618 <__aeabi_dmul>
 8008bf6:	ec41 0b10 	vmov	d0, r0, r1
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
 8008bfc:	0000      	movs	r0, r0
	...

08008c00 <_strtod_l>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	b09f      	sub	sp, #124	@ 0x7c
 8008c06:	460c      	mov	r4, r1
 8008c08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008c0e:	9005      	str	r0, [sp, #20]
 8008c10:	f04f 0a00 	mov.w	sl, #0
 8008c14:	f04f 0b00 	mov.w	fp, #0
 8008c18:	460a      	mov	r2, r1
 8008c1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c1c:	7811      	ldrb	r1, [r2, #0]
 8008c1e:	292b      	cmp	r1, #43	@ 0x2b
 8008c20:	d04a      	beq.n	8008cb8 <_strtod_l+0xb8>
 8008c22:	d838      	bhi.n	8008c96 <_strtod_l+0x96>
 8008c24:	290d      	cmp	r1, #13
 8008c26:	d832      	bhi.n	8008c8e <_strtod_l+0x8e>
 8008c28:	2908      	cmp	r1, #8
 8008c2a:	d832      	bhi.n	8008c92 <_strtod_l+0x92>
 8008c2c:	2900      	cmp	r1, #0
 8008c2e:	d03b      	beq.n	8008ca8 <_strtod_l+0xa8>
 8008c30:	2200      	movs	r2, #0
 8008c32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008c34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008c36:	782a      	ldrb	r2, [r5, #0]
 8008c38:	2a30      	cmp	r2, #48	@ 0x30
 8008c3a:	f040 80b3 	bne.w	8008da4 <_strtod_l+0x1a4>
 8008c3e:	786a      	ldrb	r2, [r5, #1]
 8008c40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c44:	2a58      	cmp	r2, #88	@ 0x58
 8008c46:	d16e      	bne.n	8008d26 <_strtod_l+0x126>
 8008c48:	9302      	str	r3, [sp, #8]
 8008c4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c4c:	9301      	str	r3, [sp, #4]
 8008c4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	4a8e      	ldr	r2, [pc, #568]	@ (8008e8c <_strtod_l+0x28c>)
 8008c54:	9805      	ldr	r0, [sp, #20]
 8008c56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008c58:	a919      	add	r1, sp, #100	@ 0x64
 8008c5a:	f001 f8af 	bl	8009dbc <__gethex>
 8008c5e:	f010 060f 	ands.w	r6, r0, #15
 8008c62:	4604      	mov	r4, r0
 8008c64:	d005      	beq.n	8008c72 <_strtod_l+0x72>
 8008c66:	2e06      	cmp	r6, #6
 8008c68:	d128      	bne.n	8008cbc <_strtod_l+0xbc>
 8008c6a:	3501      	adds	r5, #1
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 858e 	bne.w	8009796 <_strtod_l+0xb96>
 8008c7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c7c:	b1cb      	cbz	r3, 8008cb2 <_strtod_l+0xb2>
 8008c7e:	4652      	mov	r2, sl
 8008c80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008c84:	ec43 2b10 	vmov	d0, r2, r3
 8008c88:	b01f      	add	sp, #124	@ 0x7c
 8008c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8e:	2920      	cmp	r1, #32
 8008c90:	d1ce      	bne.n	8008c30 <_strtod_l+0x30>
 8008c92:	3201      	adds	r2, #1
 8008c94:	e7c1      	b.n	8008c1a <_strtod_l+0x1a>
 8008c96:	292d      	cmp	r1, #45	@ 0x2d
 8008c98:	d1ca      	bne.n	8008c30 <_strtod_l+0x30>
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008c9e:	1c51      	adds	r1, r2, #1
 8008ca0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ca2:	7852      	ldrb	r2, [r2, #1]
 8008ca4:	2a00      	cmp	r2, #0
 8008ca6:	d1c5      	bne.n	8008c34 <_strtod_l+0x34>
 8008ca8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008caa:	9419      	str	r4, [sp, #100]	@ 0x64
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f040 8570 	bne.w	8009792 <_strtod_l+0xb92>
 8008cb2:	4652      	mov	r2, sl
 8008cb4:	465b      	mov	r3, fp
 8008cb6:	e7e5      	b.n	8008c84 <_strtod_l+0x84>
 8008cb8:	2100      	movs	r1, #0
 8008cba:	e7ef      	b.n	8008c9c <_strtod_l+0x9c>
 8008cbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008cbe:	b13a      	cbz	r2, 8008cd0 <_strtod_l+0xd0>
 8008cc0:	2135      	movs	r1, #53	@ 0x35
 8008cc2:	a81c      	add	r0, sp, #112	@ 0x70
 8008cc4:	f001 ffcc 	bl	800ac60 <__copybits>
 8008cc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cca:	9805      	ldr	r0, [sp, #20]
 8008ccc:	f001 fb9a 	bl	800a404 <_Bfree>
 8008cd0:	3e01      	subs	r6, #1
 8008cd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008cd4:	2e04      	cmp	r6, #4
 8008cd6:	d806      	bhi.n	8008ce6 <_strtod_l+0xe6>
 8008cd8:	e8df f006 	tbb	[pc, r6]
 8008cdc:	201d0314 	.word	0x201d0314
 8008ce0:	14          	.byte	0x14
 8008ce1:	00          	.byte	0x00
 8008ce2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008ce6:	05e1      	lsls	r1, r4, #23
 8008ce8:	bf48      	it	mi
 8008cea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008cee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008cf2:	0d1b      	lsrs	r3, r3, #20
 8008cf4:	051b      	lsls	r3, r3, #20
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1bb      	bne.n	8008c72 <_strtod_l+0x72>
 8008cfa:	f000 ff67 	bl	8009bcc <__errno>
 8008cfe:	2322      	movs	r3, #34	@ 0x22
 8008d00:	6003      	str	r3, [r0, #0]
 8008d02:	e7b6      	b.n	8008c72 <_strtod_l+0x72>
 8008d04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008d08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008d0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008d10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d14:	e7e7      	b.n	8008ce6 <_strtod_l+0xe6>
 8008d16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008e94 <_strtod_l+0x294>
 8008d1a:	e7e4      	b.n	8008ce6 <_strtod_l+0xe6>
 8008d1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008d20:	f04f 3aff 	mov.w	sl, #4294967295
 8008d24:	e7df      	b.n	8008ce6 <_strtod_l+0xe6>
 8008d26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d28:	1c5a      	adds	r2, r3, #1
 8008d2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d2c:	785b      	ldrb	r3, [r3, #1]
 8008d2e:	2b30      	cmp	r3, #48	@ 0x30
 8008d30:	d0f9      	beq.n	8008d26 <_strtod_l+0x126>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d09d      	beq.n	8008c72 <_strtod_l+0x72>
 8008d36:	2301      	movs	r3, #1
 8008d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d3e:	2300      	movs	r3, #0
 8008d40:	9308      	str	r3, [sp, #32]
 8008d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d44:	461f      	mov	r7, r3
 8008d46:	220a      	movs	r2, #10
 8008d48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008d4a:	7805      	ldrb	r5, [r0, #0]
 8008d4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008d50:	b2d9      	uxtb	r1, r3
 8008d52:	2909      	cmp	r1, #9
 8008d54:	d928      	bls.n	8008da8 <_strtod_l+0x1a8>
 8008d56:	494e      	ldr	r1, [pc, #312]	@ (8008e90 <_strtod_l+0x290>)
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f000 fece 	bl	8009afa <strncmp>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d032      	beq.n	8008dc8 <_strtod_l+0x1c8>
 8008d62:	2000      	movs	r0, #0
 8008d64:	462a      	mov	r2, r5
 8008d66:	4681      	mov	r9, r0
 8008d68:	463d      	mov	r5, r7
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2a65      	cmp	r2, #101	@ 0x65
 8008d6e:	d001      	beq.n	8008d74 <_strtod_l+0x174>
 8008d70:	2a45      	cmp	r2, #69	@ 0x45
 8008d72:	d114      	bne.n	8008d9e <_strtod_l+0x19e>
 8008d74:	b91d      	cbnz	r5, 8008d7e <_strtod_l+0x17e>
 8008d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d78:	4302      	orrs	r2, r0
 8008d7a:	d095      	beq.n	8008ca8 <_strtod_l+0xa8>
 8008d7c:	2500      	movs	r5, #0
 8008d7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008d80:	1c62      	adds	r2, r4, #1
 8008d82:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d84:	7862      	ldrb	r2, [r4, #1]
 8008d86:	2a2b      	cmp	r2, #43	@ 0x2b
 8008d88:	d077      	beq.n	8008e7a <_strtod_l+0x27a>
 8008d8a:	2a2d      	cmp	r2, #45	@ 0x2d
 8008d8c:	d07b      	beq.n	8008e86 <_strtod_l+0x286>
 8008d8e:	f04f 0c00 	mov.w	ip, #0
 8008d92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008d96:	2909      	cmp	r1, #9
 8008d98:	f240 8082 	bls.w	8008ea0 <_strtod_l+0x2a0>
 8008d9c:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d9e:	f04f 0800 	mov.w	r8, #0
 8008da2:	e0a2      	b.n	8008eea <_strtod_l+0x2ea>
 8008da4:	2300      	movs	r3, #0
 8008da6:	e7c7      	b.n	8008d38 <_strtod_l+0x138>
 8008da8:	2f08      	cmp	r7, #8
 8008daa:	bfd5      	itete	le
 8008dac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008dae:	9908      	ldrgt	r1, [sp, #32]
 8008db0:	fb02 3301 	mlale	r3, r2, r1, r3
 8008db4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008db8:	f100 0001 	add.w	r0, r0, #1
 8008dbc:	bfd4      	ite	le
 8008dbe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008dc0:	9308      	strgt	r3, [sp, #32]
 8008dc2:	3701      	adds	r7, #1
 8008dc4:	9019      	str	r0, [sp, #100]	@ 0x64
 8008dc6:	e7bf      	b.n	8008d48 <_strtod_l+0x148>
 8008dc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dce:	785a      	ldrb	r2, [r3, #1]
 8008dd0:	b37f      	cbz	r7, 8008e32 <_strtod_l+0x232>
 8008dd2:	4681      	mov	r9, r0
 8008dd4:	463d      	mov	r5, r7
 8008dd6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008dda:	2b09      	cmp	r3, #9
 8008ddc:	d912      	bls.n	8008e04 <_strtod_l+0x204>
 8008dde:	2301      	movs	r3, #1
 8008de0:	e7c4      	b.n	8008d6c <_strtod_l+0x16c>
 8008de2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008de8:	785a      	ldrb	r2, [r3, #1]
 8008dea:	3001      	adds	r0, #1
 8008dec:	2a30      	cmp	r2, #48	@ 0x30
 8008dee:	d0f8      	beq.n	8008de2 <_strtod_l+0x1e2>
 8008df0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008df4:	2b08      	cmp	r3, #8
 8008df6:	f200 84d3 	bhi.w	80097a0 <_strtod_l+0xba0>
 8008dfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dfc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008dfe:	4681      	mov	r9, r0
 8008e00:	2000      	movs	r0, #0
 8008e02:	4605      	mov	r5, r0
 8008e04:	3a30      	subs	r2, #48	@ 0x30
 8008e06:	f100 0301 	add.w	r3, r0, #1
 8008e0a:	d02a      	beq.n	8008e62 <_strtod_l+0x262>
 8008e0c:	4499      	add	r9, r3
 8008e0e:	eb00 0c05 	add.w	ip, r0, r5
 8008e12:	462b      	mov	r3, r5
 8008e14:	210a      	movs	r1, #10
 8008e16:	4563      	cmp	r3, ip
 8008e18:	d10d      	bne.n	8008e36 <_strtod_l+0x236>
 8008e1a:	1c69      	adds	r1, r5, #1
 8008e1c:	4401      	add	r1, r0
 8008e1e:	4428      	add	r0, r5
 8008e20:	2808      	cmp	r0, #8
 8008e22:	dc16      	bgt.n	8008e52 <_strtod_l+0x252>
 8008e24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e26:	230a      	movs	r3, #10
 8008e28:	fb03 2300 	mla	r3, r3, r0, r2
 8008e2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e018      	b.n	8008e64 <_strtod_l+0x264>
 8008e32:	4638      	mov	r0, r7
 8008e34:	e7da      	b.n	8008dec <_strtod_l+0x1ec>
 8008e36:	2b08      	cmp	r3, #8
 8008e38:	f103 0301 	add.w	r3, r3, #1
 8008e3c:	dc03      	bgt.n	8008e46 <_strtod_l+0x246>
 8008e3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008e40:	434e      	muls	r6, r1
 8008e42:	960a      	str	r6, [sp, #40]	@ 0x28
 8008e44:	e7e7      	b.n	8008e16 <_strtod_l+0x216>
 8008e46:	2b10      	cmp	r3, #16
 8008e48:	bfde      	ittt	le
 8008e4a:	9e08      	ldrle	r6, [sp, #32]
 8008e4c:	434e      	mulle	r6, r1
 8008e4e:	9608      	strle	r6, [sp, #32]
 8008e50:	e7e1      	b.n	8008e16 <_strtod_l+0x216>
 8008e52:	280f      	cmp	r0, #15
 8008e54:	dceb      	bgt.n	8008e2e <_strtod_l+0x22e>
 8008e56:	9808      	ldr	r0, [sp, #32]
 8008e58:	230a      	movs	r3, #10
 8008e5a:	fb03 2300 	mla	r3, r3, r0, r2
 8008e5e:	9308      	str	r3, [sp, #32]
 8008e60:	e7e5      	b.n	8008e2e <_strtod_l+0x22e>
 8008e62:	4629      	mov	r1, r5
 8008e64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e66:	1c50      	adds	r0, r2, #1
 8008e68:	9019      	str	r0, [sp, #100]	@ 0x64
 8008e6a:	7852      	ldrb	r2, [r2, #1]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	460d      	mov	r5, r1
 8008e70:	e7b1      	b.n	8008dd6 <_strtod_l+0x1d6>
 8008e72:	f04f 0900 	mov.w	r9, #0
 8008e76:	2301      	movs	r3, #1
 8008e78:	e77d      	b.n	8008d76 <_strtod_l+0x176>
 8008e7a:	f04f 0c00 	mov.w	ip, #0
 8008e7e:	1ca2      	adds	r2, r4, #2
 8008e80:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e82:	78a2      	ldrb	r2, [r4, #2]
 8008e84:	e785      	b.n	8008d92 <_strtod_l+0x192>
 8008e86:	f04f 0c01 	mov.w	ip, #1
 8008e8a:	e7f8      	b.n	8008e7e <_strtod_l+0x27e>
 8008e8c:	08017e1c 	.word	0x08017e1c
 8008e90:	08017df8 	.word	0x08017df8
 8008e94:	7ff00000 	.word	0x7ff00000
 8008e98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e9a:	1c51      	adds	r1, r2, #1
 8008e9c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e9e:	7852      	ldrb	r2, [r2, #1]
 8008ea0:	2a30      	cmp	r2, #48	@ 0x30
 8008ea2:	d0f9      	beq.n	8008e98 <_strtod_l+0x298>
 8008ea4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008ea8:	2908      	cmp	r1, #8
 8008eaa:	f63f af78 	bhi.w	8008d9e <_strtod_l+0x19e>
 8008eae:	3a30      	subs	r2, #48	@ 0x30
 8008eb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008eb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008eb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008eb6:	f04f 080a 	mov.w	r8, #10
 8008eba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ebc:	1c56      	adds	r6, r2, #1
 8008ebe:	9619      	str	r6, [sp, #100]	@ 0x64
 8008ec0:	7852      	ldrb	r2, [r2, #1]
 8008ec2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008ec6:	f1be 0f09 	cmp.w	lr, #9
 8008eca:	d939      	bls.n	8008f40 <_strtod_l+0x340>
 8008ecc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ece:	1a76      	subs	r6, r6, r1
 8008ed0:	2e08      	cmp	r6, #8
 8008ed2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008ed6:	dc03      	bgt.n	8008ee0 <_strtod_l+0x2e0>
 8008ed8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008eda:	4588      	cmp	r8, r1
 8008edc:	bfa8      	it	ge
 8008ede:	4688      	movge	r8, r1
 8008ee0:	f1bc 0f00 	cmp.w	ip, #0
 8008ee4:	d001      	beq.n	8008eea <_strtod_l+0x2ea>
 8008ee6:	f1c8 0800 	rsb	r8, r8, #0
 8008eea:	2d00      	cmp	r5, #0
 8008eec:	d14e      	bne.n	8008f8c <_strtod_l+0x38c>
 8008eee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ef0:	4308      	orrs	r0, r1
 8008ef2:	f47f aebe 	bne.w	8008c72 <_strtod_l+0x72>
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f47f aed6 	bne.w	8008ca8 <_strtod_l+0xa8>
 8008efc:	2a69      	cmp	r2, #105	@ 0x69
 8008efe:	d028      	beq.n	8008f52 <_strtod_l+0x352>
 8008f00:	dc25      	bgt.n	8008f4e <_strtod_l+0x34e>
 8008f02:	2a49      	cmp	r2, #73	@ 0x49
 8008f04:	d025      	beq.n	8008f52 <_strtod_l+0x352>
 8008f06:	2a4e      	cmp	r2, #78	@ 0x4e
 8008f08:	f47f aece 	bne.w	8008ca8 <_strtod_l+0xa8>
 8008f0c:	499b      	ldr	r1, [pc, #620]	@ (800917c <_strtod_l+0x57c>)
 8008f0e:	a819      	add	r0, sp, #100	@ 0x64
 8008f10:	f001 f976 	bl	800a200 <__match>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	f43f aec7 	beq.w	8008ca8 <_strtod_l+0xa8>
 8008f1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b28      	cmp	r3, #40	@ 0x28
 8008f20:	d12e      	bne.n	8008f80 <_strtod_l+0x380>
 8008f22:	4997      	ldr	r1, [pc, #604]	@ (8009180 <_strtod_l+0x580>)
 8008f24:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f26:	a819      	add	r0, sp, #100	@ 0x64
 8008f28:	f001 f97e 	bl	800a228 <__hexnan>
 8008f2c:	2805      	cmp	r0, #5
 8008f2e:	d127      	bne.n	8008f80 <_strtod_l+0x380>
 8008f30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008f36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008f3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008f3e:	e698      	b.n	8008c72 <_strtod_l+0x72>
 8008f40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008f42:	fb08 2101 	mla	r1, r8, r1, r2
 8008f46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008f4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f4c:	e7b5      	b.n	8008eba <_strtod_l+0x2ba>
 8008f4e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008f50:	e7da      	b.n	8008f08 <_strtod_l+0x308>
 8008f52:	498c      	ldr	r1, [pc, #560]	@ (8009184 <_strtod_l+0x584>)
 8008f54:	a819      	add	r0, sp, #100	@ 0x64
 8008f56:	f001 f953 	bl	800a200 <__match>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	f43f aea4 	beq.w	8008ca8 <_strtod_l+0xa8>
 8008f60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f62:	4989      	ldr	r1, [pc, #548]	@ (8009188 <_strtod_l+0x588>)
 8008f64:	3b01      	subs	r3, #1
 8008f66:	a819      	add	r0, sp, #100	@ 0x64
 8008f68:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f6a:	f001 f949 	bl	800a200 <__match>
 8008f6e:	b910      	cbnz	r0, 8008f76 <_strtod_l+0x376>
 8008f70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f72:	3301      	adds	r3, #1
 8008f74:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f76:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009198 <_strtod_l+0x598>
 8008f7a:	f04f 0a00 	mov.w	sl, #0
 8008f7e:	e678      	b.n	8008c72 <_strtod_l+0x72>
 8008f80:	4882      	ldr	r0, [pc, #520]	@ (800918c <_strtod_l+0x58c>)
 8008f82:	f000 fe61 	bl	8009c48 <nan>
 8008f86:	ec5b ab10 	vmov	sl, fp, d0
 8008f8a:	e672      	b.n	8008c72 <_strtod_l+0x72>
 8008f8c:	eba8 0309 	sub.w	r3, r8, r9
 8008f90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f94:	2f00      	cmp	r7, #0
 8008f96:	bf08      	it	eq
 8008f98:	462f      	moveq	r7, r5
 8008f9a:	2d10      	cmp	r5, #16
 8008f9c:	462c      	mov	r4, r5
 8008f9e:	bfa8      	it	ge
 8008fa0:	2410      	movge	r4, #16
 8008fa2:	f7f7 fabf 	bl	8000524 <__aeabi_ui2d>
 8008fa6:	2d09      	cmp	r5, #9
 8008fa8:	4682      	mov	sl, r0
 8008faa:	468b      	mov	fp, r1
 8008fac:	dc13      	bgt.n	8008fd6 <_strtod_l+0x3d6>
 8008fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f43f ae5e 	beq.w	8008c72 <_strtod_l+0x72>
 8008fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb8:	dd78      	ble.n	80090ac <_strtod_l+0x4ac>
 8008fba:	2b16      	cmp	r3, #22
 8008fbc:	dc5f      	bgt.n	800907e <_strtod_l+0x47e>
 8008fbe:	4974      	ldr	r1, [pc, #464]	@ (8009190 <_strtod_l+0x590>)
 8008fc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fc8:	4652      	mov	r2, sl
 8008fca:	465b      	mov	r3, fp
 8008fcc:	f7f7 fb24 	bl	8000618 <__aeabi_dmul>
 8008fd0:	4682      	mov	sl, r0
 8008fd2:	468b      	mov	fp, r1
 8008fd4:	e64d      	b.n	8008c72 <_strtod_l+0x72>
 8008fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8009190 <_strtod_l+0x590>)
 8008fd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fdc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008fe0:	f7f7 fb1a 	bl	8000618 <__aeabi_dmul>
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	9808      	ldr	r0, [sp, #32]
 8008fe8:	468b      	mov	fp, r1
 8008fea:	f7f7 fa9b 	bl	8000524 <__aeabi_ui2d>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4650      	mov	r0, sl
 8008ff4:	4659      	mov	r1, fp
 8008ff6:	f7f7 f959 	bl	80002ac <__adddf3>
 8008ffa:	2d0f      	cmp	r5, #15
 8008ffc:	4682      	mov	sl, r0
 8008ffe:	468b      	mov	fp, r1
 8009000:	ddd5      	ble.n	8008fae <_strtod_l+0x3ae>
 8009002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009004:	1b2c      	subs	r4, r5, r4
 8009006:	441c      	add	r4, r3
 8009008:	2c00      	cmp	r4, #0
 800900a:	f340 8096 	ble.w	800913a <_strtod_l+0x53a>
 800900e:	f014 030f 	ands.w	r3, r4, #15
 8009012:	d00a      	beq.n	800902a <_strtod_l+0x42a>
 8009014:	495e      	ldr	r1, [pc, #376]	@ (8009190 <_strtod_l+0x590>)
 8009016:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800901a:	4652      	mov	r2, sl
 800901c:	465b      	mov	r3, fp
 800901e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009022:	f7f7 faf9 	bl	8000618 <__aeabi_dmul>
 8009026:	4682      	mov	sl, r0
 8009028:	468b      	mov	fp, r1
 800902a:	f034 040f 	bics.w	r4, r4, #15
 800902e:	d073      	beq.n	8009118 <_strtod_l+0x518>
 8009030:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009034:	dd48      	ble.n	80090c8 <_strtod_l+0x4c8>
 8009036:	2400      	movs	r4, #0
 8009038:	46a0      	mov	r8, r4
 800903a:	940a      	str	r4, [sp, #40]	@ 0x28
 800903c:	46a1      	mov	r9, r4
 800903e:	9a05      	ldr	r2, [sp, #20]
 8009040:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009198 <_strtod_l+0x598>
 8009044:	2322      	movs	r3, #34	@ 0x22
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	f04f 0a00 	mov.w	sl, #0
 800904c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800904e:	2b00      	cmp	r3, #0
 8009050:	f43f ae0f 	beq.w	8008c72 <_strtod_l+0x72>
 8009054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009056:	9805      	ldr	r0, [sp, #20]
 8009058:	f001 f9d4 	bl	800a404 <_Bfree>
 800905c:	9805      	ldr	r0, [sp, #20]
 800905e:	4649      	mov	r1, r9
 8009060:	f001 f9d0 	bl	800a404 <_Bfree>
 8009064:	9805      	ldr	r0, [sp, #20]
 8009066:	4641      	mov	r1, r8
 8009068:	f001 f9cc 	bl	800a404 <_Bfree>
 800906c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800906e:	9805      	ldr	r0, [sp, #20]
 8009070:	f001 f9c8 	bl	800a404 <_Bfree>
 8009074:	9805      	ldr	r0, [sp, #20]
 8009076:	4621      	mov	r1, r4
 8009078:	f001 f9c4 	bl	800a404 <_Bfree>
 800907c:	e5f9      	b.n	8008c72 <_strtod_l+0x72>
 800907e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009080:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009084:	4293      	cmp	r3, r2
 8009086:	dbbc      	blt.n	8009002 <_strtod_l+0x402>
 8009088:	4c41      	ldr	r4, [pc, #260]	@ (8009190 <_strtod_l+0x590>)
 800908a:	f1c5 050f 	rsb	r5, r5, #15
 800908e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009092:	4652      	mov	r2, sl
 8009094:	465b      	mov	r3, fp
 8009096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800909a:	f7f7 fabd 	bl	8000618 <__aeabi_dmul>
 800909e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a0:	1b5d      	subs	r5, r3, r5
 80090a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80090a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80090aa:	e78f      	b.n	8008fcc <_strtod_l+0x3cc>
 80090ac:	3316      	adds	r3, #22
 80090ae:	dba8      	blt.n	8009002 <_strtod_l+0x402>
 80090b0:	4b37      	ldr	r3, [pc, #220]	@ (8009190 <_strtod_l+0x590>)
 80090b2:	eba9 0808 	sub.w	r8, r9, r8
 80090b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80090ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80090be:	4650      	mov	r0, sl
 80090c0:	4659      	mov	r1, fp
 80090c2:	f7f7 fbd3 	bl	800086c <__aeabi_ddiv>
 80090c6:	e783      	b.n	8008fd0 <_strtod_l+0x3d0>
 80090c8:	4b32      	ldr	r3, [pc, #200]	@ (8009194 <_strtod_l+0x594>)
 80090ca:	9308      	str	r3, [sp, #32]
 80090cc:	2300      	movs	r3, #0
 80090ce:	1124      	asrs	r4, r4, #4
 80090d0:	4650      	mov	r0, sl
 80090d2:	4659      	mov	r1, fp
 80090d4:	461e      	mov	r6, r3
 80090d6:	2c01      	cmp	r4, #1
 80090d8:	dc21      	bgt.n	800911e <_strtod_l+0x51e>
 80090da:	b10b      	cbz	r3, 80090e0 <_strtod_l+0x4e0>
 80090dc:	4682      	mov	sl, r0
 80090de:	468b      	mov	fp, r1
 80090e0:	492c      	ldr	r1, [pc, #176]	@ (8009194 <_strtod_l+0x594>)
 80090e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80090e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80090ea:	4652      	mov	r2, sl
 80090ec:	465b      	mov	r3, fp
 80090ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090f2:	f7f7 fa91 	bl	8000618 <__aeabi_dmul>
 80090f6:	4b28      	ldr	r3, [pc, #160]	@ (8009198 <_strtod_l+0x598>)
 80090f8:	460a      	mov	r2, r1
 80090fa:	400b      	ands	r3, r1
 80090fc:	4927      	ldr	r1, [pc, #156]	@ (800919c <_strtod_l+0x59c>)
 80090fe:	428b      	cmp	r3, r1
 8009100:	4682      	mov	sl, r0
 8009102:	d898      	bhi.n	8009036 <_strtod_l+0x436>
 8009104:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009108:	428b      	cmp	r3, r1
 800910a:	bf86      	itte	hi
 800910c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80091a0 <_strtod_l+0x5a0>
 8009110:	f04f 3aff 	movhi.w	sl, #4294967295
 8009114:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009118:	2300      	movs	r3, #0
 800911a:	9308      	str	r3, [sp, #32]
 800911c:	e07a      	b.n	8009214 <_strtod_l+0x614>
 800911e:	07e2      	lsls	r2, r4, #31
 8009120:	d505      	bpl.n	800912e <_strtod_l+0x52e>
 8009122:	9b08      	ldr	r3, [sp, #32]
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	f7f7 fa76 	bl	8000618 <__aeabi_dmul>
 800912c:	2301      	movs	r3, #1
 800912e:	9a08      	ldr	r2, [sp, #32]
 8009130:	3208      	adds	r2, #8
 8009132:	3601      	adds	r6, #1
 8009134:	1064      	asrs	r4, r4, #1
 8009136:	9208      	str	r2, [sp, #32]
 8009138:	e7cd      	b.n	80090d6 <_strtod_l+0x4d6>
 800913a:	d0ed      	beq.n	8009118 <_strtod_l+0x518>
 800913c:	4264      	negs	r4, r4
 800913e:	f014 020f 	ands.w	r2, r4, #15
 8009142:	d00a      	beq.n	800915a <_strtod_l+0x55a>
 8009144:	4b12      	ldr	r3, [pc, #72]	@ (8009190 <_strtod_l+0x590>)
 8009146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800914a:	4650      	mov	r0, sl
 800914c:	4659      	mov	r1, fp
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	f7f7 fb8b 	bl	800086c <__aeabi_ddiv>
 8009156:	4682      	mov	sl, r0
 8009158:	468b      	mov	fp, r1
 800915a:	1124      	asrs	r4, r4, #4
 800915c:	d0dc      	beq.n	8009118 <_strtod_l+0x518>
 800915e:	2c1f      	cmp	r4, #31
 8009160:	dd20      	ble.n	80091a4 <_strtod_l+0x5a4>
 8009162:	2400      	movs	r4, #0
 8009164:	46a0      	mov	r8, r4
 8009166:	940a      	str	r4, [sp, #40]	@ 0x28
 8009168:	46a1      	mov	r9, r4
 800916a:	9a05      	ldr	r2, [sp, #20]
 800916c:	2322      	movs	r3, #34	@ 0x22
 800916e:	f04f 0a00 	mov.w	sl, #0
 8009172:	f04f 0b00 	mov.w	fp, #0
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	e768      	b.n	800904c <_strtod_l+0x44c>
 800917a:	bf00      	nop
 800917c:	08017e03 	.word	0x08017e03
 8009180:	08017e08 	.word	0x08017e08
 8009184:	08017dfa 	.word	0x08017dfa
 8009188:	08017dfd 	.word	0x08017dfd
 800918c:	080181c9 	.word	0x080181c9
 8009190:	08018078 	.word	0x08018078
 8009194:	08018050 	.word	0x08018050
 8009198:	7ff00000 	.word	0x7ff00000
 800919c:	7ca00000 	.word	0x7ca00000
 80091a0:	7fefffff 	.word	0x7fefffff
 80091a4:	f014 0310 	ands.w	r3, r4, #16
 80091a8:	bf18      	it	ne
 80091aa:	236a      	movne	r3, #106	@ 0x6a
 80091ac:	4ea9      	ldr	r6, [pc, #676]	@ (8009454 <_strtod_l+0x854>)
 80091ae:	9308      	str	r3, [sp, #32]
 80091b0:	4650      	mov	r0, sl
 80091b2:	4659      	mov	r1, fp
 80091b4:	2300      	movs	r3, #0
 80091b6:	07e2      	lsls	r2, r4, #31
 80091b8:	d504      	bpl.n	80091c4 <_strtod_l+0x5c4>
 80091ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091be:	f7f7 fa2b 	bl	8000618 <__aeabi_dmul>
 80091c2:	2301      	movs	r3, #1
 80091c4:	1064      	asrs	r4, r4, #1
 80091c6:	f106 0608 	add.w	r6, r6, #8
 80091ca:	d1f4      	bne.n	80091b6 <_strtod_l+0x5b6>
 80091cc:	b10b      	cbz	r3, 80091d2 <_strtod_l+0x5d2>
 80091ce:	4682      	mov	sl, r0
 80091d0:	468b      	mov	fp, r1
 80091d2:	9b08      	ldr	r3, [sp, #32]
 80091d4:	b1b3      	cbz	r3, 8009204 <_strtod_l+0x604>
 80091d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80091da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80091de:	2b00      	cmp	r3, #0
 80091e0:	4659      	mov	r1, fp
 80091e2:	dd0f      	ble.n	8009204 <_strtod_l+0x604>
 80091e4:	2b1f      	cmp	r3, #31
 80091e6:	dd55      	ble.n	8009294 <_strtod_l+0x694>
 80091e8:	2b34      	cmp	r3, #52	@ 0x34
 80091ea:	bfde      	ittt	le
 80091ec:	f04f 33ff 	movle.w	r3, #4294967295
 80091f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80091f4:	4093      	lslle	r3, r2
 80091f6:	f04f 0a00 	mov.w	sl, #0
 80091fa:	bfcc      	ite	gt
 80091fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009200:	ea03 0b01 	andle.w	fp, r3, r1
 8009204:	2200      	movs	r2, #0
 8009206:	2300      	movs	r3, #0
 8009208:	4650      	mov	r0, sl
 800920a:	4659      	mov	r1, fp
 800920c:	f7f7 fc6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009210:	2800      	cmp	r0, #0
 8009212:	d1a6      	bne.n	8009162 <_strtod_l+0x562>
 8009214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800921a:	9805      	ldr	r0, [sp, #20]
 800921c:	462b      	mov	r3, r5
 800921e:	463a      	mov	r2, r7
 8009220:	f001 f958 	bl	800a4d4 <__s2b>
 8009224:	900a      	str	r0, [sp, #40]	@ 0x28
 8009226:	2800      	cmp	r0, #0
 8009228:	f43f af05 	beq.w	8009036 <_strtod_l+0x436>
 800922c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800922e:	2a00      	cmp	r2, #0
 8009230:	eba9 0308 	sub.w	r3, r9, r8
 8009234:	bfa8      	it	ge
 8009236:	2300      	movge	r3, #0
 8009238:	9312      	str	r3, [sp, #72]	@ 0x48
 800923a:	2400      	movs	r4, #0
 800923c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009240:	9316      	str	r3, [sp, #88]	@ 0x58
 8009242:	46a0      	mov	r8, r4
 8009244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009246:	9805      	ldr	r0, [sp, #20]
 8009248:	6859      	ldr	r1, [r3, #4]
 800924a:	f001 f89b 	bl	800a384 <_Balloc>
 800924e:	4681      	mov	r9, r0
 8009250:	2800      	cmp	r0, #0
 8009252:	f43f aef4 	beq.w	800903e <_strtod_l+0x43e>
 8009256:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009258:	691a      	ldr	r2, [r3, #16]
 800925a:	3202      	adds	r2, #2
 800925c:	f103 010c 	add.w	r1, r3, #12
 8009260:	0092      	lsls	r2, r2, #2
 8009262:	300c      	adds	r0, #12
 8009264:	f000 fcdf 	bl	8009c26 <memcpy>
 8009268:	ec4b ab10 	vmov	d0, sl, fp
 800926c:	9805      	ldr	r0, [sp, #20]
 800926e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009270:	a91b      	add	r1, sp, #108	@ 0x6c
 8009272:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009276:	f001 fc69 	bl	800ab4c <__d2b>
 800927a:	901a      	str	r0, [sp, #104]	@ 0x68
 800927c:	2800      	cmp	r0, #0
 800927e:	f43f aede 	beq.w	800903e <_strtod_l+0x43e>
 8009282:	9805      	ldr	r0, [sp, #20]
 8009284:	2101      	movs	r1, #1
 8009286:	f001 f9bb 	bl	800a600 <__i2b>
 800928a:	4680      	mov	r8, r0
 800928c:	b948      	cbnz	r0, 80092a2 <_strtod_l+0x6a2>
 800928e:	f04f 0800 	mov.w	r8, #0
 8009292:	e6d4      	b.n	800903e <_strtod_l+0x43e>
 8009294:	f04f 32ff 	mov.w	r2, #4294967295
 8009298:	fa02 f303 	lsl.w	r3, r2, r3
 800929c:	ea03 0a0a 	and.w	sl, r3, sl
 80092a0:	e7b0      	b.n	8009204 <_strtod_l+0x604>
 80092a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80092a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80092a6:	2d00      	cmp	r5, #0
 80092a8:	bfab      	itete	ge
 80092aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80092ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80092ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80092b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80092b2:	bfac      	ite	ge
 80092b4:	18ef      	addge	r7, r5, r3
 80092b6:	1b5e      	sublt	r6, r3, r5
 80092b8:	9b08      	ldr	r3, [sp, #32]
 80092ba:	1aed      	subs	r5, r5, r3
 80092bc:	4415      	add	r5, r2
 80092be:	4b66      	ldr	r3, [pc, #408]	@ (8009458 <_strtod_l+0x858>)
 80092c0:	3d01      	subs	r5, #1
 80092c2:	429d      	cmp	r5, r3
 80092c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80092c8:	da50      	bge.n	800936c <_strtod_l+0x76c>
 80092ca:	1b5b      	subs	r3, r3, r5
 80092cc:	2b1f      	cmp	r3, #31
 80092ce:	eba2 0203 	sub.w	r2, r2, r3
 80092d2:	f04f 0101 	mov.w	r1, #1
 80092d6:	dc3d      	bgt.n	8009354 <_strtod_l+0x754>
 80092d8:	fa01 f303 	lsl.w	r3, r1, r3
 80092dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092de:	2300      	movs	r3, #0
 80092e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80092e2:	18bd      	adds	r5, r7, r2
 80092e4:	9b08      	ldr	r3, [sp, #32]
 80092e6:	42af      	cmp	r7, r5
 80092e8:	4416      	add	r6, r2
 80092ea:	441e      	add	r6, r3
 80092ec:	463b      	mov	r3, r7
 80092ee:	bfa8      	it	ge
 80092f0:	462b      	movge	r3, r5
 80092f2:	42b3      	cmp	r3, r6
 80092f4:	bfa8      	it	ge
 80092f6:	4633      	movge	r3, r6
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	bfc2      	ittt	gt
 80092fc:	1aed      	subgt	r5, r5, r3
 80092fe:	1af6      	subgt	r6, r6, r3
 8009300:	1aff      	subgt	r7, r7, r3
 8009302:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009304:	2b00      	cmp	r3, #0
 8009306:	dd16      	ble.n	8009336 <_strtod_l+0x736>
 8009308:	4641      	mov	r1, r8
 800930a:	9805      	ldr	r0, [sp, #20]
 800930c:	461a      	mov	r2, r3
 800930e:	f001 fa37 	bl	800a780 <__pow5mult>
 8009312:	4680      	mov	r8, r0
 8009314:	2800      	cmp	r0, #0
 8009316:	d0ba      	beq.n	800928e <_strtod_l+0x68e>
 8009318:	4601      	mov	r1, r0
 800931a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800931c:	9805      	ldr	r0, [sp, #20]
 800931e:	f001 f985 	bl	800a62c <__multiply>
 8009322:	900e      	str	r0, [sp, #56]	@ 0x38
 8009324:	2800      	cmp	r0, #0
 8009326:	f43f ae8a 	beq.w	800903e <_strtod_l+0x43e>
 800932a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800932c:	9805      	ldr	r0, [sp, #20]
 800932e:	f001 f869 	bl	800a404 <_Bfree>
 8009332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009334:	931a      	str	r3, [sp, #104]	@ 0x68
 8009336:	2d00      	cmp	r5, #0
 8009338:	dc1d      	bgt.n	8009376 <_strtod_l+0x776>
 800933a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800933c:	2b00      	cmp	r3, #0
 800933e:	dd23      	ble.n	8009388 <_strtod_l+0x788>
 8009340:	4649      	mov	r1, r9
 8009342:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009344:	9805      	ldr	r0, [sp, #20]
 8009346:	f001 fa1b 	bl	800a780 <__pow5mult>
 800934a:	4681      	mov	r9, r0
 800934c:	b9e0      	cbnz	r0, 8009388 <_strtod_l+0x788>
 800934e:	f04f 0900 	mov.w	r9, #0
 8009352:	e674      	b.n	800903e <_strtod_l+0x43e>
 8009354:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009358:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800935c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009360:	35e2      	adds	r5, #226	@ 0xe2
 8009362:	fa01 f305 	lsl.w	r3, r1, r5
 8009366:	9310      	str	r3, [sp, #64]	@ 0x40
 8009368:	9113      	str	r1, [sp, #76]	@ 0x4c
 800936a:	e7ba      	b.n	80092e2 <_strtod_l+0x6e2>
 800936c:	2300      	movs	r3, #0
 800936e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009370:	2301      	movs	r3, #1
 8009372:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009374:	e7b5      	b.n	80092e2 <_strtod_l+0x6e2>
 8009376:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009378:	9805      	ldr	r0, [sp, #20]
 800937a:	462a      	mov	r2, r5
 800937c:	f001 fa5a 	bl	800a834 <__lshift>
 8009380:	901a      	str	r0, [sp, #104]	@ 0x68
 8009382:	2800      	cmp	r0, #0
 8009384:	d1d9      	bne.n	800933a <_strtod_l+0x73a>
 8009386:	e65a      	b.n	800903e <_strtod_l+0x43e>
 8009388:	2e00      	cmp	r6, #0
 800938a:	dd07      	ble.n	800939c <_strtod_l+0x79c>
 800938c:	4649      	mov	r1, r9
 800938e:	9805      	ldr	r0, [sp, #20]
 8009390:	4632      	mov	r2, r6
 8009392:	f001 fa4f 	bl	800a834 <__lshift>
 8009396:	4681      	mov	r9, r0
 8009398:	2800      	cmp	r0, #0
 800939a:	d0d8      	beq.n	800934e <_strtod_l+0x74e>
 800939c:	2f00      	cmp	r7, #0
 800939e:	dd08      	ble.n	80093b2 <_strtod_l+0x7b2>
 80093a0:	4641      	mov	r1, r8
 80093a2:	9805      	ldr	r0, [sp, #20]
 80093a4:	463a      	mov	r2, r7
 80093a6:	f001 fa45 	bl	800a834 <__lshift>
 80093aa:	4680      	mov	r8, r0
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f43f ae46 	beq.w	800903e <_strtod_l+0x43e>
 80093b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093b4:	9805      	ldr	r0, [sp, #20]
 80093b6:	464a      	mov	r2, r9
 80093b8:	f001 fac4 	bl	800a944 <__mdiff>
 80093bc:	4604      	mov	r4, r0
 80093be:	2800      	cmp	r0, #0
 80093c0:	f43f ae3d 	beq.w	800903e <_strtod_l+0x43e>
 80093c4:	68c3      	ldr	r3, [r0, #12]
 80093c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093c8:	2300      	movs	r3, #0
 80093ca:	60c3      	str	r3, [r0, #12]
 80093cc:	4641      	mov	r1, r8
 80093ce:	f001 fa9d 	bl	800a90c <__mcmp>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	da46      	bge.n	8009464 <_strtod_l+0x864>
 80093d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093d8:	ea53 030a 	orrs.w	r3, r3, sl
 80093dc:	d16c      	bne.n	80094b8 <_strtod_l+0x8b8>
 80093de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d168      	bne.n	80094b8 <_strtod_l+0x8b8>
 80093e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093ea:	0d1b      	lsrs	r3, r3, #20
 80093ec:	051b      	lsls	r3, r3, #20
 80093ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093f2:	d961      	bls.n	80094b8 <_strtod_l+0x8b8>
 80093f4:	6963      	ldr	r3, [r4, #20]
 80093f6:	b913      	cbnz	r3, 80093fe <_strtod_l+0x7fe>
 80093f8:	6923      	ldr	r3, [r4, #16]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	dd5c      	ble.n	80094b8 <_strtod_l+0x8b8>
 80093fe:	4621      	mov	r1, r4
 8009400:	2201      	movs	r2, #1
 8009402:	9805      	ldr	r0, [sp, #20]
 8009404:	f001 fa16 	bl	800a834 <__lshift>
 8009408:	4641      	mov	r1, r8
 800940a:	4604      	mov	r4, r0
 800940c:	f001 fa7e 	bl	800a90c <__mcmp>
 8009410:	2800      	cmp	r0, #0
 8009412:	dd51      	ble.n	80094b8 <_strtod_l+0x8b8>
 8009414:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009418:	9a08      	ldr	r2, [sp, #32]
 800941a:	0d1b      	lsrs	r3, r3, #20
 800941c:	051b      	lsls	r3, r3, #20
 800941e:	2a00      	cmp	r2, #0
 8009420:	d06b      	beq.n	80094fa <_strtod_l+0x8fa>
 8009422:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009426:	d868      	bhi.n	80094fa <_strtod_l+0x8fa>
 8009428:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800942c:	f67f ae9d 	bls.w	800916a <_strtod_l+0x56a>
 8009430:	4b0a      	ldr	r3, [pc, #40]	@ (800945c <_strtod_l+0x85c>)
 8009432:	4650      	mov	r0, sl
 8009434:	4659      	mov	r1, fp
 8009436:	2200      	movs	r2, #0
 8009438:	f7f7 f8ee 	bl	8000618 <__aeabi_dmul>
 800943c:	4b08      	ldr	r3, [pc, #32]	@ (8009460 <_strtod_l+0x860>)
 800943e:	400b      	ands	r3, r1
 8009440:	4682      	mov	sl, r0
 8009442:	468b      	mov	fp, r1
 8009444:	2b00      	cmp	r3, #0
 8009446:	f47f ae05 	bne.w	8009054 <_strtod_l+0x454>
 800944a:	9a05      	ldr	r2, [sp, #20]
 800944c:	2322      	movs	r3, #34	@ 0x22
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	e600      	b.n	8009054 <_strtod_l+0x454>
 8009452:	bf00      	nop
 8009454:	08017e30 	.word	0x08017e30
 8009458:	fffffc02 	.word	0xfffffc02
 800945c:	39500000 	.word	0x39500000
 8009460:	7ff00000 	.word	0x7ff00000
 8009464:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009468:	d165      	bne.n	8009536 <_strtod_l+0x936>
 800946a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800946c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009470:	b35a      	cbz	r2, 80094ca <_strtod_l+0x8ca>
 8009472:	4a9f      	ldr	r2, [pc, #636]	@ (80096f0 <_strtod_l+0xaf0>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d12b      	bne.n	80094d0 <_strtod_l+0x8d0>
 8009478:	9b08      	ldr	r3, [sp, #32]
 800947a:	4651      	mov	r1, sl
 800947c:	b303      	cbz	r3, 80094c0 <_strtod_l+0x8c0>
 800947e:	4b9d      	ldr	r3, [pc, #628]	@ (80096f4 <_strtod_l+0xaf4>)
 8009480:	465a      	mov	r2, fp
 8009482:	4013      	ands	r3, r2
 8009484:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009488:	f04f 32ff 	mov.w	r2, #4294967295
 800948c:	d81b      	bhi.n	80094c6 <_strtod_l+0x8c6>
 800948e:	0d1b      	lsrs	r3, r3, #20
 8009490:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009494:	fa02 f303 	lsl.w	r3, r2, r3
 8009498:	4299      	cmp	r1, r3
 800949a:	d119      	bne.n	80094d0 <_strtod_l+0x8d0>
 800949c:	4b96      	ldr	r3, [pc, #600]	@ (80096f8 <_strtod_l+0xaf8>)
 800949e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d102      	bne.n	80094aa <_strtod_l+0x8aa>
 80094a4:	3101      	adds	r1, #1
 80094a6:	f43f adca 	beq.w	800903e <_strtod_l+0x43e>
 80094aa:	4b92      	ldr	r3, [pc, #584]	@ (80096f4 <_strtod_l+0xaf4>)
 80094ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094ae:	401a      	ands	r2, r3
 80094b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80094b4:	f04f 0a00 	mov.w	sl, #0
 80094b8:	9b08      	ldr	r3, [sp, #32]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1b8      	bne.n	8009430 <_strtod_l+0x830>
 80094be:	e5c9      	b.n	8009054 <_strtod_l+0x454>
 80094c0:	f04f 33ff 	mov.w	r3, #4294967295
 80094c4:	e7e8      	b.n	8009498 <_strtod_l+0x898>
 80094c6:	4613      	mov	r3, r2
 80094c8:	e7e6      	b.n	8009498 <_strtod_l+0x898>
 80094ca:	ea53 030a 	orrs.w	r3, r3, sl
 80094ce:	d0a1      	beq.n	8009414 <_strtod_l+0x814>
 80094d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094d2:	b1db      	cbz	r3, 800950c <_strtod_l+0x90c>
 80094d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094d6:	4213      	tst	r3, r2
 80094d8:	d0ee      	beq.n	80094b8 <_strtod_l+0x8b8>
 80094da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094dc:	9a08      	ldr	r2, [sp, #32]
 80094de:	4650      	mov	r0, sl
 80094e0:	4659      	mov	r1, fp
 80094e2:	b1bb      	cbz	r3, 8009514 <_strtod_l+0x914>
 80094e4:	f7ff fb6c 	bl	8008bc0 <sulp>
 80094e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094ec:	ec53 2b10 	vmov	r2, r3, d0
 80094f0:	f7f6 fedc 	bl	80002ac <__adddf3>
 80094f4:	4682      	mov	sl, r0
 80094f6:	468b      	mov	fp, r1
 80094f8:	e7de      	b.n	80094b8 <_strtod_l+0x8b8>
 80094fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80094fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009502:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009506:	f04f 3aff 	mov.w	sl, #4294967295
 800950a:	e7d5      	b.n	80094b8 <_strtod_l+0x8b8>
 800950c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800950e:	ea13 0f0a 	tst.w	r3, sl
 8009512:	e7e1      	b.n	80094d8 <_strtod_l+0x8d8>
 8009514:	f7ff fb54 	bl	8008bc0 <sulp>
 8009518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800951c:	ec53 2b10 	vmov	r2, r3, d0
 8009520:	f7f6 fec2 	bl	80002a8 <__aeabi_dsub>
 8009524:	2200      	movs	r2, #0
 8009526:	2300      	movs	r3, #0
 8009528:	4682      	mov	sl, r0
 800952a:	468b      	mov	fp, r1
 800952c:	f7f7 fadc 	bl	8000ae8 <__aeabi_dcmpeq>
 8009530:	2800      	cmp	r0, #0
 8009532:	d0c1      	beq.n	80094b8 <_strtod_l+0x8b8>
 8009534:	e619      	b.n	800916a <_strtod_l+0x56a>
 8009536:	4641      	mov	r1, r8
 8009538:	4620      	mov	r0, r4
 800953a:	f001 fb5f 	bl	800abfc <__ratio>
 800953e:	ec57 6b10 	vmov	r6, r7, d0
 8009542:	2200      	movs	r2, #0
 8009544:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009548:	4630      	mov	r0, r6
 800954a:	4639      	mov	r1, r7
 800954c:	f7f7 fae0 	bl	8000b10 <__aeabi_dcmple>
 8009550:	2800      	cmp	r0, #0
 8009552:	d06f      	beq.n	8009634 <_strtod_l+0xa34>
 8009554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009556:	2b00      	cmp	r3, #0
 8009558:	d17a      	bne.n	8009650 <_strtod_l+0xa50>
 800955a:	f1ba 0f00 	cmp.w	sl, #0
 800955e:	d158      	bne.n	8009612 <_strtod_l+0xa12>
 8009560:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009566:	2b00      	cmp	r3, #0
 8009568:	d15a      	bne.n	8009620 <_strtod_l+0xa20>
 800956a:	4b64      	ldr	r3, [pc, #400]	@ (80096fc <_strtod_l+0xafc>)
 800956c:	2200      	movs	r2, #0
 800956e:	4630      	mov	r0, r6
 8009570:	4639      	mov	r1, r7
 8009572:	f7f7 fac3 	bl	8000afc <__aeabi_dcmplt>
 8009576:	2800      	cmp	r0, #0
 8009578:	d159      	bne.n	800962e <_strtod_l+0xa2e>
 800957a:	4630      	mov	r0, r6
 800957c:	4639      	mov	r1, r7
 800957e:	4b60      	ldr	r3, [pc, #384]	@ (8009700 <_strtod_l+0xb00>)
 8009580:	2200      	movs	r2, #0
 8009582:	f7f7 f849 	bl	8000618 <__aeabi_dmul>
 8009586:	4606      	mov	r6, r0
 8009588:	460f      	mov	r7, r1
 800958a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800958e:	9606      	str	r6, [sp, #24]
 8009590:	9307      	str	r3, [sp, #28]
 8009592:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009596:	4d57      	ldr	r5, [pc, #348]	@ (80096f4 <_strtod_l+0xaf4>)
 8009598:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800959c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800959e:	401d      	ands	r5, r3
 80095a0:	4b58      	ldr	r3, [pc, #352]	@ (8009704 <_strtod_l+0xb04>)
 80095a2:	429d      	cmp	r5, r3
 80095a4:	f040 80b2 	bne.w	800970c <_strtod_l+0xb0c>
 80095a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80095ae:	ec4b ab10 	vmov	d0, sl, fp
 80095b2:	f001 fa5b 	bl	800aa6c <__ulp>
 80095b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095ba:	ec51 0b10 	vmov	r0, r1, d0
 80095be:	f7f7 f82b 	bl	8000618 <__aeabi_dmul>
 80095c2:	4652      	mov	r2, sl
 80095c4:	465b      	mov	r3, fp
 80095c6:	f7f6 fe71 	bl	80002ac <__adddf3>
 80095ca:	460b      	mov	r3, r1
 80095cc:	4949      	ldr	r1, [pc, #292]	@ (80096f4 <_strtod_l+0xaf4>)
 80095ce:	4a4e      	ldr	r2, [pc, #312]	@ (8009708 <_strtod_l+0xb08>)
 80095d0:	4019      	ands	r1, r3
 80095d2:	4291      	cmp	r1, r2
 80095d4:	4682      	mov	sl, r0
 80095d6:	d942      	bls.n	800965e <_strtod_l+0xa5e>
 80095d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095da:	4b47      	ldr	r3, [pc, #284]	@ (80096f8 <_strtod_l+0xaf8>)
 80095dc:	429a      	cmp	r2, r3
 80095de:	d103      	bne.n	80095e8 <_strtod_l+0x9e8>
 80095e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095e2:	3301      	adds	r3, #1
 80095e4:	f43f ad2b 	beq.w	800903e <_strtod_l+0x43e>
 80095e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80096f8 <_strtod_l+0xaf8>
 80095ec:	f04f 3aff 	mov.w	sl, #4294967295
 80095f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095f2:	9805      	ldr	r0, [sp, #20]
 80095f4:	f000 ff06 	bl	800a404 <_Bfree>
 80095f8:	9805      	ldr	r0, [sp, #20]
 80095fa:	4649      	mov	r1, r9
 80095fc:	f000 ff02 	bl	800a404 <_Bfree>
 8009600:	9805      	ldr	r0, [sp, #20]
 8009602:	4641      	mov	r1, r8
 8009604:	f000 fefe 	bl	800a404 <_Bfree>
 8009608:	9805      	ldr	r0, [sp, #20]
 800960a:	4621      	mov	r1, r4
 800960c:	f000 fefa 	bl	800a404 <_Bfree>
 8009610:	e618      	b.n	8009244 <_strtod_l+0x644>
 8009612:	f1ba 0f01 	cmp.w	sl, #1
 8009616:	d103      	bne.n	8009620 <_strtod_l+0xa20>
 8009618:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800961a:	2b00      	cmp	r3, #0
 800961c:	f43f ada5 	beq.w	800916a <_strtod_l+0x56a>
 8009620:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80096d0 <_strtod_l+0xad0>
 8009624:	4f35      	ldr	r7, [pc, #212]	@ (80096fc <_strtod_l+0xafc>)
 8009626:	ed8d 7b06 	vstr	d7, [sp, #24]
 800962a:	2600      	movs	r6, #0
 800962c:	e7b1      	b.n	8009592 <_strtod_l+0x992>
 800962e:	4f34      	ldr	r7, [pc, #208]	@ (8009700 <_strtod_l+0xb00>)
 8009630:	2600      	movs	r6, #0
 8009632:	e7aa      	b.n	800958a <_strtod_l+0x98a>
 8009634:	4b32      	ldr	r3, [pc, #200]	@ (8009700 <_strtod_l+0xb00>)
 8009636:	4630      	mov	r0, r6
 8009638:	4639      	mov	r1, r7
 800963a:	2200      	movs	r2, #0
 800963c:	f7f6 ffec 	bl	8000618 <__aeabi_dmul>
 8009640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009642:	4606      	mov	r6, r0
 8009644:	460f      	mov	r7, r1
 8009646:	2b00      	cmp	r3, #0
 8009648:	d09f      	beq.n	800958a <_strtod_l+0x98a>
 800964a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800964e:	e7a0      	b.n	8009592 <_strtod_l+0x992>
 8009650:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80096d8 <_strtod_l+0xad8>
 8009654:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009658:	ec57 6b17 	vmov	r6, r7, d7
 800965c:	e799      	b.n	8009592 <_strtod_l+0x992>
 800965e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009662:	9b08      	ldr	r3, [sp, #32]
 8009664:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1c1      	bne.n	80095f0 <_strtod_l+0x9f0>
 800966c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009670:	0d1b      	lsrs	r3, r3, #20
 8009672:	051b      	lsls	r3, r3, #20
 8009674:	429d      	cmp	r5, r3
 8009676:	d1bb      	bne.n	80095f0 <_strtod_l+0x9f0>
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	f7f7 fac6 	bl	8000c0c <__aeabi_d2lz>
 8009680:	f7f6 ff9c 	bl	80005bc <__aeabi_l2d>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4630      	mov	r0, r6
 800968a:	4639      	mov	r1, r7
 800968c:	f7f6 fe0c 	bl	80002a8 <__aeabi_dsub>
 8009690:	460b      	mov	r3, r1
 8009692:	4602      	mov	r2, r0
 8009694:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009698:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800969c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800969e:	ea46 060a 	orr.w	r6, r6, sl
 80096a2:	431e      	orrs	r6, r3
 80096a4:	d06f      	beq.n	8009786 <_strtod_l+0xb86>
 80096a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80096e0 <_strtod_l+0xae0>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f7f7 fa26 	bl	8000afc <__aeabi_dcmplt>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	f47f accf 	bne.w	8009054 <_strtod_l+0x454>
 80096b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80096e8 <_strtod_l+0xae8>)
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096c0:	f7f7 fa3a 	bl	8000b38 <__aeabi_dcmpgt>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d093      	beq.n	80095f0 <_strtod_l+0x9f0>
 80096c8:	e4c4      	b.n	8009054 <_strtod_l+0x454>
 80096ca:	bf00      	nop
 80096cc:	f3af 8000 	nop.w
 80096d0:	00000000 	.word	0x00000000
 80096d4:	bff00000 	.word	0xbff00000
 80096d8:	00000000 	.word	0x00000000
 80096dc:	3ff00000 	.word	0x3ff00000
 80096e0:	94a03595 	.word	0x94a03595
 80096e4:	3fdfffff 	.word	0x3fdfffff
 80096e8:	35afe535 	.word	0x35afe535
 80096ec:	3fe00000 	.word	0x3fe00000
 80096f0:	000fffff 	.word	0x000fffff
 80096f4:	7ff00000 	.word	0x7ff00000
 80096f8:	7fefffff 	.word	0x7fefffff
 80096fc:	3ff00000 	.word	0x3ff00000
 8009700:	3fe00000 	.word	0x3fe00000
 8009704:	7fe00000 	.word	0x7fe00000
 8009708:	7c9fffff 	.word	0x7c9fffff
 800970c:	9b08      	ldr	r3, [sp, #32]
 800970e:	b323      	cbz	r3, 800975a <_strtod_l+0xb5a>
 8009710:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009714:	d821      	bhi.n	800975a <_strtod_l+0xb5a>
 8009716:	a328      	add	r3, pc, #160	@ (adr r3, 80097b8 <_strtod_l+0xbb8>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f7f7 f9f6 	bl	8000b10 <__aeabi_dcmple>
 8009724:	b1a0      	cbz	r0, 8009750 <_strtod_l+0xb50>
 8009726:	4639      	mov	r1, r7
 8009728:	4630      	mov	r0, r6
 800972a:	f7f7 fa37 	bl	8000b9c <__aeabi_d2uiz>
 800972e:	2801      	cmp	r0, #1
 8009730:	bf38      	it	cc
 8009732:	2001      	movcc	r0, #1
 8009734:	f7f6 fef6 	bl	8000524 <__aeabi_ui2d>
 8009738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800973a:	4606      	mov	r6, r0
 800973c:	460f      	mov	r7, r1
 800973e:	b9fb      	cbnz	r3, 8009780 <_strtod_l+0xb80>
 8009740:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009744:	9014      	str	r0, [sp, #80]	@ 0x50
 8009746:	9315      	str	r3, [sp, #84]	@ 0x54
 8009748:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800974c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009750:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009752:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009756:	1b5b      	subs	r3, r3, r5
 8009758:	9311      	str	r3, [sp, #68]	@ 0x44
 800975a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800975e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009762:	f001 f983 	bl	800aa6c <__ulp>
 8009766:	4650      	mov	r0, sl
 8009768:	ec53 2b10 	vmov	r2, r3, d0
 800976c:	4659      	mov	r1, fp
 800976e:	f7f6 ff53 	bl	8000618 <__aeabi_dmul>
 8009772:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009776:	f7f6 fd99 	bl	80002ac <__adddf3>
 800977a:	4682      	mov	sl, r0
 800977c:	468b      	mov	fp, r1
 800977e:	e770      	b.n	8009662 <_strtod_l+0xa62>
 8009780:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009784:	e7e0      	b.n	8009748 <_strtod_l+0xb48>
 8009786:	a30e      	add	r3, pc, #56	@ (adr r3, 80097c0 <_strtod_l+0xbc0>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f7f7 f9b6 	bl	8000afc <__aeabi_dcmplt>
 8009790:	e798      	b.n	80096c4 <_strtod_l+0xac4>
 8009792:	2300      	movs	r3, #0
 8009794:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009796:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009798:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	f7ff ba6d 	b.w	8008c7a <_strtod_l+0x7a>
 80097a0:	2a65      	cmp	r2, #101	@ 0x65
 80097a2:	f43f ab66 	beq.w	8008e72 <_strtod_l+0x272>
 80097a6:	2a45      	cmp	r2, #69	@ 0x45
 80097a8:	f43f ab63 	beq.w	8008e72 <_strtod_l+0x272>
 80097ac:	2301      	movs	r3, #1
 80097ae:	f7ff bb9e 	b.w	8008eee <_strtod_l+0x2ee>
 80097b2:	bf00      	nop
 80097b4:	f3af 8000 	nop.w
 80097b8:	ffc00000 	.word	0xffc00000
 80097bc:	41dfffff 	.word	0x41dfffff
 80097c0:	94a03595 	.word	0x94a03595
 80097c4:	3fcfffff 	.word	0x3fcfffff

080097c8 <strtod>:
 80097c8:	460a      	mov	r2, r1
 80097ca:	4601      	mov	r1, r0
 80097cc:	4802      	ldr	r0, [pc, #8]	@ (80097d8 <strtod+0x10>)
 80097ce:	4b03      	ldr	r3, [pc, #12]	@ (80097dc <strtod+0x14>)
 80097d0:	6800      	ldr	r0, [r0, #0]
 80097d2:	f7ff ba15 	b.w	8008c00 <_strtod_l>
 80097d6:	bf00      	nop
 80097d8:	200009c8 	.word	0x200009c8
 80097dc:	2000085c 	.word	0x2000085c

080097e0 <std>:
 80097e0:	2300      	movs	r3, #0
 80097e2:	b510      	push	{r4, lr}
 80097e4:	4604      	mov	r4, r0
 80097e6:	e9c0 3300 	strd	r3, r3, [r0]
 80097ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ee:	6083      	str	r3, [r0, #8]
 80097f0:	8181      	strh	r1, [r0, #12]
 80097f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80097f4:	81c2      	strh	r2, [r0, #14]
 80097f6:	6183      	str	r3, [r0, #24]
 80097f8:	4619      	mov	r1, r3
 80097fa:	2208      	movs	r2, #8
 80097fc:	305c      	adds	r0, #92	@ 0x5c
 80097fe:	f000 f961 	bl	8009ac4 <memset>
 8009802:	4b0d      	ldr	r3, [pc, #52]	@ (8009838 <std+0x58>)
 8009804:	6263      	str	r3, [r4, #36]	@ 0x24
 8009806:	4b0d      	ldr	r3, [pc, #52]	@ (800983c <std+0x5c>)
 8009808:	62a3      	str	r3, [r4, #40]	@ 0x28
 800980a:	4b0d      	ldr	r3, [pc, #52]	@ (8009840 <std+0x60>)
 800980c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800980e:	4b0d      	ldr	r3, [pc, #52]	@ (8009844 <std+0x64>)
 8009810:	6323      	str	r3, [r4, #48]	@ 0x30
 8009812:	4b0d      	ldr	r3, [pc, #52]	@ (8009848 <std+0x68>)
 8009814:	6224      	str	r4, [r4, #32]
 8009816:	429c      	cmp	r4, r3
 8009818:	d006      	beq.n	8009828 <std+0x48>
 800981a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800981e:	4294      	cmp	r4, r2
 8009820:	d002      	beq.n	8009828 <std+0x48>
 8009822:	33d0      	adds	r3, #208	@ 0xd0
 8009824:	429c      	cmp	r4, r3
 8009826:	d105      	bne.n	8009834 <std+0x54>
 8009828:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800982c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009830:	f000 b9f6 	b.w	8009c20 <__retarget_lock_init_recursive>
 8009834:	bd10      	pop	{r4, pc}
 8009836:	bf00      	nop
 8009838:	080099f9 	.word	0x080099f9
 800983c:	08009a1f 	.word	0x08009a1f
 8009840:	08009a57 	.word	0x08009a57
 8009844:	08009a7b 	.word	0x08009a7b
 8009848:	20000cbc 	.word	0x20000cbc

0800984c <stdio_exit_handler>:
 800984c:	4a02      	ldr	r2, [pc, #8]	@ (8009858 <stdio_exit_handler+0xc>)
 800984e:	4903      	ldr	r1, [pc, #12]	@ (800985c <stdio_exit_handler+0x10>)
 8009850:	4803      	ldr	r0, [pc, #12]	@ (8009860 <stdio_exit_handler+0x14>)
 8009852:	f000 b869 	b.w	8009928 <_fwalk_sglue>
 8009856:	bf00      	nop
 8009858:	20000850 	.word	0x20000850
 800985c:	0800ba19 	.word	0x0800ba19
 8009860:	200009cc 	.word	0x200009cc

08009864 <cleanup_stdio>:
 8009864:	6841      	ldr	r1, [r0, #4]
 8009866:	4b0c      	ldr	r3, [pc, #48]	@ (8009898 <cleanup_stdio+0x34>)
 8009868:	4299      	cmp	r1, r3
 800986a:	b510      	push	{r4, lr}
 800986c:	4604      	mov	r4, r0
 800986e:	d001      	beq.n	8009874 <cleanup_stdio+0x10>
 8009870:	f002 f8d2 	bl	800ba18 <_fflush_r>
 8009874:	68a1      	ldr	r1, [r4, #8]
 8009876:	4b09      	ldr	r3, [pc, #36]	@ (800989c <cleanup_stdio+0x38>)
 8009878:	4299      	cmp	r1, r3
 800987a:	d002      	beq.n	8009882 <cleanup_stdio+0x1e>
 800987c:	4620      	mov	r0, r4
 800987e:	f002 f8cb 	bl	800ba18 <_fflush_r>
 8009882:	68e1      	ldr	r1, [r4, #12]
 8009884:	4b06      	ldr	r3, [pc, #24]	@ (80098a0 <cleanup_stdio+0x3c>)
 8009886:	4299      	cmp	r1, r3
 8009888:	d004      	beq.n	8009894 <cleanup_stdio+0x30>
 800988a:	4620      	mov	r0, r4
 800988c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009890:	f002 b8c2 	b.w	800ba18 <_fflush_r>
 8009894:	bd10      	pop	{r4, pc}
 8009896:	bf00      	nop
 8009898:	20000cbc 	.word	0x20000cbc
 800989c:	20000d24 	.word	0x20000d24
 80098a0:	20000d8c 	.word	0x20000d8c

080098a4 <global_stdio_init.part.0>:
 80098a4:	b510      	push	{r4, lr}
 80098a6:	4b0b      	ldr	r3, [pc, #44]	@ (80098d4 <global_stdio_init.part.0+0x30>)
 80098a8:	4c0b      	ldr	r4, [pc, #44]	@ (80098d8 <global_stdio_init.part.0+0x34>)
 80098aa:	4a0c      	ldr	r2, [pc, #48]	@ (80098dc <global_stdio_init.part.0+0x38>)
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	4620      	mov	r0, r4
 80098b0:	2200      	movs	r2, #0
 80098b2:	2104      	movs	r1, #4
 80098b4:	f7ff ff94 	bl	80097e0 <std>
 80098b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80098bc:	2201      	movs	r2, #1
 80098be:	2109      	movs	r1, #9
 80098c0:	f7ff ff8e 	bl	80097e0 <std>
 80098c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80098c8:	2202      	movs	r2, #2
 80098ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098ce:	2112      	movs	r1, #18
 80098d0:	f7ff bf86 	b.w	80097e0 <std>
 80098d4:	20000df4 	.word	0x20000df4
 80098d8:	20000cbc 	.word	0x20000cbc
 80098dc:	0800984d 	.word	0x0800984d

080098e0 <__sfp_lock_acquire>:
 80098e0:	4801      	ldr	r0, [pc, #4]	@ (80098e8 <__sfp_lock_acquire+0x8>)
 80098e2:	f000 b99e 	b.w	8009c22 <__retarget_lock_acquire_recursive>
 80098e6:	bf00      	nop
 80098e8:	20000dfd 	.word	0x20000dfd

080098ec <__sfp_lock_release>:
 80098ec:	4801      	ldr	r0, [pc, #4]	@ (80098f4 <__sfp_lock_release+0x8>)
 80098ee:	f000 b999 	b.w	8009c24 <__retarget_lock_release_recursive>
 80098f2:	bf00      	nop
 80098f4:	20000dfd 	.word	0x20000dfd

080098f8 <__sinit>:
 80098f8:	b510      	push	{r4, lr}
 80098fa:	4604      	mov	r4, r0
 80098fc:	f7ff fff0 	bl	80098e0 <__sfp_lock_acquire>
 8009900:	6a23      	ldr	r3, [r4, #32]
 8009902:	b11b      	cbz	r3, 800990c <__sinit+0x14>
 8009904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009908:	f7ff bff0 	b.w	80098ec <__sfp_lock_release>
 800990c:	4b04      	ldr	r3, [pc, #16]	@ (8009920 <__sinit+0x28>)
 800990e:	6223      	str	r3, [r4, #32]
 8009910:	4b04      	ldr	r3, [pc, #16]	@ (8009924 <__sinit+0x2c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1f5      	bne.n	8009904 <__sinit+0xc>
 8009918:	f7ff ffc4 	bl	80098a4 <global_stdio_init.part.0>
 800991c:	e7f2      	b.n	8009904 <__sinit+0xc>
 800991e:	bf00      	nop
 8009920:	08009865 	.word	0x08009865
 8009924:	20000df4 	.word	0x20000df4

08009928 <_fwalk_sglue>:
 8009928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800992c:	4607      	mov	r7, r0
 800992e:	4688      	mov	r8, r1
 8009930:	4614      	mov	r4, r2
 8009932:	2600      	movs	r6, #0
 8009934:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009938:	f1b9 0901 	subs.w	r9, r9, #1
 800993c:	d505      	bpl.n	800994a <_fwalk_sglue+0x22>
 800993e:	6824      	ldr	r4, [r4, #0]
 8009940:	2c00      	cmp	r4, #0
 8009942:	d1f7      	bne.n	8009934 <_fwalk_sglue+0xc>
 8009944:	4630      	mov	r0, r6
 8009946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800994a:	89ab      	ldrh	r3, [r5, #12]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d907      	bls.n	8009960 <_fwalk_sglue+0x38>
 8009950:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009954:	3301      	adds	r3, #1
 8009956:	d003      	beq.n	8009960 <_fwalk_sglue+0x38>
 8009958:	4629      	mov	r1, r5
 800995a:	4638      	mov	r0, r7
 800995c:	47c0      	blx	r8
 800995e:	4306      	orrs	r6, r0
 8009960:	3568      	adds	r5, #104	@ 0x68
 8009962:	e7e9      	b.n	8009938 <_fwalk_sglue+0x10>

08009964 <siprintf>:
 8009964:	b40e      	push	{r1, r2, r3}
 8009966:	b500      	push	{lr}
 8009968:	b09c      	sub	sp, #112	@ 0x70
 800996a:	ab1d      	add	r3, sp, #116	@ 0x74
 800996c:	9002      	str	r0, [sp, #8]
 800996e:	9006      	str	r0, [sp, #24]
 8009970:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009974:	4809      	ldr	r0, [pc, #36]	@ (800999c <siprintf+0x38>)
 8009976:	9107      	str	r1, [sp, #28]
 8009978:	9104      	str	r1, [sp, #16]
 800997a:	4909      	ldr	r1, [pc, #36]	@ (80099a0 <siprintf+0x3c>)
 800997c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009980:	9105      	str	r1, [sp, #20]
 8009982:	6800      	ldr	r0, [r0, #0]
 8009984:	9301      	str	r3, [sp, #4]
 8009986:	a902      	add	r1, sp, #8
 8009988:	f001 fa1e 	bl	800adc8 <_svfiprintf_r>
 800998c:	9b02      	ldr	r3, [sp, #8]
 800998e:	2200      	movs	r2, #0
 8009990:	701a      	strb	r2, [r3, #0]
 8009992:	b01c      	add	sp, #112	@ 0x70
 8009994:	f85d eb04 	ldr.w	lr, [sp], #4
 8009998:	b003      	add	sp, #12
 800999a:	4770      	bx	lr
 800999c:	200009c8 	.word	0x200009c8
 80099a0:	ffff0208 	.word	0xffff0208

080099a4 <siscanf>:
 80099a4:	b40e      	push	{r1, r2, r3}
 80099a6:	b530      	push	{r4, r5, lr}
 80099a8:	b09c      	sub	sp, #112	@ 0x70
 80099aa:	ac1f      	add	r4, sp, #124	@ 0x7c
 80099ac:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80099b0:	f854 5b04 	ldr.w	r5, [r4], #4
 80099b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80099b8:	9002      	str	r0, [sp, #8]
 80099ba:	9006      	str	r0, [sp, #24]
 80099bc:	f7f6 fc12 	bl	80001e4 <strlen>
 80099c0:	4b0b      	ldr	r3, [pc, #44]	@ (80099f0 <siscanf+0x4c>)
 80099c2:	9003      	str	r0, [sp, #12]
 80099c4:	9007      	str	r0, [sp, #28]
 80099c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099c8:	480a      	ldr	r0, [pc, #40]	@ (80099f4 <siscanf+0x50>)
 80099ca:	9401      	str	r4, [sp, #4]
 80099cc:	2300      	movs	r3, #0
 80099ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099d0:	9314      	str	r3, [sp, #80]	@ 0x50
 80099d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80099d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80099da:	462a      	mov	r2, r5
 80099dc:	4623      	mov	r3, r4
 80099de:	a902      	add	r1, sp, #8
 80099e0:	6800      	ldr	r0, [r0, #0]
 80099e2:	f001 fb45 	bl	800b070 <__ssvfiscanf_r>
 80099e6:	b01c      	add	sp, #112	@ 0x70
 80099e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099ec:	b003      	add	sp, #12
 80099ee:	4770      	bx	lr
 80099f0:	08009a1b 	.word	0x08009a1b
 80099f4:	200009c8 	.word	0x200009c8

080099f8 <__sread>:
 80099f8:	b510      	push	{r4, lr}
 80099fa:	460c      	mov	r4, r1
 80099fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a00:	f000 f8b0 	bl	8009b64 <_read_r>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	bfab      	itete	ge
 8009a08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009a0c:	181b      	addge	r3, r3, r0
 8009a0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a12:	bfac      	ite	ge
 8009a14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a16:	81a3      	strhlt	r3, [r4, #12]
 8009a18:	bd10      	pop	{r4, pc}

08009a1a <__seofread>:
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	4770      	bx	lr

08009a1e <__swrite>:
 8009a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a22:	461f      	mov	r7, r3
 8009a24:	898b      	ldrh	r3, [r1, #12]
 8009a26:	05db      	lsls	r3, r3, #23
 8009a28:	4605      	mov	r5, r0
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	4616      	mov	r6, r2
 8009a2e:	d505      	bpl.n	8009a3c <__swrite+0x1e>
 8009a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a34:	2302      	movs	r3, #2
 8009a36:	2200      	movs	r2, #0
 8009a38:	f000 f882 	bl	8009b40 <_lseek_r>
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	4632      	mov	r2, r6
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a52:	f000 b8a9 	b.w	8009ba8 <_write_r>

08009a56 <__sseek>:
 8009a56:	b510      	push	{r4, lr}
 8009a58:	460c      	mov	r4, r1
 8009a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a5e:	f000 f86f 	bl	8009b40 <_lseek_r>
 8009a62:	1c43      	adds	r3, r0, #1
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	bf15      	itete	ne
 8009a68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a72:	81a3      	strheq	r3, [r4, #12]
 8009a74:	bf18      	it	ne
 8009a76:	81a3      	strhne	r3, [r4, #12]
 8009a78:	bd10      	pop	{r4, pc}

08009a7a <__sclose>:
 8009a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a7e:	f000 b84f 	b.w	8009b20 <_close_r>
	...

08009a84 <_vsiprintf_r>:
 8009a84:	b500      	push	{lr}
 8009a86:	b09b      	sub	sp, #108	@ 0x6c
 8009a88:	9100      	str	r1, [sp, #0]
 8009a8a:	9104      	str	r1, [sp, #16]
 8009a8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a90:	9105      	str	r1, [sp, #20]
 8009a92:	9102      	str	r1, [sp, #8]
 8009a94:	4905      	ldr	r1, [pc, #20]	@ (8009aac <_vsiprintf_r+0x28>)
 8009a96:	9103      	str	r1, [sp, #12]
 8009a98:	4669      	mov	r1, sp
 8009a9a:	f001 f995 	bl	800adc8 <_svfiprintf_r>
 8009a9e:	9b00      	ldr	r3, [sp, #0]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	701a      	strb	r2, [r3, #0]
 8009aa4:	b01b      	add	sp, #108	@ 0x6c
 8009aa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009aaa:	bf00      	nop
 8009aac:	ffff0208 	.word	0xffff0208

08009ab0 <vsiprintf>:
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	460a      	mov	r2, r1
 8009ab4:	4601      	mov	r1, r0
 8009ab6:	4802      	ldr	r0, [pc, #8]	@ (8009ac0 <vsiprintf+0x10>)
 8009ab8:	6800      	ldr	r0, [r0, #0]
 8009aba:	f7ff bfe3 	b.w	8009a84 <_vsiprintf_r>
 8009abe:	bf00      	nop
 8009ac0:	200009c8 	.word	0x200009c8

08009ac4 <memset>:
 8009ac4:	4402      	add	r2, r0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d100      	bne.n	8009ace <memset+0xa>
 8009acc:	4770      	bx	lr
 8009ace:	f803 1b01 	strb.w	r1, [r3], #1
 8009ad2:	e7f9      	b.n	8009ac8 <memset+0x4>

08009ad4 <strncat>:
 8009ad4:	b530      	push	{r4, r5, lr}
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	7825      	ldrb	r5, [r4, #0]
 8009ada:	4623      	mov	r3, r4
 8009adc:	3401      	adds	r4, #1
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	d1fa      	bne.n	8009ad8 <strncat+0x4>
 8009ae2:	3a01      	subs	r2, #1
 8009ae4:	d304      	bcc.n	8009af0 <strncat+0x1c>
 8009ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aea:	f803 4b01 	strb.w	r4, [r3], #1
 8009aee:	b904      	cbnz	r4, 8009af2 <strncat+0x1e>
 8009af0:	bd30      	pop	{r4, r5, pc}
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	d1f5      	bne.n	8009ae2 <strncat+0xe>
 8009af6:	701a      	strb	r2, [r3, #0]
 8009af8:	e7f3      	b.n	8009ae2 <strncat+0xe>

08009afa <strncmp>:
 8009afa:	b510      	push	{r4, lr}
 8009afc:	b16a      	cbz	r2, 8009b1a <strncmp+0x20>
 8009afe:	3901      	subs	r1, #1
 8009b00:	1884      	adds	r4, r0, r2
 8009b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b06:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d103      	bne.n	8009b16 <strncmp+0x1c>
 8009b0e:	42a0      	cmp	r0, r4
 8009b10:	d001      	beq.n	8009b16 <strncmp+0x1c>
 8009b12:	2a00      	cmp	r2, #0
 8009b14:	d1f5      	bne.n	8009b02 <strncmp+0x8>
 8009b16:	1ad0      	subs	r0, r2, r3
 8009b18:	bd10      	pop	{r4, pc}
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	e7fc      	b.n	8009b18 <strncmp+0x1e>
	...

08009b20 <_close_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d06      	ldr	r5, [pc, #24]	@ (8009b3c <_close_r+0x1c>)
 8009b24:	2300      	movs	r3, #0
 8009b26:	4604      	mov	r4, r0
 8009b28:	4608      	mov	r0, r1
 8009b2a:	602b      	str	r3, [r5, #0]
 8009b2c:	f7fc f904 	bl	8005d38 <_close>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_close_r+0x1a>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_close_r+0x1a>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20000df8 	.word	0x20000df8

08009b40 <_lseek_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	@ (8009b60 <_lseek_r+0x20>)
 8009b44:	4604      	mov	r4, r0
 8009b46:	4608      	mov	r0, r1
 8009b48:	4611      	mov	r1, r2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	602a      	str	r2, [r5, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f7fc f919 	bl	8005d86 <_lseek>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_lseek_r+0x1e>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_lseek_r+0x1e>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	20000df8 	.word	0x20000df8

08009b64 <_read_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4d07      	ldr	r5, [pc, #28]	@ (8009b84 <_read_r+0x20>)
 8009b68:	4604      	mov	r4, r0
 8009b6a:	4608      	mov	r0, r1
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	2200      	movs	r2, #0
 8009b70:	602a      	str	r2, [r5, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	f7fc f8a7 	bl	8005cc6 <_read>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d102      	bne.n	8009b82 <_read_r+0x1e>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	b103      	cbz	r3, 8009b82 <_read_r+0x1e>
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	20000df8 	.word	0x20000df8

08009b88 <_sbrk_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4d06      	ldr	r5, [pc, #24]	@ (8009ba4 <_sbrk_r+0x1c>)
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	4604      	mov	r4, r0
 8009b90:	4608      	mov	r0, r1
 8009b92:	602b      	str	r3, [r5, #0]
 8009b94:	f7fc f904 	bl	8005da0 <_sbrk>
 8009b98:	1c43      	adds	r3, r0, #1
 8009b9a:	d102      	bne.n	8009ba2 <_sbrk_r+0x1a>
 8009b9c:	682b      	ldr	r3, [r5, #0]
 8009b9e:	b103      	cbz	r3, 8009ba2 <_sbrk_r+0x1a>
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	bd38      	pop	{r3, r4, r5, pc}
 8009ba4:	20000df8 	.word	0x20000df8

08009ba8 <_write_r>:
 8009ba8:	b538      	push	{r3, r4, r5, lr}
 8009baa:	4d07      	ldr	r5, [pc, #28]	@ (8009bc8 <_write_r+0x20>)
 8009bac:	4604      	mov	r4, r0
 8009bae:	4608      	mov	r0, r1
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	602a      	str	r2, [r5, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	f7fc f8a2 	bl	8005d00 <_write>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	d102      	bne.n	8009bc6 <_write_r+0x1e>
 8009bc0:	682b      	ldr	r3, [r5, #0]
 8009bc2:	b103      	cbz	r3, 8009bc6 <_write_r+0x1e>
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
 8009bc8:	20000df8 	.word	0x20000df8

08009bcc <__errno>:
 8009bcc:	4b01      	ldr	r3, [pc, #4]	@ (8009bd4 <__errno+0x8>)
 8009bce:	6818      	ldr	r0, [r3, #0]
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	200009c8 	.word	0x200009c8

08009bd8 <__libc_init_array>:
 8009bd8:	b570      	push	{r4, r5, r6, lr}
 8009bda:	4d0d      	ldr	r5, [pc, #52]	@ (8009c10 <__libc_init_array+0x38>)
 8009bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8009c14 <__libc_init_array+0x3c>)
 8009bde:	1b64      	subs	r4, r4, r5
 8009be0:	10a4      	asrs	r4, r4, #2
 8009be2:	2600      	movs	r6, #0
 8009be4:	42a6      	cmp	r6, r4
 8009be6:	d109      	bne.n	8009bfc <__libc_init_array+0x24>
 8009be8:	4d0b      	ldr	r5, [pc, #44]	@ (8009c18 <__libc_init_array+0x40>)
 8009bea:	4c0c      	ldr	r4, [pc, #48]	@ (8009c1c <__libc_init_array+0x44>)
 8009bec:	f002 fb9e 	bl	800c32c <_init>
 8009bf0:	1b64      	subs	r4, r4, r5
 8009bf2:	10a4      	asrs	r4, r4, #2
 8009bf4:	2600      	movs	r6, #0
 8009bf6:	42a6      	cmp	r6, r4
 8009bf8:	d105      	bne.n	8009c06 <__libc_init_array+0x2e>
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c00:	4798      	blx	r3
 8009c02:	3601      	adds	r6, #1
 8009c04:	e7ee      	b.n	8009be4 <__libc_init_array+0xc>
 8009c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c0a:	4798      	blx	r3
 8009c0c:	3601      	adds	r6, #1
 8009c0e:	e7f2      	b.n	8009bf6 <__libc_init_array+0x1e>
 8009c10:	080181d4 	.word	0x080181d4
 8009c14:	080181d4 	.word	0x080181d4
 8009c18:	080181d4 	.word	0x080181d4
 8009c1c:	080181d8 	.word	0x080181d8

08009c20 <__retarget_lock_init_recursive>:
 8009c20:	4770      	bx	lr

08009c22 <__retarget_lock_acquire_recursive>:
 8009c22:	4770      	bx	lr

08009c24 <__retarget_lock_release_recursive>:
 8009c24:	4770      	bx	lr

08009c26 <memcpy>:
 8009c26:	440a      	add	r2, r1
 8009c28:	4291      	cmp	r1, r2
 8009c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c2e:	d100      	bne.n	8009c32 <memcpy+0xc>
 8009c30:	4770      	bx	lr
 8009c32:	b510      	push	{r4, lr}
 8009c34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c3c:	4291      	cmp	r1, r2
 8009c3e:	d1f9      	bne.n	8009c34 <memcpy+0xe>
 8009c40:	bd10      	pop	{r4, pc}
 8009c42:	0000      	movs	r0, r0
 8009c44:	0000      	movs	r0, r0
	...

08009c48 <nan>:
 8009c48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009c50 <nan+0x8>
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	00000000 	.word	0x00000000
 8009c54:	7ff80000 	.word	0x7ff80000

08009c58 <_free_r>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	2900      	cmp	r1, #0
 8009c5e:	d041      	beq.n	8009ce4 <_free_r+0x8c>
 8009c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c64:	1f0c      	subs	r4, r1, #4
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	bfb8      	it	lt
 8009c6a:	18e4      	addlt	r4, r4, r3
 8009c6c:	f7fe ff66 	bl	8008b3c <__malloc_lock>
 8009c70:	4a1d      	ldr	r2, [pc, #116]	@ (8009ce8 <_free_r+0x90>)
 8009c72:	6813      	ldr	r3, [r2, #0]
 8009c74:	b933      	cbnz	r3, 8009c84 <_free_r+0x2c>
 8009c76:	6063      	str	r3, [r4, #4]
 8009c78:	6014      	str	r4, [r2, #0]
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c80:	f7fe bf62 	b.w	8008b48 <__malloc_unlock>
 8009c84:	42a3      	cmp	r3, r4
 8009c86:	d908      	bls.n	8009c9a <_free_r+0x42>
 8009c88:	6820      	ldr	r0, [r4, #0]
 8009c8a:	1821      	adds	r1, r4, r0
 8009c8c:	428b      	cmp	r3, r1
 8009c8e:	bf01      	itttt	eq
 8009c90:	6819      	ldreq	r1, [r3, #0]
 8009c92:	685b      	ldreq	r3, [r3, #4]
 8009c94:	1809      	addeq	r1, r1, r0
 8009c96:	6021      	streq	r1, [r4, #0]
 8009c98:	e7ed      	b.n	8009c76 <_free_r+0x1e>
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	b10b      	cbz	r3, 8009ca4 <_free_r+0x4c>
 8009ca0:	42a3      	cmp	r3, r4
 8009ca2:	d9fa      	bls.n	8009c9a <_free_r+0x42>
 8009ca4:	6811      	ldr	r1, [r2, #0]
 8009ca6:	1850      	adds	r0, r2, r1
 8009ca8:	42a0      	cmp	r0, r4
 8009caa:	d10b      	bne.n	8009cc4 <_free_r+0x6c>
 8009cac:	6820      	ldr	r0, [r4, #0]
 8009cae:	4401      	add	r1, r0
 8009cb0:	1850      	adds	r0, r2, r1
 8009cb2:	4283      	cmp	r3, r0
 8009cb4:	6011      	str	r1, [r2, #0]
 8009cb6:	d1e0      	bne.n	8009c7a <_free_r+0x22>
 8009cb8:	6818      	ldr	r0, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	6053      	str	r3, [r2, #4]
 8009cbe:	4408      	add	r0, r1
 8009cc0:	6010      	str	r0, [r2, #0]
 8009cc2:	e7da      	b.n	8009c7a <_free_r+0x22>
 8009cc4:	d902      	bls.n	8009ccc <_free_r+0x74>
 8009cc6:	230c      	movs	r3, #12
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	e7d6      	b.n	8009c7a <_free_r+0x22>
 8009ccc:	6820      	ldr	r0, [r4, #0]
 8009cce:	1821      	adds	r1, r4, r0
 8009cd0:	428b      	cmp	r3, r1
 8009cd2:	bf04      	itt	eq
 8009cd4:	6819      	ldreq	r1, [r3, #0]
 8009cd6:	685b      	ldreq	r3, [r3, #4]
 8009cd8:	6063      	str	r3, [r4, #4]
 8009cda:	bf04      	itt	eq
 8009cdc:	1809      	addeq	r1, r1, r0
 8009cde:	6021      	streq	r1, [r4, #0]
 8009ce0:	6054      	str	r4, [r2, #4]
 8009ce2:	e7ca      	b.n	8009c7a <_free_r+0x22>
 8009ce4:	bd38      	pop	{r3, r4, r5, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20000cb8 	.word	0x20000cb8

08009cec <rshift>:
 8009cec:	6903      	ldr	r3, [r0, #16]
 8009cee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cfa:	f100 0414 	add.w	r4, r0, #20
 8009cfe:	dd45      	ble.n	8009d8c <rshift+0xa0>
 8009d00:	f011 011f 	ands.w	r1, r1, #31
 8009d04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009d08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009d0c:	d10c      	bne.n	8009d28 <rshift+0x3c>
 8009d0e:	f100 0710 	add.w	r7, r0, #16
 8009d12:	4629      	mov	r1, r5
 8009d14:	42b1      	cmp	r1, r6
 8009d16:	d334      	bcc.n	8009d82 <rshift+0x96>
 8009d18:	1a9b      	subs	r3, r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	1eea      	subs	r2, r5, #3
 8009d1e:	4296      	cmp	r6, r2
 8009d20:	bf38      	it	cc
 8009d22:	2300      	movcc	r3, #0
 8009d24:	4423      	add	r3, r4
 8009d26:	e015      	b.n	8009d54 <rshift+0x68>
 8009d28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009d2c:	f1c1 0820 	rsb	r8, r1, #32
 8009d30:	40cf      	lsrs	r7, r1
 8009d32:	f105 0e04 	add.w	lr, r5, #4
 8009d36:	46a1      	mov	r9, r4
 8009d38:	4576      	cmp	r6, lr
 8009d3a:	46f4      	mov	ip, lr
 8009d3c:	d815      	bhi.n	8009d6a <rshift+0x7e>
 8009d3e:	1a9a      	subs	r2, r3, r2
 8009d40:	0092      	lsls	r2, r2, #2
 8009d42:	3a04      	subs	r2, #4
 8009d44:	3501      	adds	r5, #1
 8009d46:	42ae      	cmp	r6, r5
 8009d48:	bf38      	it	cc
 8009d4a:	2200      	movcc	r2, #0
 8009d4c:	18a3      	adds	r3, r4, r2
 8009d4e:	50a7      	str	r7, [r4, r2]
 8009d50:	b107      	cbz	r7, 8009d54 <rshift+0x68>
 8009d52:	3304      	adds	r3, #4
 8009d54:	1b1a      	subs	r2, r3, r4
 8009d56:	42a3      	cmp	r3, r4
 8009d58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d5c:	bf08      	it	eq
 8009d5e:	2300      	moveq	r3, #0
 8009d60:	6102      	str	r2, [r0, #16]
 8009d62:	bf08      	it	eq
 8009d64:	6143      	streq	r3, [r0, #20]
 8009d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d6a:	f8dc c000 	ldr.w	ip, [ip]
 8009d6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d72:	ea4c 0707 	orr.w	r7, ip, r7
 8009d76:	f849 7b04 	str.w	r7, [r9], #4
 8009d7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d7e:	40cf      	lsrs	r7, r1
 8009d80:	e7da      	b.n	8009d38 <rshift+0x4c>
 8009d82:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d86:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d8a:	e7c3      	b.n	8009d14 <rshift+0x28>
 8009d8c:	4623      	mov	r3, r4
 8009d8e:	e7e1      	b.n	8009d54 <rshift+0x68>

08009d90 <__hexdig_fun>:
 8009d90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009d94:	2b09      	cmp	r3, #9
 8009d96:	d802      	bhi.n	8009d9e <__hexdig_fun+0xe>
 8009d98:	3820      	subs	r0, #32
 8009d9a:	b2c0      	uxtb	r0, r0
 8009d9c:	4770      	bx	lr
 8009d9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009da2:	2b05      	cmp	r3, #5
 8009da4:	d801      	bhi.n	8009daa <__hexdig_fun+0x1a>
 8009da6:	3847      	subs	r0, #71	@ 0x47
 8009da8:	e7f7      	b.n	8009d9a <__hexdig_fun+0xa>
 8009daa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009dae:	2b05      	cmp	r3, #5
 8009db0:	d801      	bhi.n	8009db6 <__hexdig_fun+0x26>
 8009db2:	3827      	subs	r0, #39	@ 0x27
 8009db4:	e7f1      	b.n	8009d9a <__hexdig_fun+0xa>
 8009db6:	2000      	movs	r0, #0
 8009db8:	4770      	bx	lr
	...

08009dbc <__gethex>:
 8009dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	b085      	sub	sp, #20
 8009dc2:	468a      	mov	sl, r1
 8009dc4:	9302      	str	r3, [sp, #8]
 8009dc6:	680b      	ldr	r3, [r1, #0]
 8009dc8:	9001      	str	r0, [sp, #4]
 8009dca:	4690      	mov	r8, r2
 8009dcc:	1c9c      	adds	r4, r3, #2
 8009dce:	46a1      	mov	r9, r4
 8009dd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009dd4:	2830      	cmp	r0, #48	@ 0x30
 8009dd6:	d0fa      	beq.n	8009dce <__gethex+0x12>
 8009dd8:	eba9 0303 	sub.w	r3, r9, r3
 8009ddc:	f1a3 0b02 	sub.w	fp, r3, #2
 8009de0:	f7ff ffd6 	bl	8009d90 <__hexdig_fun>
 8009de4:	4605      	mov	r5, r0
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d168      	bne.n	8009ebc <__gethex+0x100>
 8009dea:	49a0      	ldr	r1, [pc, #640]	@ (800a06c <__gethex+0x2b0>)
 8009dec:	2201      	movs	r2, #1
 8009dee:	4648      	mov	r0, r9
 8009df0:	f7ff fe83 	bl	8009afa <strncmp>
 8009df4:	4607      	mov	r7, r0
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d167      	bne.n	8009eca <__gethex+0x10e>
 8009dfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009dfe:	4626      	mov	r6, r4
 8009e00:	f7ff ffc6 	bl	8009d90 <__hexdig_fun>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d062      	beq.n	8009ece <__gethex+0x112>
 8009e08:	4623      	mov	r3, r4
 8009e0a:	7818      	ldrb	r0, [r3, #0]
 8009e0c:	2830      	cmp	r0, #48	@ 0x30
 8009e0e:	4699      	mov	r9, r3
 8009e10:	f103 0301 	add.w	r3, r3, #1
 8009e14:	d0f9      	beq.n	8009e0a <__gethex+0x4e>
 8009e16:	f7ff ffbb 	bl	8009d90 <__hexdig_fun>
 8009e1a:	fab0 f580 	clz	r5, r0
 8009e1e:	096d      	lsrs	r5, r5, #5
 8009e20:	f04f 0b01 	mov.w	fp, #1
 8009e24:	464a      	mov	r2, r9
 8009e26:	4616      	mov	r6, r2
 8009e28:	3201      	adds	r2, #1
 8009e2a:	7830      	ldrb	r0, [r6, #0]
 8009e2c:	f7ff ffb0 	bl	8009d90 <__hexdig_fun>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d1f8      	bne.n	8009e26 <__gethex+0x6a>
 8009e34:	498d      	ldr	r1, [pc, #564]	@ (800a06c <__gethex+0x2b0>)
 8009e36:	2201      	movs	r2, #1
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f7ff fe5e 	bl	8009afa <strncmp>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d13f      	bne.n	8009ec2 <__gethex+0x106>
 8009e42:	b944      	cbnz	r4, 8009e56 <__gethex+0x9a>
 8009e44:	1c74      	adds	r4, r6, #1
 8009e46:	4622      	mov	r2, r4
 8009e48:	4616      	mov	r6, r2
 8009e4a:	3201      	adds	r2, #1
 8009e4c:	7830      	ldrb	r0, [r6, #0]
 8009e4e:	f7ff ff9f 	bl	8009d90 <__hexdig_fun>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	d1f8      	bne.n	8009e48 <__gethex+0x8c>
 8009e56:	1ba4      	subs	r4, r4, r6
 8009e58:	00a7      	lsls	r7, r4, #2
 8009e5a:	7833      	ldrb	r3, [r6, #0]
 8009e5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009e60:	2b50      	cmp	r3, #80	@ 0x50
 8009e62:	d13e      	bne.n	8009ee2 <__gethex+0x126>
 8009e64:	7873      	ldrb	r3, [r6, #1]
 8009e66:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e68:	d033      	beq.n	8009ed2 <__gethex+0x116>
 8009e6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e6c:	d034      	beq.n	8009ed8 <__gethex+0x11c>
 8009e6e:	1c71      	adds	r1, r6, #1
 8009e70:	2400      	movs	r4, #0
 8009e72:	7808      	ldrb	r0, [r1, #0]
 8009e74:	f7ff ff8c 	bl	8009d90 <__hexdig_fun>
 8009e78:	1e43      	subs	r3, r0, #1
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b18      	cmp	r3, #24
 8009e7e:	d830      	bhi.n	8009ee2 <__gethex+0x126>
 8009e80:	f1a0 0210 	sub.w	r2, r0, #16
 8009e84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e88:	f7ff ff82 	bl	8009d90 <__hexdig_fun>
 8009e8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009e90:	fa5f fc8c 	uxtb.w	ip, ip
 8009e94:	f1bc 0f18 	cmp.w	ip, #24
 8009e98:	f04f 030a 	mov.w	r3, #10
 8009e9c:	d91e      	bls.n	8009edc <__gethex+0x120>
 8009e9e:	b104      	cbz	r4, 8009ea2 <__gethex+0xe6>
 8009ea0:	4252      	negs	r2, r2
 8009ea2:	4417      	add	r7, r2
 8009ea4:	f8ca 1000 	str.w	r1, [sl]
 8009ea8:	b1ed      	cbz	r5, 8009ee6 <__gethex+0x12a>
 8009eaa:	f1bb 0f00 	cmp.w	fp, #0
 8009eae:	bf0c      	ite	eq
 8009eb0:	2506      	moveq	r5, #6
 8009eb2:	2500      	movne	r5, #0
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	b005      	add	sp, #20
 8009eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebc:	2500      	movs	r5, #0
 8009ebe:	462c      	mov	r4, r5
 8009ec0:	e7b0      	b.n	8009e24 <__gethex+0x68>
 8009ec2:	2c00      	cmp	r4, #0
 8009ec4:	d1c7      	bne.n	8009e56 <__gethex+0x9a>
 8009ec6:	4627      	mov	r7, r4
 8009ec8:	e7c7      	b.n	8009e5a <__gethex+0x9e>
 8009eca:	464e      	mov	r6, r9
 8009ecc:	462f      	mov	r7, r5
 8009ece:	2501      	movs	r5, #1
 8009ed0:	e7c3      	b.n	8009e5a <__gethex+0x9e>
 8009ed2:	2400      	movs	r4, #0
 8009ed4:	1cb1      	adds	r1, r6, #2
 8009ed6:	e7cc      	b.n	8009e72 <__gethex+0xb6>
 8009ed8:	2401      	movs	r4, #1
 8009eda:	e7fb      	b.n	8009ed4 <__gethex+0x118>
 8009edc:	fb03 0002 	mla	r0, r3, r2, r0
 8009ee0:	e7ce      	b.n	8009e80 <__gethex+0xc4>
 8009ee2:	4631      	mov	r1, r6
 8009ee4:	e7de      	b.n	8009ea4 <__gethex+0xe8>
 8009ee6:	eba6 0309 	sub.w	r3, r6, r9
 8009eea:	3b01      	subs	r3, #1
 8009eec:	4629      	mov	r1, r5
 8009eee:	2b07      	cmp	r3, #7
 8009ef0:	dc0a      	bgt.n	8009f08 <__gethex+0x14c>
 8009ef2:	9801      	ldr	r0, [sp, #4]
 8009ef4:	f000 fa46 	bl	800a384 <_Balloc>
 8009ef8:	4604      	mov	r4, r0
 8009efa:	b940      	cbnz	r0, 8009f0e <__gethex+0x152>
 8009efc:	4b5c      	ldr	r3, [pc, #368]	@ (800a070 <__gethex+0x2b4>)
 8009efe:	4602      	mov	r2, r0
 8009f00:	21e4      	movs	r1, #228	@ 0xe4
 8009f02:	485c      	ldr	r0, [pc, #368]	@ (800a074 <__gethex+0x2b8>)
 8009f04:	f001 fe3e 	bl	800bb84 <__assert_func>
 8009f08:	3101      	adds	r1, #1
 8009f0a:	105b      	asrs	r3, r3, #1
 8009f0c:	e7ef      	b.n	8009eee <__gethex+0x132>
 8009f0e:	f100 0a14 	add.w	sl, r0, #20
 8009f12:	2300      	movs	r3, #0
 8009f14:	4655      	mov	r5, sl
 8009f16:	469b      	mov	fp, r3
 8009f18:	45b1      	cmp	r9, r6
 8009f1a:	d337      	bcc.n	8009f8c <__gethex+0x1d0>
 8009f1c:	f845 bb04 	str.w	fp, [r5], #4
 8009f20:	eba5 050a 	sub.w	r5, r5, sl
 8009f24:	10ad      	asrs	r5, r5, #2
 8009f26:	6125      	str	r5, [r4, #16]
 8009f28:	4658      	mov	r0, fp
 8009f2a:	f000 fb1d 	bl	800a568 <__hi0bits>
 8009f2e:	016d      	lsls	r5, r5, #5
 8009f30:	f8d8 6000 	ldr.w	r6, [r8]
 8009f34:	1a2d      	subs	r5, r5, r0
 8009f36:	42b5      	cmp	r5, r6
 8009f38:	dd54      	ble.n	8009fe4 <__gethex+0x228>
 8009f3a:	1bad      	subs	r5, r5, r6
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f000 feb1 	bl	800aca6 <__any_on>
 8009f44:	4681      	mov	r9, r0
 8009f46:	b178      	cbz	r0, 8009f68 <__gethex+0x1ac>
 8009f48:	1e6b      	subs	r3, r5, #1
 8009f4a:	1159      	asrs	r1, r3, #5
 8009f4c:	f003 021f 	and.w	r2, r3, #31
 8009f50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009f54:	f04f 0901 	mov.w	r9, #1
 8009f58:	fa09 f202 	lsl.w	r2, r9, r2
 8009f5c:	420a      	tst	r2, r1
 8009f5e:	d003      	beq.n	8009f68 <__gethex+0x1ac>
 8009f60:	454b      	cmp	r3, r9
 8009f62:	dc36      	bgt.n	8009fd2 <__gethex+0x216>
 8009f64:	f04f 0902 	mov.w	r9, #2
 8009f68:	4629      	mov	r1, r5
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f7ff febe 	bl	8009cec <rshift>
 8009f70:	442f      	add	r7, r5
 8009f72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f76:	42bb      	cmp	r3, r7
 8009f78:	da42      	bge.n	800a000 <__gethex+0x244>
 8009f7a:	9801      	ldr	r0, [sp, #4]
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	f000 fa41 	bl	800a404 <_Bfree>
 8009f82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f84:	2300      	movs	r3, #0
 8009f86:	6013      	str	r3, [r2, #0]
 8009f88:	25a3      	movs	r5, #163	@ 0xa3
 8009f8a:	e793      	b.n	8009eb4 <__gethex+0xf8>
 8009f8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009f90:	2a2e      	cmp	r2, #46	@ 0x2e
 8009f92:	d012      	beq.n	8009fba <__gethex+0x1fe>
 8009f94:	2b20      	cmp	r3, #32
 8009f96:	d104      	bne.n	8009fa2 <__gethex+0x1e6>
 8009f98:	f845 bb04 	str.w	fp, [r5], #4
 8009f9c:	f04f 0b00 	mov.w	fp, #0
 8009fa0:	465b      	mov	r3, fp
 8009fa2:	7830      	ldrb	r0, [r6, #0]
 8009fa4:	9303      	str	r3, [sp, #12]
 8009fa6:	f7ff fef3 	bl	8009d90 <__hexdig_fun>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	f000 000f 	and.w	r0, r0, #15
 8009fb0:	4098      	lsls	r0, r3
 8009fb2:	ea4b 0b00 	orr.w	fp, fp, r0
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	e7ae      	b.n	8009f18 <__gethex+0x15c>
 8009fba:	45b1      	cmp	r9, r6
 8009fbc:	d8ea      	bhi.n	8009f94 <__gethex+0x1d8>
 8009fbe:	492b      	ldr	r1, [pc, #172]	@ (800a06c <__gethex+0x2b0>)
 8009fc0:	9303      	str	r3, [sp, #12]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f7ff fd98 	bl	8009afa <strncmp>
 8009fca:	9b03      	ldr	r3, [sp, #12]
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d1e1      	bne.n	8009f94 <__gethex+0x1d8>
 8009fd0:	e7a2      	b.n	8009f18 <__gethex+0x15c>
 8009fd2:	1ea9      	subs	r1, r5, #2
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f000 fe66 	bl	800aca6 <__any_on>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d0c2      	beq.n	8009f64 <__gethex+0x1a8>
 8009fde:	f04f 0903 	mov.w	r9, #3
 8009fe2:	e7c1      	b.n	8009f68 <__gethex+0x1ac>
 8009fe4:	da09      	bge.n	8009ffa <__gethex+0x23e>
 8009fe6:	1b75      	subs	r5, r6, r5
 8009fe8:	4621      	mov	r1, r4
 8009fea:	9801      	ldr	r0, [sp, #4]
 8009fec:	462a      	mov	r2, r5
 8009fee:	f000 fc21 	bl	800a834 <__lshift>
 8009ff2:	1b7f      	subs	r7, r7, r5
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	f100 0a14 	add.w	sl, r0, #20
 8009ffa:	f04f 0900 	mov.w	r9, #0
 8009ffe:	e7b8      	b.n	8009f72 <__gethex+0x1b6>
 800a000:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a004:	42bd      	cmp	r5, r7
 800a006:	dd6f      	ble.n	800a0e8 <__gethex+0x32c>
 800a008:	1bed      	subs	r5, r5, r7
 800a00a:	42ae      	cmp	r6, r5
 800a00c:	dc34      	bgt.n	800a078 <__gethex+0x2bc>
 800a00e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d022      	beq.n	800a05c <__gethex+0x2a0>
 800a016:	2b03      	cmp	r3, #3
 800a018:	d024      	beq.n	800a064 <__gethex+0x2a8>
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d115      	bne.n	800a04a <__gethex+0x28e>
 800a01e:	42ae      	cmp	r6, r5
 800a020:	d113      	bne.n	800a04a <__gethex+0x28e>
 800a022:	2e01      	cmp	r6, #1
 800a024:	d10b      	bne.n	800a03e <__gethex+0x282>
 800a026:	9a02      	ldr	r2, [sp, #8]
 800a028:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a02c:	6013      	str	r3, [r2, #0]
 800a02e:	2301      	movs	r3, #1
 800a030:	6123      	str	r3, [r4, #16]
 800a032:	f8ca 3000 	str.w	r3, [sl]
 800a036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a038:	2562      	movs	r5, #98	@ 0x62
 800a03a:	601c      	str	r4, [r3, #0]
 800a03c:	e73a      	b.n	8009eb4 <__gethex+0xf8>
 800a03e:	1e71      	subs	r1, r6, #1
 800a040:	4620      	mov	r0, r4
 800a042:	f000 fe30 	bl	800aca6 <__any_on>
 800a046:	2800      	cmp	r0, #0
 800a048:	d1ed      	bne.n	800a026 <__gethex+0x26a>
 800a04a:	9801      	ldr	r0, [sp, #4]
 800a04c:	4621      	mov	r1, r4
 800a04e:	f000 f9d9 	bl	800a404 <_Bfree>
 800a052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a054:	2300      	movs	r3, #0
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	2550      	movs	r5, #80	@ 0x50
 800a05a:	e72b      	b.n	8009eb4 <__gethex+0xf8>
 800a05c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1f3      	bne.n	800a04a <__gethex+0x28e>
 800a062:	e7e0      	b.n	800a026 <__gethex+0x26a>
 800a064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1dd      	bne.n	800a026 <__gethex+0x26a>
 800a06a:	e7ee      	b.n	800a04a <__gethex+0x28e>
 800a06c:	08017df8 	.word	0x08017df8
 800a070:	08017f61 	.word	0x08017f61
 800a074:	08017f72 	.word	0x08017f72
 800a078:	1e6f      	subs	r7, r5, #1
 800a07a:	f1b9 0f00 	cmp.w	r9, #0
 800a07e:	d130      	bne.n	800a0e2 <__gethex+0x326>
 800a080:	b127      	cbz	r7, 800a08c <__gethex+0x2d0>
 800a082:	4639      	mov	r1, r7
 800a084:	4620      	mov	r0, r4
 800a086:	f000 fe0e 	bl	800aca6 <__any_on>
 800a08a:	4681      	mov	r9, r0
 800a08c:	117a      	asrs	r2, r7, #5
 800a08e:	2301      	movs	r3, #1
 800a090:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a094:	f007 071f 	and.w	r7, r7, #31
 800a098:	40bb      	lsls	r3, r7
 800a09a:	4213      	tst	r3, r2
 800a09c:	4629      	mov	r1, r5
 800a09e:	4620      	mov	r0, r4
 800a0a0:	bf18      	it	ne
 800a0a2:	f049 0902 	orrne.w	r9, r9, #2
 800a0a6:	f7ff fe21 	bl	8009cec <rshift>
 800a0aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a0ae:	1b76      	subs	r6, r6, r5
 800a0b0:	2502      	movs	r5, #2
 800a0b2:	f1b9 0f00 	cmp.w	r9, #0
 800a0b6:	d047      	beq.n	800a148 <__gethex+0x38c>
 800a0b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d015      	beq.n	800a0ec <__gethex+0x330>
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d017      	beq.n	800a0f4 <__gethex+0x338>
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d109      	bne.n	800a0dc <__gethex+0x320>
 800a0c8:	f019 0f02 	tst.w	r9, #2
 800a0cc:	d006      	beq.n	800a0dc <__gethex+0x320>
 800a0ce:	f8da 3000 	ldr.w	r3, [sl]
 800a0d2:	ea49 0903 	orr.w	r9, r9, r3
 800a0d6:	f019 0f01 	tst.w	r9, #1
 800a0da:	d10e      	bne.n	800a0fa <__gethex+0x33e>
 800a0dc:	f045 0510 	orr.w	r5, r5, #16
 800a0e0:	e032      	b.n	800a148 <__gethex+0x38c>
 800a0e2:	f04f 0901 	mov.w	r9, #1
 800a0e6:	e7d1      	b.n	800a08c <__gethex+0x2d0>
 800a0e8:	2501      	movs	r5, #1
 800a0ea:	e7e2      	b.n	800a0b2 <__gethex+0x2f6>
 800a0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ee:	f1c3 0301 	rsb	r3, r3, #1
 800a0f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0f0      	beq.n	800a0dc <__gethex+0x320>
 800a0fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a0fe:	f104 0314 	add.w	r3, r4, #20
 800a102:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a106:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a10a:	f04f 0c00 	mov.w	ip, #0
 800a10e:	4618      	mov	r0, r3
 800a110:	f853 2b04 	ldr.w	r2, [r3], #4
 800a114:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a118:	d01b      	beq.n	800a152 <__gethex+0x396>
 800a11a:	3201      	adds	r2, #1
 800a11c:	6002      	str	r2, [r0, #0]
 800a11e:	2d02      	cmp	r5, #2
 800a120:	f104 0314 	add.w	r3, r4, #20
 800a124:	d13c      	bne.n	800a1a0 <__gethex+0x3e4>
 800a126:	f8d8 2000 	ldr.w	r2, [r8]
 800a12a:	3a01      	subs	r2, #1
 800a12c:	42b2      	cmp	r2, r6
 800a12e:	d109      	bne.n	800a144 <__gethex+0x388>
 800a130:	1171      	asrs	r1, r6, #5
 800a132:	2201      	movs	r2, #1
 800a134:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a138:	f006 061f 	and.w	r6, r6, #31
 800a13c:	fa02 f606 	lsl.w	r6, r2, r6
 800a140:	421e      	tst	r6, r3
 800a142:	d13a      	bne.n	800a1ba <__gethex+0x3fe>
 800a144:	f045 0520 	orr.w	r5, r5, #32
 800a148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a14a:	601c      	str	r4, [r3, #0]
 800a14c:	9b02      	ldr	r3, [sp, #8]
 800a14e:	601f      	str	r7, [r3, #0]
 800a150:	e6b0      	b.n	8009eb4 <__gethex+0xf8>
 800a152:	4299      	cmp	r1, r3
 800a154:	f843 cc04 	str.w	ip, [r3, #-4]
 800a158:	d8d9      	bhi.n	800a10e <__gethex+0x352>
 800a15a:	68a3      	ldr	r3, [r4, #8]
 800a15c:	459b      	cmp	fp, r3
 800a15e:	db17      	blt.n	800a190 <__gethex+0x3d4>
 800a160:	6861      	ldr	r1, [r4, #4]
 800a162:	9801      	ldr	r0, [sp, #4]
 800a164:	3101      	adds	r1, #1
 800a166:	f000 f90d 	bl	800a384 <_Balloc>
 800a16a:	4681      	mov	r9, r0
 800a16c:	b918      	cbnz	r0, 800a176 <__gethex+0x3ba>
 800a16e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1d8 <__gethex+0x41c>)
 800a170:	4602      	mov	r2, r0
 800a172:	2184      	movs	r1, #132	@ 0x84
 800a174:	e6c5      	b.n	8009f02 <__gethex+0x146>
 800a176:	6922      	ldr	r2, [r4, #16]
 800a178:	3202      	adds	r2, #2
 800a17a:	f104 010c 	add.w	r1, r4, #12
 800a17e:	0092      	lsls	r2, r2, #2
 800a180:	300c      	adds	r0, #12
 800a182:	f7ff fd50 	bl	8009c26 <memcpy>
 800a186:	4621      	mov	r1, r4
 800a188:	9801      	ldr	r0, [sp, #4]
 800a18a:	f000 f93b 	bl	800a404 <_Bfree>
 800a18e:	464c      	mov	r4, r9
 800a190:	6923      	ldr	r3, [r4, #16]
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a198:	6122      	str	r2, [r4, #16]
 800a19a:	2201      	movs	r2, #1
 800a19c:	615a      	str	r2, [r3, #20]
 800a19e:	e7be      	b.n	800a11e <__gethex+0x362>
 800a1a0:	6922      	ldr	r2, [r4, #16]
 800a1a2:	455a      	cmp	r2, fp
 800a1a4:	dd0b      	ble.n	800a1be <__gethex+0x402>
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f7ff fd9f 	bl	8009cec <rshift>
 800a1ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1b2:	3701      	adds	r7, #1
 800a1b4:	42bb      	cmp	r3, r7
 800a1b6:	f6ff aee0 	blt.w	8009f7a <__gethex+0x1be>
 800a1ba:	2501      	movs	r5, #1
 800a1bc:	e7c2      	b.n	800a144 <__gethex+0x388>
 800a1be:	f016 061f 	ands.w	r6, r6, #31
 800a1c2:	d0fa      	beq.n	800a1ba <__gethex+0x3fe>
 800a1c4:	4453      	add	r3, sl
 800a1c6:	f1c6 0620 	rsb	r6, r6, #32
 800a1ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a1ce:	f000 f9cb 	bl	800a568 <__hi0bits>
 800a1d2:	42b0      	cmp	r0, r6
 800a1d4:	dbe7      	blt.n	800a1a6 <__gethex+0x3ea>
 800a1d6:	e7f0      	b.n	800a1ba <__gethex+0x3fe>
 800a1d8:	08017f61 	.word	0x08017f61

0800a1dc <L_shift>:
 800a1dc:	f1c2 0208 	rsb	r2, r2, #8
 800a1e0:	0092      	lsls	r2, r2, #2
 800a1e2:	b570      	push	{r4, r5, r6, lr}
 800a1e4:	f1c2 0620 	rsb	r6, r2, #32
 800a1e8:	6843      	ldr	r3, [r0, #4]
 800a1ea:	6804      	ldr	r4, [r0, #0]
 800a1ec:	fa03 f506 	lsl.w	r5, r3, r6
 800a1f0:	432c      	orrs	r4, r5
 800a1f2:	40d3      	lsrs	r3, r2
 800a1f4:	6004      	str	r4, [r0, #0]
 800a1f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a1fa:	4288      	cmp	r0, r1
 800a1fc:	d3f4      	bcc.n	800a1e8 <L_shift+0xc>
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}

0800a200 <__match>:
 800a200:	b530      	push	{r4, r5, lr}
 800a202:	6803      	ldr	r3, [r0, #0]
 800a204:	3301      	adds	r3, #1
 800a206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a20a:	b914      	cbnz	r4, 800a212 <__match+0x12>
 800a20c:	6003      	str	r3, [r0, #0]
 800a20e:	2001      	movs	r0, #1
 800a210:	bd30      	pop	{r4, r5, pc}
 800a212:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a216:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a21a:	2d19      	cmp	r5, #25
 800a21c:	bf98      	it	ls
 800a21e:	3220      	addls	r2, #32
 800a220:	42a2      	cmp	r2, r4
 800a222:	d0f0      	beq.n	800a206 <__match+0x6>
 800a224:	2000      	movs	r0, #0
 800a226:	e7f3      	b.n	800a210 <__match+0x10>

0800a228 <__hexnan>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	680b      	ldr	r3, [r1, #0]
 800a22e:	6801      	ldr	r1, [r0, #0]
 800a230:	115e      	asrs	r6, r3, #5
 800a232:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a236:	f013 031f 	ands.w	r3, r3, #31
 800a23a:	b087      	sub	sp, #28
 800a23c:	bf18      	it	ne
 800a23e:	3604      	addne	r6, #4
 800a240:	2500      	movs	r5, #0
 800a242:	1f37      	subs	r7, r6, #4
 800a244:	4682      	mov	sl, r0
 800a246:	4690      	mov	r8, r2
 800a248:	9301      	str	r3, [sp, #4]
 800a24a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a24e:	46b9      	mov	r9, r7
 800a250:	463c      	mov	r4, r7
 800a252:	9502      	str	r5, [sp, #8]
 800a254:	46ab      	mov	fp, r5
 800a256:	784a      	ldrb	r2, [r1, #1]
 800a258:	1c4b      	adds	r3, r1, #1
 800a25a:	9303      	str	r3, [sp, #12]
 800a25c:	b342      	cbz	r2, 800a2b0 <__hexnan+0x88>
 800a25e:	4610      	mov	r0, r2
 800a260:	9105      	str	r1, [sp, #20]
 800a262:	9204      	str	r2, [sp, #16]
 800a264:	f7ff fd94 	bl	8009d90 <__hexdig_fun>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d151      	bne.n	800a310 <__hexnan+0xe8>
 800a26c:	9a04      	ldr	r2, [sp, #16]
 800a26e:	9905      	ldr	r1, [sp, #20]
 800a270:	2a20      	cmp	r2, #32
 800a272:	d818      	bhi.n	800a2a6 <__hexnan+0x7e>
 800a274:	9b02      	ldr	r3, [sp, #8]
 800a276:	459b      	cmp	fp, r3
 800a278:	dd13      	ble.n	800a2a2 <__hexnan+0x7a>
 800a27a:	454c      	cmp	r4, r9
 800a27c:	d206      	bcs.n	800a28c <__hexnan+0x64>
 800a27e:	2d07      	cmp	r5, #7
 800a280:	dc04      	bgt.n	800a28c <__hexnan+0x64>
 800a282:	462a      	mov	r2, r5
 800a284:	4649      	mov	r1, r9
 800a286:	4620      	mov	r0, r4
 800a288:	f7ff ffa8 	bl	800a1dc <L_shift>
 800a28c:	4544      	cmp	r4, r8
 800a28e:	d952      	bls.n	800a336 <__hexnan+0x10e>
 800a290:	2300      	movs	r3, #0
 800a292:	f1a4 0904 	sub.w	r9, r4, #4
 800a296:	f844 3c04 	str.w	r3, [r4, #-4]
 800a29a:	f8cd b008 	str.w	fp, [sp, #8]
 800a29e:	464c      	mov	r4, r9
 800a2a0:	461d      	mov	r5, r3
 800a2a2:	9903      	ldr	r1, [sp, #12]
 800a2a4:	e7d7      	b.n	800a256 <__hexnan+0x2e>
 800a2a6:	2a29      	cmp	r2, #41	@ 0x29
 800a2a8:	d157      	bne.n	800a35a <__hexnan+0x132>
 800a2aa:	3102      	adds	r1, #2
 800a2ac:	f8ca 1000 	str.w	r1, [sl]
 800a2b0:	f1bb 0f00 	cmp.w	fp, #0
 800a2b4:	d051      	beq.n	800a35a <__hexnan+0x132>
 800a2b6:	454c      	cmp	r4, r9
 800a2b8:	d206      	bcs.n	800a2c8 <__hexnan+0xa0>
 800a2ba:	2d07      	cmp	r5, #7
 800a2bc:	dc04      	bgt.n	800a2c8 <__hexnan+0xa0>
 800a2be:	462a      	mov	r2, r5
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f7ff ff8a 	bl	800a1dc <L_shift>
 800a2c8:	4544      	cmp	r4, r8
 800a2ca:	d936      	bls.n	800a33a <__hexnan+0x112>
 800a2cc:	f1a8 0204 	sub.w	r2, r8, #4
 800a2d0:	4623      	mov	r3, r4
 800a2d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a2d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a2da:	429f      	cmp	r7, r3
 800a2dc:	d2f9      	bcs.n	800a2d2 <__hexnan+0xaa>
 800a2de:	1b3b      	subs	r3, r7, r4
 800a2e0:	f023 0303 	bic.w	r3, r3, #3
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	3401      	adds	r4, #1
 800a2e8:	3e03      	subs	r6, #3
 800a2ea:	42b4      	cmp	r4, r6
 800a2ec:	bf88      	it	hi
 800a2ee:	2304      	movhi	r3, #4
 800a2f0:	4443      	add	r3, r8
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f843 2b04 	str.w	r2, [r3], #4
 800a2f8:	429f      	cmp	r7, r3
 800a2fa:	d2fb      	bcs.n	800a2f4 <__hexnan+0xcc>
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	b91b      	cbnz	r3, 800a308 <__hexnan+0xe0>
 800a300:	4547      	cmp	r7, r8
 800a302:	d128      	bne.n	800a356 <__hexnan+0x12e>
 800a304:	2301      	movs	r3, #1
 800a306:	603b      	str	r3, [r7, #0]
 800a308:	2005      	movs	r0, #5
 800a30a:	b007      	add	sp, #28
 800a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a310:	3501      	adds	r5, #1
 800a312:	2d08      	cmp	r5, #8
 800a314:	f10b 0b01 	add.w	fp, fp, #1
 800a318:	dd06      	ble.n	800a328 <__hexnan+0x100>
 800a31a:	4544      	cmp	r4, r8
 800a31c:	d9c1      	bls.n	800a2a2 <__hexnan+0x7a>
 800a31e:	2300      	movs	r3, #0
 800a320:	f844 3c04 	str.w	r3, [r4, #-4]
 800a324:	2501      	movs	r5, #1
 800a326:	3c04      	subs	r4, #4
 800a328:	6822      	ldr	r2, [r4, #0]
 800a32a:	f000 000f 	and.w	r0, r0, #15
 800a32e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a332:	6020      	str	r0, [r4, #0]
 800a334:	e7b5      	b.n	800a2a2 <__hexnan+0x7a>
 800a336:	2508      	movs	r5, #8
 800a338:	e7b3      	b.n	800a2a2 <__hexnan+0x7a>
 800a33a:	9b01      	ldr	r3, [sp, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d0dd      	beq.n	800a2fc <__hexnan+0xd4>
 800a340:	f1c3 0320 	rsb	r3, r3, #32
 800a344:	f04f 32ff 	mov.w	r2, #4294967295
 800a348:	40da      	lsrs	r2, r3
 800a34a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a34e:	4013      	ands	r3, r2
 800a350:	f846 3c04 	str.w	r3, [r6, #-4]
 800a354:	e7d2      	b.n	800a2fc <__hexnan+0xd4>
 800a356:	3f04      	subs	r7, #4
 800a358:	e7d0      	b.n	800a2fc <__hexnan+0xd4>
 800a35a:	2004      	movs	r0, #4
 800a35c:	e7d5      	b.n	800a30a <__hexnan+0xe2>

0800a35e <__ascii_mbtowc>:
 800a35e:	b082      	sub	sp, #8
 800a360:	b901      	cbnz	r1, 800a364 <__ascii_mbtowc+0x6>
 800a362:	a901      	add	r1, sp, #4
 800a364:	b142      	cbz	r2, 800a378 <__ascii_mbtowc+0x1a>
 800a366:	b14b      	cbz	r3, 800a37c <__ascii_mbtowc+0x1e>
 800a368:	7813      	ldrb	r3, [r2, #0]
 800a36a:	600b      	str	r3, [r1, #0]
 800a36c:	7812      	ldrb	r2, [r2, #0]
 800a36e:	1e10      	subs	r0, r2, #0
 800a370:	bf18      	it	ne
 800a372:	2001      	movne	r0, #1
 800a374:	b002      	add	sp, #8
 800a376:	4770      	bx	lr
 800a378:	4610      	mov	r0, r2
 800a37a:	e7fb      	b.n	800a374 <__ascii_mbtowc+0x16>
 800a37c:	f06f 0001 	mvn.w	r0, #1
 800a380:	e7f8      	b.n	800a374 <__ascii_mbtowc+0x16>
	...

0800a384 <_Balloc>:
 800a384:	b570      	push	{r4, r5, r6, lr}
 800a386:	69c6      	ldr	r6, [r0, #28]
 800a388:	4604      	mov	r4, r0
 800a38a:	460d      	mov	r5, r1
 800a38c:	b976      	cbnz	r6, 800a3ac <_Balloc+0x28>
 800a38e:	2010      	movs	r0, #16
 800a390:	f7fe fb22 	bl	80089d8 <malloc>
 800a394:	4602      	mov	r2, r0
 800a396:	61e0      	str	r0, [r4, #28]
 800a398:	b920      	cbnz	r0, 800a3a4 <_Balloc+0x20>
 800a39a:	4b18      	ldr	r3, [pc, #96]	@ (800a3fc <_Balloc+0x78>)
 800a39c:	4818      	ldr	r0, [pc, #96]	@ (800a400 <_Balloc+0x7c>)
 800a39e:	216b      	movs	r1, #107	@ 0x6b
 800a3a0:	f001 fbf0 	bl	800bb84 <__assert_func>
 800a3a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3a8:	6006      	str	r6, [r0, #0]
 800a3aa:	60c6      	str	r6, [r0, #12]
 800a3ac:	69e6      	ldr	r6, [r4, #28]
 800a3ae:	68f3      	ldr	r3, [r6, #12]
 800a3b0:	b183      	cbz	r3, 800a3d4 <_Balloc+0x50>
 800a3b2:	69e3      	ldr	r3, [r4, #28]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3ba:	b9b8      	cbnz	r0, 800a3ec <_Balloc+0x68>
 800a3bc:	2101      	movs	r1, #1
 800a3be:	fa01 f605 	lsl.w	r6, r1, r5
 800a3c2:	1d72      	adds	r2, r6, #5
 800a3c4:	0092      	lsls	r2, r2, #2
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f001 fbfa 	bl	800bbc0 <_calloc_r>
 800a3cc:	b160      	cbz	r0, 800a3e8 <_Balloc+0x64>
 800a3ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3d2:	e00e      	b.n	800a3f2 <_Balloc+0x6e>
 800a3d4:	2221      	movs	r2, #33	@ 0x21
 800a3d6:	2104      	movs	r1, #4
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f001 fbf1 	bl	800bbc0 <_calloc_r>
 800a3de:	69e3      	ldr	r3, [r4, #28]
 800a3e0:	60f0      	str	r0, [r6, #12]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1e4      	bne.n	800a3b2 <_Balloc+0x2e>
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	bd70      	pop	{r4, r5, r6, pc}
 800a3ec:	6802      	ldr	r2, [r0, #0]
 800a3ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3f8:	e7f7      	b.n	800a3ea <_Balloc+0x66>
 800a3fa:	bf00      	nop
 800a3fc:	08017fd2 	.word	0x08017fd2
 800a400:	08017fe9 	.word	0x08017fe9

0800a404 <_Bfree>:
 800a404:	b570      	push	{r4, r5, r6, lr}
 800a406:	69c6      	ldr	r6, [r0, #28]
 800a408:	4605      	mov	r5, r0
 800a40a:	460c      	mov	r4, r1
 800a40c:	b976      	cbnz	r6, 800a42c <_Bfree+0x28>
 800a40e:	2010      	movs	r0, #16
 800a410:	f7fe fae2 	bl	80089d8 <malloc>
 800a414:	4602      	mov	r2, r0
 800a416:	61e8      	str	r0, [r5, #28]
 800a418:	b920      	cbnz	r0, 800a424 <_Bfree+0x20>
 800a41a:	4b09      	ldr	r3, [pc, #36]	@ (800a440 <_Bfree+0x3c>)
 800a41c:	4809      	ldr	r0, [pc, #36]	@ (800a444 <_Bfree+0x40>)
 800a41e:	218f      	movs	r1, #143	@ 0x8f
 800a420:	f001 fbb0 	bl	800bb84 <__assert_func>
 800a424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a428:	6006      	str	r6, [r0, #0]
 800a42a:	60c6      	str	r6, [r0, #12]
 800a42c:	b13c      	cbz	r4, 800a43e <_Bfree+0x3a>
 800a42e:	69eb      	ldr	r3, [r5, #28]
 800a430:	6862      	ldr	r2, [r4, #4]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a438:	6021      	str	r1, [r4, #0]
 800a43a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a43e:	bd70      	pop	{r4, r5, r6, pc}
 800a440:	08017fd2 	.word	0x08017fd2
 800a444:	08017fe9 	.word	0x08017fe9

0800a448 <__multadd>:
 800a448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44c:	690d      	ldr	r5, [r1, #16]
 800a44e:	4607      	mov	r7, r0
 800a450:	460c      	mov	r4, r1
 800a452:	461e      	mov	r6, r3
 800a454:	f101 0c14 	add.w	ip, r1, #20
 800a458:	2000      	movs	r0, #0
 800a45a:	f8dc 3000 	ldr.w	r3, [ip]
 800a45e:	b299      	uxth	r1, r3
 800a460:	fb02 6101 	mla	r1, r2, r1, r6
 800a464:	0c1e      	lsrs	r6, r3, #16
 800a466:	0c0b      	lsrs	r3, r1, #16
 800a468:	fb02 3306 	mla	r3, r2, r6, r3
 800a46c:	b289      	uxth	r1, r1
 800a46e:	3001      	adds	r0, #1
 800a470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a474:	4285      	cmp	r5, r0
 800a476:	f84c 1b04 	str.w	r1, [ip], #4
 800a47a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a47e:	dcec      	bgt.n	800a45a <__multadd+0x12>
 800a480:	b30e      	cbz	r6, 800a4c6 <__multadd+0x7e>
 800a482:	68a3      	ldr	r3, [r4, #8]
 800a484:	42ab      	cmp	r3, r5
 800a486:	dc19      	bgt.n	800a4bc <__multadd+0x74>
 800a488:	6861      	ldr	r1, [r4, #4]
 800a48a:	4638      	mov	r0, r7
 800a48c:	3101      	adds	r1, #1
 800a48e:	f7ff ff79 	bl	800a384 <_Balloc>
 800a492:	4680      	mov	r8, r0
 800a494:	b928      	cbnz	r0, 800a4a2 <__multadd+0x5a>
 800a496:	4602      	mov	r2, r0
 800a498:	4b0c      	ldr	r3, [pc, #48]	@ (800a4cc <__multadd+0x84>)
 800a49a:	480d      	ldr	r0, [pc, #52]	@ (800a4d0 <__multadd+0x88>)
 800a49c:	21ba      	movs	r1, #186	@ 0xba
 800a49e:	f001 fb71 	bl	800bb84 <__assert_func>
 800a4a2:	6922      	ldr	r2, [r4, #16]
 800a4a4:	3202      	adds	r2, #2
 800a4a6:	f104 010c 	add.w	r1, r4, #12
 800a4aa:	0092      	lsls	r2, r2, #2
 800a4ac:	300c      	adds	r0, #12
 800a4ae:	f7ff fbba 	bl	8009c26 <memcpy>
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	f7ff ffa5 	bl	800a404 <_Bfree>
 800a4ba:	4644      	mov	r4, r8
 800a4bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4c0:	3501      	adds	r5, #1
 800a4c2:	615e      	str	r6, [r3, #20]
 800a4c4:	6125      	str	r5, [r4, #16]
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4cc:	08017f61 	.word	0x08017f61
 800a4d0:	08017fe9 	.word	0x08017fe9

0800a4d4 <__s2b>:
 800a4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d8:	460c      	mov	r4, r1
 800a4da:	4615      	mov	r5, r2
 800a4dc:	461f      	mov	r7, r3
 800a4de:	2209      	movs	r2, #9
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	4606      	mov	r6, r0
 800a4e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	db09      	blt.n	800a504 <__s2b+0x30>
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	f7ff ff47 	bl	800a384 <_Balloc>
 800a4f6:	b940      	cbnz	r0, 800a50a <__s2b+0x36>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	4b19      	ldr	r3, [pc, #100]	@ (800a560 <__s2b+0x8c>)
 800a4fc:	4819      	ldr	r0, [pc, #100]	@ (800a564 <__s2b+0x90>)
 800a4fe:	21d3      	movs	r1, #211	@ 0xd3
 800a500:	f001 fb40 	bl	800bb84 <__assert_func>
 800a504:	0052      	lsls	r2, r2, #1
 800a506:	3101      	adds	r1, #1
 800a508:	e7f0      	b.n	800a4ec <__s2b+0x18>
 800a50a:	9b08      	ldr	r3, [sp, #32]
 800a50c:	6143      	str	r3, [r0, #20]
 800a50e:	2d09      	cmp	r5, #9
 800a510:	f04f 0301 	mov.w	r3, #1
 800a514:	6103      	str	r3, [r0, #16]
 800a516:	dd16      	ble.n	800a546 <__s2b+0x72>
 800a518:	f104 0909 	add.w	r9, r4, #9
 800a51c:	46c8      	mov	r8, r9
 800a51e:	442c      	add	r4, r5
 800a520:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a524:	4601      	mov	r1, r0
 800a526:	3b30      	subs	r3, #48	@ 0x30
 800a528:	220a      	movs	r2, #10
 800a52a:	4630      	mov	r0, r6
 800a52c:	f7ff ff8c 	bl	800a448 <__multadd>
 800a530:	45a0      	cmp	r8, r4
 800a532:	d1f5      	bne.n	800a520 <__s2b+0x4c>
 800a534:	f1a5 0408 	sub.w	r4, r5, #8
 800a538:	444c      	add	r4, r9
 800a53a:	1b2d      	subs	r5, r5, r4
 800a53c:	1963      	adds	r3, r4, r5
 800a53e:	42bb      	cmp	r3, r7
 800a540:	db04      	blt.n	800a54c <__s2b+0x78>
 800a542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a546:	340a      	adds	r4, #10
 800a548:	2509      	movs	r5, #9
 800a54a:	e7f6      	b.n	800a53a <__s2b+0x66>
 800a54c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a550:	4601      	mov	r1, r0
 800a552:	3b30      	subs	r3, #48	@ 0x30
 800a554:	220a      	movs	r2, #10
 800a556:	4630      	mov	r0, r6
 800a558:	f7ff ff76 	bl	800a448 <__multadd>
 800a55c:	e7ee      	b.n	800a53c <__s2b+0x68>
 800a55e:	bf00      	nop
 800a560:	08017f61 	.word	0x08017f61
 800a564:	08017fe9 	.word	0x08017fe9

0800a568 <__hi0bits>:
 800a568:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a56c:	4603      	mov	r3, r0
 800a56e:	bf36      	itet	cc
 800a570:	0403      	lslcc	r3, r0, #16
 800a572:	2000      	movcs	r0, #0
 800a574:	2010      	movcc	r0, #16
 800a576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a57a:	bf3c      	itt	cc
 800a57c:	021b      	lslcc	r3, r3, #8
 800a57e:	3008      	addcc	r0, #8
 800a580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a584:	bf3c      	itt	cc
 800a586:	011b      	lslcc	r3, r3, #4
 800a588:	3004      	addcc	r0, #4
 800a58a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a58e:	bf3c      	itt	cc
 800a590:	009b      	lslcc	r3, r3, #2
 800a592:	3002      	addcc	r0, #2
 800a594:	2b00      	cmp	r3, #0
 800a596:	db05      	blt.n	800a5a4 <__hi0bits+0x3c>
 800a598:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a59c:	f100 0001 	add.w	r0, r0, #1
 800a5a0:	bf08      	it	eq
 800a5a2:	2020      	moveq	r0, #32
 800a5a4:	4770      	bx	lr

0800a5a6 <__lo0bits>:
 800a5a6:	6803      	ldr	r3, [r0, #0]
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	f013 0007 	ands.w	r0, r3, #7
 800a5ae:	d00b      	beq.n	800a5c8 <__lo0bits+0x22>
 800a5b0:	07d9      	lsls	r1, r3, #31
 800a5b2:	d421      	bmi.n	800a5f8 <__lo0bits+0x52>
 800a5b4:	0798      	lsls	r0, r3, #30
 800a5b6:	bf49      	itett	mi
 800a5b8:	085b      	lsrmi	r3, r3, #1
 800a5ba:	089b      	lsrpl	r3, r3, #2
 800a5bc:	2001      	movmi	r0, #1
 800a5be:	6013      	strmi	r3, [r2, #0]
 800a5c0:	bf5c      	itt	pl
 800a5c2:	6013      	strpl	r3, [r2, #0]
 800a5c4:	2002      	movpl	r0, #2
 800a5c6:	4770      	bx	lr
 800a5c8:	b299      	uxth	r1, r3
 800a5ca:	b909      	cbnz	r1, 800a5d0 <__lo0bits+0x2a>
 800a5cc:	0c1b      	lsrs	r3, r3, #16
 800a5ce:	2010      	movs	r0, #16
 800a5d0:	b2d9      	uxtb	r1, r3
 800a5d2:	b909      	cbnz	r1, 800a5d8 <__lo0bits+0x32>
 800a5d4:	3008      	adds	r0, #8
 800a5d6:	0a1b      	lsrs	r3, r3, #8
 800a5d8:	0719      	lsls	r1, r3, #28
 800a5da:	bf04      	itt	eq
 800a5dc:	091b      	lsreq	r3, r3, #4
 800a5de:	3004      	addeq	r0, #4
 800a5e0:	0799      	lsls	r1, r3, #30
 800a5e2:	bf04      	itt	eq
 800a5e4:	089b      	lsreq	r3, r3, #2
 800a5e6:	3002      	addeq	r0, #2
 800a5e8:	07d9      	lsls	r1, r3, #31
 800a5ea:	d403      	bmi.n	800a5f4 <__lo0bits+0x4e>
 800a5ec:	085b      	lsrs	r3, r3, #1
 800a5ee:	f100 0001 	add.w	r0, r0, #1
 800a5f2:	d003      	beq.n	800a5fc <__lo0bits+0x56>
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	4770      	bx	lr
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	4770      	bx	lr
 800a5fc:	2020      	movs	r0, #32
 800a5fe:	4770      	bx	lr

0800a600 <__i2b>:
 800a600:	b510      	push	{r4, lr}
 800a602:	460c      	mov	r4, r1
 800a604:	2101      	movs	r1, #1
 800a606:	f7ff febd 	bl	800a384 <_Balloc>
 800a60a:	4602      	mov	r2, r0
 800a60c:	b928      	cbnz	r0, 800a61a <__i2b+0x1a>
 800a60e:	4b05      	ldr	r3, [pc, #20]	@ (800a624 <__i2b+0x24>)
 800a610:	4805      	ldr	r0, [pc, #20]	@ (800a628 <__i2b+0x28>)
 800a612:	f240 1145 	movw	r1, #325	@ 0x145
 800a616:	f001 fab5 	bl	800bb84 <__assert_func>
 800a61a:	2301      	movs	r3, #1
 800a61c:	6144      	str	r4, [r0, #20]
 800a61e:	6103      	str	r3, [r0, #16]
 800a620:	bd10      	pop	{r4, pc}
 800a622:	bf00      	nop
 800a624:	08017f61 	.word	0x08017f61
 800a628:	08017fe9 	.word	0x08017fe9

0800a62c <__multiply>:
 800a62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a630:	4614      	mov	r4, r2
 800a632:	690a      	ldr	r2, [r1, #16]
 800a634:	6923      	ldr	r3, [r4, #16]
 800a636:	429a      	cmp	r2, r3
 800a638:	bfa8      	it	ge
 800a63a:	4623      	movge	r3, r4
 800a63c:	460f      	mov	r7, r1
 800a63e:	bfa4      	itt	ge
 800a640:	460c      	movge	r4, r1
 800a642:	461f      	movge	r7, r3
 800a644:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a648:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a64c:	68a3      	ldr	r3, [r4, #8]
 800a64e:	6861      	ldr	r1, [r4, #4]
 800a650:	eb0a 0609 	add.w	r6, sl, r9
 800a654:	42b3      	cmp	r3, r6
 800a656:	b085      	sub	sp, #20
 800a658:	bfb8      	it	lt
 800a65a:	3101      	addlt	r1, #1
 800a65c:	f7ff fe92 	bl	800a384 <_Balloc>
 800a660:	b930      	cbnz	r0, 800a670 <__multiply+0x44>
 800a662:	4602      	mov	r2, r0
 800a664:	4b44      	ldr	r3, [pc, #272]	@ (800a778 <__multiply+0x14c>)
 800a666:	4845      	ldr	r0, [pc, #276]	@ (800a77c <__multiply+0x150>)
 800a668:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a66c:	f001 fa8a 	bl	800bb84 <__assert_func>
 800a670:	f100 0514 	add.w	r5, r0, #20
 800a674:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a678:	462b      	mov	r3, r5
 800a67a:	2200      	movs	r2, #0
 800a67c:	4543      	cmp	r3, r8
 800a67e:	d321      	bcc.n	800a6c4 <__multiply+0x98>
 800a680:	f107 0114 	add.w	r1, r7, #20
 800a684:	f104 0214 	add.w	r2, r4, #20
 800a688:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a68c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a690:	9302      	str	r3, [sp, #8]
 800a692:	1b13      	subs	r3, r2, r4
 800a694:	3b15      	subs	r3, #21
 800a696:	f023 0303 	bic.w	r3, r3, #3
 800a69a:	3304      	adds	r3, #4
 800a69c:	f104 0715 	add.w	r7, r4, #21
 800a6a0:	42ba      	cmp	r2, r7
 800a6a2:	bf38      	it	cc
 800a6a4:	2304      	movcc	r3, #4
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	9b02      	ldr	r3, [sp, #8]
 800a6aa:	9103      	str	r1, [sp, #12]
 800a6ac:	428b      	cmp	r3, r1
 800a6ae:	d80c      	bhi.n	800a6ca <__multiply+0x9e>
 800a6b0:	2e00      	cmp	r6, #0
 800a6b2:	dd03      	ble.n	800a6bc <__multiply+0x90>
 800a6b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d05b      	beq.n	800a774 <__multiply+0x148>
 800a6bc:	6106      	str	r6, [r0, #16]
 800a6be:	b005      	add	sp, #20
 800a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c4:	f843 2b04 	str.w	r2, [r3], #4
 800a6c8:	e7d8      	b.n	800a67c <__multiply+0x50>
 800a6ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800a6ce:	f1ba 0f00 	cmp.w	sl, #0
 800a6d2:	d024      	beq.n	800a71e <__multiply+0xf2>
 800a6d4:	f104 0e14 	add.w	lr, r4, #20
 800a6d8:	46a9      	mov	r9, r5
 800a6da:	f04f 0c00 	mov.w	ip, #0
 800a6de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6e2:	f8d9 3000 	ldr.w	r3, [r9]
 800a6e6:	fa1f fb87 	uxth.w	fp, r7
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800a6f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a6f4:	f8d9 7000 	ldr.w	r7, [r9]
 800a6f8:	4463      	add	r3, ip
 800a6fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a6fe:	fb0a c70b 	mla	r7, sl, fp, ip
 800a702:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a706:	b29b      	uxth	r3, r3
 800a708:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a70c:	4572      	cmp	r2, lr
 800a70e:	f849 3b04 	str.w	r3, [r9], #4
 800a712:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a716:	d8e2      	bhi.n	800a6de <__multiply+0xb2>
 800a718:	9b01      	ldr	r3, [sp, #4]
 800a71a:	f845 c003 	str.w	ip, [r5, r3]
 800a71e:	9b03      	ldr	r3, [sp, #12]
 800a720:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a724:	3104      	adds	r1, #4
 800a726:	f1b9 0f00 	cmp.w	r9, #0
 800a72a:	d021      	beq.n	800a770 <__multiply+0x144>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	f104 0c14 	add.w	ip, r4, #20
 800a732:	46ae      	mov	lr, r5
 800a734:	f04f 0a00 	mov.w	sl, #0
 800a738:	f8bc b000 	ldrh.w	fp, [ip]
 800a73c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a740:	fb09 770b 	mla	r7, r9, fp, r7
 800a744:	4457      	add	r7, sl
 800a746:	b29b      	uxth	r3, r3
 800a748:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a74c:	f84e 3b04 	str.w	r3, [lr], #4
 800a750:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a758:	f8be 3000 	ldrh.w	r3, [lr]
 800a75c:	fb09 330a 	mla	r3, r9, sl, r3
 800a760:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a764:	4562      	cmp	r2, ip
 800a766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a76a:	d8e5      	bhi.n	800a738 <__multiply+0x10c>
 800a76c:	9f01      	ldr	r7, [sp, #4]
 800a76e:	51eb      	str	r3, [r5, r7]
 800a770:	3504      	adds	r5, #4
 800a772:	e799      	b.n	800a6a8 <__multiply+0x7c>
 800a774:	3e01      	subs	r6, #1
 800a776:	e79b      	b.n	800a6b0 <__multiply+0x84>
 800a778:	08017f61 	.word	0x08017f61
 800a77c:	08017fe9 	.word	0x08017fe9

0800a780 <__pow5mult>:
 800a780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a784:	4615      	mov	r5, r2
 800a786:	f012 0203 	ands.w	r2, r2, #3
 800a78a:	4607      	mov	r7, r0
 800a78c:	460e      	mov	r6, r1
 800a78e:	d007      	beq.n	800a7a0 <__pow5mult+0x20>
 800a790:	4c25      	ldr	r4, [pc, #148]	@ (800a828 <__pow5mult+0xa8>)
 800a792:	3a01      	subs	r2, #1
 800a794:	2300      	movs	r3, #0
 800a796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a79a:	f7ff fe55 	bl	800a448 <__multadd>
 800a79e:	4606      	mov	r6, r0
 800a7a0:	10ad      	asrs	r5, r5, #2
 800a7a2:	d03d      	beq.n	800a820 <__pow5mult+0xa0>
 800a7a4:	69fc      	ldr	r4, [r7, #28]
 800a7a6:	b97c      	cbnz	r4, 800a7c8 <__pow5mult+0x48>
 800a7a8:	2010      	movs	r0, #16
 800a7aa:	f7fe f915 	bl	80089d8 <malloc>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	61f8      	str	r0, [r7, #28]
 800a7b2:	b928      	cbnz	r0, 800a7c0 <__pow5mult+0x40>
 800a7b4:	4b1d      	ldr	r3, [pc, #116]	@ (800a82c <__pow5mult+0xac>)
 800a7b6:	481e      	ldr	r0, [pc, #120]	@ (800a830 <__pow5mult+0xb0>)
 800a7b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a7bc:	f001 f9e2 	bl	800bb84 <__assert_func>
 800a7c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7c4:	6004      	str	r4, [r0, #0]
 800a7c6:	60c4      	str	r4, [r0, #12]
 800a7c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a7cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7d0:	b94c      	cbnz	r4, 800a7e6 <__pow5mult+0x66>
 800a7d2:	f240 2171 	movw	r1, #625	@ 0x271
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	f7ff ff12 	bl	800a600 <__i2b>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	6003      	str	r3, [r0, #0]
 800a7e6:	f04f 0900 	mov.w	r9, #0
 800a7ea:	07eb      	lsls	r3, r5, #31
 800a7ec:	d50a      	bpl.n	800a804 <__pow5mult+0x84>
 800a7ee:	4631      	mov	r1, r6
 800a7f0:	4622      	mov	r2, r4
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	f7ff ff1a 	bl	800a62c <__multiply>
 800a7f8:	4631      	mov	r1, r6
 800a7fa:	4680      	mov	r8, r0
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f7ff fe01 	bl	800a404 <_Bfree>
 800a802:	4646      	mov	r6, r8
 800a804:	106d      	asrs	r5, r5, #1
 800a806:	d00b      	beq.n	800a820 <__pow5mult+0xa0>
 800a808:	6820      	ldr	r0, [r4, #0]
 800a80a:	b938      	cbnz	r0, 800a81c <__pow5mult+0x9c>
 800a80c:	4622      	mov	r2, r4
 800a80e:	4621      	mov	r1, r4
 800a810:	4638      	mov	r0, r7
 800a812:	f7ff ff0b 	bl	800a62c <__multiply>
 800a816:	6020      	str	r0, [r4, #0]
 800a818:	f8c0 9000 	str.w	r9, [r0]
 800a81c:	4604      	mov	r4, r0
 800a81e:	e7e4      	b.n	800a7ea <__pow5mult+0x6a>
 800a820:	4630      	mov	r0, r6
 800a822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a826:	bf00      	nop
 800a828:	08018044 	.word	0x08018044
 800a82c:	08017fd2 	.word	0x08017fd2
 800a830:	08017fe9 	.word	0x08017fe9

0800a834 <__lshift>:
 800a834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a838:	460c      	mov	r4, r1
 800a83a:	6849      	ldr	r1, [r1, #4]
 800a83c:	6923      	ldr	r3, [r4, #16]
 800a83e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a842:	68a3      	ldr	r3, [r4, #8]
 800a844:	4607      	mov	r7, r0
 800a846:	4691      	mov	r9, r2
 800a848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a84c:	f108 0601 	add.w	r6, r8, #1
 800a850:	42b3      	cmp	r3, r6
 800a852:	db0b      	blt.n	800a86c <__lshift+0x38>
 800a854:	4638      	mov	r0, r7
 800a856:	f7ff fd95 	bl	800a384 <_Balloc>
 800a85a:	4605      	mov	r5, r0
 800a85c:	b948      	cbnz	r0, 800a872 <__lshift+0x3e>
 800a85e:	4602      	mov	r2, r0
 800a860:	4b28      	ldr	r3, [pc, #160]	@ (800a904 <__lshift+0xd0>)
 800a862:	4829      	ldr	r0, [pc, #164]	@ (800a908 <__lshift+0xd4>)
 800a864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a868:	f001 f98c 	bl	800bb84 <__assert_func>
 800a86c:	3101      	adds	r1, #1
 800a86e:	005b      	lsls	r3, r3, #1
 800a870:	e7ee      	b.n	800a850 <__lshift+0x1c>
 800a872:	2300      	movs	r3, #0
 800a874:	f100 0114 	add.w	r1, r0, #20
 800a878:	f100 0210 	add.w	r2, r0, #16
 800a87c:	4618      	mov	r0, r3
 800a87e:	4553      	cmp	r3, sl
 800a880:	db33      	blt.n	800a8ea <__lshift+0xb6>
 800a882:	6920      	ldr	r0, [r4, #16]
 800a884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a888:	f104 0314 	add.w	r3, r4, #20
 800a88c:	f019 091f 	ands.w	r9, r9, #31
 800a890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a898:	d02b      	beq.n	800a8f2 <__lshift+0xbe>
 800a89a:	f1c9 0e20 	rsb	lr, r9, #32
 800a89e:	468a      	mov	sl, r1
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	6818      	ldr	r0, [r3, #0]
 800a8a4:	fa00 f009 	lsl.w	r0, r0, r9
 800a8a8:	4310      	orrs	r0, r2
 800a8aa:	f84a 0b04 	str.w	r0, [sl], #4
 800a8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8b2:	459c      	cmp	ip, r3
 800a8b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8b8:	d8f3      	bhi.n	800a8a2 <__lshift+0x6e>
 800a8ba:	ebac 0304 	sub.w	r3, ip, r4
 800a8be:	3b15      	subs	r3, #21
 800a8c0:	f023 0303 	bic.w	r3, r3, #3
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	f104 0015 	add.w	r0, r4, #21
 800a8ca:	4584      	cmp	ip, r0
 800a8cc:	bf38      	it	cc
 800a8ce:	2304      	movcc	r3, #4
 800a8d0:	50ca      	str	r2, [r1, r3]
 800a8d2:	b10a      	cbz	r2, 800a8d8 <__lshift+0xa4>
 800a8d4:	f108 0602 	add.w	r6, r8, #2
 800a8d8:	3e01      	subs	r6, #1
 800a8da:	4638      	mov	r0, r7
 800a8dc:	612e      	str	r6, [r5, #16]
 800a8de:	4621      	mov	r1, r4
 800a8e0:	f7ff fd90 	bl	800a404 <_Bfree>
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	e7c5      	b.n	800a87e <__lshift+0x4a>
 800a8f2:	3904      	subs	r1, #4
 800a8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8fc:	459c      	cmp	ip, r3
 800a8fe:	d8f9      	bhi.n	800a8f4 <__lshift+0xc0>
 800a900:	e7ea      	b.n	800a8d8 <__lshift+0xa4>
 800a902:	bf00      	nop
 800a904:	08017f61 	.word	0x08017f61
 800a908:	08017fe9 	.word	0x08017fe9

0800a90c <__mcmp>:
 800a90c:	690a      	ldr	r2, [r1, #16]
 800a90e:	4603      	mov	r3, r0
 800a910:	6900      	ldr	r0, [r0, #16]
 800a912:	1a80      	subs	r0, r0, r2
 800a914:	b530      	push	{r4, r5, lr}
 800a916:	d10e      	bne.n	800a936 <__mcmp+0x2a>
 800a918:	3314      	adds	r3, #20
 800a91a:	3114      	adds	r1, #20
 800a91c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a92c:	4295      	cmp	r5, r2
 800a92e:	d003      	beq.n	800a938 <__mcmp+0x2c>
 800a930:	d205      	bcs.n	800a93e <__mcmp+0x32>
 800a932:	f04f 30ff 	mov.w	r0, #4294967295
 800a936:	bd30      	pop	{r4, r5, pc}
 800a938:	42a3      	cmp	r3, r4
 800a93a:	d3f3      	bcc.n	800a924 <__mcmp+0x18>
 800a93c:	e7fb      	b.n	800a936 <__mcmp+0x2a>
 800a93e:	2001      	movs	r0, #1
 800a940:	e7f9      	b.n	800a936 <__mcmp+0x2a>
	...

0800a944 <__mdiff>:
 800a944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a948:	4689      	mov	r9, r1
 800a94a:	4606      	mov	r6, r0
 800a94c:	4611      	mov	r1, r2
 800a94e:	4648      	mov	r0, r9
 800a950:	4614      	mov	r4, r2
 800a952:	f7ff ffdb 	bl	800a90c <__mcmp>
 800a956:	1e05      	subs	r5, r0, #0
 800a958:	d112      	bne.n	800a980 <__mdiff+0x3c>
 800a95a:	4629      	mov	r1, r5
 800a95c:	4630      	mov	r0, r6
 800a95e:	f7ff fd11 	bl	800a384 <_Balloc>
 800a962:	4602      	mov	r2, r0
 800a964:	b928      	cbnz	r0, 800a972 <__mdiff+0x2e>
 800a966:	4b3f      	ldr	r3, [pc, #252]	@ (800aa64 <__mdiff+0x120>)
 800a968:	f240 2137 	movw	r1, #567	@ 0x237
 800a96c:	483e      	ldr	r0, [pc, #248]	@ (800aa68 <__mdiff+0x124>)
 800a96e:	f001 f909 	bl	800bb84 <__assert_func>
 800a972:	2301      	movs	r3, #1
 800a974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a978:	4610      	mov	r0, r2
 800a97a:	b003      	add	sp, #12
 800a97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a980:	bfbc      	itt	lt
 800a982:	464b      	movlt	r3, r9
 800a984:	46a1      	movlt	r9, r4
 800a986:	4630      	mov	r0, r6
 800a988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a98c:	bfba      	itte	lt
 800a98e:	461c      	movlt	r4, r3
 800a990:	2501      	movlt	r5, #1
 800a992:	2500      	movge	r5, #0
 800a994:	f7ff fcf6 	bl	800a384 <_Balloc>
 800a998:	4602      	mov	r2, r0
 800a99a:	b918      	cbnz	r0, 800a9a4 <__mdiff+0x60>
 800a99c:	4b31      	ldr	r3, [pc, #196]	@ (800aa64 <__mdiff+0x120>)
 800a99e:	f240 2145 	movw	r1, #581	@ 0x245
 800a9a2:	e7e3      	b.n	800a96c <__mdiff+0x28>
 800a9a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9a8:	6926      	ldr	r6, [r4, #16]
 800a9aa:	60c5      	str	r5, [r0, #12]
 800a9ac:	f109 0310 	add.w	r3, r9, #16
 800a9b0:	f109 0514 	add.w	r5, r9, #20
 800a9b4:	f104 0e14 	add.w	lr, r4, #20
 800a9b8:	f100 0b14 	add.w	fp, r0, #20
 800a9bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a9c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	46d9      	mov	r9, fp
 800a9c8:	f04f 0c00 	mov.w	ip, #0
 800a9cc:	9b01      	ldr	r3, [sp, #4]
 800a9ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a9d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a9d6:	9301      	str	r3, [sp, #4]
 800a9d8:	fa1f f38a 	uxth.w	r3, sl
 800a9dc:	4619      	mov	r1, r3
 800a9de:	b283      	uxth	r3, r0
 800a9e0:	1acb      	subs	r3, r1, r3
 800a9e2:	0c00      	lsrs	r0, r0, #16
 800a9e4:	4463      	add	r3, ip
 800a9e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a9ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a9f4:	4576      	cmp	r6, lr
 800a9f6:	f849 3b04 	str.w	r3, [r9], #4
 800a9fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9fe:	d8e5      	bhi.n	800a9cc <__mdiff+0x88>
 800aa00:	1b33      	subs	r3, r6, r4
 800aa02:	3b15      	subs	r3, #21
 800aa04:	f023 0303 	bic.w	r3, r3, #3
 800aa08:	3415      	adds	r4, #21
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	42a6      	cmp	r6, r4
 800aa0e:	bf38      	it	cc
 800aa10:	2304      	movcc	r3, #4
 800aa12:	441d      	add	r5, r3
 800aa14:	445b      	add	r3, fp
 800aa16:	461e      	mov	r6, r3
 800aa18:	462c      	mov	r4, r5
 800aa1a:	4544      	cmp	r4, r8
 800aa1c:	d30e      	bcc.n	800aa3c <__mdiff+0xf8>
 800aa1e:	f108 0103 	add.w	r1, r8, #3
 800aa22:	1b49      	subs	r1, r1, r5
 800aa24:	f021 0103 	bic.w	r1, r1, #3
 800aa28:	3d03      	subs	r5, #3
 800aa2a:	45a8      	cmp	r8, r5
 800aa2c:	bf38      	it	cc
 800aa2e:	2100      	movcc	r1, #0
 800aa30:	440b      	add	r3, r1
 800aa32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa36:	b191      	cbz	r1, 800aa5e <__mdiff+0x11a>
 800aa38:	6117      	str	r7, [r2, #16]
 800aa3a:	e79d      	b.n	800a978 <__mdiff+0x34>
 800aa3c:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa40:	46e6      	mov	lr, ip
 800aa42:	0c08      	lsrs	r0, r1, #16
 800aa44:	fa1c fc81 	uxtah	ip, ip, r1
 800aa48:	4471      	add	r1, lr
 800aa4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa4e:	b289      	uxth	r1, r1
 800aa50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa54:	f846 1b04 	str.w	r1, [r6], #4
 800aa58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa5c:	e7dd      	b.n	800aa1a <__mdiff+0xd6>
 800aa5e:	3f01      	subs	r7, #1
 800aa60:	e7e7      	b.n	800aa32 <__mdiff+0xee>
 800aa62:	bf00      	nop
 800aa64:	08017f61 	.word	0x08017f61
 800aa68:	08017fe9 	.word	0x08017fe9

0800aa6c <__ulp>:
 800aa6c:	b082      	sub	sp, #8
 800aa6e:	ed8d 0b00 	vstr	d0, [sp]
 800aa72:	9a01      	ldr	r2, [sp, #4]
 800aa74:	4b0f      	ldr	r3, [pc, #60]	@ (800aab4 <__ulp+0x48>)
 800aa76:	4013      	ands	r3, r2
 800aa78:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	dc08      	bgt.n	800aa92 <__ulp+0x26>
 800aa80:	425b      	negs	r3, r3
 800aa82:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aa86:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aa8a:	da04      	bge.n	800aa96 <__ulp+0x2a>
 800aa8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aa90:	4113      	asrs	r3, r2
 800aa92:	2200      	movs	r2, #0
 800aa94:	e008      	b.n	800aaa8 <__ulp+0x3c>
 800aa96:	f1a2 0314 	sub.w	r3, r2, #20
 800aa9a:	2b1e      	cmp	r3, #30
 800aa9c:	bfda      	itte	le
 800aa9e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aaa2:	40da      	lsrle	r2, r3
 800aaa4:	2201      	movgt	r2, #1
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4610      	mov	r0, r2
 800aaac:	ec41 0b10 	vmov	d0, r0, r1
 800aab0:	b002      	add	sp, #8
 800aab2:	4770      	bx	lr
 800aab4:	7ff00000 	.word	0x7ff00000

0800aab8 <__b2d>:
 800aab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aabc:	6906      	ldr	r6, [r0, #16]
 800aabe:	f100 0814 	add.w	r8, r0, #20
 800aac2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aac6:	1f37      	subs	r7, r6, #4
 800aac8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aacc:	4610      	mov	r0, r2
 800aace:	f7ff fd4b 	bl	800a568 <__hi0bits>
 800aad2:	f1c0 0320 	rsb	r3, r0, #32
 800aad6:	280a      	cmp	r0, #10
 800aad8:	600b      	str	r3, [r1, #0]
 800aada:	491b      	ldr	r1, [pc, #108]	@ (800ab48 <__b2d+0x90>)
 800aadc:	dc15      	bgt.n	800ab0a <__b2d+0x52>
 800aade:	f1c0 0c0b 	rsb	ip, r0, #11
 800aae2:	fa22 f30c 	lsr.w	r3, r2, ip
 800aae6:	45b8      	cmp	r8, r7
 800aae8:	ea43 0501 	orr.w	r5, r3, r1
 800aaec:	bf34      	ite	cc
 800aaee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aaf2:	2300      	movcs	r3, #0
 800aaf4:	3015      	adds	r0, #21
 800aaf6:	fa02 f000 	lsl.w	r0, r2, r0
 800aafa:	fa23 f30c 	lsr.w	r3, r3, ip
 800aafe:	4303      	orrs	r3, r0
 800ab00:	461c      	mov	r4, r3
 800ab02:	ec45 4b10 	vmov	d0, r4, r5
 800ab06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab0a:	45b8      	cmp	r8, r7
 800ab0c:	bf3a      	itte	cc
 800ab0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab12:	f1a6 0708 	subcc.w	r7, r6, #8
 800ab16:	2300      	movcs	r3, #0
 800ab18:	380b      	subs	r0, #11
 800ab1a:	d012      	beq.n	800ab42 <__b2d+0x8a>
 800ab1c:	f1c0 0120 	rsb	r1, r0, #32
 800ab20:	fa23 f401 	lsr.w	r4, r3, r1
 800ab24:	4082      	lsls	r2, r0
 800ab26:	4322      	orrs	r2, r4
 800ab28:	4547      	cmp	r7, r8
 800ab2a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ab2e:	bf8c      	ite	hi
 800ab30:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ab34:	2200      	movls	r2, #0
 800ab36:	4083      	lsls	r3, r0
 800ab38:	40ca      	lsrs	r2, r1
 800ab3a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	e7de      	b.n	800ab00 <__b2d+0x48>
 800ab42:	ea42 0501 	orr.w	r5, r2, r1
 800ab46:	e7db      	b.n	800ab00 <__b2d+0x48>
 800ab48:	3ff00000 	.word	0x3ff00000

0800ab4c <__d2b>:
 800ab4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab50:	460f      	mov	r7, r1
 800ab52:	2101      	movs	r1, #1
 800ab54:	ec59 8b10 	vmov	r8, r9, d0
 800ab58:	4616      	mov	r6, r2
 800ab5a:	f7ff fc13 	bl	800a384 <_Balloc>
 800ab5e:	4604      	mov	r4, r0
 800ab60:	b930      	cbnz	r0, 800ab70 <__d2b+0x24>
 800ab62:	4602      	mov	r2, r0
 800ab64:	4b23      	ldr	r3, [pc, #140]	@ (800abf4 <__d2b+0xa8>)
 800ab66:	4824      	ldr	r0, [pc, #144]	@ (800abf8 <__d2b+0xac>)
 800ab68:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab6c:	f001 f80a 	bl	800bb84 <__assert_func>
 800ab70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab78:	b10d      	cbz	r5, 800ab7e <__d2b+0x32>
 800ab7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab7e:	9301      	str	r3, [sp, #4]
 800ab80:	f1b8 0300 	subs.w	r3, r8, #0
 800ab84:	d023      	beq.n	800abce <__d2b+0x82>
 800ab86:	4668      	mov	r0, sp
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	f7ff fd0c 	bl	800a5a6 <__lo0bits>
 800ab8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab92:	b1d0      	cbz	r0, 800abca <__d2b+0x7e>
 800ab94:	f1c0 0320 	rsb	r3, r0, #32
 800ab98:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	40c2      	lsrs	r2, r0
 800aba0:	6163      	str	r3, [r4, #20]
 800aba2:	9201      	str	r2, [sp, #4]
 800aba4:	9b01      	ldr	r3, [sp, #4]
 800aba6:	61a3      	str	r3, [r4, #24]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bf0c      	ite	eq
 800abac:	2201      	moveq	r2, #1
 800abae:	2202      	movne	r2, #2
 800abb0:	6122      	str	r2, [r4, #16]
 800abb2:	b1a5      	cbz	r5, 800abde <__d2b+0x92>
 800abb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800abb8:	4405      	add	r5, r0
 800abba:	603d      	str	r5, [r7, #0]
 800abbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800abc0:	6030      	str	r0, [r6, #0]
 800abc2:	4620      	mov	r0, r4
 800abc4:	b003      	add	sp, #12
 800abc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abca:	6161      	str	r1, [r4, #20]
 800abcc:	e7ea      	b.n	800aba4 <__d2b+0x58>
 800abce:	a801      	add	r0, sp, #4
 800abd0:	f7ff fce9 	bl	800a5a6 <__lo0bits>
 800abd4:	9b01      	ldr	r3, [sp, #4]
 800abd6:	6163      	str	r3, [r4, #20]
 800abd8:	3020      	adds	r0, #32
 800abda:	2201      	movs	r2, #1
 800abdc:	e7e8      	b.n	800abb0 <__d2b+0x64>
 800abde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abe2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800abe6:	6038      	str	r0, [r7, #0]
 800abe8:	6918      	ldr	r0, [r3, #16]
 800abea:	f7ff fcbd 	bl	800a568 <__hi0bits>
 800abee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abf2:	e7e5      	b.n	800abc0 <__d2b+0x74>
 800abf4:	08017f61 	.word	0x08017f61
 800abf8:	08017fe9 	.word	0x08017fe9

0800abfc <__ratio>:
 800abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac00:	b085      	sub	sp, #20
 800ac02:	e9cd 1000 	strd	r1, r0, [sp]
 800ac06:	a902      	add	r1, sp, #8
 800ac08:	f7ff ff56 	bl	800aab8 <__b2d>
 800ac0c:	9800      	ldr	r0, [sp, #0]
 800ac0e:	a903      	add	r1, sp, #12
 800ac10:	ec55 4b10 	vmov	r4, r5, d0
 800ac14:	f7ff ff50 	bl	800aab8 <__b2d>
 800ac18:	9b01      	ldr	r3, [sp, #4]
 800ac1a:	6919      	ldr	r1, [r3, #16]
 800ac1c:	9b00      	ldr	r3, [sp, #0]
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	1ac9      	subs	r1, r1, r3
 800ac22:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ac26:	1a9b      	subs	r3, r3, r2
 800ac28:	ec5b ab10 	vmov	sl, fp, d0
 800ac2c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	bfce      	itee	gt
 800ac34:	462a      	movgt	r2, r5
 800ac36:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac3a:	465a      	movle	r2, fp
 800ac3c:	462f      	mov	r7, r5
 800ac3e:	46d9      	mov	r9, fp
 800ac40:	bfcc      	ite	gt
 800ac42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac46:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ac4a:	464b      	mov	r3, r9
 800ac4c:	4652      	mov	r2, sl
 800ac4e:	4620      	mov	r0, r4
 800ac50:	4639      	mov	r1, r7
 800ac52:	f7f5 fe0b 	bl	800086c <__aeabi_ddiv>
 800ac56:	ec41 0b10 	vmov	d0, r0, r1
 800ac5a:	b005      	add	sp, #20
 800ac5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac60 <__copybits>:
 800ac60:	3901      	subs	r1, #1
 800ac62:	b570      	push	{r4, r5, r6, lr}
 800ac64:	1149      	asrs	r1, r1, #5
 800ac66:	6914      	ldr	r4, [r2, #16]
 800ac68:	3101      	adds	r1, #1
 800ac6a:	f102 0314 	add.w	r3, r2, #20
 800ac6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac76:	1f05      	subs	r5, r0, #4
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	d30c      	bcc.n	800ac96 <__copybits+0x36>
 800ac7c:	1aa3      	subs	r3, r4, r2
 800ac7e:	3b11      	subs	r3, #17
 800ac80:	f023 0303 	bic.w	r3, r3, #3
 800ac84:	3211      	adds	r2, #17
 800ac86:	42a2      	cmp	r2, r4
 800ac88:	bf88      	it	hi
 800ac8a:	2300      	movhi	r3, #0
 800ac8c:	4418      	add	r0, r3
 800ac8e:	2300      	movs	r3, #0
 800ac90:	4288      	cmp	r0, r1
 800ac92:	d305      	bcc.n	800aca0 <__copybits+0x40>
 800ac94:	bd70      	pop	{r4, r5, r6, pc}
 800ac96:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac9a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac9e:	e7eb      	b.n	800ac78 <__copybits+0x18>
 800aca0:	f840 3b04 	str.w	r3, [r0], #4
 800aca4:	e7f4      	b.n	800ac90 <__copybits+0x30>

0800aca6 <__any_on>:
 800aca6:	f100 0214 	add.w	r2, r0, #20
 800acaa:	6900      	ldr	r0, [r0, #16]
 800acac:	114b      	asrs	r3, r1, #5
 800acae:	4298      	cmp	r0, r3
 800acb0:	b510      	push	{r4, lr}
 800acb2:	db11      	blt.n	800acd8 <__any_on+0x32>
 800acb4:	dd0a      	ble.n	800accc <__any_on+0x26>
 800acb6:	f011 011f 	ands.w	r1, r1, #31
 800acba:	d007      	beq.n	800accc <__any_on+0x26>
 800acbc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800acc0:	fa24 f001 	lsr.w	r0, r4, r1
 800acc4:	fa00 f101 	lsl.w	r1, r0, r1
 800acc8:	428c      	cmp	r4, r1
 800acca:	d10b      	bne.n	800ace4 <__any_on+0x3e>
 800accc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d803      	bhi.n	800acdc <__any_on+0x36>
 800acd4:	2000      	movs	r0, #0
 800acd6:	bd10      	pop	{r4, pc}
 800acd8:	4603      	mov	r3, r0
 800acda:	e7f7      	b.n	800accc <__any_on+0x26>
 800acdc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ace0:	2900      	cmp	r1, #0
 800ace2:	d0f5      	beq.n	800acd0 <__any_on+0x2a>
 800ace4:	2001      	movs	r0, #1
 800ace6:	e7f6      	b.n	800acd6 <__any_on+0x30>

0800ace8 <_malloc_usable_size_r>:
 800ace8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acec:	1f18      	subs	r0, r3, #4
 800acee:	2b00      	cmp	r3, #0
 800acf0:	bfbc      	itt	lt
 800acf2:	580b      	ldrlt	r3, [r1, r0]
 800acf4:	18c0      	addlt	r0, r0, r3
 800acf6:	4770      	bx	lr

0800acf8 <__ascii_wctomb>:
 800acf8:	4603      	mov	r3, r0
 800acfa:	4608      	mov	r0, r1
 800acfc:	b141      	cbz	r1, 800ad10 <__ascii_wctomb+0x18>
 800acfe:	2aff      	cmp	r2, #255	@ 0xff
 800ad00:	d904      	bls.n	800ad0c <__ascii_wctomb+0x14>
 800ad02:	228a      	movs	r2, #138	@ 0x8a
 800ad04:	601a      	str	r2, [r3, #0]
 800ad06:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0a:	4770      	bx	lr
 800ad0c:	700a      	strb	r2, [r1, #0]
 800ad0e:	2001      	movs	r0, #1
 800ad10:	4770      	bx	lr

0800ad12 <__ssputs_r>:
 800ad12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad16:	688e      	ldr	r6, [r1, #8]
 800ad18:	461f      	mov	r7, r3
 800ad1a:	42be      	cmp	r6, r7
 800ad1c:	680b      	ldr	r3, [r1, #0]
 800ad1e:	4682      	mov	sl, r0
 800ad20:	460c      	mov	r4, r1
 800ad22:	4690      	mov	r8, r2
 800ad24:	d82d      	bhi.n	800ad82 <__ssputs_r+0x70>
 800ad26:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad2a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad2e:	d026      	beq.n	800ad7e <__ssputs_r+0x6c>
 800ad30:	6965      	ldr	r5, [r4, #20]
 800ad32:	6909      	ldr	r1, [r1, #16]
 800ad34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad38:	eba3 0901 	sub.w	r9, r3, r1
 800ad3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad40:	1c7b      	adds	r3, r7, #1
 800ad42:	444b      	add	r3, r9
 800ad44:	106d      	asrs	r5, r5, #1
 800ad46:	429d      	cmp	r5, r3
 800ad48:	bf38      	it	cc
 800ad4a:	461d      	movcc	r5, r3
 800ad4c:	0553      	lsls	r3, r2, #21
 800ad4e:	d527      	bpl.n	800ada0 <__ssputs_r+0x8e>
 800ad50:	4629      	mov	r1, r5
 800ad52:	f7fd fe73 	bl	8008a3c <_malloc_r>
 800ad56:	4606      	mov	r6, r0
 800ad58:	b360      	cbz	r0, 800adb4 <__ssputs_r+0xa2>
 800ad5a:	6921      	ldr	r1, [r4, #16]
 800ad5c:	464a      	mov	r2, r9
 800ad5e:	f7fe ff62 	bl	8009c26 <memcpy>
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	6126      	str	r6, [r4, #16]
 800ad70:	6165      	str	r5, [r4, #20]
 800ad72:	444e      	add	r6, r9
 800ad74:	eba5 0509 	sub.w	r5, r5, r9
 800ad78:	6026      	str	r6, [r4, #0]
 800ad7a:	60a5      	str	r5, [r4, #8]
 800ad7c:	463e      	mov	r6, r7
 800ad7e:	42be      	cmp	r6, r7
 800ad80:	d900      	bls.n	800ad84 <__ssputs_r+0x72>
 800ad82:	463e      	mov	r6, r7
 800ad84:	6820      	ldr	r0, [r4, #0]
 800ad86:	4632      	mov	r2, r6
 800ad88:	4641      	mov	r1, r8
 800ad8a:	f000 fee0 	bl	800bb4e <memmove>
 800ad8e:	68a3      	ldr	r3, [r4, #8]
 800ad90:	1b9b      	subs	r3, r3, r6
 800ad92:	60a3      	str	r3, [r4, #8]
 800ad94:	6823      	ldr	r3, [r4, #0]
 800ad96:	4433      	add	r3, r6
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada0:	462a      	mov	r2, r5
 800ada2:	f7fd fedf 	bl	8008b64 <_realloc_r>
 800ada6:	4606      	mov	r6, r0
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d1e0      	bne.n	800ad6e <__ssputs_r+0x5c>
 800adac:	6921      	ldr	r1, [r4, #16]
 800adae:	4650      	mov	r0, sl
 800adb0:	f7fe ff52 	bl	8009c58 <_free_r>
 800adb4:	230c      	movs	r3, #12
 800adb6:	f8ca 3000 	str.w	r3, [sl]
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adc0:	81a3      	strh	r3, [r4, #12]
 800adc2:	f04f 30ff 	mov.w	r0, #4294967295
 800adc6:	e7e9      	b.n	800ad9c <__ssputs_r+0x8a>

0800adc8 <_svfiprintf_r>:
 800adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	4698      	mov	r8, r3
 800adce:	898b      	ldrh	r3, [r1, #12]
 800add0:	061b      	lsls	r3, r3, #24
 800add2:	b09d      	sub	sp, #116	@ 0x74
 800add4:	4607      	mov	r7, r0
 800add6:	460d      	mov	r5, r1
 800add8:	4614      	mov	r4, r2
 800adda:	d510      	bpl.n	800adfe <_svfiprintf_r+0x36>
 800addc:	690b      	ldr	r3, [r1, #16]
 800adde:	b973      	cbnz	r3, 800adfe <_svfiprintf_r+0x36>
 800ade0:	2140      	movs	r1, #64	@ 0x40
 800ade2:	f7fd fe2b 	bl	8008a3c <_malloc_r>
 800ade6:	6028      	str	r0, [r5, #0]
 800ade8:	6128      	str	r0, [r5, #16]
 800adea:	b930      	cbnz	r0, 800adfa <_svfiprintf_r+0x32>
 800adec:	230c      	movs	r3, #12
 800adee:	603b      	str	r3, [r7, #0]
 800adf0:	f04f 30ff 	mov.w	r0, #4294967295
 800adf4:	b01d      	add	sp, #116	@ 0x74
 800adf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfa:	2340      	movs	r3, #64	@ 0x40
 800adfc:	616b      	str	r3, [r5, #20]
 800adfe:	2300      	movs	r3, #0
 800ae00:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae02:	2320      	movs	r3, #32
 800ae04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae08:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae0c:	2330      	movs	r3, #48	@ 0x30
 800ae0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800afac <_svfiprintf_r+0x1e4>
 800ae12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae16:	f04f 0901 	mov.w	r9, #1
 800ae1a:	4623      	mov	r3, r4
 800ae1c:	469a      	mov	sl, r3
 800ae1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae22:	b10a      	cbz	r2, 800ae28 <_svfiprintf_r+0x60>
 800ae24:	2a25      	cmp	r2, #37	@ 0x25
 800ae26:	d1f9      	bne.n	800ae1c <_svfiprintf_r+0x54>
 800ae28:	ebba 0b04 	subs.w	fp, sl, r4
 800ae2c:	d00b      	beq.n	800ae46 <_svfiprintf_r+0x7e>
 800ae2e:	465b      	mov	r3, fp
 800ae30:	4622      	mov	r2, r4
 800ae32:	4629      	mov	r1, r5
 800ae34:	4638      	mov	r0, r7
 800ae36:	f7ff ff6c 	bl	800ad12 <__ssputs_r>
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	f000 80a7 	beq.w	800af8e <_svfiprintf_r+0x1c6>
 800ae40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae42:	445a      	add	r2, fp
 800ae44:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae46:	f89a 3000 	ldrb.w	r3, [sl]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f000 809f 	beq.w	800af8e <_svfiprintf_r+0x1c6>
 800ae50:	2300      	movs	r3, #0
 800ae52:	f04f 32ff 	mov.w	r2, #4294967295
 800ae56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae5a:	f10a 0a01 	add.w	sl, sl, #1
 800ae5e:	9304      	str	r3, [sp, #16]
 800ae60:	9307      	str	r3, [sp, #28]
 800ae62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae66:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae68:	4654      	mov	r4, sl
 800ae6a:	2205      	movs	r2, #5
 800ae6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae70:	484e      	ldr	r0, [pc, #312]	@ (800afac <_svfiprintf_r+0x1e4>)
 800ae72:	f7f5 f9c5 	bl	8000200 <memchr>
 800ae76:	9a04      	ldr	r2, [sp, #16]
 800ae78:	b9d8      	cbnz	r0, 800aeb2 <_svfiprintf_r+0xea>
 800ae7a:	06d0      	lsls	r0, r2, #27
 800ae7c:	bf44      	itt	mi
 800ae7e:	2320      	movmi	r3, #32
 800ae80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae84:	0711      	lsls	r1, r2, #28
 800ae86:	bf44      	itt	mi
 800ae88:	232b      	movmi	r3, #43	@ 0x2b
 800ae8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae8e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae92:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae94:	d015      	beq.n	800aec2 <_svfiprintf_r+0xfa>
 800ae96:	9a07      	ldr	r2, [sp, #28]
 800ae98:	4654      	mov	r4, sl
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	f04f 0c0a 	mov.w	ip, #10
 800aea0:	4621      	mov	r1, r4
 800aea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aea6:	3b30      	subs	r3, #48	@ 0x30
 800aea8:	2b09      	cmp	r3, #9
 800aeaa:	d94b      	bls.n	800af44 <_svfiprintf_r+0x17c>
 800aeac:	b1b0      	cbz	r0, 800aedc <_svfiprintf_r+0x114>
 800aeae:	9207      	str	r2, [sp, #28]
 800aeb0:	e014      	b.n	800aedc <_svfiprintf_r+0x114>
 800aeb2:	eba0 0308 	sub.w	r3, r0, r8
 800aeb6:	fa09 f303 	lsl.w	r3, r9, r3
 800aeba:	4313      	orrs	r3, r2
 800aebc:	9304      	str	r3, [sp, #16]
 800aebe:	46a2      	mov	sl, r4
 800aec0:	e7d2      	b.n	800ae68 <_svfiprintf_r+0xa0>
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	1d19      	adds	r1, r3, #4
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	9103      	str	r1, [sp, #12]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	bfbb      	ittet	lt
 800aece:	425b      	neglt	r3, r3
 800aed0:	f042 0202 	orrlt.w	r2, r2, #2
 800aed4:	9307      	strge	r3, [sp, #28]
 800aed6:	9307      	strlt	r3, [sp, #28]
 800aed8:	bfb8      	it	lt
 800aeda:	9204      	strlt	r2, [sp, #16]
 800aedc:	7823      	ldrb	r3, [r4, #0]
 800aede:	2b2e      	cmp	r3, #46	@ 0x2e
 800aee0:	d10a      	bne.n	800aef8 <_svfiprintf_r+0x130>
 800aee2:	7863      	ldrb	r3, [r4, #1]
 800aee4:	2b2a      	cmp	r3, #42	@ 0x2a
 800aee6:	d132      	bne.n	800af4e <_svfiprintf_r+0x186>
 800aee8:	9b03      	ldr	r3, [sp, #12]
 800aeea:	1d1a      	adds	r2, r3, #4
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	9203      	str	r2, [sp, #12]
 800aef0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aef4:	3402      	adds	r4, #2
 800aef6:	9305      	str	r3, [sp, #20]
 800aef8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800afbc <_svfiprintf_r+0x1f4>
 800aefc:	7821      	ldrb	r1, [r4, #0]
 800aefe:	2203      	movs	r2, #3
 800af00:	4650      	mov	r0, sl
 800af02:	f7f5 f97d 	bl	8000200 <memchr>
 800af06:	b138      	cbz	r0, 800af18 <_svfiprintf_r+0x150>
 800af08:	9b04      	ldr	r3, [sp, #16]
 800af0a:	eba0 000a 	sub.w	r0, r0, sl
 800af0e:	2240      	movs	r2, #64	@ 0x40
 800af10:	4082      	lsls	r2, r0
 800af12:	4313      	orrs	r3, r2
 800af14:	3401      	adds	r4, #1
 800af16:	9304      	str	r3, [sp, #16]
 800af18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1c:	4824      	ldr	r0, [pc, #144]	@ (800afb0 <_svfiprintf_r+0x1e8>)
 800af1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af22:	2206      	movs	r2, #6
 800af24:	f7f5 f96c 	bl	8000200 <memchr>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d036      	beq.n	800af9a <_svfiprintf_r+0x1d2>
 800af2c:	4b21      	ldr	r3, [pc, #132]	@ (800afb4 <_svfiprintf_r+0x1ec>)
 800af2e:	bb1b      	cbnz	r3, 800af78 <_svfiprintf_r+0x1b0>
 800af30:	9b03      	ldr	r3, [sp, #12]
 800af32:	3307      	adds	r3, #7
 800af34:	f023 0307 	bic.w	r3, r3, #7
 800af38:	3308      	adds	r3, #8
 800af3a:	9303      	str	r3, [sp, #12]
 800af3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af3e:	4433      	add	r3, r6
 800af40:	9309      	str	r3, [sp, #36]	@ 0x24
 800af42:	e76a      	b.n	800ae1a <_svfiprintf_r+0x52>
 800af44:	fb0c 3202 	mla	r2, ip, r2, r3
 800af48:	460c      	mov	r4, r1
 800af4a:	2001      	movs	r0, #1
 800af4c:	e7a8      	b.n	800aea0 <_svfiprintf_r+0xd8>
 800af4e:	2300      	movs	r3, #0
 800af50:	3401      	adds	r4, #1
 800af52:	9305      	str	r3, [sp, #20]
 800af54:	4619      	mov	r1, r3
 800af56:	f04f 0c0a 	mov.w	ip, #10
 800af5a:	4620      	mov	r0, r4
 800af5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af60:	3a30      	subs	r2, #48	@ 0x30
 800af62:	2a09      	cmp	r2, #9
 800af64:	d903      	bls.n	800af6e <_svfiprintf_r+0x1a6>
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0c6      	beq.n	800aef8 <_svfiprintf_r+0x130>
 800af6a:	9105      	str	r1, [sp, #20]
 800af6c:	e7c4      	b.n	800aef8 <_svfiprintf_r+0x130>
 800af6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800af72:	4604      	mov	r4, r0
 800af74:	2301      	movs	r3, #1
 800af76:	e7f0      	b.n	800af5a <_svfiprintf_r+0x192>
 800af78:	ab03      	add	r3, sp, #12
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	462a      	mov	r2, r5
 800af7e:	4b0e      	ldr	r3, [pc, #56]	@ (800afb8 <_svfiprintf_r+0x1f0>)
 800af80:	a904      	add	r1, sp, #16
 800af82:	4638      	mov	r0, r7
 800af84:	f3af 8000 	nop.w
 800af88:	1c42      	adds	r2, r0, #1
 800af8a:	4606      	mov	r6, r0
 800af8c:	d1d6      	bne.n	800af3c <_svfiprintf_r+0x174>
 800af8e:	89ab      	ldrh	r3, [r5, #12]
 800af90:	065b      	lsls	r3, r3, #25
 800af92:	f53f af2d 	bmi.w	800adf0 <_svfiprintf_r+0x28>
 800af96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af98:	e72c      	b.n	800adf4 <_svfiprintf_r+0x2c>
 800af9a:	ab03      	add	r3, sp, #12
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	462a      	mov	r2, r5
 800afa0:	4b05      	ldr	r3, [pc, #20]	@ (800afb8 <_svfiprintf_r+0x1f0>)
 800afa2:	a904      	add	r1, sp, #16
 800afa4:	4638      	mov	r0, r7
 800afa6:	f000 fa45 	bl	800b434 <_printf_i>
 800afaa:	e7ed      	b.n	800af88 <_svfiprintf_r+0x1c0>
 800afac:	08018140 	.word	0x08018140
 800afb0:	0801814a 	.word	0x0801814a
 800afb4:	00000000 	.word	0x00000000
 800afb8:	0800ad13 	.word	0x0800ad13
 800afbc:	08018146 	.word	0x08018146

0800afc0 <_sungetc_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	1c4b      	adds	r3, r1, #1
 800afc4:	4614      	mov	r4, r2
 800afc6:	d103      	bne.n	800afd0 <_sungetc_r+0x10>
 800afc8:	f04f 35ff 	mov.w	r5, #4294967295
 800afcc:	4628      	mov	r0, r5
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	8993      	ldrh	r3, [r2, #12]
 800afd2:	f023 0320 	bic.w	r3, r3, #32
 800afd6:	8193      	strh	r3, [r2, #12]
 800afd8:	6853      	ldr	r3, [r2, #4]
 800afda:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800afdc:	b2cd      	uxtb	r5, r1
 800afde:	b18a      	cbz	r2, 800b004 <_sungetc_r+0x44>
 800afe0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800afe2:	429a      	cmp	r2, r3
 800afe4:	dd08      	ble.n	800aff8 <_sungetc_r+0x38>
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	1e5a      	subs	r2, r3, #1
 800afea:	6022      	str	r2, [r4, #0]
 800afec:	f803 5c01 	strb.w	r5, [r3, #-1]
 800aff0:	6863      	ldr	r3, [r4, #4]
 800aff2:	3301      	adds	r3, #1
 800aff4:	6063      	str	r3, [r4, #4]
 800aff6:	e7e9      	b.n	800afcc <_sungetc_r+0xc>
 800aff8:	4621      	mov	r1, r4
 800affa:	f000 fd6e 	bl	800bada <__submore>
 800affe:	2800      	cmp	r0, #0
 800b000:	d0f1      	beq.n	800afe6 <_sungetc_r+0x26>
 800b002:	e7e1      	b.n	800afc8 <_sungetc_r+0x8>
 800b004:	6921      	ldr	r1, [r4, #16]
 800b006:	6822      	ldr	r2, [r4, #0]
 800b008:	b141      	cbz	r1, 800b01c <_sungetc_r+0x5c>
 800b00a:	4291      	cmp	r1, r2
 800b00c:	d206      	bcs.n	800b01c <_sungetc_r+0x5c>
 800b00e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b012:	42a9      	cmp	r1, r5
 800b014:	d102      	bne.n	800b01c <_sungetc_r+0x5c>
 800b016:	3a01      	subs	r2, #1
 800b018:	6022      	str	r2, [r4, #0]
 800b01a:	e7ea      	b.n	800aff2 <_sungetc_r+0x32>
 800b01c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800b020:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b024:	6363      	str	r3, [r4, #52]	@ 0x34
 800b026:	2303      	movs	r3, #3
 800b028:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b02a:	4623      	mov	r3, r4
 800b02c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	2301      	movs	r3, #1
 800b034:	e7de      	b.n	800aff4 <_sungetc_r+0x34>

0800b036 <__ssrefill_r>:
 800b036:	b510      	push	{r4, lr}
 800b038:	460c      	mov	r4, r1
 800b03a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b03c:	b169      	cbz	r1, 800b05a <__ssrefill_r+0x24>
 800b03e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b042:	4299      	cmp	r1, r3
 800b044:	d001      	beq.n	800b04a <__ssrefill_r+0x14>
 800b046:	f7fe fe07 	bl	8009c58 <_free_r>
 800b04a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b04c:	6063      	str	r3, [r4, #4]
 800b04e:	2000      	movs	r0, #0
 800b050:	6360      	str	r0, [r4, #52]	@ 0x34
 800b052:	b113      	cbz	r3, 800b05a <__ssrefill_r+0x24>
 800b054:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b056:	6023      	str	r3, [r4, #0]
 800b058:	bd10      	pop	{r4, pc}
 800b05a:	6923      	ldr	r3, [r4, #16]
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	2300      	movs	r3, #0
 800b060:	6063      	str	r3, [r4, #4]
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	f043 0320 	orr.w	r3, r3, #32
 800b068:	81a3      	strh	r3, [r4, #12]
 800b06a:	f04f 30ff 	mov.w	r0, #4294967295
 800b06e:	e7f3      	b.n	800b058 <__ssrefill_r+0x22>

0800b070 <__ssvfiscanf_r>:
 800b070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b074:	460c      	mov	r4, r1
 800b076:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b07a:	2100      	movs	r1, #0
 800b07c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b080:	49a5      	ldr	r1, [pc, #660]	@ (800b318 <__ssvfiscanf_r+0x2a8>)
 800b082:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b084:	f10d 0804 	add.w	r8, sp, #4
 800b088:	49a4      	ldr	r1, [pc, #656]	@ (800b31c <__ssvfiscanf_r+0x2ac>)
 800b08a:	4fa5      	ldr	r7, [pc, #660]	@ (800b320 <__ssvfiscanf_r+0x2b0>)
 800b08c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b090:	4606      	mov	r6, r0
 800b092:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	7813      	ldrb	r3, [r2, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 8158 	beq.w	800b34e <__ssvfiscanf_r+0x2de>
 800b09e:	5cf9      	ldrb	r1, [r7, r3]
 800b0a0:	f011 0108 	ands.w	r1, r1, #8
 800b0a4:	f102 0501 	add.w	r5, r2, #1
 800b0a8:	d019      	beq.n	800b0de <__ssvfiscanf_r+0x6e>
 800b0aa:	6863      	ldr	r3, [r4, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	dd0f      	ble.n	800b0d0 <__ssvfiscanf_r+0x60>
 800b0b0:	6823      	ldr	r3, [r4, #0]
 800b0b2:	781a      	ldrb	r2, [r3, #0]
 800b0b4:	5cba      	ldrb	r2, [r7, r2]
 800b0b6:	0712      	lsls	r2, r2, #28
 800b0b8:	d401      	bmi.n	800b0be <__ssvfiscanf_r+0x4e>
 800b0ba:	462a      	mov	r2, r5
 800b0bc:	e7eb      	b.n	800b096 <__ssvfiscanf_r+0x26>
 800b0be:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b0c0:	3201      	adds	r2, #1
 800b0c2:	9245      	str	r2, [sp, #276]	@ 0x114
 800b0c4:	6862      	ldr	r2, [r4, #4]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	3a01      	subs	r2, #1
 800b0ca:	6062      	str	r2, [r4, #4]
 800b0cc:	6023      	str	r3, [r4, #0]
 800b0ce:	e7ec      	b.n	800b0aa <__ssvfiscanf_r+0x3a>
 800b0d0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	4798      	blx	r3
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d0e9      	beq.n	800b0b0 <__ssvfiscanf_r+0x40>
 800b0dc:	e7ed      	b.n	800b0ba <__ssvfiscanf_r+0x4a>
 800b0de:	2b25      	cmp	r3, #37	@ 0x25
 800b0e0:	d012      	beq.n	800b108 <__ssvfiscanf_r+0x98>
 800b0e2:	4699      	mov	r9, r3
 800b0e4:	6863      	ldr	r3, [r4, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f340 8093 	ble.w	800b212 <__ssvfiscanf_r+0x1a2>
 800b0ec:	6822      	ldr	r2, [r4, #0]
 800b0ee:	7813      	ldrb	r3, [r2, #0]
 800b0f0:	454b      	cmp	r3, r9
 800b0f2:	f040 812c 	bne.w	800b34e <__ssvfiscanf_r+0x2de>
 800b0f6:	6863      	ldr	r3, [r4, #4]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	6063      	str	r3, [r4, #4]
 800b0fc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b0fe:	3201      	adds	r2, #1
 800b100:	3301      	adds	r3, #1
 800b102:	6022      	str	r2, [r4, #0]
 800b104:	9345      	str	r3, [sp, #276]	@ 0x114
 800b106:	e7d8      	b.n	800b0ba <__ssvfiscanf_r+0x4a>
 800b108:	9141      	str	r1, [sp, #260]	@ 0x104
 800b10a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b10c:	7853      	ldrb	r3, [r2, #1]
 800b10e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b110:	bf02      	ittt	eq
 800b112:	2310      	moveq	r3, #16
 800b114:	1c95      	addeq	r5, r2, #2
 800b116:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b118:	220a      	movs	r2, #10
 800b11a:	46a9      	mov	r9, r5
 800b11c:	f819 1b01 	ldrb.w	r1, [r9], #1
 800b120:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b124:	2b09      	cmp	r3, #9
 800b126:	d91e      	bls.n	800b166 <__ssvfiscanf_r+0xf6>
 800b128:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800b324 <__ssvfiscanf_r+0x2b4>
 800b12c:	2203      	movs	r2, #3
 800b12e:	4650      	mov	r0, sl
 800b130:	f7f5 f866 	bl	8000200 <memchr>
 800b134:	b138      	cbz	r0, 800b146 <__ssvfiscanf_r+0xd6>
 800b136:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b138:	eba0 000a 	sub.w	r0, r0, sl
 800b13c:	2301      	movs	r3, #1
 800b13e:	4083      	lsls	r3, r0
 800b140:	4313      	orrs	r3, r2
 800b142:	9341      	str	r3, [sp, #260]	@ 0x104
 800b144:	464d      	mov	r5, r9
 800b146:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b14a:	2b78      	cmp	r3, #120	@ 0x78
 800b14c:	d806      	bhi.n	800b15c <__ssvfiscanf_r+0xec>
 800b14e:	2b57      	cmp	r3, #87	@ 0x57
 800b150:	d810      	bhi.n	800b174 <__ssvfiscanf_r+0x104>
 800b152:	2b25      	cmp	r3, #37	@ 0x25
 800b154:	d0c5      	beq.n	800b0e2 <__ssvfiscanf_r+0x72>
 800b156:	d857      	bhi.n	800b208 <__ssvfiscanf_r+0x198>
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d065      	beq.n	800b228 <__ssvfiscanf_r+0x1b8>
 800b15c:	2303      	movs	r3, #3
 800b15e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b160:	230a      	movs	r3, #10
 800b162:	9342      	str	r3, [sp, #264]	@ 0x108
 800b164:	e078      	b.n	800b258 <__ssvfiscanf_r+0x1e8>
 800b166:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b168:	fb02 1103 	mla	r1, r2, r3, r1
 800b16c:	3930      	subs	r1, #48	@ 0x30
 800b16e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b170:	464d      	mov	r5, r9
 800b172:	e7d2      	b.n	800b11a <__ssvfiscanf_r+0xaa>
 800b174:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b178:	2a20      	cmp	r2, #32
 800b17a:	d8ef      	bhi.n	800b15c <__ssvfiscanf_r+0xec>
 800b17c:	a101      	add	r1, pc, #4	@ (adr r1, 800b184 <__ssvfiscanf_r+0x114>)
 800b17e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b182:	bf00      	nop
 800b184:	0800b237 	.word	0x0800b237
 800b188:	0800b15d 	.word	0x0800b15d
 800b18c:	0800b15d 	.word	0x0800b15d
 800b190:	0800b291 	.word	0x0800b291
 800b194:	0800b15d 	.word	0x0800b15d
 800b198:	0800b15d 	.word	0x0800b15d
 800b19c:	0800b15d 	.word	0x0800b15d
 800b1a0:	0800b15d 	.word	0x0800b15d
 800b1a4:	0800b15d 	.word	0x0800b15d
 800b1a8:	0800b15d 	.word	0x0800b15d
 800b1ac:	0800b15d 	.word	0x0800b15d
 800b1b0:	0800b2a7 	.word	0x0800b2a7
 800b1b4:	0800b28d 	.word	0x0800b28d
 800b1b8:	0800b20f 	.word	0x0800b20f
 800b1bc:	0800b20f 	.word	0x0800b20f
 800b1c0:	0800b20f 	.word	0x0800b20f
 800b1c4:	0800b15d 	.word	0x0800b15d
 800b1c8:	0800b249 	.word	0x0800b249
 800b1cc:	0800b15d 	.word	0x0800b15d
 800b1d0:	0800b15d 	.word	0x0800b15d
 800b1d4:	0800b15d 	.word	0x0800b15d
 800b1d8:	0800b15d 	.word	0x0800b15d
 800b1dc:	0800b2b7 	.word	0x0800b2b7
 800b1e0:	0800b251 	.word	0x0800b251
 800b1e4:	0800b22f 	.word	0x0800b22f
 800b1e8:	0800b15d 	.word	0x0800b15d
 800b1ec:	0800b15d 	.word	0x0800b15d
 800b1f0:	0800b2b3 	.word	0x0800b2b3
 800b1f4:	0800b15d 	.word	0x0800b15d
 800b1f8:	0800b28d 	.word	0x0800b28d
 800b1fc:	0800b15d 	.word	0x0800b15d
 800b200:	0800b15d 	.word	0x0800b15d
 800b204:	0800b237 	.word	0x0800b237
 800b208:	3b45      	subs	r3, #69	@ 0x45
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d8a6      	bhi.n	800b15c <__ssvfiscanf_r+0xec>
 800b20e:	2305      	movs	r3, #5
 800b210:	e021      	b.n	800b256 <__ssvfiscanf_r+0x1e6>
 800b212:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b214:	4621      	mov	r1, r4
 800b216:	4630      	mov	r0, r6
 800b218:	4798      	blx	r3
 800b21a:	2800      	cmp	r0, #0
 800b21c:	f43f af66 	beq.w	800b0ec <__ssvfiscanf_r+0x7c>
 800b220:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b222:	2800      	cmp	r0, #0
 800b224:	f040 808b 	bne.w	800b33e <__ssvfiscanf_r+0x2ce>
 800b228:	f04f 30ff 	mov.w	r0, #4294967295
 800b22c:	e08b      	b.n	800b346 <__ssvfiscanf_r+0x2d6>
 800b22e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b230:	f042 0220 	orr.w	r2, r2, #32
 800b234:	9241      	str	r2, [sp, #260]	@ 0x104
 800b236:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b23c:	9241      	str	r2, [sp, #260]	@ 0x104
 800b23e:	2210      	movs	r2, #16
 800b240:	2b6e      	cmp	r3, #110	@ 0x6e
 800b242:	9242      	str	r2, [sp, #264]	@ 0x108
 800b244:	d902      	bls.n	800b24c <__ssvfiscanf_r+0x1dc>
 800b246:	e005      	b.n	800b254 <__ssvfiscanf_r+0x1e4>
 800b248:	2300      	movs	r3, #0
 800b24a:	9342      	str	r3, [sp, #264]	@ 0x108
 800b24c:	2303      	movs	r3, #3
 800b24e:	e002      	b.n	800b256 <__ssvfiscanf_r+0x1e6>
 800b250:	2308      	movs	r3, #8
 800b252:	9342      	str	r3, [sp, #264]	@ 0x108
 800b254:	2304      	movs	r3, #4
 800b256:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b258:	6863      	ldr	r3, [r4, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	dd39      	ble.n	800b2d2 <__ssvfiscanf_r+0x262>
 800b25e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b260:	0659      	lsls	r1, r3, #25
 800b262:	d404      	bmi.n	800b26e <__ssvfiscanf_r+0x1fe>
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	781a      	ldrb	r2, [r3, #0]
 800b268:	5cba      	ldrb	r2, [r7, r2]
 800b26a:	0712      	lsls	r2, r2, #28
 800b26c:	d438      	bmi.n	800b2e0 <__ssvfiscanf_r+0x270>
 800b26e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800b270:	2b02      	cmp	r3, #2
 800b272:	dc47      	bgt.n	800b304 <__ssvfiscanf_r+0x294>
 800b274:	466b      	mov	r3, sp
 800b276:	4622      	mov	r2, r4
 800b278:	a941      	add	r1, sp, #260	@ 0x104
 800b27a:	4630      	mov	r0, r6
 800b27c:	f000 f9fa 	bl	800b674 <_scanf_chars>
 800b280:	2801      	cmp	r0, #1
 800b282:	d064      	beq.n	800b34e <__ssvfiscanf_r+0x2de>
 800b284:	2802      	cmp	r0, #2
 800b286:	f47f af18 	bne.w	800b0ba <__ssvfiscanf_r+0x4a>
 800b28a:	e7c9      	b.n	800b220 <__ssvfiscanf_r+0x1b0>
 800b28c:	220a      	movs	r2, #10
 800b28e:	e7d7      	b.n	800b240 <__ssvfiscanf_r+0x1d0>
 800b290:	4629      	mov	r1, r5
 800b292:	4640      	mov	r0, r8
 800b294:	f000 fbe8 	bl	800ba68 <__sccl>
 800b298:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b29e:	9341      	str	r3, [sp, #260]	@ 0x104
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e7d7      	b.n	800b256 <__ssvfiscanf_r+0x1e6>
 800b2a6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b2a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2ac:	9341      	str	r3, [sp, #260]	@ 0x104
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	e7d1      	b.n	800b256 <__ssvfiscanf_r+0x1e6>
 800b2b2:	2302      	movs	r3, #2
 800b2b4:	e7cf      	b.n	800b256 <__ssvfiscanf_r+0x1e6>
 800b2b6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b2b8:	06c3      	lsls	r3, r0, #27
 800b2ba:	f53f aefe 	bmi.w	800b0ba <__ssvfiscanf_r+0x4a>
 800b2be:	9b00      	ldr	r3, [sp, #0]
 800b2c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b2c2:	1d19      	adds	r1, r3, #4
 800b2c4:	9100      	str	r1, [sp, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	07c0      	lsls	r0, r0, #31
 800b2ca:	bf4c      	ite	mi
 800b2cc:	801a      	strhmi	r2, [r3, #0]
 800b2ce:	601a      	strpl	r2, [r3, #0]
 800b2d0:	e6f3      	b.n	800b0ba <__ssvfiscanf_r+0x4a>
 800b2d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	4798      	blx	r3
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d0bf      	beq.n	800b25e <__ssvfiscanf_r+0x1ee>
 800b2de:	e79f      	b.n	800b220 <__ssvfiscanf_r+0x1b0>
 800b2e0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b2e2:	3201      	adds	r2, #1
 800b2e4:	9245      	str	r2, [sp, #276]	@ 0x114
 800b2e6:	6862      	ldr	r2, [r4, #4]
 800b2e8:	3a01      	subs	r2, #1
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	6062      	str	r2, [r4, #4]
 800b2ee:	dd02      	ble.n	800b2f6 <__ssvfiscanf_r+0x286>
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	6023      	str	r3, [r4, #0]
 800b2f4:	e7b6      	b.n	800b264 <__ssvfiscanf_r+0x1f4>
 800b2f6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	4798      	blx	r3
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d0b0      	beq.n	800b264 <__ssvfiscanf_r+0x1f4>
 800b302:	e78d      	b.n	800b220 <__ssvfiscanf_r+0x1b0>
 800b304:	2b04      	cmp	r3, #4
 800b306:	dc0f      	bgt.n	800b328 <__ssvfiscanf_r+0x2b8>
 800b308:	466b      	mov	r3, sp
 800b30a:	4622      	mov	r2, r4
 800b30c:	a941      	add	r1, sp, #260	@ 0x104
 800b30e:	4630      	mov	r0, r6
 800b310:	f000 fa0a 	bl	800b728 <_scanf_i>
 800b314:	e7b4      	b.n	800b280 <__ssvfiscanf_r+0x210>
 800b316:	bf00      	nop
 800b318:	0800afc1 	.word	0x0800afc1
 800b31c:	0800b037 	.word	0x0800b037
 800b320:	08017e59 	.word	0x08017e59
 800b324:	08018146 	.word	0x08018146
 800b328:	4b0a      	ldr	r3, [pc, #40]	@ (800b354 <__ssvfiscanf_r+0x2e4>)
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f43f aec5 	beq.w	800b0ba <__ssvfiscanf_r+0x4a>
 800b330:	466b      	mov	r3, sp
 800b332:	4622      	mov	r2, r4
 800b334:	a941      	add	r1, sp, #260	@ 0x104
 800b336:	4630      	mov	r0, r6
 800b338:	f3af 8000 	nop.w
 800b33c:	e7a0      	b.n	800b280 <__ssvfiscanf_r+0x210>
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	065b      	lsls	r3, r3, #25
 800b342:	f53f af71 	bmi.w	800b228 <__ssvfiscanf_r+0x1b8>
 800b346:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b350:	e7f9      	b.n	800b346 <__ssvfiscanf_r+0x2d6>
 800b352:	bf00      	nop
 800b354:	00000000 	.word	0x00000000

0800b358 <_printf_common>:
 800b358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b35c:	4616      	mov	r6, r2
 800b35e:	4698      	mov	r8, r3
 800b360:	688a      	ldr	r2, [r1, #8]
 800b362:	690b      	ldr	r3, [r1, #16]
 800b364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b368:	4293      	cmp	r3, r2
 800b36a:	bfb8      	it	lt
 800b36c:	4613      	movlt	r3, r2
 800b36e:	6033      	str	r3, [r6, #0]
 800b370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b374:	4607      	mov	r7, r0
 800b376:	460c      	mov	r4, r1
 800b378:	b10a      	cbz	r2, 800b37e <_printf_common+0x26>
 800b37a:	3301      	adds	r3, #1
 800b37c:	6033      	str	r3, [r6, #0]
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	0699      	lsls	r1, r3, #26
 800b382:	bf42      	ittt	mi
 800b384:	6833      	ldrmi	r3, [r6, #0]
 800b386:	3302      	addmi	r3, #2
 800b388:	6033      	strmi	r3, [r6, #0]
 800b38a:	6825      	ldr	r5, [r4, #0]
 800b38c:	f015 0506 	ands.w	r5, r5, #6
 800b390:	d106      	bne.n	800b3a0 <_printf_common+0x48>
 800b392:	f104 0a19 	add.w	sl, r4, #25
 800b396:	68e3      	ldr	r3, [r4, #12]
 800b398:	6832      	ldr	r2, [r6, #0]
 800b39a:	1a9b      	subs	r3, r3, r2
 800b39c:	42ab      	cmp	r3, r5
 800b39e:	dc26      	bgt.n	800b3ee <_printf_common+0x96>
 800b3a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3a4:	6822      	ldr	r2, [r4, #0]
 800b3a6:	3b00      	subs	r3, #0
 800b3a8:	bf18      	it	ne
 800b3aa:	2301      	movne	r3, #1
 800b3ac:	0692      	lsls	r2, r2, #26
 800b3ae:	d42b      	bmi.n	800b408 <_printf_common+0xb0>
 800b3b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3b4:	4641      	mov	r1, r8
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	47c8      	blx	r9
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	d01e      	beq.n	800b3fc <_printf_common+0xa4>
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	6922      	ldr	r2, [r4, #16]
 800b3c2:	f003 0306 	and.w	r3, r3, #6
 800b3c6:	2b04      	cmp	r3, #4
 800b3c8:	bf02      	ittt	eq
 800b3ca:	68e5      	ldreq	r5, [r4, #12]
 800b3cc:	6833      	ldreq	r3, [r6, #0]
 800b3ce:	1aed      	subeq	r5, r5, r3
 800b3d0:	68a3      	ldr	r3, [r4, #8]
 800b3d2:	bf0c      	ite	eq
 800b3d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3d8:	2500      	movne	r5, #0
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	bfc4      	itt	gt
 800b3de:	1a9b      	subgt	r3, r3, r2
 800b3e0:	18ed      	addgt	r5, r5, r3
 800b3e2:	2600      	movs	r6, #0
 800b3e4:	341a      	adds	r4, #26
 800b3e6:	42b5      	cmp	r5, r6
 800b3e8:	d11a      	bne.n	800b420 <_printf_common+0xc8>
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	e008      	b.n	800b400 <_printf_common+0xa8>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	4652      	mov	r2, sl
 800b3f2:	4641      	mov	r1, r8
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	47c8      	blx	r9
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	d103      	bne.n	800b404 <_printf_common+0xac>
 800b3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b404:	3501      	adds	r5, #1
 800b406:	e7c6      	b.n	800b396 <_printf_common+0x3e>
 800b408:	18e1      	adds	r1, r4, r3
 800b40a:	1c5a      	adds	r2, r3, #1
 800b40c:	2030      	movs	r0, #48	@ 0x30
 800b40e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b412:	4422      	add	r2, r4
 800b414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b41c:	3302      	adds	r3, #2
 800b41e:	e7c7      	b.n	800b3b0 <_printf_common+0x58>
 800b420:	2301      	movs	r3, #1
 800b422:	4622      	mov	r2, r4
 800b424:	4641      	mov	r1, r8
 800b426:	4638      	mov	r0, r7
 800b428:	47c8      	blx	r9
 800b42a:	3001      	adds	r0, #1
 800b42c:	d0e6      	beq.n	800b3fc <_printf_common+0xa4>
 800b42e:	3601      	adds	r6, #1
 800b430:	e7d9      	b.n	800b3e6 <_printf_common+0x8e>
	...

0800b434 <_printf_i>:
 800b434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b438:	7e0f      	ldrb	r7, [r1, #24]
 800b43a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b43c:	2f78      	cmp	r7, #120	@ 0x78
 800b43e:	4691      	mov	r9, r2
 800b440:	4680      	mov	r8, r0
 800b442:	460c      	mov	r4, r1
 800b444:	469a      	mov	sl, r3
 800b446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b44a:	d807      	bhi.n	800b45c <_printf_i+0x28>
 800b44c:	2f62      	cmp	r7, #98	@ 0x62
 800b44e:	d80a      	bhi.n	800b466 <_printf_i+0x32>
 800b450:	2f00      	cmp	r7, #0
 800b452:	f000 80d2 	beq.w	800b5fa <_printf_i+0x1c6>
 800b456:	2f58      	cmp	r7, #88	@ 0x58
 800b458:	f000 80b9 	beq.w	800b5ce <_printf_i+0x19a>
 800b45c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b464:	e03a      	b.n	800b4dc <_printf_i+0xa8>
 800b466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b46a:	2b15      	cmp	r3, #21
 800b46c:	d8f6      	bhi.n	800b45c <_printf_i+0x28>
 800b46e:	a101      	add	r1, pc, #4	@ (adr r1, 800b474 <_printf_i+0x40>)
 800b470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b474:	0800b4cd 	.word	0x0800b4cd
 800b478:	0800b4e1 	.word	0x0800b4e1
 800b47c:	0800b45d 	.word	0x0800b45d
 800b480:	0800b45d 	.word	0x0800b45d
 800b484:	0800b45d 	.word	0x0800b45d
 800b488:	0800b45d 	.word	0x0800b45d
 800b48c:	0800b4e1 	.word	0x0800b4e1
 800b490:	0800b45d 	.word	0x0800b45d
 800b494:	0800b45d 	.word	0x0800b45d
 800b498:	0800b45d 	.word	0x0800b45d
 800b49c:	0800b45d 	.word	0x0800b45d
 800b4a0:	0800b5e1 	.word	0x0800b5e1
 800b4a4:	0800b50b 	.word	0x0800b50b
 800b4a8:	0800b59b 	.word	0x0800b59b
 800b4ac:	0800b45d 	.word	0x0800b45d
 800b4b0:	0800b45d 	.word	0x0800b45d
 800b4b4:	0800b603 	.word	0x0800b603
 800b4b8:	0800b45d 	.word	0x0800b45d
 800b4bc:	0800b50b 	.word	0x0800b50b
 800b4c0:	0800b45d 	.word	0x0800b45d
 800b4c4:	0800b45d 	.word	0x0800b45d
 800b4c8:	0800b5a3 	.word	0x0800b5a3
 800b4cc:	6833      	ldr	r3, [r6, #0]
 800b4ce:	1d1a      	adds	r2, r3, #4
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6032      	str	r2, [r6, #0]
 800b4d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e09d      	b.n	800b61c <_printf_i+0x1e8>
 800b4e0:	6833      	ldr	r3, [r6, #0]
 800b4e2:	6820      	ldr	r0, [r4, #0]
 800b4e4:	1d19      	adds	r1, r3, #4
 800b4e6:	6031      	str	r1, [r6, #0]
 800b4e8:	0606      	lsls	r6, r0, #24
 800b4ea:	d501      	bpl.n	800b4f0 <_printf_i+0xbc>
 800b4ec:	681d      	ldr	r5, [r3, #0]
 800b4ee:	e003      	b.n	800b4f8 <_printf_i+0xc4>
 800b4f0:	0645      	lsls	r5, r0, #25
 800b4f2:	d5fb      	bpl.n	800b4ec <_printf_i+0xb8>
 800b4f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4f8:	2d00      	cmp	r5, #0
 800b4fa:	da03      	bge.n	800b504 <_printf_i+0xd0>
 800b4fc:	232d      	movs	r3, #45	@ 0x2d
 800b4fe:	426d      	negs	r5, r5
 800b500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b504:	4859      	ldr	r0, [pc, #356]	@ (800b66c <_printf_i+0x238>)
 800b506:	230a      	movs	r3, #10
 800b508:	e011      	b.n	800b52e <_printf_i+0xfa>
 800b50a:	6821      	ldr	r1, [r4, #0]
 800b50c:	6833      	ldr	r3, [r6, #0]
 800b50e:	0608      	lsls	r0, r1, #24
 800b510:	f853 5b04 	ldr.w	r5, [r3], #4
 800b514:	d402      	bmi.n	800b51c <_printf_i+0xe8>
 800b516:	0649      	lsls	r1, r1, #25
 800b518:	bf48      	it	mi
 800b51a:	b2ad      	uxthmi	r5, r5
 800b51c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b51e:	4853      	ldr	r0, [pc, #332]	@ (800b66c <_printf_i+0x238>)
 800b520:	6033      	str	r3, [r6, #0]
 800b522:	bf14      	ite	ne
 800b524:	230a      	movne	r3, #10
 800b526:	2308      	moveq	r3, #8
 800b528:	2100      	movs	r1, #0
 800b52a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b52e:	6866      	ldr	r6, [r4, #4]
 800b530:	60a6      	str	r6, [r4, #8]
 800b532:	2e00      	cmp	r6, #0
 800b534:	bfa2      	ittt	ge
 800b536:	6821      	ldrge	r1, [r4, #0]
 800b538:	f021 0104 	bicge.w	r1, r1, #4
 800b53c:	6021      	strge	r1, [r4, #0]
 800b53e:	b90d      	cbnz	r5, 800b544 <_printf_i+0x110>
 800b540:	2e00      	cmp	r6, #0
 800b542:	d04b      	beq.n	800b5dc <_printf_i+0x1a8>
 800b544:	4616      	mov	r6, r2
 800b546:	fbb5 f1f3 	udiv	r1, r5, r3
 800b54a:	fb03 5711 	mls	r7, r3, r1, r5
 800b54e:	5dc7      	ldrb	r7, [r0, r7]
 800b550:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b554:	462f      	mov	r7, r5
 800b556:	42bb      	cmp	r3, r7
 800b558:	460d      	mov	r5, r1
 800b55a:	d9f4      	bls.n	800b546 <_printf_i+0x112>
 800b55c:	2b08      	cmp	r3, #8
 800b55e:	d10b      	bne.n	800b578 <_printf_i+0x144>
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	07df      	lsls	r7, r3, #31
 800b564:	d508      	bpl.n	800b578 <_printf_i+0x144>
 800b566:	6923      	ldr	r3, [r4, #16]
 800b568:	6861      	ldr	r1, [r4, #4]
 800b56a:	4299      	cmp	r1, r3
 800b56c:	bfde      	ittt	le
 800b56e:	2330      	movle	r3, #48	@ 0x30
 800b570:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b574:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b578:	1b92      	subs	r2, r2, r6
 800b57a:	6122      	str	r2, [r4, #16]
 800b57c:	f8cd a000 	str.w	sl, [sp]
 800b580:	464b      	mov	r3, r9
 800b582:	aa03      	add	r2, sp, #12
 800b584:	4621      	mov	r1, r4
 800b586:	4640      	mov	r0, r8
 800b588:	f7ff fee6 	bl	800b358 <_printf_common>
 800b58c:	3001      	adds	r0, #1
 800b58e:	d14a      	bne.n	800b626 <_printf_i+0x1f2>
 800b590:	f04f 30ff 	mov.w	r0, #4294967295
 800b594:	b004      	add	sp, #16
 800b596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	f043 0320 	orr.w	r3, r3, #32
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	4833      	ldr	r0, [pc, #204]	@ (800b670 <_printf_i+0x23c>)
 800b5a4:	2778      	movs	r7, #120	@ 0x78
 800b5a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5aa:	6823      	ldr	r3, [r4, #0]
 800b5ac:	6831      	ldr	r1, [r6, #0]
 800b5ae:	061f      	lsls	r7, r3, #24
 800b5b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5b4:	d402      	bmi.n	800b5bc <_printf_i+0x188>
 800b5b6:	065f      	lsls	r7, r3, #25
 800b5b8:	bf48      	it	mi
 800b5ba:	b2ad      	uxthmi	r5, r5
 800b5bc:	6031      	str	r1, [r6, #0]
 800b5be:	07d9      	lsls	r1, r3, #31
 800b5c0:	bf44      	itt	mi
 800b5c2:	f043 0320 	orrmi.w	r3, r3, #32
 800b5c6:	6023      	strmi	r3, [r4, #0]
 800b5c8:	b11d      	cbz	r5, 800b5d2 <_printf_i+0x19e>
 800b5ca:	2310      	movs	r3, #16
 800b5cc:	e7ac      	b.n	800b528 <_printf_i+0xf4>
 800b5ce:	4827      	ldr	r0, [pc, #156]	@ (800b66c <_printf_i+0x238>)
 800b5d0:	e7e9      	b.n	800b5a6 <_printf_i+0x172>
 800b5d2:	6823      	ldr	r3, [r4, #0]
 800b5d4:	f023 0320 	bic.w	r3, r3, #32
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	e7f6      	b.n	800b5ca <_printf_i+0x196>
 800b5dc:	4616      	mov	r6, r2
 800b5de:	e7bd      	b.n	800b55c <_printf_i+0x128>
 800b5e0:	6833      	ldr	r3, [r6, #0]
 800b5e2:	6825      	ldr	r5, [r4, #0]
 800b5e4:	6961      	ldr	r1, [r4, #20]
 800b5e6:	1d18      	adds	r0, r3, #4
 800b5e8:	6030      	str	r0, [r6, #0]
 800b5ea:	062e      	lsls	r6, r5, #24
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	d501      	bpl.n	800b5f4 <_printf_i+0x1c0>
 800b5f0:	6019      	str	r1, [r3, #0]
 800b5f2:	e002      	b.n	800b5fa <_printf_i+0x1c6>
 800b5f4:	0668      	lsls	r0, r5, #25
 800b5f6:	d5fb      	bpl.n	800b5f0 <_printf_i+0x1bc>
 800b5f8:	8019      	strh	r1, [r3, #0]
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	6123      	str	r3, [r4, #16]
 800b5fe:	4616      	mov	r6, r2
 800b600:	e7bc      	b.n	800b57c <_printf_i+0x148>
 800b602:	6833      	ldr	r3, [r6, #0]
 800b604:	1d1a      	adds	r2, r3, #4
 800b606:	6032      	str	r2, [r6, #0]
 800b608:	681e      	ldr	r6, [r3, #0]
 800b60a:	6862      	ldr	r2, [r4, #4]
 800b60c:	2100      	movs	r1, #0
 800b60e:	4630      	mov	r0, r6
 800b610:	f7f4 fdf6 	bl	8000200 <memchr>
 800b614:	b108      	cbz	r0, 800b61a <_printf_i+0x1e6>
 800b616:	1b80      	subs	r0, r0, r6
 800b618:	6060      	str	r0, [r4, #4]
 800b61a:	6863      	ldr	r3, [r4, #4]
 800b61c:	6123      	str	r3, [r4, #16]
 800b61e:	2300      	movs	r3, #0
 800b620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b624:	e7aa      	b.n	800b57c <_printf_i+0x148>
 800b626:	6923      	ldr	r3, [r4, #16]
 800b628:	4632      	mov	r2, r6
 800b62a:	4649      	mov	r1, r9
 800b62c:	4640      	mov	r0, r8
 800b62e:	47d0      	blx	sl
 800b630:	3001      	adds	r0, #1
 800b632:	d0ad      	beq.n	800b590 <_printf_i+0x15c>
 800b634:	6823      	ldr	r3, [r4, #0]
 800b636:	079b      	lsls	r3, r3, #30
 800b638:	d413      	bmi.n	800b662 <_printf_i+0x22e>
 800b63a:	68e0      	ldr	r0, [r4, #12]
 800b63c:	9b03      	ldr	r3, [sp, #12]
 800b63e:	4298      	cmp	r0, r3
 800b640:	bfb8      	it	lt
 800b642:	4618      	movlt	r0, r3
 800b644:	e7a6      	b.n	800b594 <_printf_i+0x160>
 800b646:	2301      	movs	r3, #1
 800b648:	4632      	mov	r2, r6
 800b64a:	4649      	mov	r1, r9
 800b64c:	4640      	mov	r0, r8
 800b64e:	47d0      	blx	sl
 800b650:	3001      	adds	r0, #1
 800b652:	d09d      	beq.n	800b590 <_printf_i+0x15c>
 800b654:	3501      	adds	r5, #1
 800b656:	68e3      	ldr	r3, [r4, #12]
 800b658:	9903      	ldr	r1, [sp, #12]
 800b65a:	1a5b      	subs	r3, r3, r1
 800b65c:	42ab      	cmp	r3, r5
 800b65e:	dcf2      	bgt.n	800b646 <_printf_i+0x212>
 800b660:	e7eb      	b.n	800b63a <_printf_i+0x206>
 800b662:	2500      	movs	r5, #0
 800b664:	f104 0619 	add.w	r6, r4, #25
 800b668:	e7f5      	b.n	800b656 <_printf_i+0x222>
 800b66a:	bf00      	nop
 800b66c:	08018151 	.word	0x08018151
 800b670:	08018162 	.word	0x08018162

0800b674 <_scanf_chars>:
 800b674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b678:	4615      	mov	r5, r2
 800b67a:	688a      	ldr	r2, [r1, #8]
 800b67c:	4680      	mov	r8, r0
 800b67e:	460c      	mov	r4, r1
 800b680:	b932      	cbnz	r2, 800b690 <_scanf_chars+0x1c>
 800b682:	698a      	ldr	r2, [r1, #24]
 800b684:	2a00      	cmp	r2, #0
 800b686:	bf14      	ite	ne
 800b688:	f04f 32ff 	movne.w	r2, #4294967295
 800b68c:	2201      	moveq	r2, #1
 800b68e:	608a      	str	r2, [r1, #8]
 800b690:	6822      	ldr	r2, [r4, #0]
 800b692:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b724 <_scanf_chars+0xb0>
 800b696:	06d1      	lsls	r1, r2, #27
 800b698:	bf5f      	itttt	pl
 800b69a:	681a      	ldrpl	r2, [r3, #0]
 800b69c:	1d11      	addpl	r1, r2, #4
 800b69e:	6019      	strpl	r1, [r3, #0]
 800b6a0:	6816      	ldrpl	r6, [r2, #0]
 800b6a2:	2700      	movs	r7, #0
 800b6a4:	69a0      	ldr	r0, [r4, #24]
 800b6a6:	b188      	cbz	r0, 800b6cc <_scanf_chars+0x58>
 800b6a8:	2801      	cmp	r0, #1
 800b6aa:	d107      	bne.n	800b6bc <_scanf_chars+0x48>
 800b6ac:	682b      	ldr	r3, [r5, #0]
 800b6ae:	781a      	ldrb	r2, [r3, #0]
 800b6b0:	6963      	ldr	r3, [r4, #20]
 800b6b2:	5c9b      	ldrb	r3, [r3, r2]
 800b6b4:	b953      	cbnz	r3, 800b6cc <_scanf_chars+0x58>
 800b6b6:	2f00      	cmp	r7, #0
 800b6b8:	d031      	beq.n	800b71e <_scanf_chars+0xaa>
 800b6ba:	e022      	b.n	800b702 <_scanf_chars+0x8e>
 800b6bc:	2802      	cmp	r0, #2
 800b6be:	d120      	bne.n	800b702 <_scanf_chars+0x8e>
 800b6c0:	682b      	ldr	r3, [r5, #0]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b6c8:	071b      	lsls	r3, r3, #28
 800b6ca:	d41a      	bmi.n	800b702 <_scanf_chars+0x8e>
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	06da      	lsls	r2, r3, #27
 800b6d0:	bf5e      	ittt	pl
 800b6d2:	682b      	ldrpl	r3, [r5, #0]
 800b6d4:	781b      	ldrbpl	r3, [r3, #0]
 800b6d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b6da:	682a      	ldr	r2, [r5, #0]
 800b6dc:	686b      	ldr	r3, [r5, #4]
 800b6de:	3201      	adds	r2, #1
 800b6e0:	602a      	str	r2, [r5, #0]
 800b6e2:	68a2      	ldr	r2, [r4, #8]
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	3a01      	subs	r2, #1
 800b6e8:	606b      	str	r3, [r5, #4]
 800b6ea:	3701      	adds	r7, #1
 800b6ec:	60a2      	str	r2, [r4, #8]
 800b6ee:	b142      	cbz	r2, 800b702 <_scanf_chars+0x8e>
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	dcd7      	bgt.n	800b6a4 <_scanf_chars+0x30>
 800b6f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	4798      	blx	r3
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d0d0      	beq.n	800b6a4 <_scanf_chars+0x30>
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	f013 0310 	ands.w	r3, r3, #16
 800b708:	d105      	bne.n	800b716 <_scanf_chars+0xa2>
 800b70a:	68e2      	ldr	r2, [r4, #12]
 800b70c:	3201      	adds	r2, #1
 800b70e:	60e2      	str	r2, [r4, #12]
 800b710:	69a2      	ldr	r2, [r4, #24]
 800b712:	b102      	cbz	r2, 800b716 <_scanf_chars+0xa2>
 800b714:	7033      	strb	r3, [r6, #0]
 800b716:	6923      	ldr	r3, [r4, #16]
 800b718:	443b      	add	r3, r7
 800b71a:	6123      	str	r3, [r4, #16]
 800b71c:	2000      	movs	r0, #0
 800b71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b722:	bf00      	nop
 800b724:	08017e59 	.word	0x08017e59

0800b728 <_scanf_i>:
 800b728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72c:	4698      	mov	r8, r3
 800b72e:	4b74      	ldr	r3, [pc, #464]	@ (800b900 <_scanf_i+0x1d8>)
 800b730:	460c      	mov	r4, r1
 800b732:	4682      	mov	sl, r0
 800b734:	4616      	mov	r6, r2
 800b736:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b73a:	b087      	sub	sp, #28
 800b73c:	ab03      	add	r3, sp, #12
 800b73e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b742:	4b70      	ldr	r3, [pc, #448]	@ (800b904 <_scanf_i+0x1dc>)
 800b744:	69a1      	ldr	r1, [r4, #24]
 800b746:	4a70      	ldr	r2, [pc, #448]	@ (800b908 <_scanf_i+0x1e0>)
 800b748:	2903      	cmp	r1, #3
 800b74a:	bf08      	it	eq
 800b74c:	461a      	moveq	r2, r3
 800b74e:	68a3      	ldr	r3, [r4, #8]
 800b750:	9201      	str	r2, [sp, #4]
 800b752:	1e5a      	subs	r2, r3, #1
 800b754:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b758:	bf88      	it	hi
 800b75a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b75e:	4627      	mov	r7, r4
 800b760:	bf82      	ittt	hi
 800b762:	eb03 0905 	addhi.w	r9, r3, r5
 800b766:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b76a:	60a3      	strhi	r3, [r4, #8]
 800b76c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b770:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b774:	bf98      	it	ls
 800b776:	f04f 0900 	movls.w	r9, #0
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	463d      	mov	r5, r7
 800b77e:	f04f 0b00 	mov.w	fp, #0
 800b782:	6831      	ldr	r1, [r6, #0]
 800b784:	ab03      	add	r3, sp, #12
 800b786:	7809      	ldrb	r1, [r1, #0]
 800b788:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b78c:	2202      	movs	r2, #2
 800b78e:	f7f4 fd37 	bl	8000200 <memchr>
 800b792:	b328      	cbz	r0, 800b7e0 <_scanf_i+0xb8>
 800b794:	f1bb 0f01 	cmp.w	fp, #1
 800b798:	d159      	bne.n	800b84e <_scanf_i+0x126>
 800b79a:	6862      	ldr	r2, [r4, #4]
 800b79c:	b92a      	cbnz	r2, 800b7aa <_scanf_i+0x82>
 800b79e:	6822      	ldr	r2, [r4, #0]
 800b7a0:	2108      	movs	r1, #8
 800b7a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7a6:	6061      	str	r1, [r4, #4]
 800b7a8:	6022      	str	r2, [r4, #0]
 800b7aa:	6822      	ldr	r2, [r4, #0]
 800b7ac:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b7b0:	6022      	str	r2, [r4, #0]
 800b7b2:	68a2      	ldr	r2, [r4, #8]
 800b7b4:	1e51      	subs	r1, r2, #1
 800b7b6:	60a1      	str	r1, [r4, #8]
 800b7b8:	b192      	cbz	r2, 800b7e0 <_scanf_i+0xb8>
 800b7ba:	6832      	ldr	r2, [r6, #0]
 800b7bc:	1c51      	adds	r1, r2, #1
 800b7be:	6031      	str	r1, [r6, #0]
 800b7c0:	7812      	ldrb	r2, [r2, #0]
 800b7c2:	f805 2b01 	strb.w	r2, [r5], #1
 800b7c6:	6872      	ldr	r2, [r6, #4]
 800b7c8:	3a01      	subs	r2, #1
 800b7ca:	2a00      	cmp	r2, #0
 800b7cc:	6072      	str	r2, [r6, #4]
 800b7ce:	dc07      	bgt.n	800b7e0 <_scanf_i+0xb8>
 800b7d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b7d4:	4631      	mov	r1, r6
 800b7d6:	4650      	mov	r0, sl
 800b7d8:	4790      	blx	r2
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	f040 8085 	bne.w	800b8ea <_scanf_i+0x1c2>
 800b7e0:	f10b 0b01 	add.w	fp, fp, #1
 800b7e4:	f1bb 0f03 	cmp.w	fp, #3
 800b7e8:	d1cb      	bne.n	800b782 <_scanf_i+0x5a>
 800b7ea:	6863      	ldr	r3, [r4, #4]
 800b7ec:	b90b      	cbnz	r3, 800b7f2 <_scanf_i+0xca>
 800b7ee:	230a      	movs	r3, #10
 800b7f0:	6063      	str	r3, [r4, #4]
 800b7f2:	6863      	ldr	r3, [r4, #4]
 800b7f4:	4945      	ldr	r1, [pc, #276]	@ (800b90c <_scanf_i+0x1e4>)
 800b7f6:	6960      	ldr	r0, [r4, #20]
 800b7f8:	1ac9      	subs	r1, r1, r3
 800b7fa:	f000 f935 	bl	800ba68 <__sccl>
 800b7fe:	f04f 0b00 	mov.w	fp, #0
 800b802:	68a3      	ldr	r3, [r4, #8]
 800b804:	6822      	ldr	r2, [r4, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d03d      	beq.n	800b886 <_scanf_i+0x15e>
 800b80a:	6831      	ldr	r1, [r6, #0]
 800b80c:	6960      	ldr	r0, [r4, #20]
 800b80e:	f891 c000 	ldrb.w	ip, [r1]
 800b812:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b816:	2800      	cmp	r0, #0
 800b818:	d035      	beq.n	800b886 <_scanf_i+0x15e>
 800b81a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b81e:	d124      	bne.n	800b86a <_scanf_i+0x142>
 800b820:	0510      	lsls	r0, r2, #20
 800b822:	d522      	bpl.n	800b86a <_scanf_i+0x142>
 800b824:	f10b 0b01 	add.w	fp, fp, #1
 800b828:	f1b9 0f00 	cmp.w	r9, #0
 800b82c:	d003      	beq.n	800b836 <_scanf_i+0x10e>
 800b82e:	3301      	adds	r3, #1
 800b830:	f109 39ff 	add.w	r9, r9, #4294967295
 800b834:	60a3      	str	r3, [r4, #8]
 800b836:	6873      	ldr	r3, [r6, #4]
 800b838:	3b01      	subs	r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	6073      	str	r3, [r6, #4]
 800b83e:	dd1b      	ble.n	800b878 <_scanf_i+0x150>
 800b840:	6833      	ldr	r3, [r6, #0]
 800b842:	3301      	adds	r3, #1
 800b844:	6033      	str	r3, [r6, #0]
 800b846:	68a3      	ldr	r3, [r4, #8]
 800b848:	3b01      	subs	r3, #1
 800b84a:	60a3      	str	r3, [r4, #8]
 800b84c:	e7d9      	b.n	800b802 <_scanf_i+0xda>
 800b84e:	f1bb 0f02 	cmp.w	fp, #2
 800b852:	d1ae      	bne.n	800b7b2 <_scanf_i+0x8a>
 800b854:	6822      	ldr	r2, [r4, #0]
 800b856:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b85a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b85e:	d1bf      	bne.n	800b7e0 <_scanf_i+0xb8>
 800b860:	2110      	movs	r1, #16
 800b862:	6061      	str	r1, [r4, #4]
 800b864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b868:	e7a2      	b.n	800b7b0 <_scanf_i+0x88>
 800b86a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b86e:	6022      	str	r2, [r4, #0]
 800b870:	780b      	ldrb	r3, [r1, #0]
 800b872:	f805 3b01 	strb.w	r3, [r5], #1
 800b876:	e7de      	b.n	800b836 <_scanf_i+0x10e>
 800b878:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b87c:	4631      	mov	r1, r6
 800b87e:	4650      	mov	r0, sl
 800b880:	4798      	blx	r3
 800b882:	2800      	cmp	r0, #0
 800b884:	d0df      	beq.n	800b846 <_scanf_i+0x11e>
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	05d9      	lsls	r1, r3, #23
 800b88a:	d50d      	bpl.n	800b8a8 <_scanf_i+0x180>
 800b88c:	42bd      	cmp	r5, r7
 800b88e:	d909      	bls.n	800b8a4 <_scanf_i+0x17c>
 800b890:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b894:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b898:	4632      	mov	r2, r6
 800b89a:	4650      	mov	r0, sl
 800b89c:	4798      	blx	r3
 800b89e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b8a2:	464d      	mov	r5, r9
 800b8a4:	42bd      	cmp	r5, r7
 800b8a6:	d028      	beq.n	800b8fa <_scanf_i+0x1d2>
 800b8a8:	6822      	ldr	r2, [r4, #0]
 800b8aa:	f012 0210 	ands.w	r2, r2, #16
 800b8ae:	d113      	bne.n	800b8d8 <_scanf_i+0x1b0>
 800b8b0:	702a      	strb	r2, [r5, #0]
 800b8b2:	6863      	ldr	r3, [r4, #4]
 800b8b4:	9e01      	ldr	r6, [sp, #4]
 800b8b6:	4639      	mov	r1, r7
 800b8b8:	4650      	mov	r0, sl
 800b8ba:	47b0      	blx	r6
 800b8bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b8c0:	6821      	ldr	r1, [r4, #0]
 800b8c2:	1d1a      	adds	r2, r3, #4
 800b8c4:	f8c8 2000 	str.w	r2, [r8]
 800b8c8:	f011 0f20 	tst.w	r1, #32
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	d00f      	beq.n	800b8f0 <_scanf_i+0x1c8>
 800b8d0:	6018      	str	r0, [r3, #0]
 800b8d2:	68e3      	ldr	r3, [r4, #12]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	60e3      	str	r3, [r4, #12]
 800b8d8:	6923      	ldr	r3, [r4, #16]
 800b8da:	1bed      	subs	r5, r5, r7
 800b8dc:	445d      	add	r5, fp
 800b8de:	442b      	add	r3, r5
 800b8e0:	6123      	str	r3, [r4, #16]
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	b007      	add	sp, #28
 800b8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ea:	f04f 0b00 	mov.w	fp, #0
 800b8ee:	e7ca      	b.n	800b886 <_scanf_i+0x15e>
 800b8f0:	07ca      	lsls	r2, r1, #31
 800b8f2:	bf4c      	ite	mi
 800b8f4:	8018      	strhmi	r0, [r3, #0]
 800b8f6:	6018      	strpl	r0, [r3, #0]
 800b8f8:	e7eb      	b.n	800b8d2 <_scanf_i+0x1aa>
 800b8fa:	2001      	movs	r0, #1
 800b8fc:	e7f2      	b.n	800b8e4 <_scanf_i+0x1bc>
 800b8fe:	bf00      	nop
 800b900:	0800c7f4 	.word	0x0800c7f4
 800b904:	0800bcdd 	.word	0x0800bcdd
 800b908:	0800bdbd 	.word	0x0800bdbd
 800b90c:	08018183 	.word	0x08018183

0800b910 <__sflush_r>:
 800b910:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b918:	0716      	lsls	r6, r2, #28
 800b91a:	4605      	mov	r5, r0
 800b91c:	460c      	mov	r4, r1
 800b91e:	d454      	bmi.n	800b9ca <__sflush_r+0xba>
 800b920:	684b      	ldr	r3, [r1, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	dc02      	bgt.n	800b92c <__sflush_r+0x1c>
 800b926:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b928:	2b00      	cmp	r3, #0
 800b92a:	dd48      	ble.n	800b9be <__sflush_r+0xae>
 800b92c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b92e:	2e00      	cmp	r6, #0
 800b930:	d045      	beq.n	800b9be <__sflush_r+0xae>
 800b932:	2300      	movs	r3, #0
 800b934:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b938:	682f      	ldr	r7, [r5, #0]
 800b93a:	6a21      	ldr	r1, [r4, #32]
 800b93c:	602b      	str	r3, [r5, #0]
 800b93e:	d030      	beq.n	800b9a2 <__sflush_r+0x92>
 800b940:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	0759      	lsls	r1, r3, #29
 800b946:	d505      	bpl.n	800b954 <__sflush_r+0x44>
 800b948:	6863      	ldr	r3, [r4, #4]
 800b94a:	1ad2      	subs	r2, r2, r3
 800b94c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b94e:	b10b      	cbz	r3, 800b954 <__sflush_r+0x44>
 800b950:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b952:	1ad2      	subs	r2, r2, r3
 800b954:	2300      	movs	r3, #0
 800b956:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b958:	6a21      	ldr	r1, [r4, #32]
 800b95a:	4628      	mov	r0, r5
 800b95c:	47b0      	blx	r6
 800b95e:	1c43      	adds	r3, r0, #1
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	d106      	bne.n	800b972 <__sflush_r+0x62>
 800b964:	6829      	ldr	r1, [r5, #0]
 800b966:	291d      	cmp	r1, #29
 800b968:	d82b      	bhi.n	800b9c2 <__sflush_r+0xb2>
 800b96a:	4a2a      	ldr	r2, [pc, #168]	@ (800ba14 <__sflush_r+0x104>)
 800b96c:	410a      	asrs	r2, r1
 800b96e:	07d6      	lsls	r6, r2, #31
 800b970:	d427      	bmi.n	800b9c2 <__sflush_r+0xb2>
 800b972:	2200      	movs	r2, #0
 800b974:	6062      	str	r2, [r4, #4]
 800b976:	04d9      	lsls	r1, r3, #19
 800b978:	6922      	ldr	r2, [r4, #16]
 800b97a:	6022      	str	r2, [r4, #0]
 800b97c:	d504      	bpl.n	800b988 <__sflush_r+0x78>
 800b97e:	1c42      	adds	r2, r0, #1
 800b980:	d101      	bne.n	800b986 <__sflush_r+0x76>
 800b982:	682b      	ldr	r3, [r5, #0]
 800b984:	b903      	cbnz	r3, 800b988 <__sflush_r+0x78>
 800b986:	6560      	str	r0, [r4, #84]	@ 0x54
 800b988:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b98a:	602f      	str	r7, [r5, #0]
 800b98c:	b1b9      	cbz	r1, 800b9be <__sflush_r+0xae>
 800b98e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b992:	4299      	cmp	r1, r3
 800b994:	d002      	beq.n	800b99c <__sflush_r+0x8c>
 800b996:	4628      	mov	r0, r5
 800b998:	f7fe f95e 	bl	8009c58 <_free_r>
 800b99c:	2300      	movs	r3, #0
 800b99e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9a0:	e00d      	b.n	800b9be <__sflush_r+0xae>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	47b0      	blx	r6
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	1c50      	adds	r0, r2, #1
 800b9ac:	d1c9      	bne.n	800b942 <__sflush_r+0x32>
 800b9ae:	682b      	ldr	r3, [r5, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d0c6      	beq.n	800b942 <__sflush_r+0x32>
 800b9b4:	2b1d      	cmp	r3, #29
 800b9b6:	d001      	beq.n	800b9bc <__sflush_r+0xac>
 800b9b8:	2b16      	cmp	r3, #22
 800b9ba:	d11e      	bne.n	800b9fa <__sflush_r+0xea>
 800b9bc:	602f      	str	r7, [r5, #0]
 800b9be:	2000      	movs	r0, #0
 800b9c0:	e022      	b.n	800ba08 <__sflush_r+0xf8>
 800b9c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9c6:	b21b      	sxth	r3, r3
 800b9c8:	e01b      	b.n	800ba02 <__sflush_r+0xf2>
 800b9ca:	690f      	ldr	r7, [r1, #16]
 800b9cc:	2f00      	cmp	r7, #0
 800b9ce:	d0f6      	beq.n	800b9be <__sflush_r+0xae>
 800b9d0:	0793      	lsls	r3, r2, #30
 800b9d2:	680e      	ldr	r6, [r1, #0]
 800b9d4:	bf08      	it	eq
 800b9d6:	694b      	ldreq	r3, [r1, #20]
 800b9d8:	600f      	str	r7, [r1, #0]
 800b9da:	bf18      	it	ne
 800b9dc:	2300      	movne	r3, #0
 800b9de:	eba6 0807 	sub.w	r8, r6, r7
 800b9e2:	608b      	str	r3, [r1, #8]
 800b9e4:	f1b8 0f00 	cmp.w	r8, #0
 800b9e8:	dde9      	ble.n	800b9be <__sflush_r+0xae>
 800b9ea:	6a21      	ldr	r1, [r4, #32]
 800b9ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b9ee:	4643      	mov	r3, r8
 800b9f0:	463a      	mov	r2, r7
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	47b0      	blx	r6
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	dc08      	bgt.n	800ba0c <__sflush_r+0xfc>
 800b9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba02:	81a3      	strh	r3, [r4, #12]
 800ba04:	f04f 30ff 	mov.w	r0, #4294967295
 800ba08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba0c:	4407      	add	r7, r0
 800ba0e:	eba8 0800 	sub.w	r8, r8, r0
 800ba12:	e7e7      	b.n	800b9e4 <__sflush_r+0xd4>
 800ba14:	dfbffffe 	.word	0xdfbffffe

0800ba18 <_fflush_r>:
 800ba18:	b538      	push	{r3, r4, r5, lr}
 800ba1a:	690b      	ldr	r3, [r1, #16]
 800ba1c:	4605      	mov	r5, r0
 800ba1e:	460c      	mov	r4, r1
 800ba20:	b913      	cbnz	r3, 800ba28 <_fflush_r+0x10>
 800ba22:	2500      	movs	r5, #0
 800ba24:	4628      	mov	r0, r5
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	b118      	cbz	r0, 800ba32 <_fflush_r+0x1a>
 800ba2a:	6a03      	ldr	r3, [r0, #32]
 800ba2c:	b90b      	cbnz	r3, 800ba32 <_fflush_r+0x1a>
 800ba2e:	f7fd ff63 	bl	80098f8 <__sinit>
 800ba32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d0f3      	beq.n	800ba22 <_fflush_r+0xa>
 800ba3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ba3c:	07d0      	lsls	r0, r2, #31
 800ba3e:	d404      	bmi.n	800ba4a <_fflush_r+0x32>
 800ba40:	0599      	lsls	r1, r3, #22
 800ba42:	d402      	bmi.n	800ba4a <_fflush_r+0x32>
 800ba44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba46:	f7fe f8ec 	bl	8009c22 <__retarget_lock_acquire_recursive>
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	f7ff ff5f 	bl	800b910 <__sflush_r>
 800ba52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba54:	07da      	lsls	r2, r3, #31
 800ba56:	4605      	mov	r5, r0
 800ba58:	d4e4      	bmi.n	800ba24 <_fflush_r+0xc>
 800ba5a:	89a3      	ldrh	r3, [r4, #12]
 800ba5c:	059b      	lsls	r3, r3, #22
 800ba5e:	d4e1      	bmi.n	800ba24 <_fflush_r+0xc>
 800ba60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba62:	f7fe f8df 	bl	8009c24 <__retarget_lock_release_recursive>
 800ba66:	e7dd      	b.n	800ba24 <_fflush_r+0xc>

0800ba68 <__sccl>:
 800ba68:	b570      	push	{r4, r5, r6, lr}
 800ba6a:	780b      	ldrb	r3, [r1, #0]
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	2b5e      	cmp	r3, #94	@ 0x5e
 800ba70:	bf0b      	itete	eq
 800ba72:	784b      	ldrbeq	r3, [r1, #1]
 800ba74:	1c4a      	addne	r2, r1, #1
 800ba76:	1c8a      	addeq	r2, r1, #2
 800ba78:	2100      	movne	r1, #0
 800ba7a:	bf08      	it	eq
 800ba7c:	2101      	moveq	r1, #1
 800ba7e:	3801      	subs	r0, #1
 800ba80:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ba84:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ba88:	42a8      	cmp	r0, r5
 800ba8a:	d1fb      	bne.n	800ba84 <__sccl+0x1c>
 800ba8c:	b90b      	cbnz	r3, 800ba92 <__sccl+0x2a>
 800ba8e:	1e50      	subs	r0, r2, #1
 800ba90:	bd70      	pop	{r4, r5, r6, pc}
 800ba92:	f081 0101 	eor.w	r1, r1, #1
 800ba96:	54e1      	strb	r1, [r4, r3]
 800ba98:	4610      	mov	r0, r2
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800baa0:	2d2d      	cmp	r5, #45	@ 0x2d
 800baa2:	d005      	beq.n	800bab0 <__sccl+0x48>
 800baa4:	2d5d      	cmp	r5, #93	@ 0x5d
 800baa6:	d016      	beq.n	800bad6 <__sccl+0x6e>
 800baa8:	2d00      	cmp	r5, #0
 800baaa:	d0f1      	beq.n	800ba90 <__sccl+0x28>
 800baac:	462b      	mov	r3, r5
 800baae:	e7f2      	b.n	800ba96 <__sccl+0x2e>
 800bab0:	7846      	ldrb	r6, [r0, #1]
 800bab2:	2e5d      	cmp	r6, #93	@ 0x5d
 800bab4:	d0fa      	beq.n	800baac <__sccl+0x44>
 800bab6:	42b3      	cmp	r3, r6
 800bab8:	dcf8      	bgt.n	800baac <__sccl+0x44>
 800baba:	3002      	adds	r0, #2
 800babc:	461a      	mov	r2, r3
 800babe:	3201      	adds	r2, #1
 800bac0:	4296      	cmp	r6, r2
 800bac2:	54a1      	strb	r1, [r4, r2]
 800bac4:	dcfb      	bgt.n	800babe <__sccl+0x56>
 800bac6:	1af2      	subs	r2, r6, r3
 800bac8:	3a01      	subs	r2, #1
 800baca:	1c5d      	adds	r5, r3, #1
 800bacc:	42b3      	cmp	r3, r6
 800bace:	bfa8      	it	ge
 800bad0:	2200      	movge	r2, #0
 800bad2:	18ab      	adds	r3, r5, r2
 800bad4:	e7e1      	b.n	800ba9a <__sccl+0x32>
 800bad6:	4610      	mov	r0, r2
 800bad8:	e7da      	b.n	800ba90 <__sccl+0x28>

0800bada <__submore>:
 800bada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bade:	460c      	mov	r4, r1
 800bae0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bae2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bae6:	4299      	cmp	r1, r3
 800bae8:	d11d      	bne.n	800bb26 <__submore+0x4c>
 800baea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800baee:	f7fc ffa5 	bl	8008a3c <_malloc_r>
 800baf2:	b918      	cbnz	r0, 800bafc <__submore+0x22>
 800baf4:	f04f 30ff 	mov.w	r0, #4294967295
 800baf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bafc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb00:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bb02:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800bb06:	6360      	str	r0, [r4, #52]	@ 0x34
 800bb08:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800bb0c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bb10:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800bb14:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bb18:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800bb1c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800bb20:	6020      	str	r0, [r4, #0]
 800bb22:	2000      	movs	r0, #0
 800bb24:	e7e8      	b.n	800baf8 <__submore+0x1e>
 800bb26:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800bb28:	0077      	lsls	r7, r6, #1
 800bb2a:	463a      	mov	r2, r7
 800bb2c:	f7fd f81a 	bl	8008b64 <_realloc_r>
 800bb30:	4605      	mov	r5, r0
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d0de      	beq.n	800baf4 <__submore+0x1a>
 800bb36:	eb00 0806 	add.w	r8, r0, r6
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	4632      	mov	r2, r6
 800bb3e:	4640      	mov	r0, r8
 800bb40:	f7fe f871 	bl	8009c26 <memcpy>
 800bb44:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800bb48:	f8c4 8000 	str.w	r8, [r4]
 800bb4c:	e7e9      	b.n	800bb22 <__submore+0x48>

0800bb4e <memmove>:
 800bb4e:	4288      	cmp	r0, r1
 800bb50:	b510      	push	{r4, lr}
 800bb52:	eb01 0402 	add.w	r4, r1, r2
 800bb56:	d902      	bls.n	800bb5e <memmove+0x10>
 800bb58:	4284      	cmp	r4, r0
 800bb5a:	4623      	mov	r3, r4
 800bb5c:	d807      	bhi.n	800bb6e <memmove+0x20>
 800bb5e:	1e43      	subs	r3, r0, #1
 800bb60:	42a1      	cmp	r1, r4
 800bb62:	d008      	beq.n	800bb76 <memmove+0x28>
 800bb64:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb68:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb6c:	e7f8      	b.n	800bb60 <memmove+0x12>
 800bb6e:	4402      	add	r2, r0
 800bb70:	4601      	mov	r1, r0
 800bb72:	428a      	cmp	r2, r1
 800bb74:	d100      	bne.n	800bb78 <memmove+0x2a>
 800bb76:	bd10      	pop	{r4, pc}
 800bb78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb80:	e7f7      	b.n	800bb72 <memmove+0x24>
	...

0800bb84 <__assert_func>:
 800bb84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb86:	4614      	mov	r4, r2
 800bb88:	461a      	mov	r2, r3
 800bb8a:	4b09      	ldr	r3, [pc, #36]	@ (800bbb0 <__assert_func+0x2c>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4605      	mov	r5, r0
 800bb90:	68d8      	ldr	r0, [r3, #12]
 800bb92:	b954      	cbnz	r4, 800bbaa <__assert_func+0x26>
 800bb94:	4b07      	ldr	r3, [pc, #28]	@ (800bbb4 <__assert_func+0x30>)
 800bb96:	461c      	mov	r4, r3
 800bb98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb9c:	9100      	str	r1, [sp, #0]
 800bb9e:	462b      	mov	r3, r5
 800bba0:	4905      	ldr	r1, [pc, #20]	@ (800bbb8 <__assert_func+0x34>)
 800bba2:	f000 f90d 	bl	800bdc0 <fiprintf>
 800bba6:	f000 f91d 	bl	800bde4 <abort>
 800bbaa:	4b04      	ldr	r3, [pc, #16]	@ (800bbbc <__assert_func+0x38>)
 800bbac:	e7f4      	b.n	800bb98 <__assert_func+0x14>
 800bbae:	bf00      	nop
 800bbb0:	200009c8 	.word	0x200009c8
 800bbb4:	080181c9 	.word	0x080181c9
 800bbb8:	0801819b 	.word	0x0801819b
 800bbbc:	0801818e 	.word	0x0801818e

0800bbc0 <_calloc_r>:
 800bbc0:	b570      	push	{r4, r5, r6, lr}
 800bbc2:	fba1 5402 	umull	r5, r4, r1, r2
 800bbc6:	b93c      	cbnz	r4, 800bbd8 <_calloc_r+0x18>
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f7fc ff37 	bl	8008a3c <_malloc_r>
 800bbce:	4606      	mov	r6, r0
 800bbd0:	b928      	cbnz	r0, 800bbde <_calloc_r+0x1e>
 800bbd2:	2600      	movs	r6, #0
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	bd70      	pop	{r4, r5, r6, pc}
 800bbd8:	220c      	movs	r2, #12
 800bbda:	6002      	str	r2, [r0, #0]
 800bbdc:	e7f9      	b.n	800bbd2 <_calloc_r+0x12>
 800bbde:	462a      	mov	r2, r5
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	f7fd ff6f 	bl	8009ac4 <memset>
 800bbe6:	e7f5      	b.n	800bbd4 <_calloc_r+0x14>

0800bbe8 <_strtol_l.constprop.0>:
 800bbe8:	2b24      	cmp	r3, #36	@ 0x24
 800bbea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbee:	4686      	mov	lr, r0
 800bbf0:	4690      	mov	r8, r2
 800bbf2:	d801      	bhi.n	800bbf8 <_strtol_l.constprop.0+0x10>
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d106      	bne.n	800bc06 <_strtol_l.constprop.0+0x1e>
 800bbf8:	f7fd ffe8 	bl	8009bcc <__errno>
 800bbfc:	2316      	movs	r3, #22
 800bbfe:	6003      	str	r3, [r0, #0]
 800bc00:	2000      	movs	r0, #0
 800bc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc06:	4834      	ldr	r0, [pc, #208]	@ (800bcd8 <_strtol_l.constprop.0+0xf0>)
 800bc08:	460d      	mov	r5, r1
 800bc0a:	462a      	mov	r2, r5
 800bc0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc10:	5d06      	ldrb	r6, [r0, r4]
 800bc12:	f016 0608 	ands.w	r6, r6, #8
 800bc16:	d1f8      	bne.n	800bc0a <_strtol_l.constprop.0+0x22>
 800bc18:	2c2d      	cmp	r4, #45	@ 0x2d
 800bc1a:	d12d      	bne.n	800bc78 <_strtol_l.constprop.0+0x90>
 800bc1c:	782c      	ldrb	r4, [r5, #0]
 800bc1e:	2601      	movs	r6, #1
 800bc20:	1c95      	adds	r5, r2, #2
 800bc22:	f033 0210 	bics.w	r2, r3, #16
 800bc26:	d109      	bne.n	800bc3c <_strtol_l.constprop.0+0x54>
 800bc28:	2c30      	cmp	r4, #48	@ 0x30
 800bc2a:	d12a      	bne.n	800bc82 <_strtol_l.constprop.0+0x9a>
 800bc2c:	782a      	ldrb	r2, [r5, #0]
 800bc2e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bc32:	2a58      	cmp	r2, #88	@ 0x58
 800bc34:	d125      	bne.n	800bc82 <_strtol_l.constprop.0+0x9a>
 800bc36:	786c      	ldrb	r4, [r5, #1]
 800bc38:	2310      	movs	r3, #16
 800bc3a:	3502      	adds	r5, #2
 800bc3c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bc40:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bc44:	2200      	movs	r2, #0
 800bc46:	fbbc f9f3 	udiv	r9, ip, r3
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	fb03 ca19 	mls	sl, r3, r9, ip
 800bc50:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bc54:	2f09      	cmp	r7, #9
 800bc56:	d81b      	bhi.n	800bc90 <_strtol_l.constprop.0+0xa8>
 800bc58:	463c      	mov	r4, r7
 800bc5a:	42a3      	cmp	r3, r4
 800bc5c:	dd27      	ble.n	800bcae <_strtol_l.constprop.0+0xc6>
 800bc5e:	1c57      	adds	r7, r2, #1
 800bc60:	d007      	beq.n	800bc72 <_strtol_l.constprop.0+0x8a>
 800bc62:	4581      	cmp	r9, r0
 800bc64:	d320      	bcc.n	800bca8 <_strtol_l.constprop.0+0xc0>
 800bc66:	d101      	bne.n	800bc6c <_strtol_l.constprop.0+0x84>
 800bc68:	45a2      	cmp	sl, r4
 800bc6a:	db1d      	blt.n	800bca8 <_strtol_l.constprop.0+0xc0>
 800bc6c:	fb00 4003 	mla	r0, r0, r3, r4
 800bc70:	2201      	movs	r2, #1
 800bc72:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc76:	e7eb      	b.n	800bc50 <_strtol_l.constprop.0+0x68>
 800bc78:	2c2b      	cmp	r4, #43	@ 0x2b
 800bc7a:	bf04      	itt	eq
 800bc7c:	782c      	ldrbeq	r4, [r5, #0]
 800bc7e:	1c95      	addeq	r5, r2, #2
 800bc80:	e7cf      	b.n	800bc22 <_strtol_l.constprop.0+0x3a>
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1da      	bne.n	800bc3c <_strtol_l.constprop.0+0x54>
 800bc86:	2c30      	cmp	r4, #48	@ 0x30
 800bc88:	bf0c      	ite	eq
 800bc8a:	2308      	moveq	r3, #8
 800bc8c:	230a      	movne	r3, #10
 800bc8e:	e7d5      	b.n	800bc3c <_strtol_l.constprop.0+0x54>
 800bc90:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bc94:	2f19      	cmp	r7, #25
 800bc96:	d801      	bhi.n	800bc9c <_strtol_l.constprop.0+0xb4>
 800bc98:	3c37      	subs	r4, #55	@ 0x37
 800bc9a:	e7de      	b.n	800bc5a <_strtol_l.constprop.0+0x72>
 800bc9c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bca0:	2f19      	cmp	r7, #25
 800bca2:	d804      	bhi.n	800bcae <_strtol_l.constprop.0+0xc6>
 800bca4:	3c57      	subs	r4, #87	@ 0x57
 800bca6:	e7d8      	b.n	800bc5a <_strtol_l.constprop.0+0x72>
 800bca8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcac:	e7e1      	b.n	800bc72 <_strtol_l.constprop.0+0x8a>
 800bcae:	1c53      	adds	r3, r2, #1
 800bcb0:	d108      	bne.n	800bcc4 <_strtol_l.constprop.0+0xdc>
 800bcb2:	2322      	movs	r3, #34	@ 0x22
 800bcb4:	f8ce 3000 	str.w	r3, [lr]
 800bcb8:	4660      	mov	r0, ip
 800bcba:	f1b8 0f00 	cmp.w	r8, #0
 800bcbe:	d0a0      	beq.n	800bc02 <_strtol_l.constprop.0+0x1a>
 800bcc0:	1e69      	subs	r1, r5, #1
 800bcc2:	e006      	b.n	800bcd2 <_strtol_l.constprop.0+0xea>
 800bcc4:	b106      	cbz	r6, 800bcc8 <_strtol_l.constprop.0+0xe0>
 800bcc6:	4240      	negs	r0, r0
 800bcc8:	f1b8 0f00 	cmp.w	r8, #0
 800bccc:	d099      	beq.n	800bc02 <_strtol_l.constprop.0+0x1a>
 800bcce:	2a00      	cmp	r2, #0
 800bcd0:	d1f6      	bne.n	800bcc0 <_strtol_l.constprop.0+0xd8>
 800bcd2:	f8c8 1000 	str.w	r1, [r8]
 800bcd6:	e794      	b.n	800bc02 <_strtol_l.constprop.0+0x1a>
 800bcd8:	08017e59 	.word	0x08017e59

0800bcdc <_strtol_r>:
 800bcdc:	f7ff bf84 	b.w	800bbe8 <_strtol_l.constprop.0>

0800bce0 <_strtoul_l.constprop.0>:
 800bce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bce4:	4e34      	ldr	r6, [pc, #208]	@ (800bdb8 <_strtoul_l.constprop.0+0xd8>)
 800bce6:	4686      	mov	lr, r0
 800bce8:	460d      	mov	r5, r1
 800bcea:	4628      	mov	r0, r5
 800bcec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcf0:	5d37      	ldrb	r7, [r6, r4]
 800bcf2:	f017 0708 	ands.w	r7, r7, #8
 800bcf6:	d1f8      	bne.n	800bcea <_strtoul_l.constprop.0+0xa>
 800bcf8:	2c2d      	cmp	r4, #45	@ 0x2d
 800bcfa:	d12f      	bne.n	800bd5c <_strtoul_l.constprop.0+0x7c>
 800bcfc:	782c      	ldrb	r4, [r5, #0]
 800bcfe:	2701      	movs	r7, #1
 800bd00:	1c85      	adds	r5, r0, #2
 800bd02:	f033 0010 	bics.w	r0, r3, #16
 800bd06:	d109      	bne.n	800bd1c <_strtoul_l.constprop.0+0x3c>
 800bd08:	2c30      	cmp	r4, #48	@ 0x30
 800bd0a:	d12c      	bne.n	800bd66 <_strtoul_l.constprop.0+0x86>
 800bd0c:	7828      	ldrb	r0, [r5, #0]
 800bd0e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800bd12:	2858      	cmp	r0, #88	@ 0x58
 800bd14:	d127      	bne.n	800bd66 <_strtoul_l.constprop.0+0x86>
 800bd16:	786c      	ldrb	r4, [r5, #1]
 800bd18:	2310      	movs	r3, #16
 800bd1a:	3502      	adds	r5, #2
 800bd1c:	f04f 38ff 	mov.w	r8, #4294967295
 800bd20:	2600      	movs	r6, #0
 800bd22:	fbb8 f8f3 	udiv	r8, r8, r3
 800bd26:	fb03 f908 	mul.w	r9, r3, r8
 800bd2a:	ea6f 0909 	mvn.w	r9, r9
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800bd34:	f1bc 0f09 	cmp.w	ip, #9
 800bd38:	d81c      	bhi.n	800bd74 <_strtoul_l.constprop.0+0x94>
 800bd3a:	4664      	mov	r4, ip
 800bd3c:	42a3      	cmp	r3, r4
 800bd3e:	dd2a      	ble.n	800bd96 <_strtoul_l.constprop.0+0xb6>
 800bd40:	f1b6 3fff 	cmp.w	r6, #4294967295
 800bd44:	d007      	beq.n	800bd56 <_strtoul_l.constprop.0+0x76>
 800bd46:	4580      	cmp	r8, r0
 800bd48:	d322      	bcc.n	800bd90 <_strtoul_l.constprop.0+0xb0>
 800bd4a:	d101      	bne.n	800bd50 <_strtoul_l.constprop.0+0x70>
 800bd4c:	45a1      	cmp	r9, r4
 800bd4e:	db1f      	blt.n	800bd90 <_strtoul_l.constprop.0+0xb0>
 800bd50:	fb00 4003 	mla	r0, r0, r3, r4
 800bd54:	2601      	movs	r6, #1
 800bd56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd5a:	e7e9      	b.n	800bd30 <_strtoul_l.constprop.0+0x50>
 800bd5c:	2c2b      	cmp	r4, #43	@ 0x2b
 800bd5e:	bf04      	itt	eq
 800bd60:	782c      	ldrbeq	r4, [r5, #0]
 800bd62:	1c85      	addeq	r5, r0, #2
 800bd64:	e7cd      	b.n	800bd02 <_strtoul_l.constprop.0+0x22>
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1d8      	bne.n	800bd1c <_strtoul_l.constprop.0+0x3c>
 800bd6a:	2c30      	cmp	r4, #48	@ 0x30
 800bd6c:	bf0c      	ite	eq
 800bd6e:	2308      	moveq	r3, #8
 800bd70:	230a      	movne	r3, #10
 800bd72:	e7d3      	b.n	800bd1c <_strtoul_l.constprop.0+0x3c>
 800bd74:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800bd78:	f1bc 0f19 	cmp.w	ip, #25
 800bd7c:	d801      	bhi.n	800bd82 <_strtoul_l.constprop.0+0xa2>
 800bd7e:	3c37      	subs	r4, #55	@ 0x37
 800bd80:	e7dc      	b.n	800bd3c <_strtoul_l.constprop.0+0x5c>
 800bd82:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800bd86:	f1bc 0f19 	cmp.w	ip, #25
 800bd8a:	d804      	bhi.n	800bd96 <_strtoul_l.constprop.0+0xb6>
 800bd8c:	3c57      	subs	r4, #87	@ 0x57
 800bd8e:	e7d5      	b.n	800bd3c <_strtoul_l.constprop.0+0x5c>
 800bd90:	f04f 36ff 	mov.w	r6, #4294967295
 800bd94:	e7df      	b.n	800bd56 <_strtoul_l.constprop.0+0x76>
 800bd96:	1c73      	adds	r3, r6, #1
 800bd98:	d106      	bne.n	800bda8 <_strtoul_l.constprop.0+0xc8>
 800bd9a:	2322      	movs	r3, #34	@ 0x22
 800bd9c:	f8ce 3000 	str.w	r3, [lr]
 800bda0:	4630      	mov	r0, r6
 800bda2:	b932      	cbnz	r2, 800bdb2 <_strtoul_l.constprop.0+0xd2>
 800bda4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bda8:	b107      	cbz	r7, 800bdac <_strtoul_l.constprop.0+0xcc>
 800bdaa:	4240      	negs	r0, r0
 800bdac:	2a00      	cmp	r2, #0
 800bdae:	d0f9      	beq.n	800bda4 <_strtoul_l.constprop.0+0xc4>
 800bdb0:	b106      	cbz	r6, 800bdb4 <_strtoul_l.constprop.0+0xd4>
 800bdb2:	1e69      	subs	r1, r5, #1
 800bdb4:	6011      	str	r1, [r2, #0]
 800bdb6:	e7f5      	b.n	800bda4 <_strtoul_l.constprop.0+0xc4>
 800bdb8:	08017e59 	.word	0x08017e59

0800bdbc <_strtoul_r>:
 800bdbc:	f7ff bf90 	b.w	800bce0 <_strtoul_l.constprop.0>

0800bdc0 <fiprintf>:
 800bdc0:	b40e      	push	{r1, r2, r3}
 800bdc2:	b503      	push	{r0, r1, lr}
 800bdc4:	4601      	mov	r1, r0
 800bdc6:	ab03      	add	r3, sp, #12
 800bdc8:	4805      	ldr	r0, [pc, #20]	@ (800bde0 <fiprintf+0x20>)
 800bdca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdce:	6800      	ldr	r0, [r0, #0]
 800bdd0:	9301      	str	r3, [sp, #4]
 800bdd2:	f000 f837 	bl	800be44 <_vfiprintf_r>
 800bdd6:	b002      	add	sp, #8
 800bdd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bddc:	b003      	add	sp, #12
 800bdde:	4770      	bx	lr
 800bde0:	200009c8 	.word	0x200009c8

0800bde4 <abort>:
 800bde4:	b508      	push	{r3, lr}
 800bde6:	2006      	movs	r0, #6
 800bde8:	f000 fa00 	bl	800c1ec <raise>
 800bdec:	2001      	movs	r0, #1
 800bdee:	f7f9 ff5f 	bl	8005cb0 <_exit>

0800bdf2 <__sfputc_r>:
 800bdf2:	6893      	ldr	r3, [r2, #8]
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	b410      	push	{r4}
 800bdfa:	6093      	str	r3, [r2, #8]
 800bdfc:	da08      	bge.n	800be10 <__sfputc_r+0x1e>
 800bdfe:	6994      	ldr	r4, [r2, #24]
 800be00:	42a3      	cmp	r3, r4
 800be02:	db01      	blt.n	800be08 <__sfputc_r+0x16>
 800be04:	290a      	cmp	r1, #10
 800be06:	d103      	bne.n	800be10 <__sfputc_r+0x1e>
 800be08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be0c:	f000 b932 	b.w	800c074 <__swbuf_r>
 800be10:	6813      	ldr	r3, [r2, #0]
 800be12:	1c58      	adds	r0, r3, #1
 800be14:	6010      	str	r0, [r2, #0]
 800be16:	7019      	strb	r1, [r3, #0]
 800be18:	4608      	mov	r0, r1
 800be1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <__sfputs_r>:
 800be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be22:	4606      	mov	r6, r0
 800be24:	460f      	mov	r7, r1
 800be26:	4614      	mov	r4, r2
 800be28:	18d5      	adds	r5, r2, r3
 800be2a:	42ac      	cmp	r4, r5
 800be2c:	d101      	bne.n	800be32 <__sfputs_r+0x12>
 800be2e:	2000      	movs	r0, #0
 800be30:	e007      	b.n	800be42 <__sfputs_r+0x22>
 800be32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be36:	463a      	mov	r2, r7
 800be38:	4630      	mov	r0, r6
 800be3a:	f7ff ffda 	bl	800bdf2 <__sfputc_r>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	d1f3      	bne.n	800be2a <__sfputs_r+0xa>
 800be42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be44 <_vfiprintf_r>:
 800be44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be48:	460d      	mov	r5, r1
 800be4a:	b09d      	sub	sp, #116	@ 0x74
 800be4c:	4614      	mov	r4, r2
 800be4e:	4698      	mov	r8, r3
 800be50:	4606      	mov	r6, r0
 800be52:	b118      	cbz	r0, 800be5c <_vfiprintf_r+0x18>
 800be54:	6a03      	ldr	r3, [r0, #32]
 800be56:	b90b      	cbnz	r3, 800be5c <_vfiprintf_r+0x18>
 800be58:	f7fd fd4e 	bl	80098f8 <__sinit>
 800be5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be5e:	07d9      	lsls	r1, r3, #31
 800be60:	d405      	bmi.n	800be6e <_vfiprintf_r+0x2a>
 800be62:	89ab      	ldrh	r3, [r5, #12]
 800be64:	059a      	lsls	r2, r3, #22
 800be66:	d402      	bmi.n	800be6e <_vfiprintf_r+0x2a>
 800be68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be6a:	f7fd feda 	bl	8009c22 <__retarget_lock_acquire_recursive>
 800be6e:	89ab      	ldrh	r3, [r5, #12]
 800be70:	071b      	lsls	r3, r3, #28
 800be72:	d501      	bpl.n	800be78 <_vfiprintf_r+0x34>
 800be74:	692b      	ldr	r3, [r5, #16]
 800be76:	b99b      	cbnz	r3, 800bea0 <_vfiprintf_r+0x5c>
 800be78:	4629      	mov	r1, r5
 800be7a:	4630      	mov	r0, r6
 800be7c:	f000 f938 	bl	800c0f0 <__swsetup_r>
 800be80:	b170      	cbz	r0, 800bea0 <_vfiprintf_r+0x5c>
 800be82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be84:	07dc      	lsls	r4, r3, #31
 800be86:	d504      	bpl.n	800be92 <_vfiprintf_r+0x4e>
 800be88:	f04f 30ff 	mov.w	r0, #4294967295
 800be8c:	b01d      	add	sp, #116	@ 0x74
 800be8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be92:	89ab      	ldrh	r3, [r5, #12]
 800be94:	0598      	lsls	r0, r3, #22
 800be96:	d4f7      	bmi.n	800be88 <_vfiprintf_r+0x44>
 800be98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be9a:	f7fd fec3 	bl	8009c24 <__retarget_lock_release_recursive>
 800be9e:	e7f3      	b.n	800be88 <_vfiprintf_r+0x44>
 800bea0:	2300      	movs	r3, #0
 800bea2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bea4:	2320      	movs	r3, #32
 800bea6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800beaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800beae:	2330      	movs	r3, #48	@ 0x30
 800beb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c060 <_vfiprintf_r+0x21c>
 800beb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800beb8:	f04f 0901 	mov.w	r9, #1
 800bebc:	4623      	mov	r3, r4
 800bebe:	469a      	mov	sl, r3
 800bec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bec4:	b10a      	cbz	r2, 800beca <_vfiprintf_r+0x86>
 800bec6:	2a25      	cmp	r2, #37	@ 0x25
 800bec8:	d1f9      	bne.n	800bebe <_vfiprintf_r+0x7a>
 800beca:	ebba 0b04 	subs.w	fp, sl, r4
 800bece:	d00b      	beq.n	800bee8 <_vfiprintf_r+0xa4>
 800bed0:	465b      	mov	r3, fp
 800bed2:	4622      	mov	r2, r4
 800bed4:	4629      	mov	r1, r5
 800bed6:	4630      	mov	r0, r6
 800bed8:	f7ff ffa2 	bl	800be20 <__sfputs_r>
 800bedc:	3001      	adds	r0, #1
 800bede:	f000 80a7 	beq.w	800c030 <_vfiprintf_r+0x1ec>
 800bee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bee4:	445a      	add	r2, fp
 800bee6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bee8:	f89a 3000 	ldrb.w	r3, [sl]
 800beec:	2b00      	cmp	r3, #0
 800beee:	f000 809f 	beq.w	800c030 <_vfiprintf_r+0x1ec>
 800bef2:	2300      	movs	r3, #0
 800bef4:	f04f 32ff 	mov.w	r2, #4294967295
 800bef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800befc:	f10a 0a01 	add.w	sl, sl, #1
 800bf00:	9304      	str	r3, [sp, #16]
 800bf02:	9307      	str	r3, [sp, #28]
 800bf04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf08:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf0a:	4654      	mov	r4, sl
 800bf0c:	2205      	movs	r2, #5
 800bf0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf12:	4853      	ldr	r0, [pc, #332]	@ (800c060 <_vfiprintf_r+0x21c>)
 800bf14:	f7f4 f974 	bl	8000200 <memchr>
 800bf18:	9a04      	ldr	r2, [sp, #16]
 800bf1a:	b9d8      	cbnz	r0, 800bf54 <_vfiprintf_r+0x110>
 800bf1c:	06d1      	lsls	r1, r2, #27
 800bf1e:	bf44      	itt	mi
 800bf20:	2320      	movmi	r3, #32
 800bf22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf26:	0713      	lsls	r3, r2, #28
 800bf28:	bf44      	itt	mi
 800bf2a:	232b      	movmi	r3, #43	@ 0x2b
 800bf2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf30:	f89a 3000 	ldrb.w	r3, [sl]
 800bf34:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf36:	d015      	beq.n	800bf64 <_vfiprintf_r+0x120>
 800bf38:	9a07      	ldr	r2, [sp, #28]
 800bf3a:	4654      	mov	r4, sl
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	f04f 0c0a 	mov.w	ip, #10
 800bf42:	4621      	mov	r1, r4
 800bf44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf48:	3b30      	subs	r3, #48	@ 0x30
 800bf4a:	2b09      	cmp	r3, #9
 800bf4c:	d94b      	bls.n	800bfe6 <_vfiprintf_r+0x1a2>
 800bf4e:	b1b0      	cbz	r0, 800bf7e <_vfiprintf_r+0x13a>
 800bf50:	9207      	str	r2, [sp, #28]
 800bf52:	e014      	b.n	800bf7e <_vfiprintf_r+0x13a>
 800bf54:	eba0 0308 	sub.w	r3, r0, r8
 800bf58:	fa09 f303 	lsl.w	r3, r9, r3
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	9304      	str	r3, [sp, #16]
 800bf60:	46a2      	mov	sl, r4
 800bf62:	e7d2      	b.n	800bf0a <_vfiprintf_r+0xc6>
 800bf64:	9b03      	ldr	r3, [sp, #12]
 800bf66:	1d19      	adds	r1, r3, #4
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	9103      	str	r1, [sp, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	bfbb      	ittet	lt
 800bf70:	425b      	neglt	r3, r3
 800bf72:	f042 0202 	orrlt.w	r2, r2, #2
 800bf76:	9307      	strge	r3, [sp, #28]
 800bf78:	9307      	strlt	r3, [sp, #28]
 800bf7a:	bfb8      	it	lt
 800bf7c:	9204      	strlt	r2, [sp, #16]
 800bf7e:	7823      	ldrb	r3, [r4, #0]
 800bf80:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf82:	d10a      	bne.n	800bf9a <_vfiprintf_r+0x156>
 800bf84:	7863      	ldrb	r3, [r4, #1]
 800bf86:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf88:	d132      	bne.n	800bff0 <_vfiprintf_r+0x1ac>
 800bf8a:	9b03      	ldr	r3, [sp, #12]
 800bf8c:	1d1a      	adds	r2, r3, #4
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	9203      	str	r2, [sp, #12]
 800bf92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf96:	3402      	adds	r4, #2
 800bf98:	9305      	str	r3, [sp, #20]
 800bf9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c070 <_vfiprintf_r+0x22c>
 800bf9e:	7821      	ldrb	r1, [r4, #0]
 800bfa0:	2203      	movs	r2, #3
 800bfa2:	4650      	mov	r0, sl
 800bfa4:	f7f4 f92c 	bl	8000200 <memchr>
 800bfa8:	b138      	cbz	r0, 800bfba <_vfiprintf_r+0x176>
 800bfaa:	9b04      	ldr	r3, [sp, #16]
 800bfac:	eba0 000a 	sub.w	r0, r0, sl
 800bfb0:	2240      	movs	r2, #64	@ 0x40
 800bfb2:	4082      	lsls	r2, r0
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	3401      	adds	r4, #1
 800bfb8:	9304      	str	r3, [sp, #16]
 800bfba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfbe:	4829      	ldr	r0, [pc, #164]	@ (800c064 <_vfiprintf_r+0x220>)
 800bfc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfc4:	2206      	movs	r2, #6
 800bfc6:	f7f4 f91b 	bl	8000200 <memchr>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d03f      	beq.n	800c04e <_vfiprintf_r+0x20a>
 800bfce:	4b26      	ldr	r3, [pc, #152]	@ (800c068 <_vfiprintf_r+0x224>)
 800bfd0:	bb1b      	cbnz	r3, 800c01a <_vfiprintf_r+0x1d6>
 800bfd2:	9b03      	ldr	r3, [sp, #12]
 800bfd4:	3307      	adds	r3, #7
 800bfd6:	f023 0307 	bic.w	r3, r3, #7
 800bfda:	3308      	adds	r3, #8
 800bfdc:	9303      	str	r3, [sp, #12]
 800bfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe0:	443b      	add	r3, r7
 800bfe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfe4:	e76a      	b.n	800bebc <_vfiprintf_r+0x78>
 800bfe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfea:	460c      	mov	r4, r1
 800bfec:	2001      	movs	r0, #1
 800bfee:	e7a8      	b.n	800bf42 <_vfiprintf_r+0xfe>
 800bff0:	2300      	movs	r3, #0
 800bff2:	3401      	adds	r4, #1
 800bff4:	9305      	str	r3, [sp, #20]
 800bff6:	4619      	mov	r1, r3
 800bff8:	f04f 0c0a 	mov.w	ip, #10
 800bffc:	4620      	mov	r0, r4
 800bffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c002:	3a30      	subs	r2, #48	@ 0x30
 800c004:	2a09      	cmp	r2, #9
 800c006:	d903      	bls.n	800c010 <_vfiprintf_r+0x1cc>
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d0c6      	beq.n	800bf9a <_vfiprintf_r+0x156>
 800c00c:	9105      	str	r1, [sp, #20]
 800c00e:	e7c4      	b.n	800bf9a <_vfiprintf_r+0x156>
 800c010:	fb0c 2101 	mla	r1, ip, r1, r2
 800c014:	4604      	mov	r4, r0
 800c016:	2301      	movs	r3, #1
 800c018:	e7f0      	b.n	800bffc <_vfiprintf_r+0x1b8>
 800c01a:	ab03      	add	r3, sp, #12
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	462a      	mov	r2, r5
 800c020:	4b12      	ldr	r3, [pc, #72]	@ (800c06c <_vfiprintf_r+0x228>)
 800c022:	a904      	add	r1, sp, #16
 800c024:	4630      	mov	r0, r6
 800c026:	f3af 8000 	nop.w
 800c02a:	4607      	mov	r7, r0
 800c02c:	1c78      	adds	r0, r7, #1
 800c02e:	d1d6      	bne.n	800bfde <_vfiprintf_r+0x19a>
 800c030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c032:	07d9      	lsls	r1, r3, #31
 800c034:	d405      	bmi.n	800c042 <_vfiprintf_r+0x1fe>
 800c036:	89ab      	ldrh	r3, [r5, #12]
 800c038:	059a      	lsls	r2, r3, #22
 800c03a:	d402      	bmi.n	800c042 <_vfiprintf_r+0x1fe>
 800c03c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c03e:	f7fd fdf1 	bl	8009c24 <__retarget_lock_release_recursive>
 800c042:	89ab      	ldrh	r3, [r5, #12]
 800c044:	065b      	lsls	r3, r3, #25
 800c046:	f53f af1f 	bmi.w	800be88 <_vfiprintf_r+0x44>
 800c04a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c04c:	e71e      	b.n	800be8c <_vfiprintf_r+0x48>
 800c04e:	ab03      	add	r3, sp, #12
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	462a      	mov	r2, r5
 800c054:	4b05      	ldr	r3, [pc, #20]	@ (800c06c <_vfiprintf_r+0x228>)
 800c056:	a904      	add	r1, sp, #16
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff f9eb 	bl	800b434 <_printf_i>
 800c05e:	e7e4      	b.n	800c02a <_vfiprintf_r+0x1e6>
 800c060:	08018140 	.word	0x08018140
 800c064:	0801814a 	.word	0x0801814a
 800c068:	00000000 	.word	0x00000000
 800c06c:	0800be21 	.word	0x0800be21
 800c070:	08018146 	.word	0x08018146

0800c074 <__swbuf_r>:
 800c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c076:	460e      	mov	r6, r1
 800c078:	4614      	mov	r4, r2
 800c07a:	4605      	mov	r5, r0
 800c07c:	b118      	cbz	r0, 800c086 <__swbuf_r+0x12>
 800c07e:	6a03      	ldr	r3, [r0, #32]
 800c080:	b90b      	cbnz	r3, 800c086 <__swbuf_r+0x12>
 800c082:	f7fd fc39 	bl	80098f8 <__sinit>
 800c086:	69a3      	ldr	r3, [r4, #24]
 800c088:	60a3      	str	r3, [r4, #8]
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	071a      	lsls	r2, r3, #28
 800c08e:	d501      	bpl.n	800c094 <__swbuf_r+0x20>
 800c090:	6923      	ldr	r3, [r4, #16]
 800c092:	b943      	cbnz	r3, 800c0a6 <__swbuf_r+0x32>
 800c094:	4621      	mov	r1, r4
 800c096:	4628      	mov	r0, r5
 800c098:	f000 f82a 	bl	800c0f0 <__swsetup_r>
 800c09c:	b118      	cbz	r0, 800c0a6 <__swbuf_r+0x32>
 800c09e:	f04f 37ff 	mov.w	r7, #4294967295
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	6922      	ldr	r2, [r4, #16]
 800c0aa:	1a98      	subs	r0, r3, r2
 800c0ac:	6963      	ldr	r3, [r4, #20]
 800c0ae:	b2f6      	uxtb	r6, r6
 800c0b0:	4283      	cmp	r3, r0
 800c0b2:	4637      	mov	r7, r6
 800c0b4:	dc05      	bgt.n	800c0c2 <__swbuf_r+0x4e>
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	f7ff fcad 	bl	800ba18 <_fflush_r>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d1ed      	bne.n	800c09e <__swbuf_r+0x2a>
 800c0c2:	68a3      	ldr	r3, [r4, #8]
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	60a3      	str	r3, [r4, #8]
 800c0c8:	6823      	ldr	r3, [r4, #0]
 800c0ca:	1c5a      	adds	r2, r3, #1
 800c0cc:	6022      	str	r2, [r4, #0]
 800c0ce:	701e      	strb	r6, [r3, #0]
 800c0d0:	6962      	ldr	r2, [r4, #20]
 800c0d2:	1c43      	adds	r3, r0, #1
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d004      	beq.n	800c0e2 <__swbuf_r+0x6e>
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	07db      	lsls	r3, r3, #31
 800c0dc:	d5e1      	bpl.n	800c0a2 <__swbuf_r+0x2e>
 800c0de:	2e0a      	cmp	r6, #10
 800c0e0:	d1df      	bne.n	800c0a2 <__swbuf_r+0x2e>
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f7ff fc97 	bl	800ba18 <_fflush_r>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d0d9      	beq.n	800c0a2 <__swbuf_r+0x2e>
 800c0ee:	e7d6      	b.n	800c09e <__swbuf_r+0x2a>

0800c0f0 <__swsetup_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4b29      	ldr	r3, [pc, #164]	@ (800c198 <__swsetup_r+0xa8>)
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	6818      	ldr	r0, [r3, #0]
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	b118      	cbz	r0, 800c104 <__swsetup_r+0x14>
 800c0fc:	6a03      	ldr	r3, [r0, #32]
 800c0fe:	b90b      	cbnz	r3, 800c104 <__swsetup_r+0x14>
 800c100:	f7fd fbfa 	bl	80098f8 <__sinit>
 800c104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c108:	0719      	lsls	r1, r3, #28
 800c10a:	d422      	bmi.n	800c152 <__swsetup_r+0x62>
 800c10c:	06da      	lsls	r2, r3, #27
 800c10e:	d407      	bmi.n	800c120 <__swsetup_r+0x30>
 800c110:	2209      	movs	r2, #9
 800c112:	602a      	str	r2, [r5, #0]
 800c114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c118:	81a3      	strh	r3, [r4, #12]
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295
 800c11e:	e033      	b.n	800c188 <__swsetup_r+0x98>
 800c120:	0758      	lsls	r0, r3, #29
 800c122:	d512      	bpl.n	800c14a <__swsetup_r+0x5a>
 800c124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c126:	b141      	cbz	r1, 800c13a <__swsetup_r+0x4a>
 800c128:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c12c:	4299      	cmp	r1, r3
 800c12e:	d002      	beq.n	800c136 <__swsetup_r+0x46>
 800c130:	4628      	mov	r0, r5
 800c132:	f7fd fd91 	bl	8009c58 <_free_r>
 800c136:	2300      	movs	r3, #0
 800c138:	6363      	str	r3, [r4, #52]	@ 0x34
 800c13a:	89a3      	ldrh	r3, [r4, #12]
 800c13c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c140:	81a3      	strh	r3, [r4, #12]
 800c142:	2300      	movs	r3, #0
 800c144:	6063      	str	r3, [r4, #4]
 800c146:	6923      	ldr	r3, [r4, #16]
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	89a3      	ldrh	r3, [r4, #12]
 800c14c:	f043 0308 	orr.w	r3, r3, #8
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	b94b      	cbnz	r3, 800c16a <__swsetup_r+0x7a>
 800c156:	89a3      	ldrh	r3, [r4, #12]
 800c158:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c15c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c160:	d003      	beq.n	800c16a <__swsetup_r+0x7a>
 800c162:	4621      	mov	r1, r4
 800c164:	4628      	mov	r0, r5
 800c166:	f000 f883 	bl	800c270 <__smakebuf_r>
 800c16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c16e:	f013 0201 	ands.w	r2, r3, #1
 800c172:	d00a      	beq.n	800c18a <__swsetup_r+0x9a>
 800c174:	2200      	movs	r2, #0
 800c176:	60a2      	str	r2, [r4, #8]
 800c178:	6962      	ldr	r2, [r4, #20]
 800c17a:	4252      	negs	r2, r2
 800c17c:	61a2      	str	r2, [r4, #24]
 800c17e:	6922      	ldr	r2, [r4, #16]
 800c180:	b942      	cbnz	r2, 800c194 <__swsetup_r+0xa4>
 800c182:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c186:	d1c5      	bne.n	800c114 <__swsetup_r+0x24>
 800c188:	bd38      	pop	{r3, r4, r5, pc}
 800c18a:	0799      	lsls	r1, r3, #30
 800c18c:	bf58      	it	pl
 800c18e:	6962      	ldrpl	r2, [r4, #20]
 800c190:	60a2      	str	r2, [r4, #8]
 800c192:	e7f4      	b.n	800c17e <__swsetup_r+0x8e>
 800c194:	2000      	movs	r0, #0
 800c196:	e7f7      	b.n	800c188 <__swsetup_r+0x98>
 800c198:	200009c8 	.word	0x200009c8

0800c19c <_raise_r>:
 800c19c:	291f      	cmp	r1, #31
 800c19e:	b538      	push	{r3, r4, r5, lr}
 800c1a0:	4605      	mov	r5, r0
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	d904      	bls.n	800c1b0 <_raise_r+0x14>
 800c1a6:	2316      	movs	r3, #22
 800c1a8:	6003      	str	r3, [r0, #0]
 800c1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ae:	bd38      	pop	{r3, r4, r5, pc}
 800c1b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c1b2:	b112      	cbz	r2, 800c1ba <_raise_r+0x1e>
 800c1b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1b8:	b94b      	cbnz	r3, 800c1ce <_raise_r+0x32>
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f000 f830 	bl	800c220 <_getpid_r>
 800c1c0:	4622      	mov	r2, r4
 800c1c2:	4601      	mov	r1, r0
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1ca:	f000 b817 	b.w	800c1fc <_kill_r>
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d00a      	beq.n	800c1e8 <_raise_r+0x4c>
 800c1d2:	1c59      	adds	r1, r3, #1
 800c1d4:	d103      	bne.n	800c1de <_raise_r+0x42>
 800c1d6:	2316      	movs	r3, #22
 800c1d8:	6003      	str	r3, [r0, #0]
 800c1da:	2001      	movs	r0, #1
 800c1dc:	e7e7      	b.n	800c1ae <_raise_r+0x12>
 800c1de:	2100      	movs	r1, #0
 800c1e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	4798      	blx	r3
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	e7e0      	b.n	800c1ae <_raise_r+0x12>

0800c1ec <raise>:
 800c1ec:	4b02      	ldr	r3, [pc, #8]	@ (800c1f8 <raise+0xc>)
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	6818      	ldr	r0, [r3, #0]
 800c1f2:	f7ff bfd3 	b.w	800c19c <_raise_r>
 800c1f6:	bf00      	nop
 800c1f8:	200009c8 	.word	0x200009c8

0800c1fc <_kill_r>:
 800c1fc:	b538      	push	{r3, r4, r5, lr}
 800c1fe:	4d07      	ldr	r5, [pc, #28]	@ (800c21c <_kill_r+0x20>)
 800c200:	2300      	movs	r3, #0
 800c202:	4604      	mov	r4, r0
 800c204:	4608      	mov	r0, r1
 800c206:	4611      	mov	r1, r2
 800c208:	602b      	str	r3, [r5, #0]
 800c20a:	f7f9 fd41 	bl	8005c90 <_kill>
 800c20e:	1c43      	adds	r3, r0, #1
 800c210:	d102      	bne.n	800c218 <_kill_r+0x1c>
 800c212:	682b      	ldr	r3, [r5, #0]
 800c214:	b103      	cbz	r3, 800c218 <_kill_r+0x1c>
 800c216:	6023      	str	r3, [r4, #0]
 800c218:	bd38      	pop	{r3, r4, r5, pc}
 800c21a:	bf00      	nop
 800c21c:	20000df8 	.word	0x20000df8

0800c220 <_getpid_r>:
 800c220:	f7f9 bd2e 	b.w	8005c80 <_getpid>

0800c224 <__swhatbuf_r>:
 800c224:	b570      	push	{r4, r5, r6, lr}
 800c226:	460c      	mov	r4, r1
 800c228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c22c:	2900      	cmp	r1, #0
 800c22e:	b096      	sub	sp, #88	@ 0x58
 800c230:	4615      	mov	r5, r2
 800c232:	461e      	mov	r6, r3
 800c234:	da0d      	bge.n	800c252 <__swhatbuf_r+0x2e>
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c23c:	f04f 0100 	mov.w	r1, #0
 800c240:	bf14      	ite	ne
 800c242:	2340      	movne	r3, #64	@ 0x40
 800c244:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c248:	2000      	movs	r0, #0
 800c24a:	6031      	str	r1, [r6, #0]
 800c24c:	602b      	str	r3, [r5, #0]
 800c24e:	b016      	add	sp, #88	@ 0x58
 800c250:	bd70      	pop	{r4, r5, r6, pc}
 800c252:	466a      	mov	r2, sp
 800c254:	f000 f848 	bl	800c2e8 <_fstat_r>
 800c258:	2800      	cmp	r0, #0
 800c25a:	dbec      	blt.n	800c236 <__swhatbuf_r+0x12>
 800c25c:	9901      	ldr	r1, [sp, #4]
 800c25e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c262:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c266:	4259      	negs	r1, r3
 800c268:	4159      	adcs	r1, r3
 800c26a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c26e:	e7eb      	b.n	800c248 <__swhatbuf_r+0x24>

0800c270 <__smakebuf_r>:
 800c270:	898b      	ldrh	r3, [r1, #12]
 800c272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c274:	079d      	lsls	r5, r3, #30
 800c276:	4606      	mov	r6, r0
 800c278:	460c      	mov	r4, r1
 800c27a:	d507      	bpl.n	800c28c <__smakebuf_r+0x1c>
 800c27c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	6123      	str	r3, [r4, #16]
 800c284:	2301      	movs	r3, #1
 800c286:	6163      	str	r3, [r4, #20]
 800c288:	b003      	add	sp, #12
 800c28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c28c:	ab01      	add	r3, sp, #4
 800c28e:	466a      	mov	r2, sp
 800c290:	f7ff ffc8 	bl	800c224 <__swhatbuf_r>
 800c294:	9f00      	ldr	r7, [sp, #0]
 800c296:	4605      	mov	r5, r0
 800c298:	4639      	mov	r1, r7
 800c29a:	4630      	mov	r0, r6
 800c29c:	f7fc fbce 	bl	8008a3c <_malloc_r>
 800c2a0:	b948      	cbnz	r0, 800c2b6 <__smakebuf_r+0x46>
 800c2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2a6:	059a      	lsls	r2, r3, #22
 800c2a8:	d4ee      	bmi.n	800c288 <__smakebuf_r+0x18>
 800c2aa:	f023 0303 	bic.w	r3, r3, #3
 800c2ae:	f043 0302 	orr.w	r3, r3, #2
 800c2b2:	81a3      	strh	r3, [r4, #12]
 800c2b4:	e7e2      	b.n	800c27c <__smakebuf_r+0xc>
 800c2b6:	89a3      	ldrh	r3, [r4, #12]
 800c2b8:	6020      	str	r0, [r4, #0]
 800c2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2be:	81a3      	strh	r3, [r4, #12]
 800c2c0:	9b01      	ldr	r3, [sp, #4]
 800c2c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c2c6:	b15b      	cbz	r3, 800c2e0 <__smakebuf_r+0x70>
 800c2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f000 f81d 	bl	800c30c <_isatty_r>
 800c2d2:	b128      	cbz	r0, 800c2e0 <__smakebuf_r+0x70>
 800c2d4:	89a3      	ldrh	r3, [r4, #12]
 800c2d6:	f023 0303 	bic.w	r3, r3, #3
 800c2da:	f043 0301 	orr.w	r3, r3, #1
 800c2de:	81a3      	strh	r3, [r4, #12]
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	431d      	orrs	r5, r3
 800c2e4:	81a5      	strh	r5, [r4, #12]
 800c2e6:	e7cf      	b.n	800c288 <__smakebuf_r+0x18>

0800c2e8 <_fstat_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d07      	ldr	r5, [pc, #28]	@ (800c308 <_fstat_r+0x20>)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	602b      	str	r3, [r5, #0]
 800c2f6:	f7f9 fd2b 	bl	8005d50 <_fstat>
 800c2fa:	1c43      	adds	r3, r0, #1
 800c2fc:	d102      	bne.n	800c304 <_fstat_r+0x1c>
 800c2fe:	682b      	ldr	r3, [r5, #0]
 800c300:	b103      	cbz	r3, 800c304 <_fstat_r+0x1c>
 800c302:	6023      	str	r3, [r4, #0]
 800c304:	bd38      	pop	{r3, r4, r5, pc}
 800c306:	bf00      	nop
 800c308:	20000df8 	.word	0x20000df8

0800c30c <_isatty_r>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	4d06      	ldr	r5, [pc, #24]	@ (800c328 <_isatty_r+0x1c>)
 800c310:	2300      	movs	r3, #0
 800c312:	4604      	mov	r4, r0
 800c314:	4608      	mov	r0, r1
 800c316:	602b      	str	r3, [r5, #0]
 800c318:	f7f9 fd2a 	bl	8005d70 <_isatty>
 800c31c:	1c43      	adds	r3, r0, #1
 800c31e:	d102      	bne.n	800c326 <_isatty_r+0x1a>
 800c320:	682b      	ldr	r3, [r5, #0]
 800c322:	b103      	cbz	r3, 800c326 <_isatty_r+0x1a>
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	20000df8 	.word	0x20000df8

0800c32c <_init>:
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	bf00      	nop
 800c330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c332:	bc08      	pop	{r3}
 800c334:	469e      	mov	lr, r3
 800c336:	4770      	bx	lr

0800c338 <_fini>:
 800c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33a:	bf00      	nop
 800c33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c33e:	bc08      	pop	{r3}
 800c340:	469e      	mov	lr, r3
 800c342:	4770      	bx	lr
