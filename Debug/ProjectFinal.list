
ProjectFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006158  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011f10  080062e8  080062e8  000072e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080181f8  080181f8  0001a08c  2**0
                  CONTENTS
  4 .ARM          00000008  080181f8  080181f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018200  08018200  0001a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018200  08018200  00019200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018204  08018204  00019204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08018208  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001a08c  2**0
                  CONTENTS
 10 .bss          00000368  2000008c  2000008c  0001a08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003f4  200003f4  0001a08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001a08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f258  00000000  00000000  0001a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002be5  00000000  00000000  00029314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  0002bf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214bf  00000000  00000000  0002cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d55  00000000  00000000  0004e247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caa6e  00000000  00000000  00060f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ba0a  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000a40  00000000  00000000  0012ba4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c5c  00000000  00000000  0012c490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001300ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062d0 	.word	0x080062d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	080062d0 	.word	0x080062d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8000566:	2300      	movs	r3, #0
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2301      	movs	r3, #1
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2300      	movs	r3, #0
 8000570:	2200      	movs	r2, #0
 8000572:	2101      	movs	r1, #1
 8000574:	2000      	movs	r0, #0
 8000576:	f001 f877 	bl	8001668 <lcdBuildMemoryAccessControlConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	4bae      	ldr	r3, [pc, #696]	@ (8000838 <lcdInit+0x2d8>)
 8000580:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8000582:	2300      	movs	r3, #0
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	2201      	movs	r2, #1
 800058e:	2100      	movs	r1, #0
 8000590:	2000      	movs	r0, #0
 8000592:	f001 f869 	bl	8001668 <lcdBuildMemoryAccessControlConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	461a      	mov	r2, r3
 800059a:	4ba8      	ldr	r3, [pc, #672]	@ (800083c <lcdInit+0x2dc>)
 800059c:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800059e:	2300      	movs	r3, #0
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2200      	movs	r2, #0
 80005aa:	2100      	movs	r1, #0
 80005ac:	2001      	movs	r0, #1
 80005ae:	f001 f85b 	bl	8001668 <lcdBuildMemoryAccessControlConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	4ba2      	ldr	r3, [pc, #648]	@ (8000840 <lcdInit+0x2e0>)
 80005b8:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80005ba:	2300      	movs	r3, #0
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	2201      	movs	r2, #1
 80005c6:	2101      	movs	r1, #1
 80005c8:	2001      	movs	r0, #1
 80005ca:	f001 f84d 	bl	8001668 <lcdBuildMemoryAccessControlConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b9c      	ldr	r3, [pc, #624]	@ (8000844 <lcdInit+0x2e4>)
 80005d4:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80005d6:	f001 f81d 	bl	8001614 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80005da:	2028      	movs	r0, #40	@ 0x28
 80005dc:	f001 f824 	bl	8001628 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80005e0:	20cf      	movs	r0, #207	@ 0xcf
 80005e2:	f001 f821 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x00);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f001 f82e 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x83);
 80005ec:	2083      	movs	r0, #131	@ 0x83
 80005ee:	f001 f82b 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x30);
 80005f2:	2030      	movs	r0, #48	@ 0x30
 80005f4:	f001 f828 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(0xED);
 80005f8:	20ed      	movs	r0, #237	@ 0xed
 80005fa:	f001 f815 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x64);
 80005fe:	2064      	movs	r0, #100	@ 0x64
 8000600:	f001 f822 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x03);
 8000604:	2003      	movs	r0, #3
 8000606:	f001 f81f 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x12);
 800060a:	2012      	movs	r0, #18
 800060c:	f001 f81c 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x81);
 8000610:	2081      	movs	r0, #129	@ 0x81
 8000612:	f001 f819 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(0xE8);
 8000616:	20e8      	movs	r0, #232	@ 0xe8
 8000618:	f001 f806 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x85);
 800061c:	2085      	movs	r0, #133	@ 0x85
 800061e:	f001 f813 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x01);
 8000622:	2001      	movs	r0, #1
 8000624:	f001 f810 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x79);
 8000628:	2079      	movs	r0, #121	@ 0x79
 800062a:	f001 f80d 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(0xCB);
 800062e:	20cb      	movs	r0, #203	@ 0xcb
 8000630:	f000 fffa 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x39);
 8000634:	2039      	movs	r0, #57	@ 0x39
 8000636:	f001 f807 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x2C);
 800063a:	202c      	movs	r0, #44	@ 0x2c
 800063c:	f001 f804 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x00);
 8000640:	2000      	movs	r0, #0
 8000642:	f001 f801 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x34);
 8000646:	2034      	movs	r0, #52	@ 0x34
 8000648:	f000 fffe 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x02);
 800064c:	2002      	movs	r0, #2
 800064e:	f000 fffb 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(0xF7);
 8000652:	20f7      	movs	r0, #247	@ 0xf7
 8000654:	f000 ffe8 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x20);
 8000658:	2020      	movs	r0, #32
 800065a:	f000 fff5 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(0xEA);
 800065e:	20ea      	movs	r0, #234	@ 0xea
 8000660:	f000 ffe2 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 ffef 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x00);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 ffec 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000670:	20c0      	movs	r0, #192	@ 0xc0
 8000672:	f000 ffd9 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x26);
 8000676:	2026      	movs	r0, #38	@ 0x26
 8000678:	f000 ffe6 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 800067c:	20c1      	movs	r0, #193	@ 0xc1
 800067e:	f000 ffd3 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x11);
 8000682:	2011      	movs	r0, #17
 8000684:	f000 ffe0 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8000688:	20c5      	movs	r0, #197	@ 0xc5
 800068a:	f000 ffcd 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x35);
 800068e:	2035      	movs	r0, #53	@ 0x35
 8000690:	f000 ffda 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x3E);
 8000694:	203e      	movs	r0, #62	@ 0x3e
 8000696:	f000 ffd7 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 800069a:	20c7      	movs	r0, #199	@ 0xc7
 800069c:	f000 ffc4 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0xBE);
 80006a0:	20be      	movs	r0, #190	@ 0xbe
 80006a2:	f000 ffd1 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 80006a6:	2036      	movs	r0, #54	@ 0x36
 80006a8:	f000 ffbe 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 80006ac:	4b62      	ldr	r3, [pc, #392]	@ (8000838 <lcdInit+0x2d8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 ffc9 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 80006b6:	203a      	movs	r0, #58	@ 0x3a
 80006b8:	f000 ffb6 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x55);
 80006bc:	2055      	movs	r0, #85	@ 0x55
 80006be:	f000 ffc3 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80006c2:	20b1      	movs	r0, #177	@ 0xb1
 80006c4:	f000 ffb0 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x00);
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 ffbd 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x1B);
 80006ce:	201b      	movs	r0, #27
 80006d0:	f000 ffba 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(0xF2);
 80006d4:	20f2      	movs	r0, #242	@ 0xf2
 80006d6:	f000 ffa7 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x08);
 80006da:	2008      	movs	r0, #8
 80006dc:	f000 ffb4 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80006e0:	2026      	movs	r0, #38	@ 0x26
 80006e2:	f000 ffa1 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x01);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 ffae 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80006ec:	20e0      	movs	r0, #224	@ 0xe0
 80006ee:	f000 ff9b 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80006f2:	201f      	movs	r0, #31
 80006f4:	f000 ffa8 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x1A);
 80006f8:	201a      	movs	r0, #26
 80006fa:	f000 ffa5 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x18);
 80006fe:	2018      	movs	r0, #24
 8000700:	f000 ffa2 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x0A);
 8000704:	200a      	movs	r0, #10
 8000706:	f000 ff9f 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x0F);
 800070a:	200f      	movs	r0, #15
 800070c:	f000 ff9c 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x06);
 8000710:	2006      	movs	r0, #6
 8000712:	f000 ff99 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x45);
 8000716:	2045      	movs	r0, #69	@ 0x45
 8000718:	f000 ff96 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x87);
 800071c:	2087      	movs	r0, #135	@ 0x87
 800071e:	f000 ff93 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x32);
 8000722:	2032      	movs	r0, #50	@ 0x32
 8000724:	f000 ff90 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x0A);
 8000728:	200a      	movs	r0, #10
 800072a:	f000 ff8d 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x07);
 800072e:	2007      	movs	r0, #7
 8000730:	f000 ff8a 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x02);
 8000734:	2002      	movs	r0, #2
 8000736:	f000 ff87 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x07);
 800073a:	2007      	movs	r0, #7
 800073c:	f000 ff84 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x05);
 8000740:	2005      	movs	r0, #5
 8000742:	f000 ff81 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x00);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 ff7e 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 800074c:	20e1      	movs	r0, #225	@ 0xe1
 800074e:	f000 ff6b 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x00);
 8000752:	2000      	movs	r0, #0
 8000754:	f000 ff78 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x25);
 8000758:	2025      	movs	r0, #37	@ 0x25
 800075a:	f000 ff75 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x27);
 800075e:	2027      	movs	r0, #39	@ 0x27
 8000760:	f000 ff72 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x05);
 8000764:	2005      	movs	r0, #5
 8000766:	f000 ff6f 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x10);
 800076a:	2010      	movs	r0, #16
 800076c:	f000 ff6c 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x09);
 8000770:	2009      	movs	r0, #9
 8000772:	f000 ff69 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x3A);
 8000776:	203a      	movs	r0, #58	@ 0x3a
 8000778:	f000 ff66 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x78);
 800077c:	2078      	movs	r0, #120	@ 0x78
 800077e:	f000 ff63 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x4D);
 8000782:	204d      	movs	r0, #77	@ 0x4d
 8000784:	f000 ff60 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x05);
 8000788:	2005      	movs	r0, #5
 800078a:	f000 ff5d 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x18);
 800078e:	2018      	movs	r0, #24
 8000790:	f000 ff5a 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x0D);
 8000794:	200d      	movs	r0, #13
 8000796:	f000 ff57 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x38);
 800079a:	2038      	movs	r0, #56	@ 0x38
 800079c:	f000 ff54 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x3A);
 80007a0:	203a      	movs	r0, #58	@ 0x3a
 80007a2:	f000 ff51 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x1F);
 80007a6:	201f      	movs	r0, #31
 80007a8:	f000 ff4e 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 80007ac:	202a      	movs	r0, #42	@ 0x2a
 80007ae:	f000 ff3b 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x00);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 ff48 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x00);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 ff45 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x00);
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 ff42 	bl	8001648 <lcdWriteData>
  lcdWriteData(0xEF);
 80007c4:	20ef      	movs	r0, #239	@ 0xef
 80007c6:	f000 ff3f 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80007ca:	202b      	movs	r0, #43	@ 0x2b
 80007cc:	f000 ff2c 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x00);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 ff39 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x00);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 ff36 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x01);
 80007dc:	2001      	movs	r0, #1
 80007de:	f000 ff33 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x3F);
 80007e2:	203f      	movs	r0, #63	@ 0x3f
 80007e4:	f000 ff30 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80007e8:	20b7      	movs	r0, #183	@ 0xb7
 80007ea:	f000 ff1d 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x07);
 80007ee:	2007      	movs	r0, #7
 80007f0:	f000 ff2a 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80007f4:	20b6      	movs	r0, #182	@ 0xb6
 80007f6:	f000 ff17 	bl	8001628 <lcdWriteCommand>
  lcdWriteData(0x0A);
 80007fa:	200a      	movs	r0, #10
 80007fc:	f000 ff24 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x82);
 8000800:	2082      	movs	r0, #130	@ 0x82
 8000802:	f000 ff21 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x27);
 8000806:	2027      	movs	r0, #39	@ 0x27
 8000808:	f000 ff1e 	bl	8001648 <lcdWriteData>
  lcdWriteData(0x00);
 800080c:	2000      	movs	r0, #0
 800080e:	f000 ff1b 	bl	8001648 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8000812:	2011      	movs	r0, #17
 8000814:	f000 ff08 	bl	8001628 <lcdWriteCommand>
  HAL_Delay(100);
 8000818:	2064      	movs	r0, #100	@ 0x64
 800081a:	f002 ffdb 	bl	80037d4 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 800081e:	2029      	movs	r0, #41	@ 0x29
 8000820:	f000 ff02 	bl	8001628 <lcdWriteCommand>
  HAL_Delay(100);
 8000824:	2064      	movs	r0, #100	@ 0x64
 8000826:	f002 ffd5 	bl	80037d4 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 800082a:	202c      	movs	r0, #44	@ 0x2c
 800082c:	f000 fefc 	bl	8001628 <lcdWriteCommand>
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000ac 	.word	0x200000ac
 800083c:	200000ad 	.word	0x200000ad
 8000840:	200000ae 	.word	0x200000ae
 8000844:	200000af 	.word	0x200000af

08000848 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <lcdFillRGB+0x50>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	3b01      	subs	r3, #1
 8000858:	b29a      	uxth	r2, r3
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <lcdFillRGB+0x50>)
 800085c:	885b      	ldrh	r3, [r3, #2]
 800085e:	3b01      	subs	r3, #1
 8000860:	b29b      	uxth	r3, r3
 8000862:	2100      	movs	r1, #0
 8000864:	2000      	movs	r0, #0
 8000866:	f000 fe5d 	bl	8001524 <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <lcdFillRGB+0x50>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <lcdFillRGB+0x50>)
 8000872:	885b      	ldrh	r3, [r3, #2]
 8000874:	fb02 f303 	mul.w	r3, r2, r3
 8000878:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 800087a:	e003      	b.n	8000884 <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fee2 	bl	8001648 <lcdWriteData>
  while(dimensions--)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	60fa      	str	r2, [r7, #12]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1f6      	bne.n	800087c <lcdFillRGB+0x34>
  }
}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000018 	.word	0x20000018

0800089c <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	80fb      	strh	r3, [r7, #6]
 80008a6:	460b      	mov	r3, r1
 80008a8:	80bb      	strh	r3, [r7, #4]
 80008aa:	4613      	mov	r3, r2
 80008ac:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <lcdDrawPixel+0x44>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	88fa      	ldrh	r2, [r7, #6]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d20f      	bcs.n	80008d8 <lcdDrawPixel+0x3c>
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <lcdDrawPixel+0x44>)
 80008ba:	885b      	ldrh	r3, [r3, #2]
 80008bc:	88ba      	ldrh	r2, [r7, #4]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d20a      	bcs.n	80008d8 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	88fa      	ldrh	r2, [r7, #6]
 80008c6:	88b9      	ldrh	r1, [r7, #4]
 80008c8:	88f8      	ldrh	r0, [r7, #6]
 80008ca:	f000 fe2b 	bl	8001524 <lcdSetWindow>
    lcdWriteData(color);
 80008ce:	887b      	ldrh	r3, [r7, #2]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 feb9 	bl	8001648 <lcdWriteData>
 80008d6:	e000      	b.n	80008da <lcdDrawPixel+0x3e>
        return;
 80008d8:	bf00      	nop
}
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000018 	.word	0x20000018

080008e4 <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4604      	mov	r4, r0
 80008ec:	4608      	mov	r0, r1
 80008ee:	4611      	mov	r1, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	4623      	mov	r3, r4
 80008f4:	80fb      	strh	r3, [r7, #6]
 80008f6:	4603      	mov	r3, r0
 80008f8:	80bb      	strh	r3, [r7, #4]
 80008fa:	460b      	mov	r3, r1
 80008fc:	807b      	strh	r3, [r7, #2]
 80008fe:	4613      	mov	r3, r2
 8000900:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8000902:	88ba      	ldrh	r2, [r7, #4]
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	429a      	cmp	r2, r3
 8000908:	d205      	bcs.n	8000916 <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	817b      	strh	r3, [r7, #10]
 800090e:	88bb      	ldrh	r3, [r7, #4]
 8000910:	80fb      	strh	r3, [r7, #6]
 8000912:	897b      	ldrh	r3, [r7, #10]
 8000914:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <lcdDrawHLine+0x88>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	88ba      	ldrh	r2, [r7, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	d303      	bcc.n	8000928 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <lcdDrawHLine+0x88>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	3b01      	subs	r3, #1
 8000926:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8000928:	4b10      	ldr	r3, [pc, #64]	@ (800096c <lcdDrawHLine+0x88>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	88fa      	ldrh	r2, [r7, #6]
 800092e:	429a      	cmp	r2, r3
 8000930:	d303      	bcc.n	800093a <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <lcdDrawHLine+0x88>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	3b01      	subs	r3, #1
 8000938:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 800093a:	887b      	ldrh	r3, [r7, #2]
 800093c:	88ba      	ldrh	r2, [r7, #4]
 800093e:	8879      	ldrh	r1, [r7, #2]
 8000940:	88f8      	ldrh	r0, [r7, #6]
 8000942:	f000 fdef 	bl	8001524 <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	e006      	b.n	800095a <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 800094c:	883b      	ldrh	r3, [r7, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fe7a 	bl	8001648 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3301      	adds	r3, #1
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	88bb      	ldrh	r3, [r7, #4]
 800095c:	68fa      	ldr	r2, [r7, #12]
 800095e:	429a      	cmp	r2, r3
 8000960:	ddf4      	ble.n	800094c <lcdDrawHLine+0x68>
	}
}
 8000962:	bf00      	nop
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	20000018 	.word	0x20000018

08000970 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	4604      	mov	r4, r0
 8000978:	4608      	mov	r0, r1
 800097a:	4611      	mov	r1, r2
 800097c:	461a      	mov	r2, r3
 800097e:	4623      	mov	r3, r4
 8000980:	80fb      	strh	r3, [r7, #6]
 8000982:	4603      	mov	r3, r0
 8000984:	80bb      	strh	r3, [r7, #4]
 8000986:	460b      	mov	r3, r1
 8000988:	807b      	strh	r3, [r7, #2]
 800098a:	4613      	mov	r3, r2
 800098c:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 800098e:	887a      	ldrh	r2, [r7, #2]
 8000990:	88bb      	ldrh	r3, [r7, #4]
 8000992:	429a      	cmp	r2, r3
 8000994:	d205      	bcs.n	80009a2 <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8000996:	88bb      	ldrh	r3, [r7, #4]
 8000998:	817b      	strh	r3, [r7, #10]
 800099a:	887b      	ldrh	r3, [r7, #2]
 800099c:	80bb      	strh	r3, [r7, #4]
 800099e:	897b      	ldrh	r3, [r7, #10]
 80009a0:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <lcdDrawVLine+0x9c>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	88fa      	ldrh	r2, [r7, #6]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d303      	bcc.n	80009b4 <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <lcdDrawVLine+0x9c>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <lcdDrawVLine+0x9c>)
 80009b6:	885b      	ldrh	r3, [r3, #2]
 80009b8:	88ba      	ldrh	r2, [r7, #4]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d303      	bcc.n	80009c6 <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <lcdDrawVLine+0x9c>)
 80009c0:	885b      	ldrh	r3, [r3, #2]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <lcdDrawVLine+0x9c>)
 80009c8:	885b      	ldrh	r3, [r3, #2]
 80009ca:	887a      	ldrh	r2, [r7, #2]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d303      	bcc.n	80009d8 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <lcdDrawVLine+0x9c>)
 80009d2:	885b      	ldrh	r3, [r3, #2]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	88fa      	ldrh	r2, [r7, #6]
 80009dc:	88b9      	ldrh	r1, [r7, #4]
 80009de:	88f8      	ldrh	r0, [r7, #6]
 80009e0:	f000 fda0 	bl	8001524 <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 80009e4:	88bb      	ldrh	r3, [r7, #4]
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	e006      	b.n	80009f8 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 80009ea:	883b      	ldrh	r3, [r7, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fe2b 	bl	8001648 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	887b      	ldrh	r3, [r7, #2]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	ddf4      	ble.n	80009ea <lcdDrawVLine+0x7a>
  }
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000018 	.word	0x20000018

08000a10 <lcdDrawLine>:
 * \param color	Color
 *
 * \return void
 */
void lcdDrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b089      	sub	sp, #36	@ 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4604      	mov	r4, r0
 8000a18:	4608      	mov	r0, r1
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4623      	mov	r3, r4
 8000a20:	80fb      	strh	r3, [r7, #6]
 8000a22:	4603      	mov	r3, r0
 8000a24:	80bb      	strh	r3, [r7, #4]
 8000a26:	460b      	mov	r3, r1
 8000a28:	807b      	strh	r3, [r7, #2]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8000a2e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a3c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a40:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bfb8      	it	lt
 8000a4e:	425b      	neglt	r3, r3
 8000a50:	429a      	cmp	r2, r3
 8000a52:	bfcc      	ite	gt
 8000a54:	2301      	movgt	r3, #1
 8000a56:	2300      	movle	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	837b      	strh	r3, [r7, #26]
	if (steep)
 8000a5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00b      	beq.n	8000a7c <lcdDrawLine+0x6c>
	{
		swap(x1, y1);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	833b      	strh	r3, [r7, #24]
 8000a68:	88bb      	ldrh	r3, [r7, #4]
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	8b3b      	ldrh	r3, [r7, #24]
 8000a6e:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8000a70:	887b      	ldrh	r3, [r7, #2]
 8000a72:	82fb      	strh	r3, [r7, #22]
 8000a74:	883b      	ldrh	r3, [r7, #0]
 8000a76:	807b      	strh	r3, [r7, #2]
 8000a78:	8afb      	ldrh	r3, [r7, #22]
 8000a7a:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2)
 8000a7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	dd0b      	ble.n	8000aa0 <lcdDrawLine+0x90>
	{
		swap(x1, x2);
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	82bb      	strh	r3, [r7, #20]
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	80fb      	strh	r3, [r7, #6]
 8000a90:	8abb      	ldrh	r3, [r7, #20]
 8000a92:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8000a94:	88bb      	ldrh	r3, [r7, #4]
 8000a96:	827b      	strh	r3, [r7, #18]
 8000a98:	883b      	ldrh	r3, [r7, #0]
 8000a9a:	80bb      	strh	r3, [r7, #4]
 8000a9c:	8a7b      	ldrh	r3, [r7, #18]
 8000a9e:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8000aa0:	887a      	ldrh	r2, [r7, #2]
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 8000aaa:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000aae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	bfb8      	it	lt
 8000ab8:	425b      	neglt	r3, r3
 8000aba:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8000abc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ac0:	0fda      	lsrs	r2, r3, #31
 8000ac2:	4413      	add	r3, r2
 8000ac4:	105b      	asrs	r3, r3, #1
 8000ac6:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2)
 8000ac8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000acc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	da02      	bge.n	8000ada <lcdDrawLine+0xca>
	{
		ystep = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	83bb      	strh	r3, [r7, #28]
 8000ad8:	e02d      	b.n	8000b36 <lcdDrawLine+0x126>
	}
	else
	{
		ystep = -1;
 8000ada:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ade:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++)
 8000ae0:	e029      	b.n	8000b36 <lcdDrawLine+0x126>
	{
		if (steep)
 8000ae2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d006      	beq.n	8000af8 <lcdDrawLine+0xe8>
		{
			lcdDrawPixel(y1, x1, color);
 8000aea:	88bb      	ldrh	r3, [r7, #4]
 8000aec:	88f9      	ldrh	r1, [r7, #6]
 8000aee:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fed3 	bl	800089c <lcdDrawPixel>
 8000af6:	e005      	b.n	8000b04 <lcdDrawLine+0xf4>
		}
		else
		{
			lcdDrawPixel(x1, y1, color);
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	88b9      	ldrh	r1, [r7, #4]
 8000afc:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fecc 	bl	800089c <lcdDrawPixel>
		}
		err -= dy;
 8000b04:	8bfa      	ldrh	r2, [r7, #30]
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 8000b0e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da09      	bge.n	8000b2a <lcdDrawLine+0x11a>
		{
			y1 += ystep;
 8000b16:	88ba      	ldrh	r2, [r7, #4]
 8000b18:	8bbb      	ldrh	r3, [r7, #28]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8000b20:	8bfa      	ldrh	r2, [r7, #30]
 8000b22:	8a3b      	ldrh	r3, [r7, #16]
 8000b24:	4413      	add	r3, r2
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++)
 8000b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	3301      	adds	r3, #1
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	80fb      	strh	r3, [r7, #6]
 8000b36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	ddcf      	ble.n	8000ae2 <lcdDrawLine+0xd2>
		}
	}
}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	3724      	adds	r7, #36	@ 0x24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd90      	pop	{r4, r7, pc}

08000b4c <lcdDrawRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4604      	mov	r4, r0
 8000b54:	4608      	mov	r0, r1
 8000b56:	4611      	mov	r1, r2
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	80fb      	strh	r3, [r7, #6]
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80bb      	strh	r3, [r7, #4]
 8000b62:	460b      	mov	r3, r1
 8000b64:	807b      	strh	r3, [r7, #2]
 8000b66:	4613      	mov	r3, r2
 8000b68:	803b      	strh	r3, [r7, #0]
	lcdDrawHLine(x, x + w - 1, y, color);
 8000b6a:	88f8      	ldrh	r0, [r7, #6]
 8000b6c:	88fa      	ldrh	r2, [r7, #6]
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	4413      	add	r3, r2
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	3b01      	subs	r3, #1
 8000b76:	b299      	uxth	r1, r3
 8000b78:	88ba      	ldrh	r2, [r7, #4]
 8000b7a:	8b3b      	ldrh	r3, [r7, #24]
 8000b7c:	f7ff feb2 	bl	80008e4 <lcdDrawHLine>
	lcdDrawHLine(x, x + w - 1, y + h - 1, color);
 8000b80:	88f8      	ldrh	r0, [r7, #6]
 8000b82:	88fa      	ldrh	r2, [r7, #6]
 8000b84:	887b      	ldrh	r3, [r7, #2]
 8000b86:	4413      	add	r3, r2
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	b299      	uxth	r1, r3
 8000b8e:	88ba      	ldrh	r2, [r7, #4]
 8000b90:	883b      	ldrh	r3, [r7, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	3b01      	subs	r3, #1
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	8b3b      	ldrh	r3, [r7, #24]
 8000b9c:	f7ff fea2 	bl	80008e4 <lcdDrawHLine>
	lcdDrawVLine(x, y, y + h - 1, color);
 8000ba0:	88f8      	ldrh	r0, [r7, #6]
 8000ba2:	88b9      	ldrh	r1, [r7, #4]
 8000ba4:	88ba      	ldrh	r2, [r7, #4]
 8000ba6:	883b      	ldrh	r3, [r7, #0]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	3b01      	subs	r3, #1
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	8b3b      	ldrh	r3, [r7, #24]
 8000bb2:	f7ff fedd 	bl	8000970 <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y, y + h - 1, color);
 8000bb6:	88fa      	ldrh	r2, [r7, #6]
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	b298      	uxth	r0, r3
 8000bc2:	88b9      	ldrh	r1, [r7, #4]
 8000bc4:	88ba      	ldrh	r2, [r7, #4]
 8000bc6:	883b      	ldrh	r3, [r7, #0]
 8000bc8:	4413      	add	r3, r2
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	8b3b      	ldrh	r3, [r7, #24]
 8000bd2:	f7ff fecd 	bl	8000970 <lcdDrawVLine>
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd90      	pop	{r4, r7, pc}

08000bde <lcdDrawCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000bde:	b590      	push	{r4, r7, lr}
 8000be0:	b087      	sub	sp, #28
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4604      	mov	r4, r0
 8000be6:	4608      	mov	r0, r1
 8000be8:	4611      	mov	r1, r2
 8000bea:	461a      	mov	r2, r3
 8000bec:	4623      	mov	r3, r4
 8000bee:	80fb      	strh	r3, [r7, #6]
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	80bb      	strh	r3, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8000bfc:	887b      	ldrh	r3, [r7, #2]
 8000bfe:	f1c3 0301 	rsb	r3, r3, #1
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	03d2      	lsls	r2, r2, #15
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000c1c:	887b      	ldrh	r3, [r7, #2]
 8000c1e:	81fb      	strh	r3, [r7, #14]

	lcdDrawPixel(x0, y0 + r, color);
 8000c20:	88f8      	ldrh	r0, [r7, #6]
 8000c22:	88ba      	ldrh	r2, [r7, #4]
 8000c24:	887b      	ldrh	r3, [r7, #2]
 8000c26:	4413      	add	r3, r2
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	883a      	ldrh	r2, [r7, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f7ff fe35 	bl	800089c <lcdDrawPixel>
	lcdDrawPixel(x0, y0 - r, color);
 8000c32:	88f8      	ldrh	r0, [r7, #6]
 8000c34:	88ba      	ldrh	r2, [r7, #4]
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	883a      	ldrh	r2, [r7, #0]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f7ff fe2c 	bl	800089c <lcdDrawPixel>
	lcdDrawPixel(x0 + r, y0, color);
 8000c44:	88fa      	ldrh	r2, [r7, #6]
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	4413      	add	r3, r2
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	88b9      	ldrh	r1, [r7, #4]
 8000c4e:	883a      	ldrh	r2, [r7, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fe23 	bl	800089c <lcdDrawPixel>
	lcdDrawPixel(x0 - r, y0, color);
 8000c56:	88fa      	ldrh	r2, [r7, #6]
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	88b9      	ldrh	r1, [r7, #4]
 8000c60:	883a      	ldrh	r2, [r7, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fe1a 	bl	800089c <lcdDrawPixel>

	while (x < y)
 8000c68:	e081      	b.n	8000d6e <lcdDrawCircle+0x190>
	{
		if (f >= 0)
 8000c6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0e      	blt.n	8000c90 <lcdDrawCircle+0xb2>
		{
			y--;
 8000c72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000c7e:	8a7b      	ldrh	r3, [r7, #18]
 8000c80:	3302      	adds	r3, #2
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000c86:	8afa      	ldrh	r2, [r7, #22]
 8000c88:	8a7b      	ldrh	r3, [r7, #18]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000c90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	3301      	adds	r3, #1
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000c9c:	8abb      	ldrh	r3, [r7, #20]
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000ca4:	8afa      	ldrh	r2, [r7, #22]
 8000ca6:	8abb      	ldrh	r3, [r7, #20]
 8000ca8:	4413      	add	r3, r2
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	82fb      	strh	r3, [r7, #22]

		lcdDrawPixel(x0 + x, y0 + y, color);
 8000cae:	88fa      	ldrh	r2, [r7, #6]
 8000cb0:	8a3b      	ldrh	r3, [r7, #16]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b298      	uxth	r0, r3
 8000cb6:	88ba      	ldrh	r2, [r7, #4]
 8000cb8:	89fb      	ldrh	r3, [r7, #14]
 8000cba:	4413      	add	r3, r2
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	883a      	ldrh	r2, [r7, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f7ff fdeb 	bl	800089c <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 + y, color);
 8000cc6:	88fa      	ldrh	r2, [r7, #6]
 8000cc8:	8a3b      	ldrh	r3, [r7, #16]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	b298      	uxth	r0, r3
 8000cce:	88ba      	ldrh	r2, [r7, #4]
 8000cd0:	89fb      	ldrh	r3, [r7, #14]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	883a      	ldrh	r2, [r7, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f7ff fddf 	bl	800089c <lcdDrawPixel>
		lcdDrawPixel(x0 + x, y0 - y, color);
 8000cde:	88fa      	ldrh	r2, [r7, #6]
 8000ce0:	8a3b      	ldrh	r3, [r7, #16]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b298      	uxth	r0, r3
 8000ce6:	88ba      	ldrh	r2, [r7, #4]
 8000ce8:	89fb      	ldrh	r3, [r7, #14]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	883a      	ldrh	r2, [r7, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f7ff fdd3 	bl	800089c <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 - y, color);
 8000cf6:	88fa      	ldrh	r2, [r7, #6]
 8000cf8:	8a3b      	ldrh	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	b298      	uxth	r0, r3
 8000cfe:	88ba      	ldrh	r2, [r7, #4]
 8000d00:	89fb      	ldrh	r3, [r7, #14]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	883a      	ldrh	r2, [r7, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f7ff fdc7 	bl	800089c <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 + x, color);
 8000d0e:	88fa      	ldrh	r2, [r7, #6]
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	4413      	add	r3, r2
 8000d14:	b298      	uxth	r0, r3
 8000d16:	88ba      	ldrh	r2, [r7, #4]
 8000d18:	8a3b      	ldrh	r3, [r7, #16]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	883a      	ldrh	r2, [r7, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f7ff fdbb 	bl	800089c <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 + x, color);
 8000d26:	88fa      	ldrh	r2, [r7, #6]
 8000d28:	89fb      	ldrh	r3, [r7, #14]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	b298      	uxth	r0, r3
 8000d2e:	88ba      	ldrh	r2, [r7, #4]
 8000d30:	8a3b      	ldrh	r3, [r7, #16]
 8000d32:	4413      	add	r3, r2
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	883a      	ldrh	r2, [r7, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f7ff fdaf 	bl	800089c <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 - x, color);
 8000d3e:	88fa      	ldrh	r2, [r7, #6]
 8000d40:	89fb      	ldrh	r3, [r7, #14]
 8000d42:	4413      	add	r3, r2
 8000d44:	b298      	uxth	r0, r3
 8000d46:	88ba      	ldrh	r2, [r7, #4]
 8000d48:	8a3b      	ldrh	r3, [r7, #16]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	883a      	ldrh	r2, [r7, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff fda3 	bl	800089c <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 - x, color);
 8000d56:	88fa      	ldrh	r2, [r7, #6]
 8000d58:	89fb      	ldrh	r3, [r7, #14]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b298      	uxth	r0, r3
 8000d5e:	88ba      	ldrh	r2, [r7, #4]
 8000d60:	8a3b      	ldrh	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	883a      	ldrh	r2, [r7, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f7ff fd97 	bl	800089c <lcdDrawPixel>
	while (x < y)
 8000d6e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	f6ff af77 	blt.w	8000c6a <lcdDrawCircle+0x8c>
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd90      	pop	{r4, r7, pc}

08000d86 <lcdFillCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdFillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000d86:	b590      	push	{r4, r7, lr}
 8000d88:	b085      	sub	sp, #20
 8000d8a:	af02      	add	r7, sp, #8
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	4611      	mov	r1, r2
 8000d92:	461a      	mov	r2, r3
 8000d94:	4623      	mov	r3, r4
 8000d96:	80fb      	strh	r3, [r7, #6]
 8000d98:	4603      	mov	r3, r0
 8000d9a:	80bb      	strh	r3, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
 8000da0:	4613      	mov	r3, r2
 8000da2:	803b      	strh	r3, [r7, #0]
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 8000da4:	88f8      	ldrh	r0, [r7, #6]
 8000da6:	88ba      	ldrh	r2, [r7, #4]
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	b299      	uxth	r1, r3
 8000dae:	88ba      	ldrh	r2, [r7, #4]
 8000db0:	887b      	ldrh	r3, [r7, #2]
 8000db2:	4413      	add	r3, r2
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	3301      	adds	r3, #1
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	883b      	ldrh	r3, [r7, #0]
 8000dbc:	f7ff fdd8 	bl	8000970 <lcdDrawVLine>
	lcdFillCircleHelper(x0, y0, r, 3, 0, color);
 8000dc0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000dc4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000dc8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000dcc:	883b      	ldrh	r3, [r7, #0]
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	f000 f804 	bl	8000de2 <lcdFillCircleHelper>
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd90      	pop	{r4, r7, pc}

08000de2 <lcdFillCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8000de2:	b590      	push	{r4, r7, lr}
 8000de4:	b087      	sub	sp, #28
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4604      	mov	r4, r0
 8000dea:	4608      	mov	r0, r1
 8000dec:	4611      	mov	r1, r2
 8000dee:	461a      	mov	r2, r3
 8000df0:	4623      	mov	r3, r4
 8000df2:	80fb      	strh	r3, [r7, #6]
 8000df4:	4603      	mov	r3, r0
 8000df6:	80bb      	strh	r3, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8000e00:	887b      	ldrh	r3, [r7, #2]
 8000e02:	f1c3 0301 	rsb	r3, r3, #1
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	461a      	mov	r2, r3
 8000e12:	03d2      	lsls	r2, r2, #15
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 8000e24:	e07b      	b.n	8000f1e <lcdFillCircleHelper+0x13c>
	{
		if (f >= 0)
 8000e26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0e      	blt.n	8000e4c <lcdFillCircleHelper+0x6a>
		{
			y--;
 8000e2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3b01      	subs	r3, #1
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000e3a:	8a7b      	ldrh	r3, [r7, #18]
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000e42:	8afa      	ldrh	r2, [r7, #22]
 8000e44:	8a7b      	ldrh	r3, [r7, #18]
 8000e46:	4413      	add	r3, r2
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000e4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	3301      	adds	r3, #1
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000e58:	8abb      	ldrh	r3, [r7, #20]
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000e60:	8afa      	ldrh	r2, [r7, #22]
 8000e62:	8abb      	ldrh	r3, [r7, #20]
 8000e64:	4413      	add	r3, r2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1)
 8000e6a:	787b      	ldrb	r3, [r7, #1]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d027      	beq.n	8000ec4 <lcdFillCircleHelper+0xe2>
		{
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 8000e74:	88fa      	ldrh	r2, [r7, #6]
 8000e76:	8a3b      	ldrh	r3, [r7, #16]
 8000e78:	4413      	add	r3, r2
 8000e7a:	b298      	uxth	r0, r3
 8000e7c:	88ba      	ldrh	r2, [r7, #4]
 8000e7e:	89fb      	ldrh	r3, [r7, #14]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	b299      	uxth	r1, r3
 8000e84:	88ba      	ldrh	r2, [r7, #4]
 8000e86:	89fb      	ldrh	r3, [r7, #14]
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000e8e:	4413      	add	r3, r2
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	3301      	adds	r3, #1
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000e98:	f7ff fd6a 	bl	8000970 <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	89fb      	ldrh	r3, [r7, #14]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b298      	uxth	r0, r3
 8000ea4:	88ba      	ldrh	r2, [r7, #4]
 8000ea6:	8a3b      	ldrh	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	b299      	uxth	r1, r3
 8000eac:	88ba      	ldrh	r2, [r7, #4]
 8000eae:	8a3b      	ldrh	r3, [r7, #16]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ec0:	f7ff fd56 	bl	8000970 <lcdDrawVLine>
		}
		if (cornername & 0x2)
 8000ec4:	787b      	ldrb	r3, [r7, #1]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d027      	beq.n	8000f1e <lcdFillCircleHelper+0x13c>
		{
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 8000ece:	88fa      	ldrh	r2, [r7, #6]
 8000ed0:	8a3b      	ldrh	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b298      	uxth	r0, r3
 8000ed6:	88ba      	ldrh	r2, [r7, #4]
 8000ed8:	89fb      	ldrh	r3, [r7, #14]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	b299      	uxth	r1, r3
 8000ede:	88ba      	ldrh	r2, [r7, #4]
 8000ee0:	89fb      	ldrh	r3, [r7, #14]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ee8:	4413      	add	r3, r2
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	3301      	adds	r3, #1
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ef2:	f7ff fd3d 	bl	8000970 <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 8000ef6:	88fa      	ldrh	r2, [r7, #6]
 8000ef8:	89fb      	ldrh	r3, [r7, #14]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	b298      	uxth	r0, r3
 8000efe:	88ba      	ldrh	r2, [r7, #4]
 8000f00:	8a3b      	ldrh	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	b299      	uxth	r1, r3
 8000f06:	88ba      	ldrh	r2, [r7, #4]
 8000f08:	8a3b      	ldrh	r3, [r7, #16]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f10:	4413      	add	r3, r2
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	3301      	adds	r3, #1
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f1a:	f7ff fd29 	bl	8000970 <lcdDrawVLine>
	while (x < y)
 8000f1e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000f22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	f6ff af7d 	blt.w	8000e26 <lcdFillCircleHelper+0x44>
		}
	}
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	371c      	adds	r7, #28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd90      	pop	{r4, r7, pc}
	...

08000f38 <lcdFillRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4623      	mov	r3, r4
 8000f48:	80fb      	strh	r3, [r7, #6]
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80bb      	strh	r3, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	807b      	strh	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8000f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5a:	4a24      	ldr	r2, [pc, #144]	@ (8000fec <lcdFillRect+0xb4>)
 8000f5c:	8812      	ldrh	r2, [r2, #0]
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	da3f      	bge.n	8000fe2 <lcdFillRect+0xaa>
 8000f62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f66:	4a21      	ldr	r2, [pc, #132]	@ (8000fec <lcdFillRect+0xb4>)
 8000f68:	8852      	ldrh	r2, [r2, #2]
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	da39      	bge.n	8000fe2 <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 8000f6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <lcdFillRect+0xb4>)
 8000f7a:	8812      	ldrh	r2, [r2, #0]
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	dd05      	ble.n	8000f8c <lcdFillRect+0x54>
 8000f80:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <lcdFillRect+0xb4>)
 8000f82:	881a      	ldrh	r2, [r3, #0]
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8000f8c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f90:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a15      	ldr	r2, [pc, #84]	@ (8000fec <lcdFillRect+0xb4>)
 8000f98:	8852      	ldrh	r2, [r2, #2]
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	dd05      	ble.n	8000faa <lcdFillRect+0x72>
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <lcdFillRect+0xb4>)
 8000fa0:	885a      	ldrh	r2, [r3, #2]
 8000fa2:	88bb      	ldrh	r3, [r7, #4]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 8000faa:	88bb      	ldrh	r3, [r7, #4]
 8000fac:	81fb      	strh	r3, [r7, #14]
 8000fae:	e00e      	b.n	8000fce <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8000fb0:	88f8      	ldrh	r0, [r7, #6]
 8000fb2:	88fa      	ldrh	r2, [r7, #6]
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b299      	uxth	r1, r3
 8000fba:	89fa      	ldrh	r2, [r7, #14]
 8000fbc:	8c3b      	ldrh	r3, [r7, #32]
 8000fbe:	f7ff fc91 	bl	80008e4 <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 8000fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	81fb      	strh	r3, [r7, #14]
 8000fce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000fd2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fd6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fda:	440b      	add	r3, r1
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dde7      	ble.n	8000fb0 <lcdFillRect+0x78>
 8000fe0:	e000      	b.n	8000fe4 <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8000fe2:	bf00      	nop
	}
}
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000018 	.word	0x20000018

08000ff0 <lcdFillRoundRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4623      	mov	r3, r4
 8001000:	80fb      	strh	r3, [r7, #6]
 8001002:	4603      	mov	r3, r0
 8001004:	80bb      	strh	r3, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	807b      	strh	r3, [r7, #2]
 800100a:	4613      	mov	r3, r2
 800100c:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdFillRect(x + r, y, w - 2 * r, h, color);
 800100e:	88fa      	ldrh	r2, [r7, #6]
 8001010:	8b3b      	ldrh	r3, [r7, #24]
 8001012:	4413      	add	r3, r2
 8001014:	b29b      	uxth	r3, r3
 8001016:	b218      	sxth	r0, r3
 8001018:	887a      	ldrh	r2, [r7, #2]
 800101a:	8b3b      	ldrh	r3, [r7, #24]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b29b      	uxth	r3, r3
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	b29b      	uxth	r3, r3
 8001024:	b21a      	sxth	r2, r3
 8001026:	f9b7 4000 	ldrsh.w	r4, [r7]
 800102a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800102e:	8bbb      	ldrh	r3, [r7, #28]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	4623      	mov	r3, r4
 8001034:	f7ff ff80 	bl	8000f38 <lcdFillRect>

	// draw four corners
	lcdFillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8001038:	88fa      	ldrh	r2, [r7, #6]
 800103a:	887b      	ldrh	r3, [r7, #2]
 800103c:	4413      	add	r3, r2
 800103e:	b29a      	uxth	r2, r3
 8001040:	8b3b      	ldrh	r3, [r7, #24]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	b29b      	uxth	r3, r3
 8001046:	3b01      	subs	r3, #1
 8001048:	b29b      	uxth	r3, r3
 800104a:	b218      	sxth	r0, r3
 800104c:	88ba      	ldrh	r2, [r7, #4]
 800104e:	8b3b      	ldrh	r3, [r7, #24]
 8001050:	4413      	add	r3, r2
 8001052:	b29b      	uxth	r3, r3
 8001054:	b219      	sxth	r1, r3
 8001056:	883a      	ldrh	r2, [r7, #0]
 8001058:	8b3b      	ldrh	r3, [r7, #24]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	b29b      	uxth	r3, r3
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	b29b      	uxth	r3, r3
 8001062:	3b01      	subs	r3, #1
 8001064:	b29b      	uxth	r3, r3
 8001066:	b21b      	sxth	r3, r3
 8001068:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800106c:	8bba      	ldrh	r2, [r7, #28]
 800106e:	9201      	str	r2, [sp, #4]
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	4622      	mov	r2, r4
 8001076:	f7ff feb4 	bl	8000de2 <lcdFillCircleHelper>
	lcdFillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 800107a:	88fa      	ldrh	r2, [r7, #6]
 800107c:	8b3b      	ldrh	r3, [r7, #24]
 800107e:	4413      	add	r3, r2
 8001080:	b29b      	uxth	r3, r3
 8001082:	b218      	sxth	r0, r3
 8001084:	88ba      	ldrh	r2, [r7, #4]
 8001086:	8b3b      	ldrh	r3, [r7, #24]
 8001088:	4413      	add	r3, r2
 800108a:	b29b      	uxth	r3, r3
 800108c:	b219      	sxth	r1, r3
 800108e:	883a      	ldrh	r2, [r7, #0]
 8001090:	8b3b      	ldrh	r3, [r7, #24]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	b29b      	uxth	r3, r3
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	3b01      	subs	r3, #1
 800109c:	b29b      	uxth	r3, r3
 800109e:	b21b      	sxth	r3, r3
 80010a0:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80010a4:	8bba      	ldrh	r2, [r7, #28]
 80010a6:	9201      	str	r2, [sp, #4]
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2302      	movs	r3, #2
 80010ac:	4622      	mov	r2, r4
 80010ae:	f7ff fe98 	bl	8000de2 <lcdFillCircleHelper>
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
	...

080010bc <lcdDrawImage>:
        lcdDrawHLine(a, b + 1, y, color);
    }
}

void lcdDrawImage(uint16_t x, uint16_t y, GUI_CONST_STORAGE GUI_BITMAP* pBitmap)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	603a      	str	r2, [r7, #0]
 80010c6:	80fb      	strh	r3, [r7, #6]
 80010c8:	460b      	mov	r3, r1
 80010ca:	80bb      	strh	r3, [r7, #4]
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80010cc:	4b24      	ldr	r3, [pc, #144]	@ (8001160 <lcdDrawImage+0xa4>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	88fa      	ldrh	r2, [r7, #6]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d23b      	bcs.n	800114e <lcdDrawImage+0x92>
 80010d6:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <lcdDrawImage+0xa4>)
 80010d8:	885b      	ldrh	r3, [r3, #2]
 80010da:	88ba      	ldrh	r2, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d236      	bcs.n	800114e <lcdDrawImage+0x92>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	8812      	ldrh	r2, [r2, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001160 <lcdDrawImage+0xa4>)
 80010ea:	8812      	ldrh	r2, [r2, #0]
 80010ec:	4293      	cmp	r3, r2
 80010ee:	dc30      	bgt.n	8001152 <lcdDrawImage+0x96>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	8852      	ldrh	r2, [r2, #2]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a19      	ldr	r2, [pc, #100]	@ (8001160 <lcdDrawImage+0xa4>)
 80010fa:	8852      	ldrh	r2, [r2, #2]
 80010fc:	4293      	cmp	r3, r2
 80010fe:	dc2a      	bgt.n	8001156 <lcdDrawImage+0x9a>

	for (int i = 0; i < pBitmap->ySize; ++i)
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	e01c      	b.n	8001140 <lcdDrawImage+0x84>
	{
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	b29a      	uxth	r2, r3
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	b299      	uxth	r1, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	8892      	ldrh	r2, [r2, #4]
 8001118:	4610      	mov	r0, r2
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	fb00 f202 	mul.w	r2, r0, r2
 8001120:	441a      	add	r2, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	889b      	ldrh	r3, [r3, #4]
 8001126:	4618      	mov	r0, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	799b      	ldrb	r3, [r3, #6]
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	fb90 f3f3 	sdiv	r3, r0, r3
 8001134:	88f8      	ldrh	r0, [r7, #6]
 8001136:	f000 fa41 	bl	80015bc <lcdDrawPixels>
	for (int i = 0; i < pBitmap->ySize; ++i)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3301      	adds	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	885b      	ldrh	r3, [r3, #2]
 8001144:	461a      	mov	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4293      	cmp	r3, r2
 800114a:	dbdc      	blt.n	8001106 <lcdDrawImage+0x4a>
 800114c:	e004      	b.n	8001158 <lcdDrawImage+0x9c>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 800114e:	bf00      	nop
 8001150:	e002      	b.n	8001158 <lcdDrawImage+0x9c>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8001152:	bf00      	nop
 8001154:	e000      	b.n	8001158 <lcdDrawImage+0x9c>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8001156:	bf00      	nop
	}
}
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000018 	.word	0x20000018

08001164 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	4604      	mov	r4, r0
 800116c:	4608      	mov	r0, r1
 800116e:	4611      	mov	r1, r2
 8001170:	461a      	mov	r2, r3
 8001172:	4623      	mov	r3, r4
 8001174:	80fb      	strh	r3, [r7, #6]
 8001176:	4603      	mov	r3, r0
 8001178:	80bb      	strh	r3, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	70fb      	strb	r3, [r7, #3]
 800117e:	4613      	mov	r3, r2
 8001180:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8001182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001186:	4a4a      	ldr	r2, [pc, #296]	@ (80012b0 <lcdDrawChar+0x14c>)
 8001188:	8812      	ldrh	r2, [r2, #0]
 800118a:	4293      	cmp	r3, r2
 800118c:	f280 808c 	bge.w	80012a8 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8001190:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001194:	4a46      	ldr	r2, [pc, #280]	@ (80012b0 <lcdDrawChar+0x14c>)
 8001196:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8001198:	4293      	cmp	r3, r2
 800119a:	f280 8085 	bge.w	80012a8 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 800119e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a2:	4a44      	ldr	r2, [pc, #272]	@ (80012b4 <lcdDrawChar+0x150>)
 80011a4:	6892      	ldr	r2, [r2, #8]
 80011a6:	8892      	ldrh	r2, [r2, #4]
 80011a8:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db7c      	blt.n	80012a8 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 80011ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011b2:	4a40      	ldr	r2, [pc, #256]	@ (80012b4 <lcdDrawChar+0x150>)
 80011b4:	6892      	ldr	r2, [r2, #8]
 80011b6:	88d2      	ldrh	r2, [r2, #6]
 80011b8:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db74      	blt.n	80012a8 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 80011be:	4b3d      	ldr	r3, [pc, #244]	@ (80012b4 <lcdDrawChar+0x150>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	88db      	ldrh	r3, [r3, #6]
 80011c4:	08db      	lsrs	r3, r3, #3
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	73bb      	strb	r3, [r7, #14]
 80011d2:	e061      	b.n	8001298 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	733b      	strb	r3, [r7, #12]
 80011d8:	e055      	b.n	8001286 <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 80011da:	4b36      	ldr	r3, [pc, #216]	@ (80012b4 <lcdDrawChar+0x150>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	78fa      	ldrb	r2, [r7, #3]
 80011e2:	3a20      	subs	r2, #32
 80011e4:	4933      	ldr	r1, [pc, #204]	@ (80012b4 <lcdDrawChar+0x150>)
 80011e6:	6889      	ldr	r1, [r1, #8]
 80011e8:	88c9      	ldrh	r1, [r1, #6]
 80011ea:	fb01 f202 	mul.w	r2, r1, r2
 80011ee:	7ab9      	ldrb	r1, [r7, #10]
 80011f0:	fb02 f101 	mul.w	r1, r2, r1
 80011f4:	7bba      	ldrb	r2, [r7, #14]
 80011f6:	7ab8      	ldrb	r0, [r7, #10]
 80011f8:	fb00 f202 	mul.w	r2, r0, r2
 80011fc:	4411      	add	r1, r2
 80011fe:	7b3a      	ldrb	r2, [r7, #12]
 8001200:	440a      	add	r2, r1
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8001208:	2300      	movs	r3, #0
 800120a:	72fb      	strb	r3, [r7, #11]
 800120c:	e032      	b.n	8001274 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 800120e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001212:	2b00      	cmp	r3, #0
 8001214:	da12      	bge.n	800123c <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	b29a      	uxth	r2, r3
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	4413      	add	r3, r2
 800121e:	b29a      	uxth	r2, r3
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	b29b      	uxth	r3, r3
 8001224:	4413      	add	r3, r2
 8001226:	b298      	uxth	r0, r3
 8001228:	7bbb      	ldrb	r3, [r7, #14]
 800122a:	b29a      	uxth	r2, r3
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	4413      	add	r3, r2
 8001230:	b29b      	uxth	r3, r3
 8001232:	883a      	ldrh	r2, [r7, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fb31 	bl	800089c <lcdDrawPixel>
 800123a:	e015      	b.n	8001268 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 800123c:	8c3a      	ldrh	r2, [r7, #32]
 800123e:	883b      	ldrh	r3, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d011      	beq.n	8001268 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	b29a      	uxth	r2, r3
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	4413      	add	r3, r2
 800124c:	b29a      	uxth	r2, r3
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	b29b      	uxth	r3, r3
 8001252:	4413      	add	r3, r2
 8001254:	b298      	uxth	r0, r3
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	b29a      	uxth	r2, r3
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	b29b      	uxth	r3, r3
 8001260:	8c3a      	ldrh	r2, [r7, #32]
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fb1a 	bl	800089c <lcdDrawPixel>
				}
				line <<= 1;
 8001268:	7b7b      	ldrb	r3, [r7, #13]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	3301      	adds	r3, #1
 8001272:	72fb      	strb	r3, [r7, #11]
 8001274:	7afb      	ldrb	r3, [r7, #11]
 8001276:	2b07      	cmp	r3, #7
 8001278:	d9c9      	bls.n	800120e <lcdDrawChar+0xaa>
			}

			xP += 8;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	3308      	adds	r3, #8
 800127e:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8001280:	7b3b      	ldrb	r3, [r7, #12]
 8001282:	3301      	adds	r3, #1
 8001284:	733b      	strb	r3, [r7, #12]
 8001286:	7b3a      	ldrb	r2, [r7, #12]
 8001288:	7abb      	ldrb	r3, [r7, #10]
 800128a:	429a      	cmp	r2, r3
 800128c:	d3a5      	bcc.n	80011da <lcdDrawChar+0x76>
		}

		xP = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	3301      	adds	r3, #1
 8001296:	73bb      	strb	r3, [r7, #14]
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <lcdDrawChar+0x150>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	88db      	ldrh	r3, [r3, #6]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d396      	bcc.n	80011d4 <lcdDrawChar+0x70>
 80012a6:	e000      	b.n	80012aa <lcdDrawChar+0x146>
		return;
 80012a8:	bf00      	nop
	}
}
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd90      	pop	{r4, r7, pc}
 80012b0:	20000018 	.word	0x20000018
 80012b4:	20000020 	.word	0x20000020

080012b8 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 80012b8:	b40f      	push	{r0, r1, r2, r3}
 80012ba:	b590      	push	{r4, r7, lr}
 80012bc:	b085      	sub	sp, #20
 80012be:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	69b9      	ldr	r1, [r7, #24]
 80012ca:	483d      	ldr	r0, [pc, #244]	@ (80013c0 <lcdPrintf+0x108>)
 80012cc:	f004 fb76 	bl	80059bc <vsiprintf>
	va_end(lst);

	p = buf;
 80012d0:	4b3b      	ldr	r3, [pc, #236]	@ (80013c0 <lcdPrintf+0x108>)
 80012d2:	607b      	str	r3, [r7, #4]
	while (*p)
 80012d4:	e067      	b.n	80013a6 <lcdPrintf+0xee>
	{
		if (*p == '\n')
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b0a      	cmp	r3, #10
 80012dc:	d10c      	bne.n	80012f8 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 80012de:	4b39      	ldr	r3, [pc, #228]	@ (80013c4 <lcdPrintf+0x10c>)
 80012e0:	885a      	ldrh	r2, [r3, #2]
 80012e2:	4b39      	ldr	r3, [pc, #228]	@ (80013c8 <lcdPrintf+0x110>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	88db      	ldrh	r3, [r3, #6]
 80012e8:	4413      	add	r3, r2
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b35      	ldr	r3, [pc, #212]	@ (80013c4 <lcdPrintf+0x10c>)
 80012ee:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 80012f0:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <lcdPrintf+0x10c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	801a      	strh	r2, [r3, #0]
 80012f6:	e04a      	b.n	800138e <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b0d      	cmp	r3, #13
 80012fe:	d046      	beq.n	800138e <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b09      	cmp	r3, #9
 8001306:	d10b      	bne.n	8001320 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8001308:	4b2e      	ldr	r3, [pc, #184]	@ (80013c4 <lcdPrintf+0x10c>)
 800130a:	881a      	ldrh	r2, [r3, #0]
 800130c:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <lcdPrintf+0x110>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	889b      	ldrh	r3, [r3, #4]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	b29b      	uxth	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <lcdPrintf+0x10c>)
 800131c:	801a      	strh	r2, [r3, #0]
 800131e:	e036      	b.n	800138e <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8001320:	4b28      	ldr	r3, [pc, #160]	@ (80013c4 <lcdPrintf+0x10c>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b218      	sxth	r0, r3
 8001326:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <lcdPrintf+0x10c>)
 8001328:	885b      	ldrh	r3, [r3, #2]
 800132a:	b219      	sxth	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <lcdPrintf+0x110>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	b29c      	uxth	r4, r3
 8001336:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <lcdPrintf+0x110>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	b29b      	uxth	r3, r3
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	4623      	mov	r3, r4
 8001340:	f7ff ff10 	bl	8001164 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <lcdPrintf+0x10c>)
 8001346:	881a      	ldrh	r2, [r3, #0]
 8001348:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <lcdPrintf+0x110>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	889b      	ldrh	r3, [r3, #4]
 800134e:	4413      	add	r3, r2
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <lcdPrintf+0x10c>)
 8001354:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <lcdPrintf+0x110>)
 8001358:	7b1b      	ldrb	r3, [r3, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d017      	beq.n	800138e <lcdPrintf+0xd6>
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <lcdPrintf+0x10c>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <lcdPrintf+0x114>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <lcdPrintf+0x110>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	889b      	ldrh	r3, [r3, #4]
 8001370:	1acb      	subs	r3, r1, r3
 8001372:	429a      	cmp	r2, r3
 8001374:	dd0b      	ble.n	800138e <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <lcdPrintf+0x10c>)
 8001378:	885a      	ldrh	r2, [r3, #2]
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <lcdPrintf+0x110>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	88db      	ldrh	r3, [r3, #6]
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <lcdPrintf+0x10c>)
 8001386:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <lcdPrintf+0x10c>)
 800138a:	2200      	movs	r2, #0
 800138c:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3301      	adds	r3, #1
 8001392:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <lcdPrintf+0x10c>)
 8001396:	885a      	ldrh	r2, [r3, #2]
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <lcdPrintf+0x114>)
 800139a:	885b      	ldrh	r3, [r3, #2]
 800139c:	429a      	cmp	r2, r3
 800139e:	d302      	bcc.n	80013a6 <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <lcdPrintf+0x10c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	805a      	strh	r2, [r3, #2]
	while (*p)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d193      	bne.n	80012d6 <lcdPrintf+0x1e>
		}
	}
}
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80013ba:	b004      	add	sp, #16
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200000b0 	.word	0x200000b0
 80013c4:	200000a8 	.word	0x200000a8
 80013c8:	20000020 	.word	0x20000020
 80013cc:	20000018 	.word	0x20000018

080013d0 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 80013d8:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <lcdSetTextFont+0x1c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6093      	str	r3, [r2, #8]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000020 	.word	0x20000020

080013f0 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	80fb      	strh	r3, [r7, #6]
 80013fc:	4613      	mov	r3, r2
 80013fe:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <lcdSetTextColor+0x28>)
 8001404:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8001406:	88bb      	ldrh	r3, [r7, #4]
 8001408:	4a03      	ldr	r2, [pc, #12]	@ (8001418 <lcdSetTextColor+0x28>)
 800140a:	6053      	str	r3, [r2, #4]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	20000020 	.word	0x20000020

0800141c <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8001426:	4a2d      	ldr	r2, [pc, #180]	@ (80014dc <lcdSetOrientation+0xc0>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 800142c:	2036      	movs	r0, #54	@ 0x36
 800142e:	f000 f8fb 	bl	8001628 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8001432:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <lcdSetOrientation+0xc0>)
 8001434:	791b      	ldrb	r3, [r3, #4]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d83e      	bhi.n	80014b8 <lcdSetOrientation+0x9c>
 800143a:	a201      	add	r2, pc, #4	@ (adr r2, 8001440 <lcdSetOrientation+0x24>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	08001451 	.word	0x08001451
 8001444:	08001485 	.word	0x08001485
 8001448:	0800146b 	.word	0x0800146b
 800144c:	0800149f 	.word	0x0800149f
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8001450:	4b23      	ldr	r3, [pc, #140]	@ (80014e0 <lcdSetOrientation+0xc4>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f8f7 	bl	8001648 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <lcdSetOrientation+0xc0>)
 800145c:	22f0      	movs	r2, #240	@ 0xf0
 800145e:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8001460:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <lcdSetOrientation+0xc0>)
 8001462:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001466:	805a      	strh	r2, [r3, #2]
			break;
 8001468:	e027      	b.n	80014ba <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 800146a:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <lcdSetOrientation+0xc8>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f8ea 	bl	8001648 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8001474:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <lcdSetOrientation+0xc0>)
 8001476:	22f0      	movs	r2, #240	@ 0xf0
 8001478:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <lcdSetOrientation+0xc0>)
 800147c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001480:	805a      	strh	r2, [r3, #2]
			break;
 8001482:	e01a      	b.n	80014ba <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8001484:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <lcdSetOrientation+0xcc>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f8dd 	bl	8001648 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <lcdSetOrientation+0xc0>)
 8001490:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001494:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <lcdSetOrientation+0xc0>)
 8001498:	22f0      	movs	r2, #240	@ 0xf0
 800149a:	805a      	strh	r2, [r3, #2]
			break;
 800149c:	e00d      	b.n	80014ba <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <lcdSetOrientation+0xd0>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f8d0 	bl	8001648 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <lcdSetOrientation+0xc0>)
 80014aa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80014ae:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <lcdSetOrientation+0xc0>)
 80014b2:	22f0      	movs	r2, #240	@ 0xf0
 80014b4:	805a      	strh	r2, [r3, #2]
			break;
 80014b6:	e000      	b.n	80014ba <lcdSetOrientation+0x9e>
		default:
			break;
 80014b8:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <lcdSetOrientation+0xc0>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	3b01      	subs	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <lcdSetOrientation+0xc0>)
 80014c4:	885b      	ldrh	r3, [r3, #2]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	2100      	movs	r1, #0
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 f829 	bl	8001524 <lcdSetWindow>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000018 	.word	0x20000018
 80014e0:	200000ac 	.word	0x200000ac
 80014e4:	200000ae 	.word	0x200000ae
 80014e8:	200000ad 	.word	0x200000ad
 80014ec:	200000af 	.word	0x200000af

080014f0 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	460a      	mov	r2, r1
 80014fa:	80fb      	strh	r3, [r7, #6]
 80014fc:	4613      	mov	r3, r2
 80014fe:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001500:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <lcdSetCursor+0x30>)
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8001506:	4a06      	ldr	r2, [pc, #24]	@ (8001520 <lcdSetCursor+0x30>)
 8001508:	88bb      	ldrh	r3, [r7, #4]
 800150a:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	88fa      	ldrh	r2, [r7, #6]
 8001510:	88b9      	ldrh	r1, [r7, #4]
 8001512:	88f8      	ldrh	r0, [r7, #6]
 8001514:	f000 f806 	bl	8001524 <lcdSetWindow>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200000a8 	.word	0x200000a8

08001524 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	4611      	mov	r1, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4623      	mov	r3, r4
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	4603      	mov	r3, r0
 8001538:	80bb      	strh	r3, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	807b      	strh	r3, [r7, #2]
 800153e:	4613      	mov	r3, r2
 8001540:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8001542:	202a      	movs	r0, #42	@ 0x2a
 8001544:	f000 f870 	bl	8001628 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f87a 	bl	8001648 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	b29b      	uxth	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f874 	bl	8001648 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	0a1b      	lsrs	r3, r3, #8
 8001564:	b29b      	uxth	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f86e 	bl	8001648 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	b29b      	uxth	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f868 	bl	8001648 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8001578:	202b      	movs	r0, #43	@ 0x2b
 800157a:	f000 f855 	bl	8001628 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 800157e:	88bb      	ldrh	r3, [r7, #4]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	f000 f85f 	bl	8001648 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 800158a:	88bb      	ldrh	r3, [r7, #4]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	b29b      	uxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f859 	bl	8001648 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8001596:	883b      	ldrh	r3, [r7, #0]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	b29b      	uxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	f000 f853 	bl	8001648 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 80015a2:	883b      	ldrh	r3, [r7, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f84d 	bl	8001648 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80015ae:	202c      	movs	r0, #44	@ 0x2c
 80015b0:	f000 f83a 	bl	8001628 <lcdWriteCommand>
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}

080015bc <lcdDrawPixels>:
}

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60ba      	str	r2, [r7, #8]
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4603      	mov	r3, r0
 80015c8:	81fb      	strh	r3, [r7, #14]
 80015ca:	460b      	mov	r3, r1
 80015cc:	81bb      	strh	r3, [r7, #12]
  uint32_t i = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]

  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 80015d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <lcdDrawPixels+0x54>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <lcdDrawPixels+0x54>)
 80015dc:	885b      	ldrh	r3, [r3, #2]
 80015de:	3b01      	subs	r3, #1
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	89b9      	ldrh	r1, [r7, #12]
 80015e4:	89f8      	ldrh	r0, [r7, #14]
 80015e6:	f7ff ff9d 	bl	8001524 <lcdSetWindow>

  do
  {
    lcdWriteData(data[i++]);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	617a      	str	r2, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	4413      	add	r3, r2
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f825 	bl	8001648 <lcdWriteData>
  }
  while (i < dataLength);
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3f1      	bcc.n	80015ea <lcdDrawPixels+0x2e>
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000018 	.word	0x20000018

08001614 <lcdReset>:

static void lcdReset(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8001618:	2001      	movs	r0, #1
 800161a:	f000 f805 	bl	8001628 <lcdWriteCommand>
	HAL_Delay(50);
 800161e:	2032      	movs	r0, #50	@ 0x32
 8001620:	f002 f8d8 	bl	80037d4 <HAL_Delay>
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8001632:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001636:	79fa      	ldrb	r2, [r7, #7]
 8001638:	b292      	uxth	r2, r2
 800163a:	801a      	strh	r2, [r3, #0]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8001652:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <lcdWriteData+0x1c>)
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	8013      	strh	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	60080000 	.word	0x60080000

08001668 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8001668:	b490      	push	{r4, r7}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4604      	mov	r4, r0
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	4623      	mov	r3, r4
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	4603      	mov	r3, r0
 800167c:	71bb      	strb	r3, [r7, #6]
 800167e:	460b      	mov	r3, r1
 8001680:	717b      	strb	r3, [r7, #5]
 8001682:	4613      	mov	r3, r2
 8001684:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 800168a:	7f3b      	ldrb	r3, [r7, #28]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <lcdBuildMemoryAccessControlConfig+0x30>
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8001698:	7e3b      	ldrb	r3, [r7, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <lcdBuildMemoryAccessControlConfig+0x3e>
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 80016a6:	793b      	ldrb	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <lcdBuildMemoryAccessControlConfig+0x4c>
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	f043 0310 	orr.w	r3, r3, #16
 80016b2:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 80016b4:	797b      	ldrb	r3, [r7, #5]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <lcdBuildMemoryAccessControlConfig+0x5a>
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	f043 0320 	orr.w	r3, r3, #32
 80016c0:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 80016c2:	79bb      	ldrb	r3, [r7, #6]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <lcdBuildMemoryAccessControlConfig+0x68>
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016ce:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <lcdBuildMemoryAccessControlConfig+0x76>
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016dc:	73fb      	strb	r3, [r7, #15]
  return value;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc90      	pop	{r4, r7}
 80016e8:	4770      	bx	lr
	...

080016ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f2:	f001 fffd 	bl	80036f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f6:	f000 f82d 	bl	8001754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fa:	f000 f8f5 	bl	80018e8 <MX_GPIO_Init>
  MX_FSMC_Init();
 80016fe:	f000 f985 	bl	8001a0c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001702:	f000 f8c7 	bl	8001894 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001706:	f000 f88f 	bl	8001828 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  LCD_BL_ON();
 800170a:	2201      	movs	r2, #1
 800170c:	2102      	movs	r1, #2
 800170e:	4810      	ldr	r0, [pc, #64]	@ (8001750 <main+0x64>)
 8001710:	f002 fbc4 	bl	8003e9c <HAL_GPIO_WritePin>
  lcdInit();
 8001714:	f7fe ff24 	bl	8000560 <lcdInit>
  int i = 2;
 8001718:	2302      	movs	r3, #2
 800171a:	607b      	str	r3, [r7, #4]
  lcdSetOrientation(i%4);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	425a      	negs	r2, r3
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	f002 0203 	and.w	r2, r2, #3
 8001728:	bf58      	it	pl
 800172a:	4253      	negpl	r3, r2
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe74 	bl	800141c <lcdSetOrientation>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   Screen1();
 8001734:	f001 fd00 	bl	8003138 <Screen1>
	   HAL_Delay(2000);
 8001738:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800173c:	f002 f84a 	bl	80037d4 <HAL_Delay>
	   Screen2();
 8001740:	f001 fd56 	bl	80031f0 <Screen2>
	   HAL_Delay(2000);
 8001744:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001748:	f002 f844 	bl	80037d4 <HAL_Delay>
	   Screen1();
 800174c:	bf00      	nop
 800174e:	e7f1      	b.n	8001734 <main+0x48>
 8001750:	40020400 	.word	0x40020400

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b094      	sub	sp, #80	@ 0x50
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 0320 	add.w	r3, r7, #32
 800175e:	2230      	movs	r2, #48	@ 0x30
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f004 f934 	bl	80059d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <SystemClock_Config+0xcc>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	4a27      	ldr	r2, [pc, #156]	@ (8001820 <SystemClock_Config+0xcc>)
 8001782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001786:	6413      	str	r3, [r2, #64]	@ 0x40
 8001788:	4b25      	ldr	r3, [pc, #148]	@ (8001820 <SystemClock_Config+0xcc>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <SystemClock_Config+0xd0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a21      	ldr	r2, [pc, #132]	@ (8001824 <SystemClock_Config+0xd0>)
 800179e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <SystemClock_Config+0xd0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b0:	2301      	movs	r3, #1
 80017b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ba:	2302      	movs	r3, #2
 80017bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017c4:	2304      	movs	r3, #4
 80017c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017c8:	23a8      	movs	r3, #168	@ 0xa8
 80017ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017cc:	2302      	movs	r3, #2
 80017ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017d0:	2304      	movs	r3, #4
 80017d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d4:	f107 0320 	add.w	r3, r7, #32
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fb79 	bl	8003ed0 <HAL_RCC_OscConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017e4:	f001 fdbb 	bl	800335e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e8:	230f      	movs	r3, #15
 80017ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ec:	2302      	movs	r3, #2
 80017ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2105      	movs	r1, #5
 8001806:	4618      	mov	r0, r3
 8001808:	f002 fdda 	bl	80043c0 <HAL_RCC_ClockConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001812:	f001 fda4 	bl	800335e <Error_Handler>
  }
}
 8001816:	bf00      	nop
 8001818:	3750      	adds	r7, #80	@ 0x50
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000

08001828 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800182c:	4b17      	ldr	r3, [pc, #92]	@ (800188c <MX_SPI2_Init+0x64>)
 800182e:	4a18      	ldr	r2, [pc, #96]	@ (8001890 <MX_SPI2_Init+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001832:	4b16      	ldr	r3, [pc, #88]	@ (800188c <MX_SPI2_Init+0x64>)
 8001834:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001838:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <MX_SPI2_Init+0x64>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <MX_SPI2_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <MX_SPI2_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800184c:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <MX_SPI2_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <MX_SPI2_Init+0x64>)
 8001854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001858:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <MX_SPI2_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <MX_SPI2_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MX_SPI2_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800186c:	4b07      	ldr	r3, [pc, #28]	@ (800188c <MX_SPI2_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <MX_SPI2_Init+0x64>)
 8001874:	220a      	movs	r2, #10
 8001876:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <MX_SPI2_Init+0x64>)
 800187a:	f002 ffc1 	bl	8004800 <HAL_SPI_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001884:	f001 fd6b 	bl	800335e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200001b0 	.word	0x200001b0
 8001890:	40003800 	.word	0x40003800

08001894 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 800189a:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <MX_USART1_UART_Init+0x50>)
 800189c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018cc:	f003 f869 	bl	80049a2 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018d6:	f001 fd42 	bl	800335e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000208 	.word	0x20000208
 80018e4:	40011000 	.word	0x40011000

080018e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	@ 0x30
 80018ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	4b3f      	ldr	r3, [pc, #252]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a3e      	ldr	r2, [pc, #248]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	4b38      	ldr	r3, [pc, #224]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a37      	ldr	r2, [pc, #220]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b35      	ldr	r3, [pc, #212]	@ (8001a00 <MX_GPIO_Init+0x118>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <MX_GPIO_Init+0x118>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a30      	ldr	r2, [pc, #192]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b2e      	ldr	r3, [pc, #184]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a29      	ldr	r2, [pc, #164]	@ (8001a00 <MX_GPIO_Init+0x118>)
 800195c:	f043 0310 	orr.w	r3, r3, #16
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b27      	ldr	r3, [pc, #156]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a22      	ldr	r2, [pc, #136]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <MX_GPIO_Init+0x118>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <MX_GPIO_Init+0x118>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_Pen_GPIO_Port, T_Pen_Pin, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2120      	movs	r1, #32
 80019aa:	4816      	ldr	r0, [pc, #88]	@ (8001a04 <MX_GPIO_Init+0x11c>)
 80019ac:	f002 fa76 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	f241 0102 	movw	r1, #4098	@ 0x1002
 80019b6:	4814      	ldr	r0, [pc, #80]	@ (8001a08 <MX_GPIO_Init+0x120>)
 80019b8:	f002 fa70 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_Pen_Pin */
  GPIO_InitStruct.Pin = T_Pen_Pin;
 80019bc:	2320      	movs	r3, #32
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(T_Pen_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <MX_GPIO_Init+0x11c>)
 80019d4:	f002 f8c6 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|T_CS_Pin;
 80019d8:	f241 0302 	movw	r3, #4098	@ 0x1002
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <MX_GPIO_Init+0x120>)
 80019f2:	f002 f8b7 	bl	8003b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f6:	bf00      	nop
 80019f8:	3730      	adds	r7, #48	@ 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020400 	.word	0x40020400

08001a0c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	615a      	str	r2, [r3, #20]
 8001a22:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a26:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001a2a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a2e:	4a26      	ldr	r2, [pc, #152]	@ (8001ac8 <MX_FSMC_Init+0xbc>)
 8001a30:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001a32:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001a38:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001a44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a46:	2210      	movs	r2, #16
 8001a48:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001a62:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a68:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001a70:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001a76:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001a8c:	230f      	movs	r3, #15
 8001a8e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8001a90:	2305      	movs	r3, #5
 8001a92:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001a98:	2310      	movs	r3, #16
 8001a9a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001a9c:	2311      	movs	r3, #17
 8001a9e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4806      	ldr	r0, [pc, #24]	@ (8001ac4 <MX_FSMC_Init+0xb8>)
 8001aac:	f002 ff31 	bl	8004912 <HAL_SRAM_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001ab6:	f001 fc52 	bl	800335e <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001aba:	bf00      	nop
 8001abc:	3720      	adds	r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000250 	.word	0x20000250
 8001ac8:	a0000104 	.word	0xa0000104

08001acc <DrawCloud>:
  lcdDrawImage(0, (lcdGetHeight() - bmBackGround.ySize) / 2, &bmBackGround);
 }
 return HAL_GetTick() - start;
}

void DrawCloud(int x, int y) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmicon3);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	b291      	uxth	r1, r2
 8001ade:	4a04      	ldr	r2, [pc, #16]	@ (8001af0 <DrawCloud+0x24>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff faeb 	bl	80010bc <lcdDrawImage>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	08016728 	.word	0x08016728

08001af4 <TextTitle>:

void TextTitle(int16_t x, int16_t y){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	460a      	mov	r2, r1
 8001afe:	80fb      	strh	r3, [r7, #6]
 8001b00:	4613      	mov	r3, r2
 8001b02:	80bb      	strh	r3, [r7, #4]
	lcdSetCursor(x, y);
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	88ba      	ldrh	r2, [r7, #4]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fcf0 	bl	80014f0 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8001b10:	f249 517f 	movw	r1, #38271	@ 0x957f
 8001b14:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b18:	f7ff fc6a 	bl	80013f0 <lcdSetTextColor>
	lcdSetTextFont(&Font16);
 8001b1c:	4804      	ldr	r0, [pc, #16]	@ (8001b30 <TextTitle+0x3c>)
 8001b1e:	f7ff fc57 	bl	80013d0 <lcdSetTextFont>
	lcdPrintf("Weather Report\r\n");
 8001b22:	4804      	ldr	r0, [pc, #16]	@ (8001b34 <TextTitle+0x40>)
 8001b24:	f7ff fbc8 	bl	80012b8 <lcdPrintf>

}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000008 	.word	0x20000008
 8001b34:	08006414 	.word	0x08006414

08001b38 <CloudRain>:
	lcdDrawThickArc(x0 , y0 ,r , start_angle , -93  , thickness , COLOR_GREEN);
	lcdDrawThickArc(x0 , y0 ,r , -87 , -23  , thickness , COLOR_BLUE);
	lcdDrawThickArc(x0 , y0 ,r , -17 , end_angle  , thickness , COLOR_ORANGE);
}

void CloudRain (int x, int y){
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	b218      	sxth	r0, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b219      	sxth	r1, r3
 8001b4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2305      	movs	r3, #5
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	230a      	movs	r3, #10
 8001b56:	221e      	movs	r2, #30
 8001b58:	f7ff fa4a 	bl	8000ff0 <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	3318      	adds	r3, #24
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	b218      	sxth	r0, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	b219      	sxth	r1, r3
 8001b70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b74:	2207      	movs	r2, #7
 8001b76:	f7ff f906 	bl	8000d86 <lcdFillCircle>
    lcdFillCircle(x + 15, y , 9, COLOR_WHITE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	330f      	adds	r3, #15
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b218      	sxth	r0, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b219      	sxth	r1, r3
 8001b88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b8c:	2209      	movs	r2, #9
 8001b8e:	f7ff f8fa 	bl	8000d86 <lcdFillCircle>

    lcdDrawLine(x + 7, y + 13, x + 5, y + 16, COLOR_BLUE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3307      	adds	r3, #7
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	b218      	sxth	r0, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	330d      	adds	r3, #13
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b219      	sxth	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3305      	adds	r3, #5
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3310      	adds	r3, #16
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	241f      	movs	r4, #31
 8001bbc:	9400      	str	r4, [sp, #0]
 8001bbe:	f7fe ff27 	bl	8000a10 <lcdDrawLine>
    lcdDrawLine(x + 8, y + 13, x + 6, y + 16, COLOR_BLUE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	b218      	sxth	r0, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	330d      	adds	r3, #13
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	b219      	sxth	r1, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3306      	adds	r3, #6
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	3310      	adds	r3, #16
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	241f      	movs	r4, #31
 8001bec:	9400      	str	r4, [sp, #0]
 8001bee:	f7fe ff0f 	bl	8000a10 <lcdDrawLine>

    lcdDrawLine(x + 13, y + 13, x + 8, y + 19, COLOR_BLUE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	330d      	adds	r3, #13
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	b218      	sxth	r0, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	330d      	adds	r3, #13
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b219      	sxth	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3313      	adds	r3, #19
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	241f      	movs	r4, #31
 8001c1c:	9400      	str	r4, [sp, #0]
 8001c1e:	f7fe fef7 	bl	8000a10 <lcdDrawLine>
    lcdDrawLine(x + 14, y + 13, x + 9, y + 19, COLOR_BLUE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	330e      	adds	r3, #14
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	b218      	sxth	r0, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	330d      	adds	r3, #13
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b219      	sxth	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3309      	adds	r3, #9
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	b21a      	sxth	r2, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3313      	adds	r3, #19
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	241f      	movs	r4, #31
 8001c4c:	9400      	str	r4, [sp, #0]
 8001c4e:	f7fe fedf 	bl	8000a10 <lcdDrawLine>

    lcdDrawLine(x + 19, y + 13, x + 17, y + 16, COLOR_BLUE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3313      	adds	r3, #19
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	b218      	sxth	r0, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	330d      	adds	r3, #13
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b219      	sxth	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3311      	adds	r3, #17
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3310      	adds	r3, #16
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	241f      	movs	r4, #31
 8001c7c:	9400      	str	r4, [sp, #0]
 8001c7e:	f7fe fec7 	bl	8000a10 <lcdDrawLine>
    lcdDrawLine(x + 20, y + 13, x + 18, y + 16, COLOR_BLUE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3314      	adds	r3, #20
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	b218      	sxth	r0, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	330d      	adds	r3, #13
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	b219      	sxth	r1, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3312      	adds	r3, #18
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3310      	adds	r3, #16
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	241f      	movs	r4, #31
 8001cac:	9400      	str	r4, [sp, #0]
 8001cae:	f7fe feaf 	bl	8000a10 <lcdDrawLine>

    lcdDrawLine(x + 25, y + 13, x + 20, y + 19, COLOR_BLUE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3319      	adds	r3, #25
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	b218      	sxth	r0, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	330d      	adds	r3, #13
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b219      	sxth	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3314      	adds	r3, #20
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3313      	adds	r3, #19
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	241f      	movs	r4, #31
 8001cdc:	9400      	str	r4, [sp, #0]
 8001cde:	f7fe fe97 	bl	8000a10 <lcdDrawLine>
    lcdDrawLine(x + 26, y + 13, x + 21, y + 19, COLOR_BLUE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	331a      	adds	r3, #26
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	b218      	sxth	r0, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	330d      	adds	r3, #13
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b219      	sxth	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3315      	adds	r3, #21
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b21a      	sxth	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3313      	adds	r3, #19
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	241f      	movs	r4, #31
 8001d0c:	9400      	str	r4, [sp, #0]
 8001d0e:	f7fe fe7f 	bl	8000a10 <lcdDrawLine>
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}

08001d1a <CloudSun>:
void CloudSun (int x, int y){
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af02      	add	r7, sp, #8
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]

	lcdFillCircle(x + 21, y - 5 , 7, COLOR_DARKYELLOW);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3315      	adds	r3, #21
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	b218      	sxth	r0, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b05      	subs	r3, #5
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	b219      	sxth	r1, r3
 8001d38:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	f7ff f822 	bl	8000d86 <lcdFillCircle>
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	b218      	sxth	r0, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b219      	sxth	r1, r3
 8001d4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	2305      	movs	r3, #5
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	230a      	movs	r3, #10
 8001d56:	221e      	movs	r2, #30
 8001d58:	f7ff f94a 	bl	8000ff0 <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3318      	adds	r3, #24
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	b218      	sxth	r0, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b219      	sxth	r1, r3
 8001d70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d74:	2207      	movs	r2, #7
 8001d76:	f7ff f806 	bl	8000d86 <lcdFillCircle>
    lcdFillCircle(x + 15, y , 9, COLOR_WHITE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	330f      	adds	r3, #15
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	b218      	sxth	r0, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b219      	sxth	r1, r3
 8001d88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d8c:	2209      	movs	r2, #9
 8001d8e:	f7fe fffa 	bl	8000d86 <lcdFillCircle>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <CloudThunder>:
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
    lcdFillCircle(x + 20, y , 9, COLOR_WHITE);


}
void CloudThunder (int x, int y){
 8001d9a:	b590      	push	{r4, r7, lr}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af02      	add	r7, sp, #8
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	b218      	sxth	r0, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b219      	sxth	r1, r3
 8001dac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	2305      	movs	r3, #5
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	230a      	movs	r3, #10
 8001db8:	221e      	movs	r2, #30
 8001dba:	f7ff f919 	bl	8000ff0 <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	b218      	sxth	r0, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3302      	adds	r3, #2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	b219      	sxth	r1, r3
 8001dd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	f7fe ffd5 	bl	8000d86 <lcdFillCircle>
    lcdFillCircle(x + 15, y , 9, COLOR_WHITE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	330f      	adds	r3, #15
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b218      	sxth	r0, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b219      	sxth	r1, r3
 8001dea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dee:	2209      	movs	r2, #9
 8001df0:	f7fe ffc9 	bl	8000d86 <lcdFillCircle>

    // Draw the first thunderbolt using lines for a zigzag shape
        lcdDrawLine(x + 7, y + 10, x + 5, y + 15, COLOR_YELLOW);   // First thunderbolt
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3307      	adds	r3, #7
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	b218      	sxth	r0, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	330a      	adds	r3, #10
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b219      	sxth	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3305      	adds	r3, #5
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	330f      	adds	r3, #15
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	b21b      	sxth	r3, r3
 8001e1c:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8001e20:	9400      	str	r4, [sp, #0]
 8001e22:	f7fe fdf5 	bl	8000a10 <lcdDrawLine>
        lcdDrawLine(x + 5, y + 15, x + 9, y + 15, COLOR_YELLOW);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3305      	adds	r3, #5
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	b218      	sxth	r0, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	330f      	adds	r3, #15
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	b219      	sxth	r1, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3309      	adds	r3, #9
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	b21a      	sxth	r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	330f      	adds	r3, #15
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8001e52:	9400      	str	r4, [sp, #0]
 8001e54:	f7fe fddc 	bl	8000a10 <lcdDrawLine>
        lcdDrawLine(x + 9, y + 15, x + 6, y + 21, COLOR_YELLOW);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3309      	adds	r3, #9
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	b218      	sxth	r0, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	330f      	adds	r3, #15
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b219      	sxth	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3306      	adds	r3, #6
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	b21a      	sxth	r2, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3315      	adds	r3, #21
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8001e84:	9400      	str	r4, [sp, #0]
 8001e86:	f7fe fdc3 	bl	8000a10 <lcdDrawLine>

        // Draw the second thunderbolt (centered below the cloud)
        lcdDrawLine(x + 15, y + 10, x + 13, y + 15, COLOR_YELLOW);  // Second thunderbolt
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	330f      	adds	r3, #15
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	b218      	sxth	r0, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	330a      	adds	r3, #10
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	b219      	sxth	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	330d      	adds	r3, #13
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	330f      	adds	r3, #15
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8001eb6:	9400      	str	r4, [sp, #0]
 8001eb8:	f7fe fdaa 	bl	8000a10 <lcdDrawLine>
        lcdDrawLine(x + 13, y + 15, x + 17, y + 15, COLOR_YELLOW);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	330d      	adds	r3, #13
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b218      	sxth	r0, r3
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	330f      	adds	r3, #15
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	b219      	sxth	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3311      	adds	r3, #17
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	b21a      	sxth	r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	330f      	adds	r3, #15
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8001ee8:	9400      	str	r4, [sp, #0]
 8001eea:	f7fe fd91 	bl	8000a10 <lcdDrawLine>
        lcdDrawLine(x + 17, y + 15, x + 14, y + 21, COLOR_YELLOW);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3311      	adds	r3, #17
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	b218      	sxth	r0, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	330f      	adds	r3, #15
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b219      	sxth	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	330e      	adds	r3, #14
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3315      	adds	r3, #21
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8001f1a:	9400      	str	r4, [sp, #0]
 8001f1c:	f7fe fd78 	bl	8000a10 <lcdDrawLine>

        // Draw the third thunderbolt (right side)
        lcdDrawLine(x + 23, y + 10, x + 21, y + 15, COLOR_YELLOW);  // Third thunderbolt
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3317      	adds	r3, #23
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	b218      	sxth	r0, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	330a      	adds	r3, #10
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b219      	sxth	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3315      	adds	r3, #21
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	330f      	adds	r3, #15
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8001f4c:	9400      	str	r4, [sp, #0]
 8001f4e:	f7fe fd5f 	bl	8000a10 <lcdDrawLine>
        lcdDrawLine(x + 21, y + 15, x + 25, y + 15, COLOR_YELLOW);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3315      	adds	r3, #21
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	b218      	sxth	r0, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	330f      	adds	r3, #15
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	b219      	sxth	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	3319      	adds	r3, #25
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	330f      	adds	r3, #15
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8001f7e:	9400      	str	r4, [sp, #0]
 8001f80:	f7fe fd46 	bl	8000a10 <lcdDrawLine>
        lcdDrawLine(x + 25, y + 15, x + 22, y + 21, COLOR_YELLOW);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3319      	adds	r3, #25
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	b218      	sxth	r0, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	330f      	adds	r3, #15
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	b219      	sxth	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3316      	adds	r3, #22
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3315      	adds	r3, #21
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8001fb0:	9400      	str	r4, [sp, #0]
 8001fb2:	f7fe fd2d 	bl	8000a10 <lcdDrawLine>

        // Draw the first thunderbolt using lines for a zigzag shape
		lcdDrawLine(x + 7 + 1, y + 10, x + 5 + 1, y + 15, COLOR_YELLOW);   // First thunderbolt
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	3308      	adds	r3, #8
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	b218      	sxth	r0, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	330a      	adds	r3, #10
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	b219      	sxth	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3306      	adds	r3, #6
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	330f      	adds	r3, #15
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8001fe2:	9400      	str	r4, [sp, #0]
 8001fe4:	f7fe fd14 	bl	8000a10 <lcdDrawLine>
		lcdDrawLine(x + 5 + 1, y + 15, x + 9 + 1, y + 15, COLOR_YELLOW);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3306      	adds	r3, #6
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	b218      	sxth	r0, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	330f      	adds	r3, #15
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b219      	sxth	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	330a      	adds	r3, #10
 8002002:	b29b      	uxth	r3, r3
 8002004:	b21a      	sxth	r2, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	330f      	adds	r3, #15
 800200c:	b29b      	uxth	r3, r3
 800200e:	b21b      	sxth	r3, r3
 8002010:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002014:	9400      	str	r4, [sp, #0]
 8002016:	f7fe fcfb 	bl	8000a10 <lcdDrawLine>
		lcdDrawLine(x + 9 + 1, y + 15, x + 6 + 1, y + 21, COLOR_YELLOW);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	b29b      	uxth	r3, r3
 800201e:	330a      	adds	r3, #10
 8002020:	b29b      	uxth	r3, r3
 8002022:	b218      	sxth	r0, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	330f      	adds	r3, #15
 800202a:	b29b      	uxth	r3, r3
 800202c:	b219      	sxth	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	b29b      	uxth	r3, r3
 8002032:	3307      	adds	r3, #7
 8002034:	b29b      	uxth	r3, r3
 8002036:	b21a      	sxth	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	3315      	adds	r3, #21
 800203e:	b29b      	uxth	r3, r3
 8002040:	b21b      	sxth	r3, r3
 8002042:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002046:	9400      	str	r4, [sp, #0]
 8002048:	f7fe fce2 	bl	8000a10 <lcdDrawLine>

		// Draw the second thunderbolt (centered below the cloud)
		lcdDrawLine(x + 15 + 1, y + 10, x + 13 + 1, y + 15, COLOR_YELLOW);  // Second thunderbolt
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	b29b      	uxth	r3, r3
 8002050:	3310      	adds	r3, #16
 8002052:	b29b      	uxth	r3, r3
 8002054:	b218      	sxth	r0, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	330a      	adds	r3, #10
 800205c:	b29b      	uxth	r3, r3
 800205e:	b219      	sxth	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	b29b      	uxth	r3, r3
 8002064:	330e      	adds	r3, #14
 8002066:	b29b      	uxth	r3, r3
 8002068:	b21a      	sxth	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	330f      	adds	r3, #15
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21b      	sxth	r3, r3
 8002074:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002078:	9400      	str	r4, [sp, #0]
 800207a:	f7fe fcc9 	bl	8000a10 <lcdDrawLine>
		lcdDrawLine(x + 13 + 1, y + 15, x + 17 + 1, y + 15, COLOR_YELLOW);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	b29b      	uxth	r3, r3
 8002082:	330e      	adds	r3, #14
 8002084:	b29b      	uxth	r3, r3
 8002086:	b218      	sxth	r0, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	330f      	adds	r3, #15
 800208e:	b29b      	uxth	r3, r3
 8002090:	b219      	sxth	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	b29b      	uxth	r3, r3
 8002096:	3312      	adds	r3, #18
 8002098:	b29b      	uxth	r3, r3
 800209a:	b21a      	sxth	r2, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	330f      	adds	r3, #15
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 80020aa:	9400      	str	r4, [sp, #0]
 80020ac:	f7fe fcb0 	bl	8000a10 <lcdDrawLine>
		lcdDrawLine(x + 17 + 1, y + 15, x + 14 + 1, y + 21, COLOR_YELLOW);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3312      	adds	r3, #18
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	b218      	sxth	r0, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	330f      	adds	r3, #15
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	b219      	sxth	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	330f      	adds	r3, #15
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3315      	adds	r3, #21
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 80020dc:	9400      	str	r4, [sp, #0]
 80020de:	f7fe fc97 	bl	8000a10 <lcdDrawLine>

		// Draw the third thunderbolt (right side)
		lcdDrawLine(x + 23 + 1, y + 10, x + 21 + 1, y + 15, COLOR_YELLOW);  // Third thunderbolt
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3318      	adds	r3, #24
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	b218      	sxth	r0, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	330a      	adds	r3, #10
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b219      	sxth	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3316      	adds	r3, #22
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b21a      	sxth	r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	330f      	adds	r3, #15
 8002106:	b29b      	uxth	r3, r3
 8002108:	b21b      	sxth	r3, r3
 800210a:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 800210e:	9400      	str	r4, [sp, #0]
 8002110:	f7fe fc7e 	bl	8000a10 <lcdDrawLine>
		lcdDrawLine(x + 21 + 1, y + 15, x + 25 + 1, y + 15, COLOR_YELLOW);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	b29b      	uxth	r3, r3
 8002118:	3316      	adds	r3, #22
 800211a:	b29b      	uxth	r3, r3
 800211c:	b218      	sxth	r0, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	330f      	adds	r3, #15
 8002124:	b29b      	uxth	r3, r3
 8002126:	b219      	sxth	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	b29b      	uxth	r3, r3
 800212c:	331a      	adds	r3, #26
 800212e:	b29b      	uxth	r3, r3
 8002130:	b21a      	sxth	r2, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	330f      	adds	r3, #15
 8002138:	b29b      	uxth	r3, r3
 800213a:	b21b      	sxth	r3, r3
 800213c:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002140:	9400      	str	r4, [sp, #0]
 8002142:	f7fe fc65 	bl	8000a10 <lcdDrawLine>
		lcdDrawLine(x + 25 + 1, y + 15, x + 22 + 1, y + 21, COLOR_YELLOW);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	b29b      	uxth	r3, r3
 800214a:	331a      	adds	r3, #26
 800214c:	b29b      	uxth	r3, r3
 800214e:	b218      	sxth	r0, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	330f      	adds	r3, #15
 8002156:	b29b      	uxth	r3, r3
 8002158:	b219      	sxth	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	b29b      	uxth	r3, r3
 800215e:	3317      	adds	r3, #23
 8002160:	b29b      	uxth	r3, r3
 8002162:	b21a      	sxth	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	3315      	adds	r3, #21
 800216a:	b29b      	uxth	r3, r3
 800216c:	b21b      	sxth	r3, r3
 800216e:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002172:	9400      	str	r4, [sp, #0]
 8002174:	f7fe fc4c 	bl	8000a10 <lcdDrawLine>
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}

08002180 <interpolateColor>:

uint16_t interpolateColor(uint16_t color1, uint16_t color2, float ratio) {
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	@ 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	460a      	mov	r2, r1
 800218a:	ed87 0a02 	vstr	s0, [r7, #8]
 800218e:	81fb      	strh	r3, [r7, #14]
 8002190:	4613      	mov	r3, r2
 8002192:	81bb      	strh	r3, [r7, #12]
    uint8_t r1 = (color1 >> 11) & 0x1F;
 8002194:	89fb      	ldrh	r3, [r7, #14]
 8002196:	0adb      	lsrs	r3, r3, #11
 8002198:	b29b      	uxth	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	77fb      	strb	r3, [r7, #31]
    uint8_t g1 = (color1 >> 5) & 0x3F;
 80021a2:	89fb      	ldrh	r3, [r7, #14]
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021ae:	77bb      	strb	r3, [r7, #30]
    uint8_t b1 = color1 & 0x1F;
 80021b0:	89fb      	ldrh	r3, [r7, #14]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	777b      	strb	r3, [r7, #29]

    uint8_t r2 = (color2 >> 11) & 0x1F;
 80021ba:	89bb      	ldrh	r3, [r7, #12]
 80021bc:	0adb      	lsrs	r3, r3, #11
 80021be:	b29b      	uxth	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	773b      	strb	r3, [r7, #28]
    uint8_t g2 = (color2 >> 5) & 0x3F;
 80021c8:	89bb      	ldrh	r3, [r7, #12]
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021d4:	76fb      	strb	r3, [r7, #27]
    uint8_t b2 = color2 & 0x1F;
 80021d6:	89bb      	ldrh	r3, [r7, #12]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	76bb      	strb	r3, [r7, #26]

    uint8_t r = r1 + (r2 - r1) * ratio;
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ea:	7f3a      	ldrb	r2, [r7, #28]
 80021ec:	7ffb      	ldrb	r3, [r7, #31]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80021fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002208:	edc7 7a01 	vstr	s15, [r7, #4]
 800220c:	793b      	ldrb	r3, [r7, #4]
 800220e:	767b      	strb	r3, [r7, #25]
    uint8_t g = g1 + (g2 - g1) * ratio;
 8002210:	7fbb      	ldrb	r3, [r7, #30]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800221a:	7efa      	ldrb	r2, [r7, #27]
 800221c:	7fbb      	ldrb	r3, [r7, #30]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002228:	edd7 7a02 	vldr	s15, [r7, #8]
 800222c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002238:	edc7 7a01 	vstr	s15, [r7, #4]
 800223c:	793b      	ldrb	r3, [r7, #4]
 800223e:	763b      	strb	r3, [r7, #24]
    uint8_t b = b1 + (b2 - b1) * ratio;
 8002240:	7f7b      	ldrb	r3, [r7, #29]
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800224a:	7eba      	ldrb	r2, [r7, #26]
 800224c:	7f7b      	ldrb	r3, [r7, #29]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002258:	edd7 7a02 	vldr	s15, [r7, #8]
 800225c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002268:	edc7 7a01 	vstr	s15, [r7, #4]
 800226c:	793b      	ldrb	r3, [r7, #4]
 800226e:	75fb      	strb	r3, [r7, #23]

    return (r << 11) | (g << 5) | b;
 8002270:	7e7b      	ldrb	r3, [r7, #25]
 8002272:	02db      	lsls	r3, r3, #11
 8002274:	b21a      	sxth	r2, r3
 8002276:	7e3b      	ldrb	r3, [r7, #24]
 8002278:	015b      	lsls	r3, r3, #5
 800227a:	b21b      	sxth	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b21a      	sxth	r2, r3
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	b21b      	sxth	r3, r3
 8002284:	4313      	orrs	r3, r2
 8002286:	b21b      	sxth	r3, r3
 8002288:	b29b      	uxth	r3, r3
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	@ 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <DrawGradientLine>:

void DrawGradientLine(int16_t x, int16_t y, int16_t length, int16_t thickness, uint16_t colorStart, uint16_t colorEnd) {
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	4604      	mov	r4, r0
 80022a0:	4608      	mov	r0, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4623      	mov	r3, r4
 80022a8:	80fb      	strh	r3, [r7, #6]
 80022aa:	4603      	mov	r3, r0
 80022ac:	80bb      	strh	r3, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	807b      	strh	r3, [r7, #2]
 80022b2:	4613      	mov	r3, r2
 80022b4:	803b      	strh	r3, [r7, #0]
    // Radius for rounded ends, equal to half the thickness of the line
    int16_t radius = thickness / 2;
 80022b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80022ba:	0fda      	lsrs	r2, r3, #31
 80022bc:	4413      	add	r3, r2
 80022be:	105b      	asrs	r3, r3, #1
 80022c0:	827b      	strh	r3, [r7, #18]

    // Draw the main gradient line with thickness
    for (int16_t i = 0; i < length; i++) {
 80022c2:	2300      	movs	r3, #0
 80022c4:	82fb      	strh	r3, [r7, #22]
 80022c6:	e03d      	b.n	8002344 <DrawGradientLine+0xac>
        float ratio = (float)i / length;  // Calculate the interpolation ratio
 80022c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022d8:	ee07 3a90 	vmov	s15, r3
 80022dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e4:	edc7 7a03 	vstr	s15, [r7, #12]
        uint16_t color = interpolateColor(colorStart, colorEnd, ratio);
 80022e8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80022ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80022ec:	ed97 0a03 	vldr	s0, [r7, #12]
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff44 	bl	8002180 <interpolateColor>
 80022f8:	4603      	mov	r3, r0
 80022fa:	817b      	strh	r3, [r7, #10]

        // Draw a vertical line of "thickness" pixels at each position along the gradient line
        for (int16_t j = -radius + 1; j <= radius; j++) {
 80022fc:	8a7b      	ldrh	r3, [r7, #18]
 80022fe:	f1c3 0301 	rsb	r3, r3, #1
 8002302:	b29b      	uxth	r3, r3
 8002304:	82bb      	strh	r3, [r7, #20]
 8002306:	e011      	b.n	800232c <DrawGradientLine+0x94>
            lcdDrawPixel(x + i , y + j, color);  // Center the thickness vertically
 8002308:	88fa      	ldrh	r2, [r7, #6]
 800230a:	8afb      	ldrh	r3, [r7, #22]
 800230c:	4413      	add	r3, r2
 800230e:	b298      	uxth	r0, r3
 8002310:	88ba      	ldrh	r2, [r7, #4]
 8002312:	8abb      	ldrh	r3, [r7, #20]
 8002314:	4413      	add	r3, r2
 8002316:	b29b      	uxth	r3, r3
 8002318:	897a      	ldrh	r2, [r7, #10]
 800231a:	4619      	mov	r1, r3
 800231c:	f7fe fabe 	bl	800089c <lcdDrawPixel>
        for (int16_t j = -radius + 1; j <= radius; j++) {
 8002320:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002324:	b29b      	uxth	r3, r3
 8002326:	3301      	adds	r3, #1
 8002328:	b29b      	uxth	r3, r3
 800232a:	82bb      	strh	r3, [r7, #20]
 800232c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002330:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002334:	429a      	cmp	r2, r3
 8002336:	dde7      	ble.n	8002308 <DrawGradientLine+0x70>
    for (int16_t i = 0; i < length; i++) {
 8002338:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800233c:	b29b      	uxth	r3, r3
 800233e:	3301      	adds	r3, #1
 8002340:	b29b      	uxth	r3, r3
 8002342:	82fb      	strh	r3, [r7, #22]
 8002344:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002348:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800234c:	429a      	cmp	r2, r3
 800234e:	dbbb      	blt.n	80022c8 <DrawGradientLine+0x30>
        }
    }

    // Draw rounded ends as circles with colors matching the ends of the gradient
    lcdFillCircle(x, y  , radius - 1, colorStart);                 // Start of the line
 8002350:	8a7b      	ldrh	r3, [r7, #18]
 8002352:	3b01      	subs	r3, #1
 8002354:	b29b      	uxth	r3, r3
 8002356:	b21a      	sxth	r2, r3
 8002358:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800235a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800235e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002362:	f7fe fd10 	bl	8000d86 <lcdFillCircle>
    lcdFillCircle(x + length - 1, y , radius - 1, colorEnd);      // End of the line
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	4413      	add	r3, r2
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	b218      	sxth	r0, r3
 8002374:	8a7b      	ldrh	r3, [r7, #18]
 8002376:	3b01      	subs	r3, #1
 8002378:	b29b      	uxth	r3, r3
 800237a:	b21a      	sxth	r2, r3
 800237c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800237e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002382:	f7fe fd00 	bl	8000d86 <lcdFillCircle>
    lcdDrawCircle(x + length / 3, y , radius , COLOR_THEME_SKYBLUE_BASE);
 8002386:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800238a:	4a17      	ldr	r2, [pc, #92]	@ (80023e8 <DrawGradientLine+0x150>)
 800238c:	fb82 1203 	smull	r1, r2, r2, r3
 8002390:	17db      	asrs	r3, r3, #31
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	b21b      	sxth	r3, r3
 8002396:	b29a      	uxth	r2, r3
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	4413      	add	r3, r2
 800239c:	b29b      	uxth	r3, r3
 800239e:	b218      	sxth	r0, r3
 80023a0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023a4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80023a8:	f249 537f 	movw	r3, #38271	@ 0x957f
 80023ac:	f7fe fc17 	bl	8000bde <lcdDrawCircle>
    lcdDrawCircle(x + length / 3, y , radius - 1 , COLOR_WHITE);
 80023b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023b4:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <DrawGradientLine+0x150>)
 80023b6:	fb82 1203 	smull	r1, r2, r2, r3
 80023ba:	17db      	asrs	r3, r3, #31
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	b21b      	sxth	r3, r3
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	4413      	add	r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	b218      	sxth	r0, r3
 80023ca:	8a7b      	ldrh	r3, [r7, #18]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80023d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023da:	f7fe fc00 	bl	8000bde <lcdDrawCircle>
}
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd90      	pop	{r4, r7, pc}
 80023e6:	bf00      	nop
 80023e8:	55555556 	.word	0x55555556

080023ec <WeatherDay>:

void WeatherDay (int x , int y ){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
	int rate = 8;
 80023f6:	2308      	movs	r3, #8
 80023f8:	617b      	str	r3, [r7, #20]
	int temperatureMin = -12;
 80023fa:	f06f 030b 	mvn.w	r3, #11
 80023fe:	613b      	str	r3, [r7, #16]
	int temperatureMax = -10;
 8002400:	f06f 0309 	mvn.w	r3, #9
 8002404:	60fb      	str	r3, [r7, #12]

	  lcdSetCursor(x + 1, y + 20);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	b29b      	uxth	r3, r3
 800240a:	3301      	adds	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	3314      	adds	r3, #20
 8002414:	b29b      	uxth	r3, r3
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f7ff f869 	bl	80014f0 <lcdSetCursor>
	  lcdSetTextFont(&Font16);
 800241e:	4895      	ldr	r0, [pc, #596]	@ (8002674 <WeatherDay+0x288>)
 8002420:	f7fe ffd6 	bl	80013d0 <lcdSetTextFont>
	  lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8002424:	f249 517f 	movw	r1, #38271	@ 0x957f
 8002428:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800242c:	f7fe ffe0 	bl	80013f0 <lcdSetTextColor>

	  CloudRain(x + 50, y + 10);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	330a      	adds	r3, #10
 800243a:	4619      	mov	r1, r3
 800243c:	4610      	mov	r0, r2
 800243e:	f7ff fb7b 	bl	8001b38 <CloudRain>
	  lcdSetTextFont(&Font12);
 8002442:	488d      	ldr	r0, [pc, #564]	@ (8002678 <WeatherDay+0x28c>)
 8002444:	f7fe ffc4 	bl	80013d0 <lcdSetTextFont>
	  if (rate >= 10)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b09      	cmp	r3, #9
 800244c:	dd2e      	ble.n	80024ac <WeatherDay+0xc0>
	  {
		  lcdSetCursor(x + 56, y + 32);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	b29b      	uxth	r3, r3
 8002452:	3338      	adds	r3, #56	@ 0x38
 8002454:	b29a      	uxth	r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b29b      	uxth	r3, r3
 800245a:	3320      	adds	r3, #32
 800245c:	b29b      	uxth	r3, r3
 800245e:	4619      	mov	r1, r3
 8002460:	4610      	mov	r0, r2
 8002462:	f7ff f845 	bl	80014f0 <lcdSetCursor>
		  lcdPrintf("%d/", rate);
 8002466:	6979      	ldr	r1, [r7, #20]
 8002468:	4884      	ldr	r0, [pc, #528]	@ (800267c <WeatherDay+0x290>)
 800246a:	f7fe ff25 	bl	80012b8 <lcdPrintf>
	      lcdDrawCircle(x + 72, y + 33 , 1 , COLOR_WHITE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	b29b      	uxth	r3, r3
 8002472:	3348      	adds	r3, #72	@ 0x48
 8002474:	b29b      	uxth	r3, r3
 8002476:	b218      	sxth	r0, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	3321      	adds	r3, #33	@ 0x21
 800247e:	b29b      	uxth	r3, r3
 8002480:	b219      	sxth	r1, r3
 8002482:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002486:	2201      	movs	r2, #1
 8002488:	f7fe fba9 	bl	8000bde <lcdDrawCircle>
		  lcdDrawCircle(x + 75, y + 40 , 1 , COLOR_WHITE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	b29b      	uxth	r3, r3
 8002490:	334b      	adds	r3, #75	@ 0x4b
 8002492:	b29b      	uxth	r3, r3
 8002494:	b218      	sxth	r0, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	3328      	adds	r3, #40	@ 0x28
 800249c:	b29b      	uxth	r3, r3
 800249e:	b219      	sxth	r1, r3
 80024a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024a4:	2201      	movs	r2, #1
 80024a6:	f7fe fb9a 	bl	8000bde <lcdDrawCircle>
 80024aa:	e02d      	b.n	8002508 <WeatherDay+0x11c>

	  }
	  else{
		  lcdSetCursor(x + 59, y + 32);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	333b      	adds	r3, #59	@ 0x3b
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3320      	adds	r3, #32
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f7ff f816 	bl	80014f0 <lcdSetCursor>
		  lcdPrintf("%d/", rate);
 80024c4:	6979      	ldr	r1, [r7, #20]
 80024c6:	486d      	ldr	r0, [pc, #436]	@ (800267c <WeatherDay+0x290>)
 80024c8:	f7fe fef6 	bl	80012b8 <lcdPrintf>
		  lcdDrawCircle(x + 68, y + 33 , 1 , COLOR_WHITE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3344      	adds	r3, #68	@ 0x44
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	b218      	sxth	r0, r3
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3321      	adds	r3, #33	@ 0x21
 80024dc:	b29b      	uxth	r3, r3
 80024de:	b219      	sxth	r1, r3
 80024e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024e4:	2201      	movs	r2, #1
 80024e6:	f7fe fb7a 	bl	8000bde <lcdDrawCircle>
		  lcdDrawCircle(x + 71, y + 40 , 1 , COLOR_WHITE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3347      	adds	r3, #71	@ 0x47
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b218      	sxth	r0, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3328      	adds	r3, #40	@ 0x28
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	b219      	sxth	r1, r3
 80024fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002502:	2201      	movs	r2, #1
 8002504:	f7fe fb6b 	bl	8000bde <lcdDrawCircle>
	  }

	  lcdSetCursor(x + 1, y + 20);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	b29b      	uxth	r3, r3
 800250c:	3301      	adds	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	3314      	adds	r3, #20
 8002516:	b29b      	uxth	r3, r3
 8002518:	4619      	mov	r1, r3
 800251a:	4610      	mov	r0, r2
 800251c:	f7fe ffe8 	bl	80014f0 <lcdSetCursor>
	  lcdSetTextFont(&Font16);
 8002520:	4854      	ldr	r0, [pc, #336]	@ (8002674 <WeatherDay+0x288>)
 8002522:	f7fe ff55 	bl	80013d0 <lcdSetTextFont>
	  lcdPrintf("Now");
 8002526:	4856      	ldr	r0, [pc, #344]	@ (8002680 <WeatherDay+0x294>)
 8002528:	f7fe fec6 	bl	80012b8 <lcdPrintf>
	  lcdSetCursor(x + 93, y + 20);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	b29b      	uxth	r3, r3
 8002530:	335d      	adds	r3, #93	@ 0x5d
 8002532:	b29a      	uxth	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	3314      	adds	r3, #20
 800253a:	b29b      	uxth	r3, r3
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f7fe ffd6 	bl	80014f0 <lcdSetCursor>
	  if (10 <= temperatureMin)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b09      	cmp	r3, #9
 8002548:	dd2e      	ble.n	80025a8 <WeatherDay+0x1bc>
	  {
		lcdSetCursor(x + 98, y + 20);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	b29b      	uxth	r3, r3
 800254e:	3362      	adds	r3, #98	@ 0x62
 8002550:	b29a      	uxth	r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	3314      	adds	r3, #20
 8002558:	b29b      	uxth	r3, r3
 800255a:	4619      	mov	r1, r3
 800255c:	4610      	mov	r0, r2
 800255e:	f7fe ffc7 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d" , temperatureMin);
 8002562:	6939      	ldr	r1, [r7, #16]
 8002564:	4847      	ldr	r0, [pc, #284]	@ (8002684 <WeatherDay+0x298>)
 8002566:	f7fe fea7 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 126 , y + 19 , 3, COLOR_WHITE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	b29b      	uxth	r3, r3
 800256e:	337e      	adds	r3, #126	@ 0x7e
 8002570:	b29b      	uxth	r3, r3
 8002572:	b218      	sxth	r0, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	3313      	adds	r3, #19
 800257a:	b29b      	uxth	r3, r3
 800257c:	b219      	sxth	r1, r3
 800257e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002582:	2203      	movs	r2, #3
 8002584:	f7fe fb2b 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 126 , y + 19 , 2, COLOR_WHITE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	b29b      	uxth	r3, r3
 800258c:	337e      	adds	r3, #126	@ 0x7e
 800258e:	b29b      	uxth	r3, r3
 8002590:	b218      	sxth	r0, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	3313      	adds	r3, #19
 8002598:	b29b      	uxth	r3, r3
 800259a:	b219      	sxth	r1, r3
 800259c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025a0:	2202      	movs	r2, #2
 80025a2:	f7fe fb1c 	bl	8000bde <lcdDrawCircle>
 80025a6:	e09d      	b.n	80026e4 <WeatherDay+0x2f8>
	  }
	  else if ( 0 <  temperatureMin)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	dd2e      	ble.n	800260c <WeatherDay+0x220>
	  {
		lcdSetCursor(x + 109, y + 20);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	336d      	adds	r3, #109	@ 0x6d
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3314      	adds	r3, #20
 80025bc:	b29b      	uxth	r3, r3
 80025be:	4619      	mov	r1, r3
 80025c0:	4610      	mov	r0, r2
 80025c2:	f7fe ff95 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d" , temperatureMin);
 80025c6:	6939      	ldr	r1, [r7, #16]
 80025c8:	482e      	ldr	r0, [pc, #184]	@ (8002684 <WeatherDay+0x298>)
 80025ca:	f7fe fe75 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 126 , y + 19 , 3, COLOR_WHITE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	337e      	adds	r3, #126	@ 0x7e
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	b218      	sxth	r0, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3313      	adds	r3, #19
 80025de:	b29b      	uxth	r3, r3
 80025e0:	b219      	sxth	r1, r3
 80025e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025e6:	2203      	movs	r2, #3
 80025e8:	f7fe faf9 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 126 , y + 19 , 2, COLOR_WHITE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	337e      	adds	r3, #126	@ 0x7e
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	b218      	sxth	r0, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3313      	adds	r3, #19
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	b219      	sxth	r1, r3
 8002600:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002604:	2202      	movs	r2, #2
 8002606:	f7fe faea 	bl	8000bde <lcdDrawCircle>
 800260a:	e06b      	b.n	80026e4 <WeatherDay+0x2f8>
	  }
	  else if (-10 < temperatureMin )
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f113 0f09 	cmn.w	r3, #9
 8002612:	db39      	blt.n	8002688 <WeatherDay+0x29c>
	  {
		lcdSetCursor(x + 98, y + 20);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	b29b      	uxth	r3, r3
 8002618:	3362      	adds	r3, #98	@ 0x62
 800261a:	b29a      	uxth	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	3314      	adds	r3, #20
 8002622:	b29b      	uxth	r3, r3
 8002624:	4619      	mov	r1, r3
 8002626:	4610      	mov	r0, r2
 8002628:	f7fe ff62 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d" , temperatureMin);
 800262c:	6939      	ldr	r1, [r7, #16]
 800262e:	4815      	ldr	r0, [pc, #84]	@ (8002684 <WeatherDay+0x298>)
 8002630:	f7fe fe42 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 126 , y + 19 , 3, COLOR_WHITE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	b29b      	uxth	r3, r3
 8002638:	337e      	adds	r3, #126	@ 0x7e
 800263a:	b29b      	uxth	r3, r3
 800263c:	b218      	sxth	r0, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	3313      	adds	r3, #19
 8002644:	b29b      	uxth	r3, r3
 8002646:	b219      	sxth	r1, r3
 8002648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800264c:	2203      	movs	r2, #3
 800264e:	f7fe fac6 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 126 , y + 19 , 2, COLOR_WHITE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	b29b      	uxth	r3, r3
 8002656:	337e      	adds	r3, #126	@ 0x7e
 8002658:	b29b      	uxth	r3, r3
 800265a:	b218      	sxth	r0, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	3313      	adds	r3, #19
 8002662:	b29b      	uxth	r3, r3
 8002664:	b219      	sxth	r1, r3
 8002666:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800266a:	2202      	movs	r2, #2
 800266c:	f7fe fab7 	bl	8000bde <lcdDrawCircle>
 8002670:	e038      	b.n	80026e4 <WeatherDay+0x2f8>
 8002672:	bf00      	nop
 8002674:	20000008 	.word	0x20000008
 8002678:	20000000 	.word	0x20000000
 800267c:	0800645c 	.word	0x0800645c
 8002680:	08006460 	.word	0x08006460
 8002684:	0800644c 	.word	0x0800644c
	  }
	  else
	  {
		lcdSetCursor(x + 87, y + 20);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	b29b      	uxth	r3, r3
 800268c:	3357      	adds	r3, #87	@ 0x57
 800268e:	b29a      	uxth	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	3314      	adds	r3, #20
 8002696:	b29b      	uxth	r3, r3
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f7fe ff28 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d" , temperatureMin);
 80026a0:	6939      	ldr	r1, [r7, #16]
 80026a2:	4885      	ldr	r0, [pc, #532]	@ (80028b8 <WeatherDay+0x4cc>)
 80026a4:	f7fe fe08 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 126 , y + 19 , 3, COLOR_WHITE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	337e      	adds	r3, #126	@ 0x7e
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	b218      	sxth	r0, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3313      	adds	r3, #19
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	b219      	sxth	r1, r3
 80026bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026c0:	2203      	movs	r2, #3
 80026c2:	f7fe fa8c 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 126 , y + 19 , 2, COLOR_WHITE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	337e      	adds	r3, #126	@ 0x7e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	b218      	sxth	r0, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3313      	adds	r3, #19
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	b219      	sxth	r1, r3
 80026da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026de:	2202      	movs	r2, #2
 80026e0:	f7fe fa7d 	bl	8000bde <lcdDrawCircle>
	  }

	  DrawGradientLine(x + 138, y + 25 , 50 , 6 ,  COLOR_ORANGE , COLOR_RED);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	338a      	adds	r3, #138	@ 0x8a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	b218      	sxth	r0, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3319      	adds	r3, #25
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	b219      	sxth	r1, r3
 80026f8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2306      	movs	r3, #6
 8002706:	2232      	movs	r2, #50	@ 0x32
 8002708:	f7ff fdc6 	bl	8002298 <DrawGradientLine>

	  lcdSetCursor(x + 193, y + 20);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	b29b      	uxth	r3, r3
 8002710:	33c1      	adds	r3, #193	@ 0xc1
 8002712:	b29a      	uxth	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	3314      	adds	r3, #20
 800271a:	b29b      	uxth	r3, r3
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f7fe fee6 	bl	80014f0 <lcdSetCursor>
	  if (10 < temperatureMax)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b0a      	cmp	r3, #10
 8002728:	dd2e      	ble.n	8002788 <WeatherDay+0x39c>
	  {
		lcdSetCursor(x + 196, y + 20);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	b29b      	uxth	r3, r3
 800272e:	33c4      	adds	r3, #196	@ 0xc4
 8002730:	b29a      	uxth	r2, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	3314      	adds	r3, #20
 8002738:	b29b      	uxth	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	4610      	mov	r0, r2
 800273e:	f7fe fed7 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d" , temperatureMax);
 8002742:	68f9      	ldr	r1, [r7, #12]
 8002744:	485c      	ldr	r0, [pc, #368]	@ (80028b8 <WeatherDay+0x4cc>)
 8002746:	f7fe fdb7 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 223 , y + 19 , 3, COLOR_WHITE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	b29b      	uxth	r3, r3
 800274e:	33df      	adds	r3, #223	@ 0xdf
 8002750:	b29b      	uxth	r3, r3
 8002752:	b218      	sxth	r0, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	3313      	adds	r3, #19
 800275a:	b29b      	uxth	r3, r3
 800275c:	b219      	sxth	r1, r3
 800275e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002762:	2203      	movs	r2, #3
 8002764:	f7fe fa3b 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 223 , y + 19 , 2, COLOR_WHITE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	b29b      	uxth	r3, r3
 800276c:	33df      	adds	r3, #223	@ 0xdf
 800276e:	b29b      	uxth	r3, r3
 8002770:	b218      	sxth	r0, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	3313      	adds	r3, #19
 8002778:	b29b      	uxth	r3, r3
 800277a:	b219      	sxth	r1, r3
 800277c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002780:	2202      	movs	r2, #2
 8002782:	f7fe fa2c 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 234 , y + 19 , 2, COLOR_WHITE);
	  }



}
 8002786:	e092      	b.n	80028ae <WeatherDay+0x4c2>
	  else if ( 0 <  temperatureMax)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	dd2e      	ble.n	80027ec <WeatherDay+0x400>
		lcdSetCursor(x + 196, y + 20);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	b29b      	uxth	r3, r3
 8002792:	33c4      	adds	r3, #196	@ 0xc4
 8002794:	b29a      	uxth	r2, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	3314      	adds	r3, #20
 800279c:	b29b      	uxth	r3, r3
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f7fe fea5 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d" , temperatureMax);
 80027a6:	68f9      	ldr	r1, [r7, #12]
 80027a8:	4843      	ldr	r0, [pc, #268]	@ (80028b8 <WeatherDay+0x4cc>)
 80027aa:	f7fe fd85 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 212 , y + 19 , 3, COLOR_WHITE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	33d4      	adds	r3, #212	@ 0xd4
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b218      	sxth	r0, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3313      	adds	r3, #19
 80027be:	b29b      	uxth	r3, r3
 80027c0:	b219      	sxth	r1, r3
 80027c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027c6:	2203      	movs	r2, #3
 80027c8:	f7fe fa09 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 212 , y + 19 , 2, COLOR_WHITE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	33d4      	adds	r3, #212	@ 0xd4
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	b218      	sxth	r0, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3313      	adds	r3, #19
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b219      	sxth	r1, r3
 80027e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027e4:	2202      	movs	r2, #2
 80027e6:	f7fe f9fa 	bl	8000bde <lcdDrawCircle>
}
 80027ea:	e060      	b.n	80028ae <WeatherDay+0x4c2>
	  else if (-10 < temperatureMax )
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f113 0f09 	cmn.w	r3, #9
 80027f2:	db2e      	blt.n	8002852 <WeatherDay+0x466>
		lcdSetCursor(x + 196, y + 20);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	33c4      	adds	r3, #196	@ 0xc4
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3314      	adds	r3, #20
 8002802:	b29b      	uxth	r3, r3
 8002804:	4619      	mov	r1, r3
 8002806:	4610      	mov	r0, r2
 8002808:	f7fe fe72 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d" , temperatureMax);
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	482a      	ldr	r0, [pc, #168]	@ (80028b8 <WeatherDay+0x4cc>)
 8002810:	f7fe fd52 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 223 , y + 19 , 3, COLOR_WHITE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	b29b      	uxth	r3, r3
 8002818:	33df      	adds	r3, #223	@ 0xdf
 800281a:	b29b      	uxth	r3, r3
 800281c:	b218      	sxth	r0, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	3313      	adds	r3, #19
 8002824:	b29b      	uxth	r3, r3
 8002826:	b219      	sxth	r1, r3
 8002828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800282c:	2203      	movs	r2, #3
 800282e:	f7fe f9d6 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 223 , y + 19 , 2, COLOR_WHITE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	b29b      	uxth	r3, r3
 8002836:	33df      	adds	r3, #223	@ 0xdf
 8002838:	b29b      	uxth	r3, r3
 800283a:	b218      	sxth	r0, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	3313      	adds	r3, #19
 8002842:	b29b      	uxth	r3, r3
 8002844:	b219      	sxth	r1, r3
 8002846:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800284a:	2202      	movs	r2, #2
 800284c:	f7fe f9c7 	bl	8000bde <lcdDrawCircle>
}
 8002850:	e02d      	b.n	80028ae <WeatherDay+0x4c2>
		lcdSetCursor(x + 196, y + 20);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	b29b      	uxth	r3, r3
 8002856:	33c4      	adds	r3, #196	@ 0xc4
 8002858:	b29a      	uxth	r2, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	3314      	adds	r3, #20
 8002860:	b29b      	uxth	r3, r3
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f7fe fe43 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d" , temperatureMax);
 800286a:	68f9      	ldr	r1, [r7, #12]
 800286c:	4812      	ldr	r0, [pc, #72]	@ (80028b8 <WeatherDay+0x4cc>)
 800286e:	f7fe fd23 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 234 , y + 19 , 3, COLOR_WHITE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	b29b      	uxth	r3, r3
 8002876:	33ea      	adds	r3, #234	@ 0xea
 8002878:	b29b      	uxth	r3, r3
 800287a:	b218      	sxth	r0, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	3313      	adds	r3, #19
 8002882:	b29b      	uxth	r3, r3
 8002884:	b219      	sxth	r1, r3
 8002886:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800288a:	2203      	movs	r2, #3
 800288c:	f7fe f9a7 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 234 , y + 19 , 2, COLOR_WHITE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	b29b      	uxth	r3, r3
 8002894:	33ea      	adds	r3, #234	@ 0xea
 8002896:	b29b      	uxth	r3, r3
 8002898:	b218      	sxth	r0, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	3313      	adds	r3, #19
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	b219      	sxth	r1, r3
 80028a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028a8:	2202      	movs	r2, #2
 80028aa:	f7fe f998 	bl	8000bde <lcdDrawCircle>
}
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	0800644c 	.word	0x0800644c

080028bc <DrawThermometer>:

void DrawThermometer(int x, int y, int height, int width, int fillHeight, uint16_t borderColor, uint16_t fillColor) {
 80028bc:	b5b0      	push	{r4, r5, r7, lr}
 80028be:	b090      	sub	sp, #64	@ 0x40
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
    int bulbRadius = width / 2;                  // Radius of the bulb at the bottom
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	0fda      	lsrs	r2, r3, #31
 80028ce:	4413      	add	r3, r2
 80028d0:	105b      	asrs	r3, r3, #1
 80028d2:	633b      	str	r3, [r7, #48]	@ 0x30
    int tubeWidth = width / 2;                   // Width of the thermometer tube
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	0fda      	lsrs	r2, r3, #31
 80028d8:	4413      	add	r3, r2
 80028da:	105b      	asrs	r3, r3, #1
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int tubeHeight = height - bulbRadius * 2;    // Height of the thermometer tube
 80028de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Draw the bulb at the bottom
    lcdFillCircle(x, y + height - bulbRadius, bulbRadius , borderColor);           // Outer circle for bulb
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	b218      	sxth	r0, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	b29b      	uxth	r3, r3
 8002900:	b219      	sxth	r1, r3
 8002902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002904:	b21a      	sxth	r2, r3
 8002906:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800290a:	f7fe fa3c 	bl	8000d86 <lcdFillCircle>
    lcdFillCircle(x, y + height - bulbRadius, bulbRadius - 2, COLOR_WHITE);       // Inner circle for bulb border
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	b218      	sxth	r0, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	b29a      	uxth	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	b29b      	uxth	r3, r3
 800291a:	4413      	add	r3, r2
 800291c:	b29a      	uxth	r2, r3
 800291e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002920:	b29b      	uxth	r3, r3
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	b29b      	uxth	r3, r3
 8002926:	b219      	sxth	r1, r3
 8002928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b02      	subs	r3, #2
 800292e:	b29b      	uxth	r3, r3
 8002930:	b21a      	sxth	r2, r3
 8002932:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002936:	f7fe fa26 	bl	8000d86 <lcdFillCircle>
    lcdFillCircle(x, y + height - bulbRadius, bulbRadius - 3, fillColor);         // Inner fill for "mercury" in bulb
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	b218      	sxth	r0, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	b29a      	uxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	b29b      	uxth	r3, r3
 8002946:	4413      	add	r3, r2
 8002948:	b29a      	uxth	r2, r3
 800294a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294c:	b29b      	uxth	r3, r3
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	b29b      	uxth	r3, r3
 8002952:	b219      	sxth	r1, r3
 8002954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b03      	subs	r3, #3
 800295a:	b29b      	uxth	r3, r3
 800295c:	b21a      	sxth	r2, r3
 800295e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002962:	f7fe fa10 	bl	8000d86 <lcdFillCircle>

    // Draw the thermometer tube
    lcdFillRoundRect(x - tubeWidth / 2, y, tubeWidth, tubeHeight + 1 , tubeWidth / 2, borderColor);       // Outer tube border
 8002966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002968:	0fda      	lsrs	r2, r3, #31
 800296a:	4413      	add	r3, r2
 800296c:	105b      	asrs	r3, r3, #1
 800296e:	425b      	negs	r3, r3
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	b29b      	uxth	r3, r3
 8002976:	4413      	add	r3, r2
 8002978:	b29b      	uxth	r3, r3
 800297a:	b218      	sxth	r0, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	b219      	sxth	r1, r3
 8002980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002982:	b21c      	sxth	r4, r3
 8002984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002986:	b29b      	uxth	r3, r3
 8002988:	3301      	adds	r3, #1
 800298a:	b29b      	uxth	r3, r3
 800298c:	b21d      	sxth	r5, r3
 800298e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002990:	0fda      	lsrs	r2, r3, #31
 8002992:	4413      	add	r3, r2
 8002994:	105b      	asrs	r3, r3, #1
 8002996:	b21b      	sxth	r3, r3
 8002998:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800299c:	9201      	str	r2, [sp, #4]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	462b      	mov	r3, r5
 80029a2:	4622      	mov	r2, r4
 80029a4:	f7fe fb24 	bl	8000ff0 <lcdFillRoundRect>
    lcdFillRoundRect(x - tubeWidth / 2 + 2, y + 2, tubeWidth - 4, tubeHeight - 4, tubeWidth / 2 - 2, COLOR_WHITE); // Inner tube border
 80029a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029aa:	0fda      	lsrs	r2, r3, #31
 80029ac:	4413      	add	r3, r2
 80029ae:	105b      	asrs	r3, r3, #1
 80029b0:	425b      	negs	r3, r3
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3302      	adds	r3, #2
 80029be:	b29b      	uxth	r3, r3
 80029c0:	b218      	sxth	r0, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3302      	adds	r3, #2
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	b219      	sxth	r1, r3
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b04      	subs	r3, #4
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	b21c      	sxth	r4, r3
 80029d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b04      	subs	r3, #4
 80029dc:	b29b      	uxth	r3, r3
 80029de:	b21d      	sxth	r5, r3
 80029e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e2:	0fda      	lsrs	r2, r3, #31
 80029e4:	4413      	add	r3, r2
 80029e6:	105b      	asrs	r3, r3, #1
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b02      	subs	r3, #2
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	b21b      	sxth	r3, r3
 80029f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029f4:	9201      	str	r2, [sp, #4]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	462b      	mov	r3, r5
 80029fa:	4622      	mov	r2, r4
 80029fc:	f7fe faf8 	bl	8000ff0 <lcdFillRoundRect>

    // Fill the thermometer tube based on the fill height
    int filledTubeHeight = fillHeight * tubeHeight / height;  // Scale fill height to tube height
 8002a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a04:	fb03 f202 	mul.w	r2, r3, r2
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    lcdFillRect(x - tubeWidth / 2 + 2, y + tubeHeight - filledTubeHeight + 2, tubeWidth - 5, filledTubeHeight, fillColor);  // Fill tube with "mercury"
 8002a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a12:	0fda      	lsrs	r2, r3, #31
 8002a14:	4413      	add	r3, r2
 8002a16:	105b      	asrs	r3, r3, #1
 8002a18:	425b      	negs	r3, r3
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3302      	adds	r3, #2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	b218      	sxth	r0, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3302      	adds	r3, #2
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	b219      	sxth	r1, r3
 8002a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b05      	subs	r3, #5
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	b21a      	sxth	r2, r3
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	b21c      	sxth	r4, r3
 8002a52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	4623      	mov	r3, r4
 8002a5a:	f7fe fa6d 	bl	8000f38 <lcdFillRect>

    // Draw finer scale marks on the side of the thermometer
    int markCount = 8;  // Increased number of marks for more detail
 8002a5e:	2308      	movs	r3, #8
 8002a60:	623b      	str	r3, [r7, #32]
    int markSpacing = tubeHeight / markCount; // Spacing between marks
 8002a62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a6a:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i <= markCount; i++) {
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a70:	e03a      	b.n	8002ae8 <DrawThermometer+0x22c>
        int markY = y + tubeHeight - i * markSpacing;
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a76:	441a      	add	r2, r3
 8002a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a7a:	69f9      	ldr	r1, [r7, #28]
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	61bb      	str	r3, [r7, #24]
        int markLength = (i % 2 == 0) ? 8 : 5;  // Longer marks every other line for a clearer scale
 8002a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <DrawThermometer+0x1d6>
 8002a8e:	2308      	movs	r3, #8
 8002a90:	e000      	b.n	8002a94 <DrawThermometer+0x1d8>
 8002a92:	2305      	movs	r3, #5
 8002a94:	617b      	str	r3, [r7, #20]
        lcdDrawLine(x + tubeWidth / 2 + 3, markY, x + tubeWidth / 2 + 3 + markLength, markY, borderColor);
 8002a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a98:	0fda      	lsrs	r2, r3, #31
 8002a9a:	4413      	add	r3, r2
 8002a9c:	105b      	asrs	r3, r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3303      	adds	r3, #3
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	b218      	sxth	r0, r3
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	b219      	sxth	r1, r3
 8002ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab4:	0fda      	lsrs	r2, r3, #31
 8002ab6:	4413      	add	r3, r2
 8002ab8:	105b      	asrs	r3, r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3303      	adds	r3, #3
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	b21a      	sxth	r2, r3
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	b21c      	sxth	r4, r3
 8002ad6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	4623      	mov	r3, r4
 8002ade:	f7fd ff97 	bl	8000a10 <lcdDrawLine>
    for (int i = 0; i <= markCount; i++) {
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ae8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	ddc0      	ble.n	8002a72 <DrawThermometer+0x1b6>
    }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3738      	adds	r7, #56	@ 0x38
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002afc <DrawIconHumidyti1>:

void DrawIconHumidyti1 (int x, int y)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmicon1);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	b291      	uxth	r1, r2
 8002b0e:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <DrawIconHumidyti1+0x24>)
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe fad3 	bl	80010bc <lcdDrawImage>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	08013448 	.word	0x08013448

08002b24 <DrawIconDate>:

void DrawIconDate (int x, int y)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmicon2);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	b291      	uxth	r1, r2
 8002b36:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <DrawIconDate+0x24>)
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fabf 	bl	80010bc <lcdDrawImage>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	080140d4 	.word	0x080140d4

08002b4c <DrawIconWeather>:
void DrawIconWeather (int x, int y)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmwether);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	b291      	uxth	r1, r2
 8002b5e:	4a04      	ldr	r2, [pc, #16]	@ (8002b70 <DrawIconWeather+0x24>)
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe faab 	bl	80010bc <lcdDrawImage>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	08017ae0 	.word	0x08017ae0

08002b74 <DrawIconTem>:
void DrawIconTem (int x, int y)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmTem);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	b291      	uxth	r1, r2
 8002b86:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <DrawIconTem+0x24>)
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe fa97 	bl	80010bc <lcdDrawImage>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	0800e1ac 	.word	0x0800e1ac

08002b9c <DrawIconHumidyti2>:
void DrawIconHumidyti2 (int x, int y)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmhumi);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	b291      	uxth	r1, r2
 8002bae:	4a04      	ldr	r2, [pc, #16]	@ (8002bc0 <DrawIconHumidyti2+0x24>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe fa83 	bl	80010bc <lcdDrawImage>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	08012058 	.word	0x08012058

08002bc4 <TextTemperature16>:
void TextTemperature16 (int x , int y , int temperature){
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8002bd0:	f249 517f 	movw	r1, #38271	@ 0x957f
 8002bd4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bd8:	f7fe fc0a 	bl	80013f0 <lcdSetTextColor>
	lcdSetTextFont(&Font24);
 8002bdc:	4861      	ldr	r0, [pc, #388]	@ (8002d64 <TextTemperature16+0x1a0>)
 8002bde:	f7fe fbf7 	bl	80013d0 <lcdSetTextFont>
	if (10 <= temperature)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b09      	cmp	r3, #9
 8002be6:	dd2c      	ble.n	8002c42 <TextTemperature16+0x7e>
	{
		lcdSetCursor(x + 5 , y );
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3305      	adds	r3, #5
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	b292      	uxth	r2, r2
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fc7a 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	485a      	ldr	r0, [pc, #360]	@ (8002d68 <TextTemperature16+0x1a4>)
 8002c00:	f7fe fb5a 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 47 , y + 3 , 3, COLOR_WHITE);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	332f      	adds	r3, #47	@ 0x2f
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	b218      	sxth	r0, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3303      	adds	r3, #3
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	b219      	sxth	r1, r3
 8002c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	f7fd ffde 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 47 , y + 3 , 2, COLOR_WHITE);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	332f      	adds	r3, #47	@ 0x2f
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	b218      	sxth	r0, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3303      	adds	r3, #3
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	b219      	sxth	r1, r3
 8002c36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f7fd ffcf 	bl	8000bde <lcdDrawCircle>
		lcdSetCursor(x - 3  , y );
		lcdPrintf("%d C\r\n" , temperature);
		lcdDrawCircle( x + 56 , y + 3 , 3, COLOR_WHITE);
		lcdDrawCircle( x + 56 , y + 3 , 2, COLOR_WHITE);
	}
}
 8002c40:	e08c      	b.n	8002d5c <TextTemperature16+0x198>
	else if ( 0 <  temperature)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	dd2c      	ble.n	8002ca2 <TextTemperature16+0xde>
		lcdSetCursor(x + 12  , y );
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	b292      	uxth	r2, r2
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fc4a 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4842      	ldr	r0, [pc, #264]	@ (8002d68 <TextTemperature16+0x1a4>)
 8002c60:	f7fe fb2a 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 36 , y + 3 , 3, COLOR_WHITE);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3324      	adds	r3, #36	@ 0x24
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	b218      	sxth	r0, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3303      	adds	r3, #3
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	b219      	sxth	r1, r3
 8002c78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	f7fd ffae 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 36 , y + 3 , 2, COLOR_WHITE);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3324      	adds	r3, #36	@ 0x24
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b218      	sxth	r0, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3303      	adds	r3, #3
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	b219      	sxth	r1, r3
 8002c96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f7fd ff9f 	bl	8000bde <lcdDrawCircle>
}
 8002ca0:	e05c      	b.n	8002d5c <TextTemperature16+0x198>
	else if (-10 < temperature )
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f113 0f09 	cmn.w	r3, #9
 8002ca8:	db2c      	blt.n	8002d04 <TextTemperature16+0x140>
		lcdSetCursor(x + 5  , y );
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3305      	adds	r3, #5
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe fc19 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4829      	ldr	r0, [pc, #164]	@ (8002d68 <TextTemperature16+0x1a4>)
 8002cc2:	f7fe faf9 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 47 , y + 3 , 3, COLOR_WHITE);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	332f      	adds	r3, #47	@ 0x2f
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	b218      	sxth	r0, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3303      	adds	r3, #3
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	b219      	sxth	r1, r3
 8002cda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cde:	2203      	movs	r2, #3
 8002ce0:	f7fd ff7d 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 47 , y + 3 , 2, COLOR_WHITE);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	332f      	adds	r3, #47	@ 0x2f
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	b218      	sxth	r0, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3303      	adds	r3, #3
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	b219      	sxth	r1, r3
 8002cf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f7fd ff6e 	bl	8000bde <lcdDrawCircle>
}
 8002d02:	e02b      	b.n	8002d5c <TextTemperature16+0x198>
		lcdSetCursor(x - 3  , y );
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	b292      	uxth	r2, r2
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fbec 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4813      	ldr	r0, [pc, #76]	@ (8002d68 <TextTemperature16+0x1a4>)
 8002d1c:	f7fe facc 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 56 , y + 3 , 3, COLOR_WHITE);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3338      	adds	r3, #56	@ 0x38
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	b218      	sxth	r0, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3303      	adds	r3, #3
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	b219      	sxth	r1, r3
 8002d34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d38:	2203      	movs	r2, #3
 8002d3a:	f7fd ff50 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 56 , y + 3 , 2, COLOR_WHITE);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3338      	adds	r3, #56	@ 0x38
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	b218      	sxth	r0, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3303      	adds	r3, #3
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	b219      	sxth	r1, r3
 8002d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d56:	2202      	movs	r2, #2
 8002d58:	f7fd ff41 	bl	8000bde <lcdDrawCircle>
}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000010 	.word	0x20000010
 8002d68:	08006444 	.word	0x08006444

08002d6c <TextHumidyti16>:

void TextHumidyti16 (int x , int y , int humidyti){
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8002d78:	f249 517f 	movw	r1, #38271	@ 0x957f
 8002d7c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002d80:	f7fe fb36 	bl	80013f0 <lcdSetTextColor>
	lcdSetTextFont(&Font24);
 8002d84:	4830      	ldr	r0, [pc, #192]	@ (8002e48 <TextHumidyti16+0xdc>)
 8002d86:	f7fe fb23 	bl	80013d0 <lcdSetTextFont>
	if (humidyti < 10){
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b09      	cmp	r3, #9
 8002d8e:	dc2a      	bgt.n	8002de6 <TextHumidyti16+0x7a>
		lcdSetCursor(x  , y );
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	b292      	uxth	r2, r2
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe fba8 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d/\r\n" , humidyti);
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	482a      	ldr	r0, [pc, #168]	@ (8002e4c <TextHumidyti16+0xe0>)
 8002da4:	f7fe fa88 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 20 , y + 3 , 2, COLOR_WHITE);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3314      	adds	r3, #20
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	b218      	sxth	r0, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3303      	adds	r3, #3
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	b219      	sxth	r1, r3
 8002dbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f7fd ff0c 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 29 , y + 16 , 2, COLOR_WHITE);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	331d      	adds	r3, #29
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	b218      	sxth	r0, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3310      	adds	r3, #16
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	b219      	sxth	r1, r3
 8002dda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dde:	2202      	movs	r2, #2
 8002de0:	f7fd fefd 	bl	8000bde <lcdDrawCircle>
		lcdSetCursor(x - 5  , y );
		lcdPrintf("%d/\r\n" , humidyti);
		lcdDrawCircle( x + 33 , y + 3 , 2, COLOR_WHITE);
		lcdDrawCircle( x + 41 , y + 15 , 2, COLOR_WHITE);
	}
}
 8002de4:	e02b      	b.n	8002e3e <TextHumidyti16+0xd2>
		lcdSetCursor(x - 5  , y );
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b05      	subs	r3, #5
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	b292      	uxth	r2, r2
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe fb7b 	bl	80014f0 <lcdSetCursor>
		lcdPrintf("%d/\r\n" , humidyti);
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4813      	ldr	r0, [pc, #76]	@ (8002e4c <TextHumidyti16+0xe0>)
 8002dfe:	f7fe fa5b 	bl	80012b8 <lcdPrintf>
		lcdDrawCircle( x + 33 , y + 3 , 2, COLOR_WHITE);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3321      	adds	r3, #33	@ 0x21
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	b218      	sxth	r0, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3303      	adds	r3, #3
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	b219      	sxth	r1, r3
 8002e16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f7fd fedf 	bl	8000bde <lcdDrawCircle>
		lcdDrawCircle( x + 41 , y + 15 , 2, COLOR_WHITE);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3329      	adds	r3, #41	@ 0x29
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	b218      	sxth	r0, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	330f      	adds	r3, #15
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	b219      	sxth	r1, r3
 8002e34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f7fd fed0 	bl	8000bde <lcdDrawCircle>
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000010 	.word	0x20000010
 8002e4c:	08006454 	.word	0x08006454

08002e50 <DrawIconHot>:
void DrawIconHot (int x, int y){
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmhot);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	b291      	uxth	r1, r2
 8002e62:	4a04      	ldr	r2, [pc, #16]	@ (8002e74 <DrawIconHot+0x24>)
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe f929 	bl	80010bc <lcdDrawImage>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	080113cc 	.word	0x080113cc

08002e78 <DrawIconIce>:
void DrawIconIce (int x, int y){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmice);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	b291      	uxth	r1, r2
 8002e8a:	4a04      	ldr	r2, [pc, #16]	@ (8002e9c <DrawIconIce+0x24>)
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe f915 	bl	80010bc <lcdDrawImage>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	0801276c 	.word	0x0801276c

08002ea0 <DrawIconWind>:
void DrawIconWind (int x, int y){
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmwind);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	b291      	uxth	r1, r2
 8002eb2:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <DrawIconWind+0x24>)
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe f901 	bl	80010bc <lcdDrawImage>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	080181b8 	.word	0x080181b8

08002ec8 <DrawIconWater>:
void DrawIconWater (int x, int y){
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmwater);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	b291      	uxth	r1, r2
 8002eda:	4a04      	ldr	r2, [pc, #16]	@ (8002eec <DrawIconWater+0x24>)
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe f8ed 	bl	80010bc <lcdDrawImage>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	08016e54 	.word	0x08016e54

08002ef0 <OneDay>:
void OneDay(int x , int y, int rate , int day , int MinTem , int MaxTem){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
	  lcdSetCursor(x , y);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	b292      	uxth	r2, r2
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe faf1 	bl	80014f0 <lcdSetCursor>
	  lcdSetTextFont(&Font16);
 8002f0e:	487d      	ldr	r0, [pc, #500]	@ (8003104 <OneDay+0x214>)
 8002f10:	f7fe fa5e 	bl	80013d0 <lcdSetTextFont>
	  lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8002f14:	f249 517f 	movw	r1, #38271	@ 0x957f
 8002f18:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002f1c:	f7fe fa68 	bl	80013f0 <lcdSetTextColor>
	  if (day == 2){
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d102      	bne.n	8002f2c <OneDay+0x3c>
		  lcdPrintf("Mon");
 8002f26:	4878      	ldr	r0, [pc, #480]	@ (8003108 <OneDay+0x218>)
 8002f28:	f7fe f9c6 	bl	80012b8 <lcdPrintf>
	  }
	  if (day == 3){
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d102      	bne.n	8002f38 <OneDay+0x48>
		  lcdPrintf("Tue");
 8002f32:	4876      	ldr	r0, [pc, #472]	@ (800310c <OneDay+0x21c>)
 8002f34:	f7fe f9c0 	bl	80012b8 <lcdPrintf>
	  }
	  if (day == 4){
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d102      	bne.n	8002f44 <OneDay+0x54>
		  lcdPrintf("Wen");
 8002f3e:	4874      	ldr	r0, [pc, #464]	@ (8003110 <OneDay+0x220>)
 8002f40:	f7fe f9ba 	bl	80012b8 <lcdPrintf>
	  }
	  if (day == 5){
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d102      	bne.n	8002f50 <OneDay+0x60>
		  lcdPrintf("Thu");
 8002f4a:	4872      	ldr	r0, [pc, #456]	@ (8003114 <OneDay+0x224>)
 8002f4c:	f7fe f9b4 	bl	80012b8 <lcdPrintf>
	  }
	  if (day == 6){
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d102      	bne.n	8002f5c <OneDay+0x6c>
		  lcdPrintf("Fri");
 8002f56:	4870      	ldr	r0, [pc, #448]	@ (8003118 <OneDay+0x228>)
 8002f58:	f7fe f9ae 	bl	80012b8 <lcdPrintf>
	  }
	  if (day == 7){
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b07      	cmp	r3, #7
 8002f60:	d102      	bne.n	8002f68 <OneDay+0x78>
		  lcdPrintf("Sat");
 8002f62:	486e      	ldr	r0, [pc, #440]	@ (800311c <OneDay+0x22c>)
 8002f64:	f7fe f9a8 	bl	80012b8 <lcdPrintf>
	  }
	  if (day == 8){
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d102      	bne.n	8002f74 <OneDay+0x84>
		  lcdPrintf("Sun");
 8002f6e:	486c      	ldr	r0, [pc, #432]	@ (8003120 <OneDay+0x230>)
 8002f70:	f7fe f9a2 	bl	80012b8 <lcdPrintf>
	  }

	  lcdSetCursor(x + 103, y);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3367      	adds	r3, #103	@ 0x67
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	b292      	uxth	r2, r2
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe fab4 	bl	80014f0 <lcdSetCursor>
	  if (MinTem < 10){
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b09      	cmp	r3, #9
 8002f8c:	dc0e      	bgt.n	8002fac <OneDay+0xbc>
		  if (MaxTem < 10){
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	2b09      	cmp	r3, #9
 8002f92:	dc05      	bgt.n	8002fa0 <OneDay+0xb0>
			lcdPrintf("0%d-0%d", MinTem , MaxTem);
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	69b9      	ldr	r1, [r7, #24]
 8002f98:	4862      	ldr	r0, [pc, #392]	@ (8003124 <OneDay+0x234>)
 8002f9a:	f7fe f98d 	bl	80012b8 <lcdPrintf>
 8002f9e:	e013      	b.n	8002fc8 <OneDay+0xd8>
		  }
		  else {
			  lcdPrintf("0%d-%d", MinTem , MaxTem);
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	69b9      	ldr	r1, [r7, #24]
 8002fa4:	4860      	ldr	r0, [pc, #384]	@ (8003128 <OneDay+0x238>)
 8002fa6:	f7fe f987 	bl	80012b8 <lcdPrintf>
 8002faa:	e00d      	b.n	8002fc8 <OneDay+0xd8>
		  }
	  }
	  else{
		  if (MaxTem < 10){
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b09      	cmp	r3, #9
 8002fb0:	dc05      	bgt.n	8002fbe <OneDay+0xce>
			  lcdPrintf("%d-0%d", MinTem , MaxTem);
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	69b9      	ldr	r1, [r7, #24]
 8002fb6:	485d      	ldr	r0, [pc, #372]	@ (800312c <OneDay+0x23c>)
 8002fb8:	f7fe f97e 	bl	80012b8 <lcdPrintf>
 8002fbc:	e004      	b.n	8002fc8 <OneDay+0xd8>
		  }
		  else {
			  lcdPrintf("%d-%d", MinTem , MaxTem);
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	69b9      	ldr	r1, [r7, #24]
 8002fc2:	485b      	ldr	r0, [pc, #364]	@ (8003130 <OneDay+0x240>)
 8002fc4:	f7fe f978 	bl	80012b8 <lcdPrintf>
		  }
	  }

	  lcdDrawCircle(x + 163, y - 2, 2, COLOR_WHITE);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	33a3      	adds	r3, #163	@ 0xa3
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	b218      	sxth	r0, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b02      	subs	r3, #2
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	b219      	sxth	r1, r3
 8002fdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f7fd fdfc 	bl	8000bde <lcdDrawCircle>
	  lcdDrawCircle(x + 163, y - 2, 3, COLOR_WHITE);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	33a3      	adds	r3, #163	@ 0xa3
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	b218      	sxth	r0, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b02      	subs	r3, #2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	b219      	sxth	r1, r3
 8002ffa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ffe:	2203      	movs	r2, #3
 8003000:	f7fd fded 	bl	8000bde <lcdDrawCircle>

	  if ( 80 < rate)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b50      	cmp	r3, #80	@ 0x50
 8003008:	dd09      	ble.n	800301e <OneDay+0x12e>
	  {
		  CloudThunder (x + 51, y - 1);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	3b01      	subs	r3, #1
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f7fe febf 	bl	8001d9a <CloudThunder>
 800301c:	e012      	b.n	8003044 <OneDay+0x154>
	  }
	  else if (50 < rate){
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b32      	cmp	r3, #50	@ 0x32
 8003022:	dd06      	ble.n	8003032 <OneDay+0x142>
		  CloudRain(x + 51 , y );
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3333      	adds	r3, #51	@ 0x33
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fd84 	bl	8001b38 <CloudRain>
 8003030:	e008      	b.n	8003044 <OneDay+0x154>
	  }
	  else{
		  CloudSun(x + 51, y + 5);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	3305      	adds	r3, #5
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f7fe fe6b 	bl	8001d1a <CloudSun>
	  }

	  if (rate >= 10){
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b09      	cmp	r3, #9
 8003048:	dd2c      	ble.n	80030a4 <OneDay+0x1b4>
		  lcdSetCursor(x + 188, y);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	b29b      	uxth	r3, r3
 800304e:	33bc      	adds	r3, #188	@ 0xbc
 8003050:	b29b      	uxth	r3, r3
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	b292      	uxth	r2, r2
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe fa49 	bl	80014f0 <lcdSetCursor>
		  lcdPrintf("%d/",rate);
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4834      	ldr	r0, [pc, #208]	@ (8003134 <OneDay+0x244>)
 8003062:	f7fe f929 	bl	80012b8 <lcdPrintf>
		  lcdDrawCircle(x + 213, y + 2, 2, COLOR_WHITE);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	b29b      	uxth	r3, r3
 800306a:	33d5      	adds	r3, #213	@ 0xd5
 800306c:	b29b      	uxth	r3, r3
 800306e:	b218      	sxth	r0, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	b29b      	uxth	r3, r3
 8003074:	3302      	adds	r3, #2
 8003076:	b29b      	uxth	r3, r3
 8003078:	b219      	sxth	r1, r3
 800307a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800307e:	2202      	movs	r2, #2
 8003080:	f7fd fdad 	bl	8000bde <lcdDrawCircle>
		  lcdDrawCircle(x + 218, y + 10, 2, COLOR_WHITE);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	b29b      	uxth	r3, r3
 8003088:	33da      	adds	r3, #218	@ 0xda
 800308a:	b29b      	uxth	r3, r3
 800308c:	b218      	sxth	r0, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	b29b      	uxth	r3, r3
 8003092:	330a      	adds	r3, #10
 8003094:	b29b      	uxth	r3, r3
 8003096:	b219      	sxth	r1, r3
 8003098:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800309c:	2202      	movs	r2, #2
 800309e:	f7fd fd9e 	bl	8000bde <lcdDrawCircle>
		  lcdSetCursor(x + 195, y);
		  lcdPrintf("%d/",rate);
		  lcdDrawCircle(x + 209, y + 2, 2, COLOR_WHITE);
		  lcdDrawCircle(x + 215, y + 10, 2, COLOR_WHITE);
	  }
}
 80030a2:	e02b      	b.n	80030fc <OneDay+0x20c>
		  lcdSetCursor(x + 195, y);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	33c3      	adds	r3, #195	@ 0xc3
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	b292      	uxth	r2, r2
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fa1c 	bl	80014f0 <lcdSetCursor>
		  lcdPrintf("%d/",rate);
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	481e      	ldr	r0, [pc, #120]	@ (8003134 <OneDay+0x244>)
 80030bc:	f7fe f8fc 	bl	80012b8 <lcdPrintf>
		  lcdDrawCircle(x + 209, y + 2, 2, COLOR_WHITE);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	33d1      	adds	r3, #209	@ 0xd1
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b218      	sxth	r0, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3302      	adds	r3, #2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	b219      	sxth	r1, r3
 80030d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030d8:	2202      	movs	r2, #2
 80030da:	f7fd fd80 	bl	8000bde <lcdDrawCircle>
		  lcdDrawCircle(x + 215, y + 10, 2, COLOR_WHITE);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	33d7      	adds	r3, #215	@ 0xd7
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	b218      	sxth	r0, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	330a      	adds	r3, #10
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	b219      	sxth	r1, r3
 80030f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030f6:	2202      	movs	r2, #2
 80030f8:	f7fd fd71 	bl	8000bde <lcdDrawCircle>
}
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000008 	.word	0x20000008
 8003108:	08006464 	.word	0x08006464
 800310c:	08006468 	.word	0x08006468
 8003110:	0800646c 	.word	0x0800646c
 8003114:	08006470 	.word	0x08006470
 8003118:	08006474 	.word	0x08006474
 800311c:	08006478 	.word	0x08006478
 8003120:	0800647c 	.word	0x0800647c
 8003124:	08006480 	.word	0x08006480
 8003128:	08006488 	.word	0x08006488
 800312c:	08006490 	.word	0x08006490
 8003130:	08006498 	.word	0x08006498
 8003134:	0800645c 	.word	0x0800645c

08003138 <Screen1>:
void Screen1(){
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af04      	add	r7, sp, #16

	int temperatre = 23;
 800313e:	2317      	movs	r3, #23
 8003140:	607b      	str	r3, [r7, #4]
  lcdFillRGB(COLOR_THEME_SKYBLUE_BASE);
 8003142:	f249 507f 	movw	r0, #38271	@ 0x957f
 8003146:	f7fd fb7f 	bl	8000848 <lcdFillRGB>
  TextTitle( 30 , 1);
 800314a:	2101      	movs	r1, #1
 800314c:	201e      	movs	r0, #30
 800314e:	f7fe fcd1 	bl	8001af4 <TextTitle>
  lcdDrawImage(0, 15, &bmBackGround2);
 8003152:	4a26      	ldr	r2, [pc, #152]	@ (80031ec <Screen1+0xb4>)
 8003154:	210f      	movs	r1, #15
 8003156:	2000      	movs	r0, #0
 8003158:	f7fd ffb0 	bl	80010bc <lcdDrawImage>

  lcdDrawRect(0, 15, 240, 60, COLOR_WHITE);
 800315c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	233c      	movs	r3, #60	@ 0x3c
 8003164:	22f0      	movs	r2, #240	@ 0xf0
 8003166:	210f      	movs	r1, #15
 8003168:	2000      	movs	r0, #0
 800316a:	f7fd fcef 	bl	8000b4c <lcdDrawRect>

  DrawCloud (5 , 80);
 800316e:	2150      	movs	r1, #80	@ 0x50
 8003170:	2005      	movs	r0, #5
 8003172:	f7fe fcab 	bl	8001acc <DrawCloud>


  DrawThermometer(95, 80 , 40, 12, 25, COLOR_BLACK, COLOR_RED);
 8003176:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800317a:	9302      	str	r3, [sp, #8]
 800317c:	2300      	movs	r3, #0
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	2319      	movs	r3, #25
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	230c      	movs	r3, #12
 8003186:	2228      	movs	r2, #40	@ 0x28
 8003188:	2150      	movs	r1, #80	@ 0x50
 800318a:	205f      	movs	r0, #95	@ 0x5f
 800318c:	f7ff fb96 	bl	80028bc <DrawThermometer>
  TextTemperature16(120, 95, temperatre);
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	215f      	movs	r1, #95	@ 0x5f
 8003194:	2078      	movs	r0, #120	@ 0x78
 8003196:	f7ff fd15 	bl	8002bc4 <TextTemperature16>
  if (temperatre >= 29){
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b1c      	cmp	r3, #28
 800319e:	dd04      	ble.n	80031aa <Screen1+0x72>
	  DrawIconHot(205 , 85);
 80031a0:	2155      	movs	r1, #85	@ 0x55
 80031a2:	20cd      	movs	r0, #205	@ 0xcd
 80031a4:	f7ff fe54 	bl	8002e50 <DrawIconHot>
 80031a8:	e00b      	b.n	80031c2 <Screen1+0x8a>
  }
  else if ( temperatre < 20){
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b13      	cmp	r3, #19
 80031ae:	dc04      	bgt.n	80031ba <Screen1+0x82>
	  DrawIconIce(205 , 85);
 80031b0:	2155      	movs	r1, #85	@ 0x55
 80031b2:	20cd      	movs	r0, #205	@ 0xcd
 80031b4:	f7ff fe60 	bl	8002e78 <DrawIconIce>
 80031b8:	e003      	b.n	80031c2 <Screen1+0x8a>
  }
  else {
	  DrawIconWind(205 , 85);
 80031ba:	2155      	movs	r1, #85	@ 0x55
 80031bc:	20cd      	movs	r0, #205	@ 0xcd
 80031be:	f7ff fe6f 	bl	8002ea0 <DrawIconWind>
  }

  DrawIconHumidyti1(77, 130);
 80031c2:	2182      	movs	r1, #130	@ 0x82
 80031c4:	204d      	movs	r0, #77	@ 0x4d
 80031c6:	f7ff fc99 	bl	8002afc <DrawIconHumidyti1>
  TextHumidyti16 (140, 146 , 12);
 80031ca:	220c      	movs	r2, #12
 80031cc:	2192      	movs	r1, #146	@ 0x92
 80031ce:	208c      	movs	r0, #140	@ 0x8c
 80031d0:	f7ff fdcc 	bl	8002d6c <TextHumidyti16>
  DrawIconWater(205 , 138);
 80031d4:	218a      	movs	r1, #138	@ 0x8a
 80031d6:	20cd      	movs	r0, #205	@ 0xcd
 80031d8:	f7ff fe76 	bl	8002ec8 <DrawIconWater>

  WeatherDay(0, 175 );
 80031dc:	21af      	movs	r1, #175	@ 0xaf
 80031de:	2000      	movs	r0, #0
 80031e0:	f7ff f904 	bl	80023ec <WeatherDay>
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	0800d520 	.word	0x0800d520

080031f0 <Screen2>:

void Screen2(){
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af02      	add	r7, sp, #8

	int rate;
	lcdFillRGB(COLOR_THEME_SKYBLUE_BASE);
 80031f6:	f249 507f 	movw	r0, #38271	@ 0x957f
 80031fa:	f7fd fb25 	bl	8000848 <lcdFillRGB>
	  DrawIconDate(5, 30);
 80031fe:	211e      	movs	r1, #30
 8003200:	2005      	movs	r0, #5
 8003202:	f7ff fc8f 	bl	8002b24 <DrawIconDate>
	  DrawIconWeather(55, 30);
 8003206:	211e      	movs	r1, #30
 8003208:	2037      	movs	r0, #55	@ 0x37
 800320a:	f7ff fc9f 	bl	8002b4c <DrawIconWeather>
	  DrawIconTem(120, 30);
 800320e:	211e      	movs	r1, #30
 8003210:	2078      	movs	r0, #120	@ 0x78
 8003212:	f7ff fcaf 	bl	8002b74 <DrawIconTem>
	  DrawIconHumidyti2(190, 30);
 8003216:	211e      	movs	r1, #30
 8003218:	20be      	movs	r0, #190	@ 0xbe
 800321a:	f7ff fcbf 	bl	8002b9c <DrawIconHumidyti2>

	  lcdDrawLine(50, 30, 50, 319, COLOR_BLACK);
 800321e:	2300      	movs	r3, #0
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	f240 133f 	movw	r3, #319	@ 0x13f
 8003226:	2232      	movs	r2, #50	@ 0x32
 8003228:	211e      	movs	r1, #30
 800322a:	2032      	movs	r0, #50	@ 0x32
 800322c:	f7fd fbf0 	bl	8000a10 <lcdDrawLine>
	  lcdDrawLine(100, 30, 100, 319, COLOR_BLACK);
 8003230:	2300      	movs	r3, #0
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	f240 133f 	movw	r3, #319	@ 0x13f
 8003238:	2264      	movs	r2, #100	@ 0x64
 800323a:	211e      	movs	r1, #30
 800323c:	2064      	movs	r0, #100	@ 0x64
 800323e:	f7fd fbe7 	bl	8000a10 <lcdDrawLine>
	  lcdDrawLine(180, 30, 180, 319, COLOR_BLACK);
 8003242:	2300      	movs	r3, #0
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	f240 133f 	movw	r3, #319	@ 0x13f
 800324a:	22b4      	movs	r2, #180	@ 0xb4
 800324c:	211e      	movs	r1, #30
 800324e:	20b4      	movs	r0, #180	@ 0xb4
 8003250:	f7fd fbde 	bl	8000a10 <lcdDrawLine>

	  lcdDrawLine(0, 73 , 239, 73  , COLOR_BLACK);
 8003254:	2300      	movs	r3, #0
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	2349      	movs	r3, #73	@ 0x49
 800325a:	22ef      	movs	r2, #239	@ 0xef
 800325c:	2149      	movs	r1, #73	@ 0x49
 800325e:	2000      	movs	r0, #0
 8003260:	f7fd fbd6 	bl	8000a10 <lcdDrawLine>
	  lcdDrawLine(0, 108, 239, 108 , COLOR_BLACK);
 8003264:	2300      	movs	r3, #0
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	236c      	movs	r3, #108	@ 0x6c
 800326a:	22ef      	movs	r2, #239	@ 0xef
 800326c:	216c      	movs	r1, #108	@ 0x6c
 800326e:	2000      	movs	r0, #0
 8003270:	f7fd fbce 	bl	8000a10 <lcdDrawLine>
	  lcdDrawLine(0, 143, 239, 143 , COLOR_BLACK);
 8003274:	2300      	movs	r3, #0
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	238f      	movs	r3, #143	@ 0x8f
 800327a:	22ef      	movs	r2, #239	@ 0xef
 800327c:	218f      	movs	r1, #143	@ 0x8f
 800327e:	2000      	movs	r0, #0
 8003280:	f7fd fbc6 	bl	8000a10 <lcdDrawLine>
	  lcdDrawLine(0, 178, 239, 178 , COLOR_BLACK);
 8003284:	2300      	movs	r3, #0
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	23b2      	movs	r3, #178	@ 0xb2
 800328a:	22ef      	movs	r2, #239	@ 0xef
 800328c:	21b2      	movs	r1, #178	@ 0xb2
 800328e:	2000      	movs	r0, #0
 8003290:	f7fd fbbe 	bl	8000a10 <lcdDrawLine>
	  lcdDrawLine(0, 213, 239, 213 , COLOR_BLACK);
 8003294:	2300      	movs	r3, #0
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	23d5      	movs	r3, #213	@ 0xd5
 800329a:	22ef      	movs	r2, #239	@ 0xef
 800329c:	21d5      	movs	r1, #213	@ 0xd5
 800329e:	2000      	movs	r0, #0
 80032a0:	f7fd fbb6 	bl	8000a10 <lcdDrawLine>
	  lcdDrawLine(0, 248, 239, 248 , COLOR_BLACK);
 80032a4:	2300      	movs	r3, #0
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	23f8      	movs	r3, #248	@ 0xf8
 80032aa:	22ef      	movs	r2, #239	@ 0xef
 80032ac:	21f8      	movs	r1, #248	@ 0xf8
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7fd fbae 	bl	8000a10 <lcdDrawLine>
	  lcdDrawLine(0, 283, 239, 283 , COLOR_BLACK);
 80032b4:	2300      	movs	r3, #0
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f240 131b 	movw	r3, #283	@ 0x11b
 80032bc:	22ef      	movs	r2, #239	@ 0xef
 80032be:	f240 111b 	movw	r1, #283	@ 0x11b
 80032c2:	2000      	movs	r0, #0
 80032c4:	f7fd fba4 	bl	8000a10 <lcdDrawLine>

	  OneDay(7, 85, 88  , 2 , 5 , 22);
 80032c8:	2316      	movs	r3, #22
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	2305      	movs	r3, #5
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2302      	movs	r3, #2
 80032d2:	2258      	movs	r2, #88	@ 0x58
 80032d4:	2155      	movs	r1, #85	@ 0x55
 80032d6:	2007      	movs	r0, #7
 80032d8:	f7ff fe0a 	bl	8002ef0 <OneDay>
	  OneDay(7, 120, 45 , 3 , 16, 28);
 80032dc:	231c      	movs	r3, #28
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	2310      	movs	r3, #16
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2303      	movs	r3, #3
 80032e6:	222d      	movs	r2, #45	@ 0x2d
 80032e8:	2178      	movs	r1, #120	@ 0x78
 80032ea:	2007      	movs	r0, #7
 80032ec:	f7ff fe00 	bl	8002ef0 <OneDay>
	  OneDay(7, 155, 72 , 4 ,22 , 33);
 80032f0:	2321      	movs	r3, #33	@ 0x21
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	2316      	movs	r3, #22
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	2304      	movs	r3, #4
 80032fa:	2248      	movs	r2, #72	@ 0x48
 80032fc:	219b      	movs	r1, #155	@ 0x9b
 80032fe:	2007      	movs	r0, #7
 8003300:	f7ff fdf6 	bl	8002ef0 <OneDay>
	  OneDay(7, 190, 19 , 5 ,24 , 37);
 8003304:	2325      	movs	r3, #37	@ 0x25
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	2318      	movs	r3, #24
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	2305      	movs	r3, #5
 800330e:	2213      	movs	r2, #19
 8003310:	21be      	movs	r1, #190	@ 0xbe
 8003312:	2007      	movs	r0, #7
 8003314:	f7ff fdec 	bl	8002ef0 <OneDay>
	  OneDay(7, 225, 27 , 6 ,18 , 29);
 8003318:	231d      	movs	r3, #29
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	2312      	movs	r3, #18
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2306      	movs	r3, #6
 8003322:	221b      	movs	r2, #27
 8003324:	21e1      	movs	r1, #225	@ 0xe1
 8003326:	2007      	movs	r0, #7
 8003328:	f7ff fde2 	bl	8002ef0 <OneDay>
	  OneDay(7, 260, 35 , 7 ,12 , 26);
 800332c:	231a      	movs	r3, #26
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	230c      	movs	r3, #12
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2307      	movs	r3, #7
 8003336:	2223      	movs	r2, #35	@ 0x23
 8003338:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800333c:	2007      	movs	r0, #7
 800333e:	f7ff fdd7 	bl	8002ef0 <OneDay>
	  OneDay(7, 295, 65 , 8 ,27 ,39);
 8003342:	2327      	movs	r3, #39	@ 0x27
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	231b      	movs	r3, #27
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2308      	movs	r3, #8
 800334c:	2241      	movs	r2, #65	@ 0x41
 800334e:	f240 1127 	movw	r1, #295	@ 0x127
 8003352:	2007      	movs	r0, #7
 8003354:	f7ff fdcc 	bl	8002ef0 <OneDay>


}
 8003358:	bf00      	nop
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800335e:	b480      	push	{r7}
 8003360:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003362:	b672      	cpsid	i
}
 8003364:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003366:	bf00      	nop
 8003368:	e7fd      	b.n	8003366 <Error_Handler+0x8>
	...

0800336c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	4b10      	ldr	r3, [pc, #64]	@ (80033b8 <HAL_MspInit+0x4c>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337a:	4a0f      	ldr	r2, [pc, #60]	@ (80033b8 <HAL_MspInit+0x4c>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003380:	6453      	str	r3, [r2, #68]	@ 0x44
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <HAL_MspInit+0x4c>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <HAL_MspInit+0x4c>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	4a08      	ldr	r2, [pc, #32]	@ (80033b8 <HAL_MspInit+0x4c>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800339c:	6413      	str	r3, [r2, #64]	@ 0x40
 800339e:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <HAL_MspInit+0x4c>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800

080033bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	@ 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a19      	ldr	r2, [pc, #100]	@ (8003440 <HAL_SPI_MspInit+0x84>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d12c      	bne.n	8003438 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	4b18      	ldr	r3, [pc, #96]	@ (8003444 <HAL_SPI_MspInit+0x88>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	4a17      	ldr	r2, [pc, #92]	@ (8003444 <HAL_SPI_MspInit+0x88>)
 80033e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ee:	4b15      	ldr	r3, [pc, #84]	@ (8003444 <HAL_SPI_MspInit+0x88>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <HAL_SPI_MspInit+0x88>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	4a10      	ldr	r2, [pc, #64]	@ (8003444 <HAL_SPI_MspInit+0x88>)
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6313      	str	r3, [r2, #48]	@ 0x30
 800340a:	4b0e      	ldr	r3, [pc, #56]	@ (8003444 <HAL_SPI_MspInit+0x88>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003416:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800341a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003424:	2303      	movs	r3, #3
 8003426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003428:	2305      	movs	r3, #5
 800342a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	4619      	mov	r1, r3
 8003432:	4805      	ldr	r0, [pc, #20]	@ (8003448 <HAL_SPI_MspInit+0x8c>)
 8003434:	f000 fb96 	bl	8003b64 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003438:	bf00      	nop
 800343a:	3728      	adds	r7, #40	@ 0x28
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40003800 	.word	0x40003800
 8003444:	40023800 	.word	0x40023800
 8003448:	40020400 	.word	0x40020400

0800344c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	@ 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003454:	f107 0314 	add.w	r3, r7, #20
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1d      	ldr	r2, [pc, #116]	@ (80034e0 <HAL_UART_MspInit+0x94>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d134      	bne.n	80034d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	4b1c      	ldr	r3, [pc, #112]	@ (80034e4 <HAL_UART_MspInit+0x98>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	4a1b      	ldr	r2, [pc, #108]	@ (80034e4 <HAL_UART_MspInit+0x98>)
 8003478:	f043 0310 	orr.w	r3, r3, #16
 800347c:	6453      	str	r3, [r2, #68]	@ 0x44
 800347e:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <HAL_UART_MspInit+0x98>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <HAL_UART_MspInit+0x98>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	4a14      	ldr	r2, [pc, #80]	@ (80034e4 <HAL_UART_MspInit+0x98>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6313      	str	r3, [r2, #48]	@ 0x30
 800349a:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <HAL_UART_MspInit+0x98>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80034aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ac:	2302      	movs	r3, #2
 80034ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b4:	2303      	movs	r3, #3
 80034b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034b8:	2307      	movs	r3, #7
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034bc:	f107 0314 	add.w	r3, r7, #20
 80034c0:	4619      	mov	r1, r3
 80034c2:	4809      	ldr	r0, [pc, #36]	@ (80034e8 <HAL_UART_MspInit+0x9c>)
 80034c4:	f000 fb4e 	bl	8003b64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	2100      	movs	r1, #0
 80034cc:	2025      	movs	r0, #37	@ 0x25
 80034ce:	f000 fa80 	bl	80039d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034d2:	2025      	movs	r0, #37	@ 0x25
 80034d4:	f000 fa99 	bl	8003a0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80034d8:	bf00      	nop
 80034da:	3728      	adds	r7, #40	@ 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40011000 	.word	0x40011000
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40020000 	.word	0x40020000

080034ec <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003500:	4b1c      	ldr	r3, [pc, #112]	@ (8003574 <HAL_FSMC_MspInit+0x88>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d131      	bne.n	800356c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8003508:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <HAL_FSMC_MspInit+0x88>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <HAL_FSMC_MspInit+0x8c>)
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	4a18      	ldr	r2, [pc, #96]	@ (8003578 <HAL_FSMC_MspInit+0x8c>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6393      	str	r3, [r2, #56]	@ 0x38
 800351e:	4b16      	ldr	r3, [pc, #88]	@ (8003578 <HAL_FSMC_MspInit+0x8c>)
 8003520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800352a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800352e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003538:	2303      	movs	r3, #3
 800353a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800353c:	230c      	movs	r3, #12
 800353e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003540:	1d3b      	adds	r3, r7, #4
 8003542:	4619      	mov	r1, r3
 8003544:	480d      	ldr	r0, [pc, #52]	@ (800357c <HAL_FSMC_MspInit+0x90>)
 8003546:	f000 fb0d 	bl	8003b64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 800354a:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 800354e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003550:	2302      	movs	r3, #2
 8003552:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003558:	2303      	movs	r3, #3
 800355a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800355c:	230c      	movs	r3, #12
 800355e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	4619      	mov	r1, r3
 8003564:	4806      	ldr	r0, [pc, #24]	@ (8003580 <HAL_FSMC_MspInit+0x94>)
 8003566:	f000 fafd 	bl	8003b64 <HAL_GPIO_Init>
 800356a:	e000      	b.n	800356e <HAL_FSMC_MspInit+0x82>
    return;
 800356c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200002a0 	.word	0x200002a0
 8003578:	40023800 	.word	0x40023800
 800357c:	40021000 	.word	0x40021000
 8003580:	40020c00 	.word	0x40020c00

08003584 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800358c:	f7ff ffae 	bl	80034ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800359c:	bf00      	nop
 800359e:	e7fd      	b.n	800359c <NMI_Handler+0x4>

080035a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035a4:	bf00      	nop
 80035a6:	e7fd      	b.n	80035a4 <HardFault_Handler+0x4>

080035a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035ac:	bf00      	nop
 80035ae:	e7fd      	b.n	80035ac <MemManage_Handler+0x4>

080035b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035b4:	bf00      	nop
 80035b6:	e7fd      	b.n	80035b4 <BusFault_Handler+0x4>

080035b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035bc:	bf00      	nop
 80035be:	e7fd      	b.n	80035bc <UsageFault_Handler+0x4>

080035c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ce:	b480      	push	{r7}
 80035d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ee:	f000 f8d1 	bl	8003794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035fc:	4802      	ldr	r0, [pc, #8]	@ (8003608 <USART1_IRQHandler+0x10>)
 80035fe:	f001 fa21 	bl	8004a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000208 	.word	0x20000208

0800360c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003614:	4a14      	ldr	r2, [pc, #80]	@ (8003668 <_sbrk+0x5c>)
 8003616:	4b15      	ldr	r3, [pc, #84]	@ (800366c <_sbrk+0x60>)
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003620:	4b13      	ldr	r3, [pc, #76]	@ (8003670 <_sbrk+0x64>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003628:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <_sbrk+0x64>)
 800362a:	4a12      	ldr	r2, [pc, #72]	@ (8003674 <_sbrk+0x68>)
 800362c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800362e:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <_sbrk+0x64>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	429a      	cmp	r2, r3
 800363a:	d207      	bcs.n	800364c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800363c:	f002 f9d0 	bl	80059e0 <__errno>
 8003640:	4603      	mov	r3, r0
 8003642:	220c      	movs	r2, #12
 8003644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003646:	f04f 33ff 	mov.w	r3, #4294967295
 800364a:	e009      	b.n	8003660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800364c:	4b08      	ldr	r3, [pc, #32]	@ (8003670 <_sbrk+0x64>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003652:	4b07      	ldr	r3, [pc, #28]	@ (8003670 <_sbrk+0x64>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	4a05      	ldr	r2, [pc, #20]	@ (8003670 <_sbrk+0x64>)
 800365c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800365e:	68fb      	ldr	r3, [r7, #12]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20020000 	.word	0x20020000
 800366c:	00000400 	.word	0x00000400
 8003670:	200002a4 	.word	0x200002a4
 8003674:	200003f8 	.word	0x200003f8

08003678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800367c:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <SystemInit+0x20>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003682:	4a05      	ldr	r2, [pc, #20]	@ (8003698 <SystemInit+0x20>)
 8003684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800369c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80036a0:	f7ff ffea 	bl	8003678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036a4:	480c      	ldr	r0, [pc, #48]	@ (80036d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036a6:	490d      	ldr	r1, [pc, #52]	@ (80036dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036a8:	4a0d      	ldr	r2, [pc, #52]	@ (80036e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036ac:	e002      	b.n	80036b4 <LoopCopyDataInit>

080036ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036b2:	3304      	adds	r3, #4

080036b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036b8:	d3f9      	bcc.n	80036ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ba:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036bc:	4c0a      	ldr	r4, [pc, #40]	@ (80036e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036c0:	e001      	b.n	80036c6 <LoopFillZerobss>

080036c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036c4:	3204      	adds	r2, #4

080036c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036c8:	d3fb      	bcc.n	80036c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ca:	f002 f98f 	bl	80059ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ce:	f7fe f80d 	bl	80016ec <main>
  bx  lr    
 80036d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036dc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80036e0:	08018208 	.word	0x08018208
  ldr r2, =_sbss
 80036e4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80036e8:	200003f4 	.word	0x200003f4

080036ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036ec:	e7fe      	b.n	80036ec <ADC_IRQHandler>
	...

080036f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003730 <HAL_Init+0x40>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003730 <HAL_Init+0x40>)
 80036fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003700:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <HAL_Init+0x40>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <HAL_Init+0x40>)
 8003706:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800370a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800370c:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <HAL_Init+0x40>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a07      	ldr	r2, [pc, #28]	@ (8003730 <HAL_Init+0x40>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003718:	2003      	movs	r0, #3
 800371a:	f000 f94f 	bl	80039bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800371e:	200f      	movs	r0, #15
 8003720:	f000 f808 	bl	8003734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003724:	f7ff fe22 	bl	800336c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023c00 	.word	0x40023c00

08003734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800373c:	4b12      	ldr	r3, [pc, #72]	@ (8003788 <HAL_InitTick+0x54>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b12      	ldr	r3, [pc, #72]	@ (800378c <HAL_InitTick+0x58>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	4619      	mov	r1, r3
 8003746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800374a:	fbb3 f3f1 	udiv	r3, r3, r1
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f967 	bl	8003a26 <HAL_SYSTICK_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e00e      	b.n	8003780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d80a      	bhi.n	800377e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003768:	2200      	movs	r2, #0
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	f000 f92f 	bl	80039d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003774:	4a06      	ldr	r2, [pc, #24]	@ (8003790 <HAL_InitTick+0x5c>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000030 	.word	0x20000030
 800378c:	20000038 	.word	0x20000038
 8003790:	20000034 	.word	0x20000034

08003794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003798:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <HAL_IncTick+0x20>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_IncTick+0x24>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <HAL_IncTick+0x24>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000038 	.word	0x20000038
 80037b8:	200002a8 	.word	0x200002a8

080037bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return uwTick;
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_GetTick+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	200002a8 	.word	0x200002a8

080037d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037dc:	f7ff ffee 	bl	80037bc <HAL_GetTick>
 80037e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d005      	beq.n	80037fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <HAL_Delay+0x44>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037fa:	bf00      	nop
 80037fc:	f7ff ffde 	bl	80037bc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d8f7      	bhi.n	80037fc <HAL_Delay+0x28>
  {
  }
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000038 	.word	0x20000038

0800381c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800382c:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003838:	4013      	ands	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800384c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384e:	4a04      	ldr	r2, [pc, #16]	@ (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	60d3      	str	r3, [r2, #12]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003868:	4b04      	ldr	r3, [pc, #16]	@ (800387c <__NVIC_GetPriorityGrouping+0x18>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	f003 0307 	and.w	r3, r3, #7
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	2b00      	cmp	r3, #0
 8003890:	db0b      	blt.n	80038aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	4907      	ldr	r1, [pc, #28]	@ (80038b8 <__NVIC_EnableIRQ+0x38>)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	2001      	movs	r0, #1
 80038a2:	fa00 f202 	lsl.w	r2, r0, r2
 80038a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	e000e100 	.word	0xe000e100

080038bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	db0a      	blt.n	80038e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	490c      	ldr	r1, [pc, #48]	@ (8003908 <__NVIC_SetPriority+0x4c>)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	0112      	lsls	r2, r2, #4
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	440b      	add	r3, r1
 80038e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e4:	e00a      	b.n	80038fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	4908      	ldr	r1, [pc, #32]	@ (800390c <__NVIC_SetPriority+0x50>)
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	3b04      	subs	r3, #4
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	440b      	add	r3, r1
 80038fa:	761a      	strb	r2, [r3, #24]
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000e100 	.word	0xe000e100
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003910:	b480      	push	{r7}
 8003912:	b089      	sub	sp, #36	@ 0x24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f1c3 0307 	rsb	r3, r3, #7
 800392a:	2b04      	cmp	r3, #4
 800392c:	bf28      	it	cs
 800392e:	2304      	movcs	r3, #4
 8003930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3304      	adds	r3, #4
 8003936:	2b06      	cmp	r3, #6
 8003938:	d902      	bls.n	8003940 <NVIC_EncodePriority+0x30>
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3b03      	subs	r3, #3
 800393e:	e000      	b.n	8003942 <NVIC_EncodePriority+0x32>
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003944:	f04f 32ff 	mov.w	r2, #4294967295
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43da      	mvns	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	401a      	ands	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003958:	f04f 31ff 	mov.w	r1, #4294967295
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	43d9      	mvns	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003968:	4313      	orrs	r3, r2
         );
}
 800396a:	4618      	mov	r0, r3
 800396c:	3724      	adds	r7, #36	@ 0x24
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3b01      	subs	r3, #1
 8003984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003988:	d301      	bcc.n	800398e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800398a:	2301      	movs	r3, #1
 800398c:	e00f      	b.n	80039ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800398e:	4a0a      	ldr	r2, [pc, #40]	@ (80039b8 <SysTick_Config+0x40>)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3b01      	subs	r3, #1
 8003994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003996:	210f      	movs	r1, #15
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	f7ff ff8e 	bl	80038bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a0:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <SysTick_Config+0x40>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039a6:	4b04      	ldr	r3, [pc, #16]	@ (80039b8 <SysTick_Config+0x40>)
 80039a8:	2207      	movs	r2, #7
 80039aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	e000e010 	.word	0xe000e010

080039bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ff29 	bl	800381c <__NVIC_SetPriorityGrouping>
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	4603      	mov	r3, r0
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039e4:	f7ff ff3e 	bl	8003864 <__NVIC_GetPriorityGrouping>
 80039e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	6978      	ldr	r0, [r7, #20]
 80039f0:	f7ff ff8e 	bl	8003910 <NVIC_EncodePriority>
 80039f4:	4602      	mov	r2, r0
 80039f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff5d 	bl	80038bc <__NVIC_SetPriority>
}
 8003a02:	bf00      	nop
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	4603      	mov	r3, r0
 8003a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff ff31 	bl	8003880 <__NVIC_EnableIRQ>
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff ffa2 	bl	8003978 <SysTick_Config>
 8003a34:	4603      	mov	r3, r0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a4c:	f7ff feb6 	bl	80037bc <HAL_GetTick>
 8003a50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d008      	beq.n	8003a70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2280      	movs	r2, #128	@ 0x80
 8003a62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e052      	b.n	8003b16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0216 	bic.w	r2, r2, #22
 8003a7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d103      	bne.n	8003aa0 <HAL_DMA_Abort+0x62>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0208 	bic.w	r2, r2, #8
 8003aae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac0:	e013      	b.n	8003aea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ac2:	f7ff fe7b 	bl	80037bc <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d90c      	bls.n	8003aea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2203      	movs	r2, #3
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e015      	b.n	8003b16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e4      	bne.n	8003ac2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	223f      	movs	r2, #63	@ 0x3f
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d004      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2280      	movs	r2, #128	@ 0x80
 8003b36:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e00c      	b.n	8003b56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2205      	movs	r2, #5
 8003b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b089      	sub	sp, #36	@ 0x24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	e16b      	b.n	8003e58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b80:	2201      	movs	r2, #1
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4013      	ands	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	f040 815a 	bne.w	8003e52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d005      	beq.n	8003bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d130      	bne.n	8003c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bec:	2201      	movs	r2, #1
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 0201 	and.w	r2, r3, #1
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d017      	beq.n	8003c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d123      	bne.n	8003ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	08da      	lsrs	r2, r3, #3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3208      	adds	r2, #8
 8003c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	220f      	movs	r2, #15
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	08da      	lsrs	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3208      	adds	r2, #8
 8003ca2:	69b9      	ldr	r1, [r7, #24]
 8003ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0203 	and.w	r2, r3, #3
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80b4 	beq.w	8003e52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	4b60      	ldr	r3, [pc, #384]	@ (8003e70 <HAL_GPIO_Init+0x30c>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	4a5f      	ldr	r2, [pc, #380]	@ (8003e70 <HAL_GPIO_Init+0x30c>)
 8003cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8003e70 <HAL_GPIO_Init+0x30c>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d06:	4a5b      	ldr	r2, [pc, #364]	@ (8003e74 <HAL_GPIO_Init+0x310>)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	089b      	lsrs	r3, r3, #2
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	220f      	movs	r2, #15
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4013      	ands	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a52      	ldr	r2, [pc, #328]	@ (8003e78 <HAL_GPIO_Init+0x314>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d02b      	beq.n	8003d8a <HAL_GPIO_Init+0x226>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a51      	ldr	r2, [pc, #324]	@ (8003e7c <HAL_GPIO_Init+0x318>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d025      	beq.n	8003d86 <HAL_GPIO_Init+0x222>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a50      	ldr	r2, [pc, #320]	@ (8003e80 <HAL_GPIO_Init+0x31c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01f      	beq.n	8003d82 <HAL_GPIO_Init+0x21e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a4f      	ldr	r2, [pc, #316]	@ (8003e84 <HAL_GPIO_Init+0x320>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d019      	beq.n	8003d7e <HAL_GPIO_Init+0x21a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a4e      	ldr	r2, [pc, #312]	@ (8003e88 <HAL_GPIO_Init+0x324>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <HAL_GPIO_Init+0x216>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a4d      	ldr	r2, [pc, #308]	@ (8003e8c <HAL_GPIO_Init+0x328>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00d      	beq.n	8003d76 <HAL_GPIO_Init+0x212>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a4c      	ldr	r2, [pc, #304]	@ (8003e90 <HAL_GPIO_Init+0x32c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <HAL_GPIO_Init+0x20e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a4b      	ldr	r2, [pc, #300]	@ (8003e94 <HAL_GPIO_Init+0x330>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d101      	bne.n	8003d6e <HAL_GPIO_Init+0x20a>
 8003d6a:	2307      	movs	r3, #7
 8003d6c:	e00e      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d6e:	2308      	movs	r3, #8
 8003d70:	e00c      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d72:	2306      	movs	r3, #6
 8003d74:	e00a      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d76:	2305      	movs	r3, #5
 8003d78:	e008      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	e006      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e004      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e002      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	f002 0203 	and.w	r2, r2, #3
 8003d92:	0092      	lsls	r2, r2, #2
 8003d94:	4093      	lsls	r3, r2
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d9c:	4935      	ldr	r1, [pc, #212]	@ (8003e74 <HAL_GPIO_Init+0x310>)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	089b      	lsrs	r3, r3, #2
 8003da2:	3302      	adds	r3, #2
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003daa:	4b3b      	ldr	r3, [pc, #236]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dce:	4a32      	ldr	r2, [pc, #200]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dd4:	4b30      	ldr	r3, [pc, #192]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003df8:	4a27      	ldr	r2, [pc, #156]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dfe:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e22:	4a1d      	ldr	r2, [pc, #116]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e28:	4b1b      	ldr	r3, [pc, #108]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e4c:	4a12      	ldr	r2, [pc, #72]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3301      	adds	r3, #1
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	2b0f      	cmp	r3, #15
 8003e5c:	f67f ae90 	bls.w	8003b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	3724      	adds	r7, #36	@ 0x24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40013800 	.word	0x40013800
 8003e78:	40020000 	.word	0x40020000
 8003e7c:	40020400 	.word	0x40020400
 8003e80:	40020800 	.word	0x40020800
 8003e84:	40020c00 	.word	0x40020c00
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40021400 	.word	0x40021400
 8003e90:	40021800 	.word	0x40021800
 8003e94:	40021c00 	.word	0x40021c00
 8003e98:	40013c00 	.word	0x40013c00

08003e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	807b      	strh	r3, [r7, #2]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eac:	787b      	ldrb	r3, [r7, #1]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eb2:	887a      	ldrh	r2, [r7, #2]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003eb8:	e003      	b.n	8003ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eba:	887b      	ldrh	r3, [r7, #2]
 8003ebc:	041a      	lsls	r2, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	619a      	str	r2, [r3, #24]
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e267      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d075      	beq.n	8003fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003eee:	4b88      	ldr	r3, [pc, #544]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d00c      	beq.n	8003f14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efa:	4b85      	ldr	r3, [pc, #532]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d112      	bne.n	8003f2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f06:	4b82      	ldr	r3, [pc, #520]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f12:	d10b      	bne.n	8003f2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	4b7e      	ldr	r3, [pc, #504]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d05b      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x108>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d157      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e242      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f34:	d106      	bne.n	8003f44 <HAL_RCC_OscConfig+0x74>
 8003f36:	4b76      	ldr	r3, [pc, #472]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a75      	ldr	r2, [pc, #468]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e01d      	b.n	8003f80 <HAL_RCC_OscConfig+0xb0>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x98>
 8003f4e:	4b70      	ldr	r3, [pc, #448]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6f      	ldr	r2, [pc, #444]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a6c      	ldr	r2, [pc, #432]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e00b      	b.n	8003f80 <HAL_RCC_OscConfig+0xb0>
 8003f68:	4b69      	ldr	r3, [pc, #420]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a68      	ldr	r2, [pc, #416]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b66      	ldr	r3, [pc, #408]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a65      	ldr	r2, [pc, #404]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d013      	beq.n	8003fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7ff fc18 	bl	80037bc <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f90:	f7ff fc14 	bl	80037bc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	@ 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e207      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0xc0>
 8003fae:	e014      	b.n	8003fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7ff fc04 	bl	80037bc <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7ff fc00 	bl	80037bc <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	@ 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e1f3      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fca:	4b51      	ldr	r3, [pc, #324]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0xe8>
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d063      	beq.n	80040ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff2:	4b47      	ldr	r3, [pc, #284]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d11c      	bne.n	8004038 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ffe:	4b44      	ldr	r3, [pc, #272]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d116      	bne.n	8004038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	4b41      	ldr	r3, [pc, #260]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x152>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d001      	beq.n	8004022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e1c7      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	4b3b      	ldr	r3, [pc, #236]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4937      	ldr	r1, [pc, #220]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	e03a      	b.n	80040ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d020      	beq.n	8004082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004040:	4b34      	ldr	r3, [pc, #208]	@ (8004114 <HAL_RCC_OscConfig+0x244>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7ff fbb9 	bl	80037bc <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404e:	f7ff fbb5 	bl	80037bc <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e1a8      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004060:	4b2b      	ldr	r3, [pc, #172]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	4b28      	ldr	r3, [pc, #160]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4925      	ldr	r1, [pc, #148]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 800407c:	4313      	orrs	r3, r2
 800407e:	600b      	str	r3, [r1, #0]
 8004080:	e015      	b.n	80040ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004082:	4b24      	ldr	r3, [pc, #144]	@ (8004114 <HAL_RCC_OscConfig+0x244>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7ff fb98 	bl	80037bc <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004090:	f7ff fb94 	bl	80037bc <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e187      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d036      	beq.n	8004128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c2:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <HAL_RCC_OscConfig+0x248>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7ff fb78 	bl	80037bc <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d0:	f7ff fb74 	bl	80037bc <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e167      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 80040e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x200>
 80040ee:	e01b      	b.n	8004128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f0:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <HAL_RCC_OscConfig+0x248>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f6:	f7ff fb61 	bl	80037bc <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fc:	e00e      	b.n	800411c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fe:	f7ff fb5d 	bl	80037bc <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d907      	bls.n	800411c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e150      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
 8004110:	40023800 	.word	0x40023800
 8004114:	42470000 	.word	0x42470000
 8004118:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411c:	4b88      	ldr	r3, [pc, #544]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 800411e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1ea      	bne.n	80040fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8097 	beq.w	8004264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413a:	4b81      	ldr	r3, [pc, #516]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10f      	bne.n	8004166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	4b7d      	ldr	r3, [pc, #500]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	4a7c      	ldr	r2, [pc, #496]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004154:	6413      	str	r3, [r2, #64]	@ 0x40
 8004156:	4b7a      	ldr	r3, [pc, #488]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004166:	4b77      	ldr	r3, [pc, #476]	@ (8004344 <HAL_RCC_OscConfig+0x474>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d118      	bne.n	80041a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004172:	4b74      	ldr	r3, [pc, #464]	@ (8004344 <HAL_RCC_OscConfig+0x474>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a73      	ldr	r2, [pc, #460]	@ (8004344 <HAL_RCC_OscConfig+0x474>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800417c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417e:	f7ff fb1d 	bl	80037bc <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004186:	f7ff fb19 	bl	80037bc <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e10c      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	4b6a      	ldr	r3, [pc, #424]	@ (8004344 <HAL_RCC_OscConfig+0x474>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d106      	bne.n	80041ba <HAL_RCC_OscConfig+0x2ea>
 80041ac:	4b64      	ldr	r3, [pc, #400]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b0:	4a63      	ldr	r2, [pc, #396]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b8:	e01c      	b.n	80041f4 <HAL_RCC_OscConfig+0x324>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b05      	cmp	r3, #5
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0x30c>
 80041c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041da:	e00b      	b.n	80041f4 <HAL_RCC_OscConfig+0x324>
 80041dc:	4b58      	ldr	r3, [pc, #352]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e0:	4a57      	ldr	r2, [pc, #348]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e8:	4b55      	ldr	r3, [pc, #340]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ec:	4a54      	ldr	r2, [pc, #336]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041ee:	f023 0304 	bic.w	r3, r3, #4
 80041f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d015      	beq.n	8004228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7ff fade 	bl	80037bc <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7ff fada 	bl	80037bc <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0cb      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421a:	4b49      	ldr	r3, [pc, #292]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0ee      	beq.n	8004204 <HAL_RCC_OscConfig+0x334>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004228:	f7ff fac8 	bl	80037bc <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422e:	e00a      	b.n	8004246 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004230:	f7ff fac4 	bl	80037bc <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e0b5      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004246:	4b3e      	ldr	r3, [pc, #248]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1ee      	bne.n	8004230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d105      	bne.n	8004264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004258:	4b39      	ldr	r3, [pc, #228]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 800425a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425c:	4a38      	ldr	r2, [pc, #224]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 800425e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004262:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a1 	beq.w	80043b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800426e:	4b34      	ldr	r3, [pc, #208]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b08      	cmp	r3, #8
 8004278:	d05c      	beq.n	8004334 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d141      	bne.n	8004306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004282:	4b31      	ldr	r3, [pc, #196]	@ (8004348 <HAL_RCC_OscConfig+0x478>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7ff fa98 	bl	80037bc <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004290:	f7ff fa94 	bl	80037bc <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e087      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	4b27      	ldr	r3, [pc, #156]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	019b      	lsls	r3, r3, #6
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c4:	085b      	lsrs	r3, r3, #1
 80042c6:	3b01      	subs	r3, #1
 80042c8:	041b      	lsls	r3, r3, #16
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d0:	061b      	lsls	r3, r3, #24
 80042d2:	491b      	ldr	r1, [pc, #108]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <HAL_RCC_OscConfig+0x478>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042de:	f7ff fa6d 	bl	80037bc <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e6:	f7ff fa69 	bl	80037bc <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e05c      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f8:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x416>
 8004304:	e054      	b.n	80043b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004306:	4b10      	ldr	r3, [pc, #64]	@ (8004348 <HAL_RCC_OscConfig+0x478>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7ff fa56 	bl	80037bc <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004314:	f7ff fa52 	bl	80037bc <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e045      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x444>
 8004332:	e03d      	b.n	80043b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d107      	bne.n	800434c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e038      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
 8004340:	40023800 	.word	0x40023800
 8004344:	40007000 	.word	0x40007000
 8004348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800434c:	4b1b      	ldr	r3, [pc, #108]	@ (80043bc <HAL_RCC_OscConfig+0x4ec>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d028      	beq.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d121      	bne.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d11a      	bne.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800437c:	4013      	ands	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004384:	4293      	cmp	r3, r2
 8004386:	d111      	bne.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	3b01      	subs	r3, #1
 8004396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d107      	bne.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800

080043c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0cc      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043d4:	4b68      	ldr	r3, [pc, #416]	@ (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d90c      	bls.n	80043fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e2:	4b65      	ldr	r3, [pc, #404]	@ (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ea:	4b63      	ldr	r3, [pc, #396]	@ (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0b8      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004414:	4b59      	ldr	r3, [pc, #356]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a58      	ldr	r2, [pc, #352]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800441e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800442c:	4b53      	ldr	r3, [pc, #332]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4a52      	ldr	r2, [pc, #328]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004438:	4b50      	ldr	r3, [pc, #320]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	494d      	ldr	r1, [pc, #308]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d044      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d107      	bne.n	800446e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	4b47      	ldr	r3, [pc, #284]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d119      	bne.n	800449e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e07f      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d003      	beq.n	800447e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800447a:	2b03      	cmp	r3, #3
 800447c:	d107      	bne.n	800448e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447e:	4b3f      	ldr	r3, [pc, #252]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e06f      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448e:	4b3b      	ldr	r3, [pc, #236]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e067      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800449e:	4b37      	ldr	r3, [pc, #220]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f023 0203 	bic.w	r2, r3, #3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4934      	ldr	r1, [pc, #208]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b0:	f7ff f984 	bl	80037bc <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b8:	f7ff f980 	bl	80037bc <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e04f      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ce:	4b2b      	ldr	r3, [pc, #172]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 020c 	and.w	r2, r3, #12
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	429a      	cmp	r2, r3
 80044de:	d1eb      	bne.n	80044b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044e0:	4b25      	ldr	r3, [pc, #148]	@ (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d20c      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4b22      	ldr	r3, [pc, #136]	@ (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b20      	ldr	r3, [pc, #128]	@ (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e032      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004514:	4b19      	ldr	r3, [pc, #100]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4916      	ldr	r1, [pc, #88]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004532:	4b12      	ldr	r3, [pc, #72]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	490e      	ldr	r1, [pc, #56]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004546:	f000 f821 	bl	800458c <HAL_RCC_GetSysClockFreq>
 800454a:	4602      	mov	r2, r0
 800454c:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	490a      	ldr	r1, [pc, #40]	@ (8004580 <HAL_RCC_ClockConfig+0x1c0>)
 8004558:	5ccb      	ldrb	r3, [r1, r3]
 800455a:	fa22 f303 	lsr.w	r3, r2, r3
 800455e:	4a09      	ldr	r2, [pc, #36]	@ (8004584 <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004562:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff f8e4 	bl	8003734 <HAL_InitTick>

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40023c00 	.word	0x40023c00
 800457c:	40023800 	.word	0x40023800
 8004580:	08016734 	.word	0x08016734
 8004584:	20000030 	.word	0x20000030
 8004588:	20000034 	.word	0x20000034

0800458c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800458c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004590:	b094      	sub	sp, #80	@ 0x50
 8004592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045a4:	4b79      	ldr	r3, [pc, #484]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d00d      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x40>
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	f200 80e1 	bhi.w	8004778 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x34>
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d003      	beq.n	80045c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045be:	e0db      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045c0:	4b73      	ldr	r3, [pc, #460]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x204>)
 80045c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045c4:	e0db      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045c6:	4b73      	ldr	r3, [pc, #460]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x208>)
 80045c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045ca:	e0d8      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045cc:	4b6f      	ldr	r3, [pc, #444]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045d6:	4b6d      	ldr	r3, [pc, #436]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d063      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e2:	4b6a      	ldr	r3, [pc, #424]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	2200      	movs	r2, #0
 80045ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80045f6:	2300      	movs	r3, #0
 80045f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80045fe:	4622      	mov	r2, r4
 8004600:	462b      	mov	r3, r5
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	0159      	lsls	r1, r3, #5
 800460c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004610:	0150      	lsls	r0, r2, #5
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4621      	mov	r1, r4
 8004618:	1a51      	subs	r1, r2, r1
 800461a:	6139      	str	r1, [r7, #16]
 800461c:	4629      	mov	r1, r5
 800461e:	eb63 0301 	sbc.w	r3, r3, r1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004630:	4659      	mov	r1, fp
 8004632:	018b      	lsls	r3, r1, #6
 8004634:	4651      	mov	r1, sl
 8004636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800463a:	4651      	mov	r1, sl
 800463c:	018a      	lsls	r2, r1, #6
 800463e:	4651      	mov	r1, sl
 8004640:	ebb2 0801 	subs.w	r8, r2, r1
 8004644:	4659      	mov	r1, fp
 8004646:	eb63 0901 	sbc.w	r9, r3, r1
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800465e:	4690      	mov	r8, r2
 8004660:	4699      	mov	r9, r3
 8004662:	4623      	mov	r3, r4
 8004664:	eb18 0303 	adds.w	r3, r8, r3
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	462b      	mov	r3, r5
 800466c:	eb49 0303 	adc.w	r3, r9, r3
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800467e:	4629      	mov	r1, r5
 8004680:	024b      	lsls	r3, r1, #9
 8004682:	4621      	mov	r1, r4
 8004684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004688:	4621      	mov	r1, r4
 800468a:	024a      	lsls	r2, r1, #9
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004692:	2200      	movs	r2, #0
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800469c:	f7fb fde8 	bl	8000270 <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4613      	mov	r3, r2
 80046a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a8:	e058      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046aa:	4b38      	ldr	r3, [pc, #224]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	099b      	lsrs	r3, r3, #6
 80046b0:	2200      	movs	r2, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	4611      	mov	r1, r2
 80046b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	2300      	movs	r3, #0
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046c4:	4642      	mov	r2, r8
 80046c6:	464b      	mov	r3, r9
 80046c8:	f04f 0000 	mov.w	r0, #0
 80046cc:	f04f 0100 	mov.w	r1, #0
 80046d0:	0159      	lsls	r1, r3, #5
 80046d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046d6:	0150      	lsls	r0, r2, #5
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4641      	mov	r1, r8
 80046de:	ebb2 0a01 	subs.w	sl, r2, r1
 80046e2:	4649      	mov	r1, r9
 80046e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004700:	eb63 050b 	sbc.w	r5, r3, fp
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	00eb      	lsls	r3, r5, #3
 800470e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004712:	00e2      	lsls	r2, r4, #3
 8004714:	4614      	mov	r4, r2
 8004716:	461d      	mov	r5, r3
 8004718:	4643      	mov	r3, r8
 800471a:	18e3      	adds	r3, r4, r3
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	464b      	mov	r3, r9
 8004720:	eb45 0303 	adc.w	r3, r5, r3
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004732:	4629      	mov	r1, r5
 8004734:	028b      	lsls	r3, r1, #10
 8004736:	4621      	mov	r1, r4
 8004738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800473c:	4621      	mov	r1, r4
 800473e:	028a      	lsls	r2, r1, #10
 8004740:	4610      	mov	r0, r2
 8004742:	4619      	mov	r1, r3
 8004744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004746:	2200      	movs	r2, #0
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	61fa      	str	r2, [r7, #28]
 800474c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004750:	f7fb fd8e 	bl	8000270 <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4613      	mov	r3, r2
 800475a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800475c:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	3301      	adds	r3, #1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800476c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800476e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004776:	e002      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x204>)
 800477a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800477c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800477e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004780:	4618      	mov	r0, r3
 8004782:	3750      	adds	r7, #80	@ 0x50
 8004784:	46bd      	mov	sp, r7
 8004786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	00f42400 	.word	0x00f42400
 8004794:	007a1200 	.word	0x007a1200

08004798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800479c:	4b03      	ldr	r3, [pc, #12]	@ (80047ac <HAL_RCC_GetHCLKFreq+0x14>)
 800479e:	681b      	ldr	r3, [r3, #0]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000030 	.word	0x20000030

080047b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047b4:	f7ff fff0 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b05      	ldr	r3, [pc, #20]	@ (80047d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0a9b      	lsrs	r3, r3, #10
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4903      	ldr	r1, [pc, #12]	@ (80047d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40023800 	.word	0x40023800
 80047d4:	08016744 	.word	0x08016744

080047d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047dc:	f7ff ffdc 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	0b5b      	lsrs	r3, r3, #13
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4903      	ldr	r1, [pc, #12]	@ (80047fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40023800 	.word	0x40023800
 80047fc:	08016744 	.word	0x08016744

08004800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e07b      	b.n	800490a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d108      	bne.n	800482c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004822:	d009      	beq.n	8004838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	61da      	str	r2, [r3, #28]
 800482a:	e005      	b.n	8004838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fe fdb2 	bl	80033bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800486e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048bc:	ea42 0103 	orr.w	r1, r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0104 	and.w	r1, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048de:	f003 0210 	and.w	r2, r3, #16
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e038      	b.n	800499a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7fe fe21 	bl	8003584 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3308      	adds	r3, #8
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f000 ff47 	bl	80057e0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	461a      	mov	r2, r3
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	f000 ffa9 	bl	80058b4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6858      	ldr	r0, [r3, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	f000 ffd6 	bl	8005920 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	6892      	ldr	r2, [r2, #8]
 800497c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	6892      	ldr	r2, [r2, #8]
 8004988:	f041 0101 	orr.w	r1, r1, #1
 800498c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e042      	b.n	8004a3a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7fe fd3f 	bl	800344c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2224      	movs	r2, #36	@ 0x24
 80049d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fc86 	bl	80052f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695a      	ldr	r2, [r3, #20]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b0ba      	sub	sp, #232	@ 0xe8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10f      	bne.n	8004aaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_UART_IRQHandler+0x66>
 8004a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fb69 	bl	800517a <UART_Receive_IT>
      return;
 8004aa8:	e25b      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80de 	beq.w	8004c70 <HAL_UART_IRQHandler+0x22c>
 8004ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d106      	bne.n	8004ace <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80d1 	beq.w	8004c70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <HAL_UART_IRQHandler+0xae>
 8004ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aea:	f043 0201 	orr.w	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_UART_IRQHandler+0xd2>
 8004afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	f043 0202 	orr.w	r2, r3, #2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_UART_IRQHandler+0xf6>
 8004b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b32:	f043 0204 	orr.w	r2, r3, #4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d011      	beq.n	8004b6a <HAL_UART_IRQHandler+0x126>
 8004b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d105      	bne.n	8004b5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b62:	f043 0208 	orr.w	r2, r3, #8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 81f2 	beq.w	8004f58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_UART_IRQHandler+0x14e>
 8004b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 faf4 	bl	800517a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9c:	2b40      	cmp	r3, #64	@ 0x40
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <HAL_UART_IRQHandler+0x17a>
 8004bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d04f      	beq.n	8004c5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f9fc 	bl	8004fbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bce:	2b40      	cmp	r3, #64	@ 0x40
 8004bd0:	d141      	bne.n	8004c56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3314      	adds	r3, #20
 8004bd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1d9      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d013      	beq.n	8004c4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e24 <HAL_UART_IRQHandler+0x3e0>)
 8004c2c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe ff73 	bl	8003b1e <HAL_DMA_Abort_IT>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d016      	beq.n	8004c6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c48:	4610      	mov	r0, r2
 8004c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4c:	e00e      	b.n	8004c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f99e 	bl	8004f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	e00a      	b.n	8004c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f99a 	bl	8004f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5c:	e006      	b.n	8004c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f996 	bl	8004f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c6a:	e175      	b.n	8004f58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6c:	bf00      	nop
    return;
 8004c6e:	e173      	b.n	8004f58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	f040 814f 	bne.w	8004f18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8148 	beq.w	8004f18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8141 	beq.w	8004f18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb6:	2b40      	cmp	r3, #64	@ 0x40
 8004cb8:	f040 80b6 	bne.w	8004e28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8145 	beq.w	8004f5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	f080 813e 	bcs.w	8004f5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ce6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf2:	f000 8088 	beq.w	8004e06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1d9      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3314      	adds	r3, #20
 8004d48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d54:	f023 0301 	bic.w	r3, r3, #1
 8004d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3314      	adds	r3, #20
 8004d62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e1      	bne.n	8004d42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3314      	adds	r3, #20
 8004d84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3314      	adds	r3, #20
 8004d9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004da2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004da4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004da8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004db0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e3      	bne.n	8004d7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dd6:	f023 0310 	bic.w	r3, r3, #16
 8004dda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004de8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004dea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004dee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e3      	bne.n	8004dc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fe fe1c 	bl	8003a3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f8c1 	bl	8004fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e22:	e09b      	b.n	8004f5c <HAL_UART_IRQHandler+0x518>
 8004e24:	08005083 	.word	0x08005083
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 808e 	beq.w	8004f60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8089 	beq.w	8004f60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e72:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e3      	bne.n	8004e4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	623b      	str	r3, [r7, #32]
   return(result);
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3314      	adds	r3, #20
 8004ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004eaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8004eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e3      	bne.n	8004e86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0310 	bic.w	r3, r3, #16
 8004ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ef0:	61fa      	str	r2, [r7, #28]
 8004ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	69b9      	ldr	r1, [r7, #24]
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	617b      	str	r3, [r7, #20]
   return(result);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e3      	bne.n	8004ecc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f847 	bl	8004fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f16:	e023      	b.n	8004f60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <HAL_UART_IRQHandler+0x4f4>
 8004f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f8ba 	bl	80050aa <UART_Transmit_IT>
    return;
 8004f36:	e014      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00e      	beq.n	8004f62 <HAL_UART_IRQHandler+0x51e>
 8004f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f8fa 	bl	800514a <UART_EndTransmit_IT>
    return;
 8004f56:	e004      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
    return;
 8004f58:	bf00      	nop
 8004f5a:	e002      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f5c:	bf00      	nop
 8004f5e:	e000      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f60:	bf00      	nop
  }
}
 8004f62:	37e8      	adds	r7, #232	@ 0xe8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b095      	sub	sp, #84	@ 0x54
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	330c      	adds	r3, #12
 8004fca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fe4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e5      	bne.n	8004fc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3314      	adds	r3, #20
 8004ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	61fb      	str	r3, [r7, #28]
   return(result);
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3314      	adds	r3, #20
 8005016:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005018:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800501a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800501e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e5      	bne.n	8004ff8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005030:	2b01      	cmp	r3, #1
 8005032:	d119      	bne.n	8005068 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	330c      	adds	r3, #12
 800503a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	e853 3f00 	ldrex	r3, [r3]
 8005042:	60bb      	str	r3, [r7, #8]
   return(result);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f023 0310 	bic.w	r3, r3, #16
 800504a:	647b      	str	r3, [r7, #68]	@ 0x44
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	330c      	adds	r3, #12
 8005052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005054:	61ba      	str	r2, [r7, #24]
 8005056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	6979      	ldr	r1, [r7, #20]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	613b      	str	r3, [r7, #16]
   return(result);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e5      	bne.n	8005034 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005076:	bf00      	nop
 8005078:	3754      	adds	r7, #84	@ 0x54
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff ff77 	bl	8004f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b21      	cmp	r3, #33	@ 0x21
 80050bc:	d13e      	bne.n	800513c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c6:	d114      	bne.n	80050f2 <UART_Transmit_IT+0x48>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d110      	bne.n	80050f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	1c9a      	adds	r2, r3, #2
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	621a      	str	r2, [r3, #32]
 80050f0:	e008      	b.n	8005104 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6211      	str	r1, [r2, #32]
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29b      	uxth	r3, r3
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4619      	mov	r1, r3
 8005112:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10f      	bne.n	8005138 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005126:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005136:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800513c:	2302      	movs	r3, #2
  }
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005160:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fefc 	bl	8004f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b08c      	sub	sp, #48	@ 0x30
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b22      	cmp	r3, #34	@ 0x22
 800518c:	f040 80ae 	bne.w	80052ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005198:	d117      	bne.n	80051ca <UART_Receive_IT+0x50>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d113      	bne.n	80051ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c2:	1c9a      	adds	r2, r3, #2
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80051c8:	e026      	b.n	8005218 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051dc:	d007      	beq.n	80051ee <UART_Receive_IT+0x74>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <UART_Receive_IT+0x82>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e008      	b.n	800520e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005208:	b2da      	uxtb	r2, r3
 800520a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800520c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29b      	uxth	r3, r3
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4619      	mov	r1, r3
 8005226:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005228:	2b00      	cmp	r3, #0
 800522a:	d15d      	bne.n	80052e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0220 	bic.w	r2, r2, #32
 800523a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800524a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0201 	bic.w	r2, r2, #1
 800525a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526e:	2b01      	cmp	r3, #1
 8005270:	d135      	bne.n	80052de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	330c      	adds	r3, #12
 800527e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	613b      	str	r3, [r7, #16]
   return(result);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f023 0310 	bic.w	r3, r3, #16
 800528e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005298:	623a      	str	r2, [r7, #32]
 800529a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	69f9      	ldr	r1, [r7, #28]
 800529e:	6a3a      	ldr	r2, [r7, #32]
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e5      	bne.n	8005278 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d10a      	bne.n	80052d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fe64 	bl	8004fa4 <HAL_UARTEx_RxEventCallback>
 80052dc:	e002      	b.n	80052e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff fe4c 	bl	8004f7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	e002      	b.n	80052ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e000      	b.n	80052ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
  }
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3730      	adds	r7, #48	@ 0x30
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052fc:	b0c0      	sub	sp, #256	@ 0x100
 80052fe:	af00      	add	r7, sp, #0
 8005300:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	68d9      	ldr	r1, [r3, #12]
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	ea40 0301 	orr.w	r3, r0, r1
 8005320:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	431a      	orrs	r2, r3
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	431a      	orrs	r2, r3
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005350:	f021 010c 	bic.w	r1, r1, #12
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800535e:	430b      	orrs	r3, r1
 8005360:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005372:	6999      	ldr	r1, [r3, #24]
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	ea40 0301 	orr.w	r3, r0, r1
 800537e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b8f      	ldr	r3, [pc, #572]	@ (80055c4 <UART_SetConfig+0x2cc>)
 8005388:	429a      	cmp	r2, r3
 800538a:	d005      	beq.n	8005398 <UART_SetConfig+0xa0>
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b8d      	ldr	r3, [pc, #564]	@ (80055c8 <UART_SetConfig+0x2d0>)
 8005394:	429a      	cmp	r2, r3
 8005396:	d104      	bne.n	80053a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005398:	f7ff fa1e 	bl	80047d8 <HAL_RCC_GetPCLK2Freq>
 800539c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053a0:	e003      	b.n	80053aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053a2:	f7ff fa05 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 80053a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053b4:	f040 810c 	bne.w	80055d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053bc:	2200      	movs	r2, #0
 80053be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053ca:	4622      	mov	r2, r4
 80053cc:	462b      	mov	r3, r5
 80053ce:	1891      	adds	r1, r2, r2
 80053d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053d2:	415b      	adcs	r3, r3
 80053d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053da:	4621      	mov	r1, r4
 80053dc:	eb12 0801 	adds.w	r8, r2, r1
 80053e0:	4629      	mov	r1, r5
 80053e2:	eb43 0901 	adc.w	r9, r3, r1
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053fa:	4690      	mov	r8, r2
 80053fc:	4699      	mov	r9, r3
 80053fe:	4623      	mov	r3, r4
 8005400:	eb18 0303 	adds.w	r3, r8, r3
 8005404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005408:	462b      	mov	r3, r5
 800540a:	eb49 0303 	adc.w	r3, r9, r3
 800540e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800541e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005426:	460b      	mov	r3, r1
 8005428:	18db      	adds	r3, r3, r3
 800542a:	653b      	str	r3, [r7, #80]	@ 0x50
 800542c:	4613      	mov	r3, r2
 800542e:	eb42 0303 	adc.w	r3, r2, r3
 8005432:	657b      	str	r3, [r7, #84]	@ 0x54
 8005434:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005438:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800543c:	f7fa ff18 	bl	8000270 <__aeabi_uldivmod>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4b61      	ldr	r3, [pc, #388]	@ (80055cc <UART_SetConfig+0x2d4>)
 8005446:	fba3 2302 	umull	r2, r3, r3, r2
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	011c      	lsls	r4, r3, #4
 800544e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005452:	2200      	movs	r2, #0
 8005454:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005458:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800545c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005460:	4642      	mov	r2, r8
 8005462:	464b      	mov	r3, r9
 8005464:	1891      	adds	r1, r2, r2
 8005466:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005468:	415b      	adcs	r3, r3
 800546a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800546c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005470:	4641      	mov	r1, r8
 8005472:	eb12 0a01 	adds.w	sl, r2, r1
 8005476:	4649      	mov	r1, r9
 8005478:	eb43 0b01 	adc.w	fp, r3, r1
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005488:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800548c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005490:	4692      	mov	sl, r2
 8005492:	469b      	mov	fp, r3
 8005494:	4643      	mov	r3, r8
 8005496:	eb1a 0303 	adds.w	r3, sl, r3
 800549a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800549e:	464b      	mov	r3, r9
 80054a0:	eb4b 0303 	adc.w	r3, fp, r3
 80054a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054bc:	460b      	mov	r3, r1
 80054be:	18db      	adds	r3, r3, r3
 80054c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054c2:	4613      	mov	r3, r2
 80054c4:	eb42 0303 	adc.w	r3, r2, r3
 80054c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054d2:	f7fa fecd 	bl	8000270 <__aeabi_uldivmod>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4611      	mov	r1, r2
 80054dc:	4b3b      	ldr	r3, [pc, #236]	@ (80055cc <UART_SetConfig+0x2d4>)
 80054de:	fba3 2301 	umull	r2, r3, r3, r1
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	2264      	movs	r2, #100	@ 0x64
 80054e6:	fb02 f303 	mul.w	r3, r2, r3
 80054ea:	1acb      	subs	r3, r1, r3
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054f2:	4b36      	ldr	r3, [pc, #216]	@ (80055cc <UART_SetConfig+0x2d4>)
 80054f4:	fba3 2302 	umull	r2, r3, r3, r2
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005500:	441c      	add	r4, r3
 8005502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005506:	2200      	movs	r2, #0
 8005508:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800550c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005510:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005514:	4642      	mov	r2, r8
 8005516:	464b      	mov	r3, r9
 8005518:	1891      	adds	r1, r2, r2
 800551a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800551c:	415b      	adcs	r3, r3
 800551e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005524:	4641      	mov	r1, r8
 8005526:	1851      	adds	r1, r2, r1
 8005528:	6339      	str	r1, [r7, #48]	@ 0x30
 800552a:	4649      	mov	r1, r9
 800552c:	414b      	adcs	r3, r1
 800552e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800553c:	4659      	mov	r1, fp
 800553e:	00cb      	lsls	r3, r1, #3
 8005540:	4651      	mov	r1, sl
 8005542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005546:	4651      	mov	r1, sl
 8005548:	00ca      	lsls	r2, r1, #3
 800554a:	4610      	mov	r0, r2
 800554c:	4619      	mov	r1, r3
 800554e:	4603      	mov	r3, r0
 8005550:	4642      	mov	r2, r8
 8005552:	189b      	adds	r3, r3, r2
 8005554:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005558:	464b      	mov	r3, r9
 800555a:	460a      	mov	r2, r1
 800555c:	eb42 0303 	adc.w	r3, r2, r3
 8005560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005570:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005578:	460b      	mov	r3, r1
 800557a:	18db      	adds	r3, r3, r3
 800557c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800557e:	4613      	mov	r3, r2
 8005580:	eb42 0303 	adc.w	r3, r2, r3
 8005584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800558a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800558e:	f7fa fe6f 	bl	8000270 <__aeabi_uldivmod>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4b0d      	ldr	r3, [pc, #52]	@ (80055cc <UART_SetConfig+0x2d4>)
 8005598:	fba3 1302 	umull	r1, r3, r3, r2
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	2164      	movs	r1, #100	@ 0x64
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	3332      	adds	r3, #50	@ 0x32
 80055aa:	4a08      	ldr	r2, [pc, #32]	@ (80055cc <UART_SetConfig+0x2d4>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	f003 0207 	and.w	r2, r3, #7
 80055b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4422      	add	r2, r4
 80055be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055c0:	e106      	b.n	80057d0 <UART_SetConfig+0x4d8>
 80055c2:	bf00      	nop
 80055c4:	40011000 	.word	0x40011000
 80055c8:	40011400 	.word	0x40011400
 80055cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055e2:	4642      	mov	r2, r8
 80055e4:	464b      	mov	r3, r9
 80055e6:	1891      	adds	r1, r2, r2
 80055e8:	6239      	str	r1, [r7, #32]
 80055ea:	415b      	adcs	r3, r3
 80055ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055f2:	4641      	mov	r1, r8
 80055f4:	1854      	adds	r4, r2, r1
 80055f6:	4649      	mov	r1, r9
 80055f8:	eb43 0501 	adc.w	r5, r3, r1
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	00eb      	lsls	r3, r5, #3
 8005606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800560a:	00e2      	lsls	r2, r4, #3
 800560c:	4614      	mov	r4, r2
 800560e:	461d      	mov	r5, r3
 8005610:	4643      	mov	r3, r8
 8005612:	18e3      	adds	r3, r4, r3
 8005614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005618:	464b      	mov	r3, r9
 800561a:	eb45 0303 	adc.w	r3, r5, r3
 800561e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800562e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800563e:	4629      	mov	r1, r5
 8005640:	008b      	lsls	r3, r1, #2
 8005642:	4621      	mov	r1, r4
 8005644:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005648:	4621      	mov	r1, r4
 800564a:	008a      	lsls	r2, r1, #2
 800564c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005650:	f7fa fe0e 	bl	8000270 <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4b60      	ldr	r3, [pc, #384]	@ (80057dc <UART_SetConfig+0x4e4>)
 800565a:	fba3 2302 	umull	r2, r3, r3, r2
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	011c      	lsls	r4, r3, #4
 8005662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005666:	2200      	movs	r2, #0
 8005668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800566c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005670:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	1891      	adds	r1, r2, r2
 800567a:	61b9      	str	r1, [r7, #24]
 800567c:	415b      	adcs	r3, r3
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005684:	4641      	mov	r1, r8
 8005686:	1851      	adds	r1, r2, r1
 8005688:	6139      	str	r1, [r7, #16]
 800568a:	4649      	mov	r1, r9
 800568c:	414b      	adcs	r3, r1
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800569c:	4659      	mov	r1, fp
 800569e:	00cb      	lsls	r3, r1, #3
 80056a0:	4651      	mov	r1, sl
 80056a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056a6:	4651      	mov	r1, sl
 80056a8:	00ca      	lsls	r2, r1, #3
 80056aa:	4610      	mov	r0, r2
 80056ac:	4619      	mov	r1, r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	4642      	mov	r2, r8
 80056b2:	189b      	adds	r3, r3, r2
 80056b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056b8:	464b      	mov	r3, r9
 80056ba:	460a      	mov	r2, r1
 80056bc:	eb42 0303 	adc.w	r3, r2, r3
 80056c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056dc:	4649      	mov	r1, r9
 80056de:	008b      	lsls	r3, r1, #2
 80056e0:	4641      	mov	r1, r8
 80056e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056e6:	4641      	mov	r1, r8
 80056e8:	008a      	lsls	r2, r1, #2
 80056ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056ee:	f7fa fdbf 	bl	8000270 <__aeabi_uldivmod>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	4b38      	ldr	r3, [pc, #224]	@ (80057dc <UART_SetConfig+0x4e4>)
 80056fa:	fba3 2301 	umull	r2, r3, r3, r1
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	2264      	movs	r2, #100	@ 0x64
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	1acb      	subs	r3, r1, r3
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	3332      	adds	r3, #50	@ 0x32
 800570c:	4a33      	ldr	r2, [pc, #204]	@ (80057dc <UART_SetConfig+0x4e4>)
 800570e:	fba2 2303 	umull	r2, r3, r2, r3
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005718:	441c      	add	r4, r3
 800571a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800571e:	2200      	movs	r2, #0
 8005720:	673b      	str	r3, [r7, #112]	@ 0x70
 8005722:	677a      	str	r2, [r7, #116]	@ 0x74
 8005724:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	1891      	adds	r1, r2, r2
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	415b      	adcs	r3, r3
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005738:	4641      	mov	r1, r8
 800573a:	1851      	adds	r1, r2, r1
 800573c:	6039      	str	r1, [r7, #0]
 800573e:	4649      	mov	r1, r9
 8005740:	414b      	adcs	r3, r1
 8005742:	607b      	str	r3, [r7, #4]
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005750:	4659      	mov	r1, fp
 8005752:	00cb      	lsls	r3, r1, #3
 8005754:	4651      	mov	r1, sl
 8005756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800575a:	4651      	mov	r1, sl
 800575c:	00ca      	lsls	r2, r1, #3
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	4603      	mov	r3, r0
 8005764:	4642      	mov	r2, r8
 8005766:	189b      	adds	r3, r3, r2
 8005768:	66bb      	str	r3, [r7, #104]	@ 0x68
 800576a:	464b      	mov	r3, r9
 800576c:	460a      	mov	r2, r1
 800576e:	eb42 0303 	adc.w	r3, r2, r3
 8005772:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	663b      	str	r3, [r7, #96]	@ 0x60
 800577e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800578c:	4649      	mov	r1, r9
 800578e:	008b      	lsls	r3, r1, #2
 8005790:	4641      	mov	r1, r8
 8005792:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005796:	4641      	mov	r1, r8
 8005798:	008a      	lsls	r2, r1, #2
 800579a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800579e:	f7fa fd67 	bl	8000270 <__aeabi_uldivmod>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4b0d      	ldr	r3, [pc, #52]	@ (80057dc <UART_SetConfig+0x4e4>)
 80057a8:	fba3 1302 	umull	r1, r3, r3, r2
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	2164      	movs	r1, #100	@ 0x64
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	3332      	adds	r3, #50	@ 0x32
 80057ba:	4a08      	ldr	r2, [pc, #32]	@ (80057dc <UART_SetConfig+0x4e4>)
 80057bc:	fba2 2303 	umull	r2, r3, r2, r3
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	f003 020f 	and.w	r2, r3, #15
 80057c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4422      	add	r2, r4
 80057ce:	609a      	str	r2, [r3, #8]
}
 80057d0:	bf00      	nop
 80057d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057d6:	46bd      	mov	sp, r7
 80057d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057dc:	51eb851f 	.word	0x51eb851f

080057e0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	6812      	ldr	r2, [r2, #0]
 80057f8:	f023 0101 	bic.w	r1, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b08      	cmp	r3, #8
 8005808:	d102      	bne.n	8005810 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800580a:	2340      	movs	r3, #64	@ 0x40
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e001      	b.n	8005814 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005820:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005826:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800582c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005832:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005838:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800583e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8005844:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800584a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005850:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800586e:	4b10      	ldr	r3, [pc, #64]	@ (80058b0 <FSMC_NORSRAM_Init+0xd0>)
 8005870:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005878:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005880:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	43db      	mvns	r3, r3
 8005890:	ea02 0103 	and.w	r1, r2, r3
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4319      	orrs	r1, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	0008fb7f 	.word	0x0008fb7f

080058b4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ca:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	431a      	orrs	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	431a      	orrs	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	041b      	lsls	r3, r3, #16
 80058e8:	431a      	orrs	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	051b      	lsls	r3, r3, #20
 80058f2:	431a      	orrs	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	3b02      	subs	r3, #2
 80058fa:	061b      	lsls	r3, r3, #24
 80058fc:	431a      	orrs	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	4313      	orrs	r3, r2
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	3201      	adds	r2, #1
 8005908:	4319      	orrs	r1, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005934:	d11d      	bne.n	8005972 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800593e:	4b13      	ldr	r3, [pc, #76]	@ (800598c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005940:	4013      	ands	r3, r2
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	6811      	ldr	r1, [r2, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	6852      	ldr	r2, [r2, #4]
 800594a:	0112      	lsls	r2, r2, #4
 800594c:	4311      	orrs	r1, r2
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	6892      	ldr	r2, [r2, #8]
 8005952:	0212      	lsls	r2, r2, #8
 8005954:	4311      	orrs	r1, r2
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	6992      	ldr	r2, [r2, #24]
 800595a:	4311      	orrs	r1, r2
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	68d2      	ldr	r2, [r2, #12]
 8005960:	0412      	lsls	r2, r2, #16
 8005962:	430a      	orrs	r2, r1
 8005964:	ea43 0102 	orr.w	r1, r3, r2
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005970:	e005      	b.n	800597e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800597a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	cff00000 	.word	0xcff00000

08005990 <_vsiprintf_r>:
 8005990:	b500      	push	{lr}
 8005992:	b09b      	sub	sp, #108	@ 0x6c
 8005994:	9100      	str	r1, [sp, #0]
 8005996:	9104      	str	r1, [sp, #16]
 8005998:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800599c:	9105      	str	r1, [sp, #20]
 800599e:	9102      	str	r1, [sp, #8]
 80059a0:	4905      	ldr	r1, [pc, #20]	@ (80059b8 <_vsiprintf_r+0x28>)
 80059a2:	9103      	str	r1, [sp, #12]
 80059a4:	4669      	mov	r1, sp
 80059a6:	f000 f99b 	bl	8005ce0 <_svfiprintf_r>
 80059aa:	9b00      	ldr	r3, [sp, #0]
 80059ac:	2200      	movs	r2, #0
 80059ae:	701a      	strb	r2, [r3, #0]
 80059b0:	b01b      	add	sp, #108	@ 0x6c
 80059b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80059b6:	bf00      	nop
 80059b8:	ffff0208 	.word	0xffff0208

080059bc <vsiprintf>:
 80059bc:	4613      	mov	r3, r2
 80059be:	460a      	mov	r2, r1
 80059c0:	4601      	mov	r1, r0
 80059c2:	4802      	ldr	r0, [pc, #8]	@ (80059cc <vsiprintf+0x10>)
 80059c4:	6800      	ldr	r0, [r0, #0]
 80059c6:	f7ff bfe3 	b.w	8005990 <_vsiprintf_r>
 80059ca:	bf00      	nop
 80059cc:	2000003c 	.word	0x2000003c

080059d0 <memset>:
 80059d0:	4402      	add	r2, r0
 80059d2:	4603      	mov	r3, r0
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d100      	bne.n	80059da <memset+0xa>
 80059d8:	4770      	bx	lr
 80059da:	f803 1b01 	strb.w	r1, [r3], #1
 80059de:	e7f9      	b.n	80059d4 <memset+0x4>

080059e0 <__errno>:
 80059e0:	4b01      	ldr	r3, [pc, #4]	@ (80059e8 <__errno+0x8>)
 80059e2:	6818      	ldr	r0, [r3, #0]
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	2000003c 	.word	0x2000003c

080059ec <__libc_init_array>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005a24 <__libc_init_array+0x38>)
 80059f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005a28 <__libc_init_array+0x3c>)
 80059f2:	1b64      	subs	r4, r4, r5
 80059f4:	10a4      	asrs	r4, r4, #2
 80059f6:	2600      	movs	r6, #0
 80059f8:	42a6      	cmp	r6, r4
 80059fa:	d109      	bne.n	8005a10 <__libc_init_array+0x24>
 80059fc:	4d0b      	ldr	r5, [pc, #44]	@ (8005a2c <__libc_init_array+0x40>)
 80059fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005a30 <__libc_init_array+0x44>)
 8005a00:	f000 fc66 	bl	80062d0 <_init>
 8005a04:	1b64      	subs	r4, r4, r5
 8005a06:	10a4      	asrs	r4, r4, #2
 8005a08:	2600      	movs	r6, #0
 8005a0a:	42a6      	cmp	r6, r4
 8005a0c:	d105      	bne.n	8005a1a <__libc_init_array+0x2e>
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a14:	4798      	blx	r3
 8005a16:	3601      	adds	r6, #1
 8005a18:	e7ee      	b.n	80059f8 <__libc_init_array+0xc>
 8005a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1e:	4798      	blx	r3
 8005a20:	3601      	adds	r6, #1
 8005a22:	e7f2      	b.n	8005a0a <__libc_init_array+0x1e>
 8005a24:	08018200 	.word	0x08018200
 8005a28:	08018200 	.word	0x08018200
 8005a2c:	08018200 	.word	0x08018200
 8005a30:	08018204 	.word	0x08018204

08005a34 <__retarget_lock_acquire_recursive>:
 8005a34:	4770      	bx	lr

08005a36 <__retarget_lock_release_recursive>:
 8005a36:	4770      	bx	lr

08005a38 <_free_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	2900      	cmp	r1, #0
 8005a3e:	d041      	beq.n	8005ac4 <_free_r+0x8c>
 8005a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a44:	1f0c      	subs	r4, r1, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bfb8      	it	lt
 8005a4a:	18e4      	addlt	r4, r4, r3
 8005a4c:	f000 f8e0 	bl	8005c10 <__malloc_lock>
 8005a50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac8 <_free_r+0x90>)
 8005a52:	6813      	ldr	r3, [r2, #0]
 8005a54:	b933      	cbnz	r3, 8005a64 <_free_r+0x2c>
 8005a56:	6063      	str	r3, [r4, #4]
 8005a58:	6014      	str	r4, [r2, #0]
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a60:	f000 b8dc 	b.w	8005c1c <__malloc_unlock>
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d908      	bls.n	8005a7a <_free_r+0x42>
 8005a68:	6820      	ldr	r0, [r4, #0]
 8005a6a:	1821      	adds	r1, r4, r0
 8005a6c:	428b      	cmp	r3, r1
 8005a6e:	bf01      	itttt	eq
 8005a70:	6819      	ldreq	r1, [r3, #0]
 8005a72:	685b      	ldreq	r3, [r3, #4]
 8005a74:	1809      	addeq	r1, r1, r0
 8005a76:	6021      	streq	r1, [r4, #0]
 8005a78:	e7ed      	b.n	8005a56 <_free_r+0x1e>
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	b10b      	cbz	r3, 8005a84 <_free_r+0x4c>
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	d9fa      	bls.n	8005a7a <_free_r+0x42>
 8005a84:	6811      	ldr	r1, [r2, #0]
 8005a86:	1850      	adds	r0, r2, r1
 8005a88:	42a0      	cmp	r0, r4
 8005a8a:	d10b      	bne.n	8005aa4 <_free_r+0x6c>
 8005a8c:	6820      	ldr	r0, [r4, #0]
 8005a8e:	4401      	add	r1, r0
 8005a90:	1850      	adds	r0, r2, r1
 8005a92:	4283      	cmp	r3, r0
 8005a94:	6011      	str	r1, [r2, #0]
 8005a96:	d1e0      	bne.n	8005a5a <_free_r+0x22>
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	6053      	str	r3, [r2, #4]
 8005a9e:	4408      	add	r0, r1
 8005aa0:	6010      	str	r0, [r2, #0]
 8005aa2:	e7da      	b.n	8005a5a <_free_r+0x22>
 8005aa4:	d902      	bls.n	8005aac <_free_r+0x74>
 8005aa6:	230c      	movs	r3, #12
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	e7d6      	b.n	8005a5a <_free_r+0x22>
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	1821      	adds	r1, r4, r0
 8005ab0:	428b      	cmp	r3, r1
 8005ab2:	bf04      	itt	eq
 8005ab4:	6819      	ldreq	r1, [r3, #0]
 8005ab6:	685b      	ldreq	r3, [r3, #4]
 8005ab8:	6063      	str	r3, [r4, #4]
 8005aba:	bf04      	itt	eq
 8005abc:	1809      	addeq	r1, r1, r0
 8005abe:	6021      	streq	r1, [r4, #0]
 8005ac0:	6054      	str	r4, [r2, #4]
 8005ac2:	e7ca      	b.n	8005a5a <_free_r+0x22>
 8005ac4:	bd38      	pop	{r3, r4, r5, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200003f0 	.word	0x200003f0

08005acc <sbrk_aligned>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	4e0f      	ldr	r6, [pc, #60]	@ (8005b0c <sbrk_aligned+0x40>)
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	6831      	ldr	r1, [r6, #0]
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	b911      	cbnz	r1, 8005ade <sbrk_aligned+0x12>
 8005ad8:	f000 fba6 	bl	8006228 <_sbrk_r>
 8005adc:	6030      	str	r0, [r6, #0]
 8005ade:	4621      	mov	r1, r4
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f000 fba1 	bl	8006228 <_sbrk_r>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	d103      	bne.n	8005af2 <sbrk_aligned+0x26>
 8005aea:	f04f 34ff 	mov.w	r4, #4294967295
 8005aee:	4620      	mov	r0, r4
 8005af0:	bd70      	pop	{r4, r5, r6, pc}
 8005af2:	1cc4      	adds	r4, r0, #3
 8005af4:	f024 0403 	bic.w	r4, r4, #3
 8005af8:	42a0      	cmp	r0, r4
 8005afa:	d0f8      	beq.n	8005aee <sbrk_aligned+0x22>
 8005afc:	1a21      	subs	r1, r4, r0
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 fb92 	bl	8006228 <_sbrk_r>
 8005b04:	3001      	adds	r0, #1
 8005b06:	d1f2      	bne.n	8005aee <sbrk_aligned+0x22>
 8005b08:	e7ef      	b.n	8005aea <sbrk_aligned+0x1e>
 8005b0a:	bf00      	nop
 8005b0c:	200003ec 	.word	0x200003ec

08005b10 <_malloc_r>:
 8005b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b14:	1ccd      	adds	r5, r1, #3
 8005b16:	f025 0503 	bic.w	r5, r5, #3
 8005b1a:	3508      	adds	r5, #8
 8005b1c:	2d0c      	cmp	r5, #12
 8005b1e:	bf38      	it	cc
 8005b20:	250c      	movcc	r5, #12
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	4606      	mov	r6, r0
 8005b26:	db01      	blt.n	8005b2c <_malloc_r+0x1c>
 8005b28:	42a9      	cmp	r1, r5
 8005b2a:	d904      	bls.n	8005b36 <_malloc_r+0x26>
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	6033      	str	r3, [r6, #0]
 8005b30:	2000      	movs	r0, #0
 8005b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c0c <_malloc_r+0xfc>
 8005b3a:	f000 f869 	bl	8005c10 <__malloc_lock>
 8005b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b42:	461c      	mov	r4, r3
 8005b44:	bb44      	cbnz	r4, 8005b98 <_malloc_r+0x88>
 8005b46:	4629      	mov	r1, r5
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f7ff ffbf 	bl	8005acc <sbrk_aligned>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	4604      	mov	r4, r0
 8005b52:	d158      	bne.n	8005c06 <_malloc_r+0xf6>
 8005b54:	f8d8 4000 	ldr.w	r4, [r8]
 8005b58:	4627      	mov	r7, r4
 8005b5a:	2f00      	cmp	r7, #0
 8005b5c:	d143      	bne.n	8005be6 <_malloc_r+0xd6>
 8005b5e:	2c00      	cmp	r4, #0
 8005b60:	d04b      	beq.n	8005bfa <_malloc_r+0xea>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	4639      	mov	r1, r7
 8005b66:	4630      	mov	r0, r6
 8005b68:	eb04 0903 	add.w	r9, r4, r3
 8005b6c:	f000 fb5c 	bl	8006228 <_sbrk_r>
 8005b70:	4581      	cmp	r9, r0
 8005b72:	d142      	bne.n	8005bfa <_malloc_r+0xea>
 8005b74:	6821      	ldr	r1, [r4, #0]
 8005b76:	1a6d      	subs	r5, r5, r1
 8005b78:	4629      	mov	r1, r5
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f7ff ffa6 	bl	8005acc <sbrk_aligned>
 8005b80:	3001      	adds	r0, #1
 8005b82:	d03a      	beq.n	8005bfa <_malloc_r+0xea>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	442b      	add	r3, r5
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	bb62      	cbnz	r2, 8005bec <_malloc_r+0xdc>
 8005b92:	f8c8 7000 	str.w	r7, [r8]
 8005b96:	e00f      	b.n	8005bb8 <_malloc_r+0xa8>
 8005b98:	6822      	ldr	r2, [r4, #0]
 8005b9a:	1b52      	subs	r2, r2, r5
 8005b9c:	d420      	bmi.n	8005be0 <_malloc_r+0xd0>
 8005b9e:	2a0b      	cmp	r2, #11
 8005ba0:	d917      	bls.n	8005bd2 <_malloc_r+0xc2>
 8005ba2:	1961      	adds	r1, r4, r5
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	6025      	str	r5, [r4, #0]
 8005ba8:	bf18      	it	ne
 8005baa:	6059      	strne	r1, [r3, #4]
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	bf08      	it	eq
 8005bb0:	f8c8 1000 	streq.w	r1, [r8]
 8005bb4:	5162      	str	r2, [r4, r5]
 8005bb6:	604b      	str	r3, [r1, #4]
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f000 f82f 	bl	8005c1c <__malloc_unlock>
 8005bbe:	f104 000b 	add.w	r0, r4, #11
 8005bc2:	1d23      	adds	r3, r4, #4
 8005bc4:	f020 0007 	bic.w	r0, r0, #7
 8005bc8:	1ac2      	subs	r2, r0, r3
 8005bca:	bf1c      	itt	ne
 8005bcc:	1a1b      	subne	r3, r3, r0
 8005bce:	50a3      	strne	r3, [r4, r2]
 8005bd0:	e7af      	b.n	8005b32 <_malloc_r+0x22>
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	bf0c      	ite	eq
 8005bd8:	f8c8 2000 	streq.w	r2, [r8]
 8005bdc:	605a      	strne	r2, [r3, #4]
 8005bde:	e7eb      	b.n	8005bb8 <_malloc_r+0xa8>
 8005be0:	4623      	mov	r3, r4
 8005be2:	6864      	ldr	r4, [r4, #4]
 8005be4:	e7ae      	b.n	8005b44 <_malloc_r+0x34>
 8005be6:	463c      	mov	r4, r7
 8005be8:	687f      	ldr	r7, [r7, #4]
 8005bea:	e7b6      	b.n	8005b5a <_malloc_r+0x4a>
 8005bec:	461a      	mov	r2, r3
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	d1fb      	bne.n	8005bec <_malloc_r+0xdc>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6053      	str	r3, [r2, #4]
 8005bf8:	e7de      	b.n	8005bb8 <_malloc_r+0xa8>
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	6033      	str	r3, [r6, #0]
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f000 f80c 	bl	8005c1c <__malloc_unlock>
 8005c04:	e794      	b.n	8005b30 <_malloc_r+0x20>
 8005c06:	6005      	str	r5, [r0, #0]
 8005c08:	e7d6      	b.n	8005bb8 <_malloc_r+0xa8>
 8005c0a:	bf00      	nop
 8005c0c:	200003f0 	.word	0x200003f0

08005c10 <__malloc_lock>:
 8005c10:	4801      	ldr	r0, [pc, #4]	@ (8005c18 <__malloc_lock+0x8>)
 8005c12:	f7ff bf0f 	b.w	8005a34 <__retarget_lock_acquire_recursive>
 8005c16:	bf00      	nop
 8005c18:	200003e8 	.word	0x200003e8

08005c1c <__malloc_unlock>:
 8005c1c:	4801      	ldr	r0, [pc, #4]	@ (8005c24 <__malloc_unlock+0x8>)
 8005c1e:	f7ff bf0a 	b.w	8005a36 <__retarget_lock_release_recursive>
 8005c22:	bf00      	nop
 8005c24:	200003e8 	.word	0x200003e8

08005c28 <__ssputs_r>:
 8005c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	688e      	ldr	r6, [r1, #8]
 8005c2e:	461f      	mov	r7, r3
 8005c30:	42be      	cmp	r6, r7
 8005c32:	680b      	ldr	r3, [r1, #0]
 8005c34:	4682      	mov	sl, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	4690      	mov	r8, r2
 8005c3a:	d82d      	bhi.n	8005c98 <__ssputs_r+0x70>
 8005c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c44:	d026      	beq.n	8005c94 <__ssputs_r+0x6c>
 8005c46:	6965      	ldr	r5, [r4, #20]
 8005c48:	6909      	ldr	r1, [r1, #16]
 8005c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c4e:	eba3 0901 	sub.w	r9, r3, r1
 8005c52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c56:	1c7b      	adds	r3, r7, #1
 8005c58:	444b      	add	r3, r9
 8005c5a:	106d      	asrs	r5, r5, #1
 8005c5c:	429d      	cmp	r5, r3
 8005c5e:	bf38      	it	cc
 8005c60:	461d      	movcc	r5, r3
 8005c62:	0553      	lsls	r3, r2, #21
 8005c64:	d527      	bpl.n	8005cb6 <__ssputs_r+0x8e>
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7ff ff52 	bl	8005b10 <_malloc_r>
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	b360      	cbz	r0, 8005cca <__ssputs_r+0xa2>
 8005c70:	6921      	ldr	r1, [r4, #16]
 8005c72:	464a      	mov	r2, r9
 8005c74:	f000 fae8 	bl	8006248 <memcpy>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	6126      	str	r6, [r4, #16]
 8005c86:	6165      	str	r5, [r4, #20]
 8005c88:	444e      	add	r6, r9
 8005c8a:	eba5 0509 	sub.w	r5, r5, r9
 8005c8e:	6026      	str	r6, [r4, #0]
 8005c90:	60a5      	str	r5, [r4, #8]
 8005c92:	463e      	mov	r6, r7
 8005c94:	42be      	cmp	r6, r7
 8005c96:	d900      	bls.n	8005c9a <__ssputs_r+0x72>
 8005c98:	463e      	mov	r6, r7
 8005c9a:	6820      	ldr	r0, [r4, #0]
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	f000 faa8 	bl	80061f4 <memmove>
 8005ca4:	68a3      	ldr	r3, [r4, #8]
 8005ca6:	1b9b      	subs	r3, r3, r6
 8005ca8:	60a3      	str	r3, [r4, #8]
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	4433      	add	r3, r6
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb6:	462a      	mov	r2, r5
 8005cb8:	f000 fad4 	bl	8006264 <_realloc_r>
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d1e0      	bne.n	8005c84 <__ssputs_r+0x5c>
 8005cc2:	6921      	ldr	r1, [r4, #16]
 8005cc4:	4650      	mov	r0, sl
 8005cc6:	f7ff feb7 	bl	8005a38 <_free_r>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	f8ca 3000 	str.w	r3, [sl]
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	e7e9      	b.n	8005cb2 <__ssputs_r+0x8a>
	...

08005ce0 <_svfiprintf_r>:
 8005ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce4:	4698      	mov	r8, r3
 8005ce6:	898b      	ldrh	r3, [r1, #12]
 8005ce8:	061b      	lsls	r3, r3, #24
 8005cea:	b09d      	sub	sp, #116	@ 0x74
 8005cec:	4607      	mov	r7, r0
 8005cee:	460d      	mov	r5, r1
 8005cf0:	4614      	mov	r4, r2
 8005cf2:	d510      	bpl.n	8005d16 <_svfiprintf_r+0x36>
 8005cf4:	690b      	ldr	r3, [r1, #16]
 8005cf6:	b973      	cbnz	r3, 8005d16 <_svfiprintf_r+0x36>
 8005cf8:	2140      	movs	r1, #64	@ 0x40
 8005cfa:	f7ff ff09 	bl	8005b10 <_malloc_r>
 8005cfe:	6028      	str	r0, [r5, #0]
 8005d00:	6128      	str	r0, [r5, #16]
 8005d02:	b930      	cbnz	r0, 8005d12 <_svfiprintf_r+0x32>
 8005d04:	230c      	movs	r3, #12
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	b01d      	add	sp, #116	@ 0x74
 8005d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d12:	2340      	movs	r3, #64	@ 0x40
 8005d14:	616b      	str	r3, [r5, #20]
 8005d16:	2300      	movs	r3, #0
 8005d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d1a:	2320      	movs	r3, #32
 8005d1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d24:	2330      	movs	r3, #48	@ 0x30
 8005d26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ec4 <_svfiprintf_r+0x1e4>
 8005d2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d2e:	f04f 0901 	mov.w	r9, #1
 8005d32:	4623      	mov	r3, r4
 8005d34:	469a      	mov	sl, r3
 8005d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d3a:	b10a      	cbz	r2, 8005d40 <_svfiprintf_r+0x60>
 8005d3c:	2a25      	cmp	r2, #37	@ 0x25
 8005d3e:	d1f9      	bne.n	8005d34 <_svfiprintf_r+0x54>
 8005d40:	ebba 0b04 	subs.w	fp, sl, r4
 8005d44:	d00b      	beq.n	8005d5e <_svfiprintf_r+0x7e>
 8005d46:	465b      	mov	r3, fp
 8005d48:	4622      	mov	r2, r4
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f7ff ff6b 	bl	8005c28 <__ssputs_r>
 8005d52:	3001      	adds	r0, #1
 8005d54:	f000 80a7 	beq.w	8005ea6 <_svfiprintf_r+0x1c6>
 8005d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d5a:	445a      	add	r2, fp
 8005d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 809f 	beq.w	8005ea6 <_svfiprintf_r+0x1c6>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d72:	f10a 0a01 	add.w	sl, sl, #1
 8005d76:	9304      	str	r3, [sp, #16]
 8005d78:	9307      	str	r3, [sp, #28]
 8005d7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d80:	4654      	mov	r4, sl
 8005d82:	2205      	movs	r2, #5
 8005d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d88:	484e      	ldr	r0, [pc, #312]	@ (8005ec4 <_svfiprintf_r+0x1e4>)
 8005d8a:	f7fa fa21 	bl	80001d0 <memchr>
 8005d8e:	9a04      	ldr	r2, [sp, #16]
 8005d90:	b9d8      	cbnz	r0, 8005dca <_svfiprintf_r+0xea>
 8005d92:	06d0      	lsls	r0, r2, #27
 8005d94:	bf44      	itt	mi
 8005d96:	2320      	movmi	r3, #32
 8005d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d9c:	0711      	lsls	r1, r2, #28
 8005d9e:	bf44      	itt	mi
 8005da0:	232b      	movmi	r3, #43	@ 0x2b
 8005da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005da6:	f89a 3000 	ldrb.w	r3, [sl]
 8005daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dac:	d015      	beq.n	8005dda <_svfiprintf_r+0xfa>
 8005dae:	9a07      	ldr	r2, [sp, #28]
 8005db0:	4654      	mov	r4, sl
 8005db2:	2000      	movs	r0, #0
 8005db4:	f04f 0c0a 	mov.w	ip, #10
 8005db8:	4621      	mov	r1, r4
 8005dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dbe:	3b30      	subs	r3, #48	@ 0x30
 8005dc0:	2b09      	cmp	r3, #9
 8005dc2:	d94b      	bls.n	8005e5c <_svfiprintf_r+0x17c>
 8005dc4:	b1b0      	cbz	r0, 8005df4 <_svfiprintf_r+0x114>
 8005dc6:	9207      	str	r2, [sp, #28]
 8005dc8:	e014      	b.n	8005df4 <_svfiprintf_r+0x114>
 8005dca:	eba0 0308 	sub.w	r3, r0, r8
 8005dce:	fa09 f303 	lsl.w	r3, r9, r3
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	46a2      	mov	sl, r4
 8005dd8:	e7d2      	b.n	8005d80 <_svfiprintf_r+0xa0>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	1d19      	adds	r1, r3, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	9103      	str	r1, [sp, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bfbb      	ittet	lt
 8005de6:	425b      	neglt	r3, r3
 8005de8:	f042 0202 	orrlt.w	r2, r2, #2
 8005dec:	9307      	strge	r3, [sp, #28]
 8005dee:	9307      	strlt	r3, [sp, #28]
 8005df0:	bfb8      	it	lt
 8005df2:	9204      	strlt	r2, [sp, #16]
 8005df4:	7823      	ldrb	r3, [r4, #0]
 8005df6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005df8:	d10a      	bne.n	8005e10 <_svfiprintf_r+0x130>
 8005dfa:	7863      	ldrb	r3, [r4, #1]
 8005dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dfe:	d132      	bne.n	8005e66 <_svfiprintf_r+0x186>
 8005e00:	9b03      	ldr	r3, [sp, #12]
 8005e02:	1d1a      	adds	r2, r3, #4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	9203      	str	r2, [sp, #12]
 8005e08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e0c:	3402      	adds	r4, #2
 8005e0e:	9305      	str	r3, [sp, #20]
 8005e10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ed4 <_svfiprintf_r+0x1f4>
 8005e14:	7821      	ldrb	r1, [r4, #0]
 8005e16:	2203      	movs	r2, #3
 8005e18:	4650      	mov	r0, sl
 8005e1a:	f7fa f9d9 	bl	80001d0 <memchr>
 8005e1e:	b138      	cbz	r0, 8005e30 <_svfiprintf_r+0x150>
 8005e20:	9b04      	ldr	r3, [sp, #16]
 8005e22:	eba0 000a 	sub.w	r0, r0, sl
 8005e26:	2240      	movs	r2, #64	@ 0x40
 8005e28:	4082      	lsls	r2, r0
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	3401      	adds	r4, #1
 8005e2e:	9304      	str	r3, [sp, #16]
 8005e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e34:	4824      	ldr	r0, [pc, #144]	@ (8005ec8 <_svfiprintf_r+0x1e8>)
 8005e36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e3a:	2206      	movs	r2, #6
 8005e3c:	f7fa f9c8 	bl	80001d0 <memchr>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d036      	beq.n	8005eb2 <_svfiprintf_r+0x1d2>
 8005e44:	4b21      	ldr	r3, [pc, #132]	@ (8005ecc <_svfiprintf_r+0x1ec>)
 8005e46:	bb1b      	cbnz	r3, 8005e90 <_svfiprintf_r+0x1b0>
 8005e48:	9b03      	ldr	r3, [sp, #12]
 8005e4a:	3307      	adds	r3, #7
 8005e4c:	f023 0307 	bic.w	r3, r3, #7
 8005e50:	3308      	adds	r3, #8
 8005e52:	9303      	str	r3, [sp, #12]
 8005e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e56:	4433      	add	r3, r6
 8005e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e5a:	e76a      	b.n	8005d32 <_svfiprintf_r+0x52>
 8005e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e60:	460c      	mov	r4, r1
 8005e62:	2001      	movs	r0, #1
 8005e64:	e7a8      	b.n	8005db8 <_svfiprintf_r+0xd8>
 8005e66:	2300      	movs	r3, #0
 8005e68:	3401      	adds	r4, #1
 8005e6a:	9305      	str	r3, [sp, #20]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	f04f 0c0a 	mov.w	ip, #10
 8005e72:	4620      	mov	r0, r4
 8005e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e78:	3a30      	subs	r2, #48	@ 0x30
 8005e7a:	2a09      	cmp	r2, #9
 8005e7c:	d903      	bls.n	8005e86 <_svfiprintf_r+0x1a6>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0c6      	beq.n	8005e10 <_svfiprintf_r+0x130>
 8005e82:	9105      	str	r1, [sp, #20]
 8005e84:	e7c4      	b.n	8005e10 <_svfiprintf_r+0x130>
 8005e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e7f0      	b.n	8005e72 <_svfiprintf_r+0x192>
 8005e90:	ab03      	add	r3, sp, #12
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	462a      	mov	r2, r5
 8005e96:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed0 <_svfiprintf_r+0x1f0>)
 8005e98:	a904      	add	r1, sp, #16
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	f3af 8000 	nop.w
 8005ea0:	1c42      	adds	r2, r0, #1
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	d1d6      	bne.n	8005e54 <_svfiprintf_r+0x174>
 8005ea6:	89ab      	ldrh	r3, [r5, #12]
 8005ea8:	065b      	lsls	r3, r3, #25
 8005eaa:	f53f af2d 	bmi.w	8005d08 <_svfiprintf_r+0x28>
 8005eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005eb0:	e72c      	b.n	8005d0c <_svfiprintf_r+0x2c>
 8005eb2:	ab03      	add	r3, sp, #12
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	462a      	mov	r2, r5
 8005eb8:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <_svfiprintf_r+0x1f0>)
 8005eba:	a904      	add	r1, sp, #16
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	f000 f879 	bl	8005fb4 <_printf_i>
 8005ec2:	e7ed      	b.n	8005ea0 <_svfiprintf_r+0x1c0>
 8005ec4:	080181c4 	.word	0x080181c4
 8005ec8:	080181ce 	.word	0x080181ce
 8005ecc:	00000000 	.word	0x00000000
 8005ed0:	08005c29 	.word	0x08005c29
 8005ed4:	080181ca 	.word	0x080181ca

08005ed8 <_printf_common>:
 8005ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	4616      	mov	r6, r2
 8005ede:	4698      	mov	r8, r3
 8005ee0:	688a      	ldr	r2, [r1, #8]
 8005ee2:	690b      	ldr	r3, [r1, #16]
 8005ee4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	bfb8      	it	lt
 8005eec:	4613      	movlt	r3, r2
 8005eee:	6033      	str	r3, [r6, #0]
 8005ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	b10a      	cbz	r2, 8005efe <_printf_common+0x26>
 8005efa:	3301      	adds	r3, #1
 8005efc:	6033      	str	r3, [r6, #0]
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	0699      	lsls	r1, r3, #26
 8005f02:	bf42      	ittt	mi
 8005f04:	6833      	ldrmi	r3, [r6, #0]
 8005f06:	3302      	addmi	r3, #2
 8005f08:	6033      	strmi	r3, [r6, #0]
 8005f0a:	6825      	ldr	r5, [r4, #0]
 8005f0c:	f015 0506 	ands.w	r5, r5, #6
 8005f10:	d106      	bne.n	8005f20 <_printf_common+0x48>
 8005f12:	f104 0a19 	add.w	sl, r4, #25
 8005f16:	68e3      	ldr	r3, [r4, #12]
 8005f18:	6832      	ldr	r2, [r6, #0]
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	42ab      	cmp	r3, r5
 8005f1e:	dc26      	bgt.n	8005f6e <_printf_common+0x96>
 8005f20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	3b00      	subs	r3, #0
 8005f28:	bf18      	it	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	0692      	lsls	r2, r2, #26
 8005f2e:	d42b      	bmi.n	8005f88 <_printf_common+0xb0>
 8005f30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f34:	4641      	mov	r1, r8
 8005f36:	4638      	mov	r0, r7
 8005f38:	47c8      	blx	r9
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d01e      	beq.n	8005f7c <_printf_common+0xa4>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	6922      	ldr	r2, [r4, #16]
 8005f42:	f003 0306 	and.w	r3, r3, #6
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	bf02      	ittt	eq
 8005f4a:	68e5      	ldreq	r5, [r4, #12]
 8005f4c:	6833      	ldreq	r3, [r6, #0]
 8005f4e:	1aed      	subeq	r5, r5, r3
 8005f50:	68a3      	ldr	r3, [r4, #8]
 8005f52:	bf0c      	ite	eq
 8005f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f58:	2500      	movne	r5, #0
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	bfc4      	itt	gt
 8005f5e:	1a9b      	subgt	r3, r3, r2
 8005f60:	18ed      	addgt	r5, r5, r3
 8005f62:	2600      	movs	r6, #0
 8005f64:	341a      	adds	r4, #26
 8005f66:	42b5      	cmp	r5, r6
 8005f68:	d11a      	bne.n	8005fa0 <_printf_common+0xc8>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	e008      	b.n	8005f80 <_printf_common+0xa8>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4652      	mov	r2, sl
 8005f72:	4641      	mov	r1, r8
 8005f74:	4638      	mov	r0, r7
 8005f76:	47c8      	blx	r9
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d103      	bne.n	8005f84 <_printf_common+0xac>
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f84:	3501      	adds	r5, #1
 8005f86:	e7c6      	b.n	8005f16 <_printf_common+0x3e>
 8005f88:	18e1      	adds	r1, r4, r3
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	2030      	movs	r0, #48	@ 0x30
 8005f8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f92:	4422      	add	r2, r4
 8005f94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	e7c7      	b.n	8005f30 <_printf_common+0x58>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	4641      	mov	r1, r8
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	47c8      	blx	r9
 8005faa:	3001      	adds	r0, #1
 8005fac:	d0e6      	beq.n	8005f7c <_printf_common+0xa4>
 8005fae:	3601      	adds	r6, #1
 8005fb0:	e7d9      	b.n	8005f66 <_printf_common+0x8e>
	...

08005fb4 <_printf_i>:
 8005fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb8:	7e0f      	ldrb	r7, [r1, #24]
 8005fba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fbc:	2f78      	cmp	r7, #120	@ 0x78
 8005fbe:	4691      	mov	r9, r2
 8005fc0:	4680      	mov	r8, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	469a      	mov	sl, r3
 8005fc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fca:	d807      	bhi.n	8005fdc <_printf_i+0x28>
 8005fcc:	2f62      	cmp	r7, #98	@ 0x62
 8005fce:	d80a      	bhi.n	8005fe6 <_printf_i+0x32>
 8005fd0:	2f00      	cmp	r7, #0
 8005fd2:	f000 80d2 	beq.w	800617a <_printf_i+0x1c6>
 8005fd6:	2f58      	cmp	r7, #88	@ 0x58
 8005fd8:	f000 80b9 	beq.w	800614e <_printf_i+0x19a>
 8005fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fe0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fe4:	e03a      	b.n	800605c <_printf_i+0xa8>
 8005fe6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fea:	2b15      	cmp	r3, #21
 8005fec:	d8f6      	bhi.n	8005fdc <_printf_i+0x28>
 8005fee:	a101      	add	r1, pc, #4	@ (adr r1, 8005ff4 <_printf_i+0x40>)
 8005ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ff4:	0800604d 	.word	0x0800604d
 8005ff8:	08006061 	.word	0x08006061
 8005ffc:	08005fdd 	.word	0x08005fdd
 8006000:	08005fdd 	.word	0x08005fdd
 8006004:	08005fdd 	.word	0x08005fdd
 8006008:	08005fdd 	.word	0x08005fdd
 800600c:	08006061 	.word	0x08006061
 8006010:	08005fdd 	.word	0x08005fdd
 8006014:	08005fdd 	.word	0x08005fdd
 8006018:	08005fdd 	.word	0x08005fdd
 800601c:	08005fdd 	.word	0x08005fdd
 8006020:	08006161 	.word	0x08006161
 8006024:	0800608b 	.word	0x0800608b
 8006028:	0800611b 	.word	0x0800611b
 800602c:	08005fdd 	.word	0x08005fdd
 8006030:	08005fdd 	.word	0x08005fdd
 8006034:	08006183 	.word	0x08006183
 8006038:	08005fdd 	.word	0x08005fdd
 800603c:	0800608b 	.word	0x0800608b
 8006040:	08005fdd 	.word	0x08005fdd
 8006044:	08005fdd 	.word	0x08005fdd
 8006048:	08006123 	.word	0x08006123
 800604c:	6833      	ldr	r3, [r6, #0]
 800604e:	1d1a      	adds	r2, r3, #4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6032      	str	r2, [r6, #0]
 8006054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006058:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800605c:	2301      	movs	r3, #1
 800605e:	e09d      	b.n	800619c <_printf_i+0x1e8>
 8006060:	6833      	ldr	r3, [r6, #0]
 8006062:	6820      	ldr	r0, [r4, #0]
 8006064:	1d19      	adds	r1, r3, #4
 8006066:	6031      	str	r1, [r6, #0]
 8006068:	0606      	lsls	r6, r0, #24
 800606a:	d501      	bpl.n	8006070 <_printf_i+0xbc>
 800606c:	681d      	ldr	r5, [r3, #0]
 800606e:	e003      	b.n	8006078 <_printf_i+0xc4>
 8006070:	0645      	lsls	r5, r0, #25
 8006072:	d5fb      	bpl.n	800606c <_printf_i+0xb8>
 8006074:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006078:	2d00      	cmp	r5, #0
 800607a:	da03      	bge.n	8006084 <_printf_i+0xd0>
 800607c:	232d      	movs	r3, #45	@ 0x2d
 800607e:	426d      	negs	r5, r5
 8006080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006084:	4859      	ldr	r0, [pc, #356]	@ (80061ec <_printf_i+0x238>)
 8006086:	230a      	movs	r3, #10
 8006088:	e011      	b.n	80060ae <_printf_i+0xfa>
 800608a:	6821      	ldr	r1, [r4, #0]
 800608c:	6833      	ldr	r3, [r6, #0]
 800608e:	0608      	lsls	r0, r1, #24
 8006090:	f853 5b04 	ldr.w	r5, [r3], #4
 8006094:	d402      	bmi.n	800609c <_printf_i+0xe8>
 8006096:	0649      	lsls	r1, r1, #25
 8006098:	bf48      	it	mi
 800609a:	b2ad      	uxthmi	r5, r5
 800609c:	2f6f      	cmp	r7, #111	@ 0x6f
 800609e:	4853      	ldr	r0, [pc, #332]	@ (80061ec <_printf_i+0x238>)
 80060a0:	6033      	str	r3, [r6, #0]
 80060a2:	bf14      	ite	ne
 80060a4:	230a      	movne	r3, #10
 80060a6:	2308      	moveq	r3, #8
 80060a8:	2100      	movs	r1, #0
 80060aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060ae:	6866      	ldr	r6, [r4, #4]
 80060b0:	60a6      	str	r6, [r4, #8]
 80060b2:	2e00      	cmp	r6, #0
 80060b4:	bfa2      	ittt	ge
 80060b6:	6821      	ldrge	r1, [r4, #0]
 80060b8:	f021 0104 	bicge.w	r1, r1, #4
 80060bc:	6021      	strge	r1, [r4, #0]
 80060be:	b90d      	cbnz	r5, 80060c4 <_printf_i+0x110>
 80060c0:	2e00      	cmp	r6, #0
 80060c2:	d04b      	beq.n	800615c <_printf_i+0x1a8>
 80060c4:	4616      	mov	r6, r2
 80060c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80060ca:	fb03 5711 	mls	r7, r3, r1, r5
 80060ce:	5dc7      	ldrb	r7, [r0, r7]
 80060d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060d4:	462f      	mov	r7, r5
 80060d6:	42bb      	cmp	r3, r7
 80060d8:	460d      	mov	r5, r1
 80060da:	d9f4      	bls.n	80060c6 <_printf_i+0x112>
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d10b      	bne.n	80060f8 <_printf_i+0x144>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	07df      	lsls	r7, r3, #31
 80060e4:	d508      	bpl.n	80060f8 <_printf_i+0x144>
 80060e6:	6923      	ldr	r3, [r4, #16]
 80060e8:	6861      	ldr	r1, [r4, #4]
 80060ea:	4299      	cmp	r1, r3
 80060ec:	bfde      	ittt	le
 80060ee:	2330      	movle	r3, #48	@ 0x30
 80060f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060f8:	1b92      	subs	r2, r2, r6
 80060fa:	6122      	str	r2, [r4, #16]
 80060fc:	f8cd a000 	str.w	sl, [sp]
 8006100:	464b      	mov	r3, r9
 8006102:	aa03      	add	r2, sp, #12
 8006104:	4621      	mov	r1, r4
 8006106:	4640      	mov	r0, r8
 8006108:	f7ff fee6 	bl	8005ed8 <_printf_common>
 800610c:	3001      	adds	r0, #1
 800610e:	d14a      	bne.n	80061a6 <_printf_i+0x1f2>
 8006110:	f04f 30ff 	mov.w	r0, #4294967295
 8006114:	b004      	add	sp, #16
 8006116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	f043 0320 	orr.w	r3, r3, #32
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	4833      	ldr	r0, [pc, #204]	@ (80061f0 <_printf_i+0x23c>)
 8006124:	2778      	movs	r7, #120	@ 0x78
 8006126:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	6831      	ldr	r1, [r6, #0]
 800612e:	061f      	lsls	r7, r3, #24
 8006130:	f851 5b04 	ldr.w	r5, [r1], #4
 8006134:	d402      	bmi.n	800613c <_printf_i+0x188>
 8006136:	065f      	lsls	r7, r3, #25
 8006138:	bf48      	it	mi
 800613a:	b2ad      	uxthmi	r5, r5
 800613c:	6031      	str	r1, [r6, #0]
 800613e:	07d9      	lsls	r1, r3, #31
 8006140:	bf44      	itt	mi
 8006142:	f043 0320 	orrmi.w	r3, r3, #32
 8006146:	6023      	strmi	r3, [r4, #0]
 8006148:	b11d      	cbz	r5, 8006152 <_printf_i+0x19e>
 800614a:	2310      	movs	r3, #16
 800614c:	e7ac      	b.n	80060a8 <_printf_i+0xf4>
 800614e:	4827      	ldr	r0, [pc, #156]	@ (80061ec <_printf_i+0x238>)
 8006150:	e7e9      	b.n	8006126 <_printf_i+0x172>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	f023 0320 	bic.w	r3, r3, #32
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	e7f6      	b.n	800614a <_printf_i+0x196>
 800615c:	4616      	mov	r6, r2
 800615e:	e7bd      	b.n	80060dc <_printf_i+0x128>
 8006160:	6833      	ldr	r3, [r6, #0]
 8006162:	6825      	ldr	r5, [r4, #0]
 8006164:	6961      	ldr	r1, [r4, #20]
 8006166:	1d18      	adds	r0, r3, #4
 8006168:	6030      	str	r0, [r6, #0]
 800616a:	062e      	lsls	r6, r5, #24
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	d501      	bpl.n	8006174 <_printf_i+0x1c0>
 8006170:	6019      	str	r1, [r3, #0]
 8006172:	e002      	b.n	800617a <_printf_i+0x1c6>
 8006174:	0668      	lsls	r0, r5, #25
 8006176:	d5fb      	bpl.n	8006170 <_printf_i+0x1bc>
 8006178:	8019      	strh	r1, [r3, #0]
 800617a:	2300      	movs	r3, #0
 800617c:	6123      	str	r3, [r4, #16]
 800617e:	4616      	mov	r6, r2
 8006180:	e7bc      	b.n	80060fc <_printf_i+0x148>
 8006182:	6833      	ldr	r3, [r6, #0]
 8006184:	1d1a      	adds	r2, r3, #4
 8006186:	6032      	str	r2, [r6, #0]
 8006188:	681e      	ldr	r6, [r3, #0]
 800618a:	6862      	ldr	r2, [r4, #4]
 800618c:	2100      	movs	r1, #0
 800618e:	4630      	mov	r0, r6
 8006190:	f7fa f81e 	bl	80001d0 <memchr>
 8006194:	b108      	cbz	r0, 800619a <_printf_i+0x1e6>
 8006196:	1b80      	subs	r0, r0, r6
 8006198:	6060      	str	r0, [r4, #4]
 800619a:	6863      	ldr	r3, [r4, #4]
 800619c:	6123      	str	r3, [r4, #16]
 800619e:	2300      	movs	r3, #0
 80061a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a4:	e7aa      	b.n	80060fc <_printf_i+0x148>
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	4632      	mov	r2, r6
 80061aa:	4649      	mov	r1, r9
 80061ac:	4640      	mov	r0, r8
 80061ae:	47d0      	blx	sl
 80061b0:	3001      	adds	r0, #1
 80061b2:	d0ad      	beq.n	8006110 <_printf_i+0x15c>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	079b      	lsls	r3, r3, #30
 80061b8:	d413      	bmi.n	80061e2 <_printf_i+0x22e>
 80061ba:	68e0      	ldr	r0, [r4, #12]
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	4298      	cmp	r0, r3
 80061c0:	bfb8      	it	lt
 80061c2:	4618      	movlt	r0, r3
 80061c4:	e7a6      	b.n	8006114 <_printf_i+0x160>
 80061c6:	2301      	movs	r3, #1
 80061c8:	4632      	mov	r2, r6
 80061ca:	4649      	mov	r1, r9
 80061cc:	4640      	mov	r0, r8
 80061ce:	47d0      	blx	sl
 80061d0:	3001      	adds	r0, #1
 80061d2:	d09d      	beq.n	8006110 <_printf_i+0x15c>
 80061d4:	3501      	adds	r5, #1
 80061d6:	68e3      	ldr	r3, [r4, #12]
 80061d8:	9903      	ldr	r1, [sp, #12]
 80061da:	1a5b      	subs	r3, r3, r1
 80061dc:	42ab      	cmp	r3, r5
 80061de:	dcf2      	bgt.n	80061c6 <_printf_i+0x212>
 80061e0:	e7eb      	b.n	80061ba <_printf_i+0x206>
 80061e2:	2500      	movs	r5, #0
 80061e4:	f104 0619 	add.w	r6, r4, #25
 80061e8:	e7f5      	b.n	80061d6 <_printf_i+0x222>
 80061ea:	bf00      	nop
 80061ec:	080181d5 	.word	0x080181d5
 80061f0:	080181e6 	.word	0x080181e6

080061f4 <memmove>:
 80061f4:	4288      	cmp	r0, r1
 80061f6:	b510      	push	{r4, lr}
 80061f8:	eb01 0402 	add.w	r4, r1, r2
 80061fc:	d902      	bls.n	8006204 <memmove+0x10>
 80061fe:	4284      	cmp	r4, r0
 8006200:	4623      	mov	r3, r4
 8006202:	d807      	bhi.n	8006214 <memmove+0x20>
 8006204:	1e43      	subs	r3, r0, #1
 8006206:	42a1      	cmp	r1, r4
 8006208:	d008      	beq.n	800621c <memmove+0x28>
 800620a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800620e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006212:	e7f8      	b.n	8006206 <memmove+0x12>
 8006214:	4402      	add	r2, r0
 8006216:	4601      	mov	r1, r0
 8006218:	428a      	cmp	r2, r1
 800621a:	d100      	bne.n	800621e <memmove+0x2a>
 800621c:	bd10      	pop	{r4, pc}
 800621e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006226:	e7f7      	b.n	8006218 <memmove+0x24>

08006228 <_sbrk_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4d06      	ldr	r5, [pc, #24]	@ (8006244 <_sbrk_r+0x1c>)
 800622c:	2300      	movs	r3, #0
 800622e:	4604      	mov	r4, r0
 8006230:	4608      	mov	r0, r1
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	f7fd f9ea 	bl	800360c <_sbrk>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_sbrk_r+0x1a>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_sbrk_r+0x1a>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	200003e4 	.word	0x200003e4

08006248 <memcpy>:
 8006248:	440a      	add	r2, r1
 800624a:	4291      	cmp	r1, r2
 800624c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006250:	d100      	bne.n	8006254 <memcpy+0xc>
 8006252:	4770      	bx	lr
 8006254:	b510      	push	{r4, lr}
 8006256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800625a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800625e:	4291      	cmp	r1, r2
 8006260:	d1f9      	bne.n	8006256 <memcpy+0xe>
 8006262:	bd10      	pop	{r4, pc}

08006264 <_realloc_r>:
 8006264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006268:	4680      	mov	r8, r0
 800626a:	4615      	mov	r5, r2
 800626c:	460c      	mov	r4, r1
 800626e:	b921      	cbnz	r1, 800627a <_realloc_r+0x16>
 8006270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006274:	4611      	mov	r1, r2
 8006276:	f7ff bc4b 	b.w	8005b10 <_malloc_r>
 800627a:	b92a      	cbnz	r2, 8006288 <_realloc_r+0x24>
 800627c:	f7ff fbdc 	bl	8005a38 <_free_r>
 8006280:	2400      	movs	r4, #0
 8006282:	4620      	mov	r0, r4
 8006284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006288:	f000 f81a 	bl	80062c0 <_malloc_usable_size_r>
 800628c:	4285      	cmp	r5, r0
 800628e:	4606      	mov	r6, r0
 8006290:	d802      	bhi.n	8006298 <_realloc_r+0x34>
 8006292:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006296:	d8f4      	bhi.n	8006282 <_realloc_r+0x1e>
 8006298:	4629      	mov	r1, r5
 800629a:	4640      	mov	r0, r8
 800629c:	f7ff fc38 	bl	8005b10 <_malloc_r>
 80062a0:	4607      	mov	r7, r0
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d0ec      	beq.n	8006280 <_realloc_r+0x1c>
 80062a6:	42b5      	cmp	r5, r6
 80062a8:	462a      	mov	r2, r5
 80062aa:	4621      	mov	r1, r4
 80062ac:	bf28      	it	cs
 80062ae:	4632      	movcs	r2, r6
 80062b0:	f7ff ffca 	bl	8006248 <memcpy>
 80062b4:	4621      	mov	r1, r4
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7ff fbbe 	bl	8005a38 <_free_r>
 80062bc:	463c      	mov	r4, r7
 80062be:	e7e0      	b.n	8006282 <_realloc_r+0x1e>

080062c0 <_malloc_usable_size_r>:
 80062c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062c4:	1f18      	subs	r0, r3, #4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bfbc      	itt	lt
 80062ca:	580b      	ldrlt	r3, [r1, r0]
 80062cc:	18c0      	addlt	r0, r0, r3
 80062ce:	4770      	bx	lr

080062d0 <_init>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	bf00      	nop
 80062d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d6:	bc08      	pop	{r3}
 80062d8:	469e      	mov	lr, r3
 80062da:	4770      	bx	lr

080062dc <_fini>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	bf00      	nop
 80062e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e2:	bc08      	pop	{r3}
 80062e4:	469e      	mov	lr, r3
 80062e6:	4770      	bx	lr
