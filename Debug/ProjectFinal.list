
ProjectFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eda4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003d3e4  0800ef38  0800ef38  0000ff38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804c31c  0804c31c  00050a30  2**0
                  CONTENTS
  4 .ARM          00000008  0804c31c  0804c31c  0004d31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804c324  0804c324  00050a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804c324  0804c324  0004d324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0804c328  0804c328  0004d328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002a30  20000000  0804c32c  0004e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00050a30  2**0
                  CONTENTS
 10 .bss          00000c68  20002a30  20002a30  00050a30  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003698  20003698  00050a30  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050a30  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019652  00000000  00000000  00050a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000442b  00000000  00000000  0006a0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a98  00000000  00000000  0006e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243f7  00000000  00000000  0006ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000209d0  00000000  00000000  0009436f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7c13  00000000  00000000  000b4d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c952  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00001362  00000000  00000000  0018c995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007fd0  00000000  00000000  0018dcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00195cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002a30 	.word	0x20002a30
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef1c 	.word	0x0800ef1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002a34 	.word	0x20002a34
 80001cc:	0800ef1c 	.word	0x0800ef1c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b9a0 	b.w	8000f34 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f83c 	bl	8000c78 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2lz>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	460d      	mov	r5, r1
 8000c16:	f7ff ff71 	bl	8000afc <__aeabi_dcmplt>
 8000c1a:	b928      	cbnz	r0, 8000c28 <__aeabi_d2lz+0x1c>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b80a 	b.w	8000c3c <__aeabi_d2ulz>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c2e:	f000 f805 	bl	8000c3c <__aeabi_d2ulz>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2ulz>:
 8000c3c:	b5d0      	push	{r4, r6, r7, lr}
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <__aeabi_d2ulz+0x34>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	4606      	mov	r6, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	f7ff fce7 	bl	8000618 <__aeabi_dmul>
 8000c4a:	f7ff ffa7 	bl	8000b9c <__aeabi_d2uiz>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	f7ff fc68 	bl	8000524 <__aeabi_ui2d>
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <__aeabi_d2ulz+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fcde 	bl	8000618 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4630      	mov	r0, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	f7ff fb20 	bl	80002a8 <__aeabi_dsub>
 8000c68:	f7ff ff98 	bl	8000b9c <__aeabi_d2uiz>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c70:	3df00000 	.word	0x3df00000
 8000c74:	41f00000 	.word	0x41f00000

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  //По умолчанию на линии высокий уровень
  lineUp();
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	889b      	ldrh	r3, [r3, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f007 fc96 	bl	800888c <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	889b      	ldrh	r3, [r3, #4]
 8000f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8000f66:	2311      	movs	r3, #17
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	79db      	ldrb	r3, [r3, #7]
 8000f6e:	617b      	str	r3, [r7, #20]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000f70:	2302      	movs	r3, #2
 8000f72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f107 020c 	add.w	r2, r7, #12
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f007 fad0 	bl	8008524 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	889b      	ldrh	r3, [r3, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	79db      	ldrb	r3, [r3, #7]
 8000fb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f107 020c 	add.w	r2, r7, #12
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f007 fab0 	bl	8008524 <HAL_GPIO_Init>
}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08e      	sub	sp, #56	@ 0x38
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
	DHT_data data = {0.0f, 0.0f};
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	799b      	ldrb	r3, [r3, #6]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d103      	bne.n	8000ff0 <DHT_getData+0x24>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000fe8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fec:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000fee:	e002      	b.n	8000ff6 <DHT_getData+0x2a>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 8000ff0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff4:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000ff6:	f007 f8c1 	bl	800817c <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	1ad2      	subs	r2, r2, r3
 8001002:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001004:	429a      	cmp	r2, r3
 8001006:	d212      	bcs.n	800102e <DHT_getData+0x62>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00e      	beq.n	800102e <DHT_getData+0x62>
		data.hum = sensor->lastHum;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	61fb      	str	r3, [r7, #28]
		data.temp = sensor->lastTemp;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	623b      	str	r3, [r7, #32]
		return data;
 800101c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001020:	f107 021c 	add.w	r2, r7, #28
 8001024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001028:	e883 0003 	stmia.w	r3, {r0, r1}
 800102c:	e164      	b.n	80012f8 <DHT_getData+0x32c>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 800102e:	f007 f8a5 	bl	800817c <HAL_GetTick>
 8001032:	4603      	mov	r3, r0
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff ff7c 	bl	8000f38 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	889b      	ldrh	r3, [r3, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	4619      	mov	r1, r3
 800104c:	f007 fc1e 	bl	800888c <HAL_GPIO_WritePin>
	Delay(18);
 8001050:	2012      	movs	r0, #18
 8001052:	f007 f89f 	bl	8008194 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	889b      	ldrh	r3, [r3, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	f007 fc13 	bl	800888c <HAL_GPIO_WritePin>
	goToInput(sensor);
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f7ff ff90 	bl	8000f8c <goToInput>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	86bb      	strh	r3, [r7, #52]	@ 0x34
	//Ожидание спада
	while(getLine()) {
 8001074:	e01a      	b.n	80010ac <DHT_getData+0xe0>
		timeout++;
 8001076:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001078:	3301      	adds	r3, #1
 800107a:	86bb      	strh	r3, [r7, #52]	@ 0x34
		if (timeout > DHT_TIMEOUT) {
 800107c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800107e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001082:	4293      	cmp	r3, r2
 8001084:	d912      	bls.n	80010ac <DHT_getData+0xe0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001086:	b662      	cpsie	i
}
 8001088:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8001090:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8001098:	60da      	str	r2, [r3, #12]

			return data;
 800109a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109e:	f107 021c 	add.w	r2, r7, #28
 80010a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80010aa:	e125      	b.n	80012f8 <DHT_getData+0x32c>
	while(getLine()) {
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	889b      	ldrh	r3, [r3, #4]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4610      	mov	r0, r2
 80010b8:	f007 fbd0 	bl	800885c <HAL_GPIO_ReadPin>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d0d9      	beq.n	8001076 <DHT_getData+0xaa>
		}
	}
	timeout = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	86bb      	strh	r3, [r7, #52]	@ 0x34
	//Ожидание подъёма
	while(!getLine()) {
 80010c6:	e01a      	b.n	80010fe <DHT_getData+0x132>
		timeout++;
 80010c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80010ca:	3301      	adds	r3, #1
 80010cc:	86bb      	strh	r3, [r7, #52]	@ 0x34
		if (timeout > DHT_TIMEOUT) {
 80010ce:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80010d0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d912      	bls.n	80010fe <DHT_getData+0x132>
  __ASM volatile ("cpsie i" : : : "memory");
 80010d8:	b662      	cpsie	i
}
 80010da:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80010e2:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80010ea:	60da      	str	r2, [r3, #12]

			return data;
 80010ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f0:	f107 021c 	add.w	r2, r7, #28
 80010f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80010fc:	e0fc      	b.n	80012f8 <DHT_getData+0x32c>
	while(!getLine()) {
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	889b      	ldrh	r3, [r3, #4]
 8001106:	4619      	mov	r1, r3
 8001108:	4610      	mov	r0, r2
 800110a:	f007 fba7 	bl	800885c <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d1d9      	bne.n	80010c8 <DHT_getData+0xfc>
		}
	}
	timeout = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	86bb      	strh	r3, [r7, #52]	@ 0x34
	//Ожидание спада
	while(getLine()) {
 8001118:	e012      	b.n	8001140 <DHT_getData+0x174>
		timeout++;
 800111a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800111c:	3301      	adds	r3, #1
 800111e:	86bb      	strh	r3, [r7, #52]	@ 0x34
		if (timeout > DHT_TIMEOUT) {
 8001120:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001122:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001126:	4293      	cmp	r3, r2
 8001128:	d90a      	bls.n	8001140 <DHT_getData+0x174>
  __ASM volatile ("cpsie i" : : : "memory");
 800112a:	b662      	cpsie	i
}
 800112c:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 800112e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001132:	f107 021c 	add.w	r2, r7, #28
 8001136:	e892 0003 	ldmia.w	r2, {r0, r1}
 800113a:	e883 0003 	stmia.w	r3, {r0, r1}
 800113e:	e0db      	b.n	80012f8 <DHT_getData+0x32c>
	while(getLine()) {
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	889b      	ldrh	r3, [r3, #4]
 8001148:	4619      	mov	r1, r3
 800114a:	4610      	mov	r0, r2
 800114c:	f007 fb86 	bl	800885c <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b01      	cmp	r3, #1
 8001154:	d0e1      	beq.n	800111a <DHT_getData+0x14e>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8001156:	4a6f      	ldr	r2, [pc, #444]	@ (8001314 <DHT_getData+0x348>)
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001160:	6018      	str	r0, [r3, #0]
 8001162:	3304      	adds	r3, #4
 8001164:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 8001166:	2300      	movs	r3, #0
 8001168:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800116c:	e059      	b.n	8001222 <DHT_getData+0x256>
		for(uint8_t b = 7; b != 255; b--) {
 800116e:	2307      	movs	r3, #7
 8001170:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001174:	e04c      	b.n	8001210 <DHT_getData+0x244>
			uint16_t hT = 0, lT = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	863b      	strh	r3, [r7, #48]	@ 0x30
 800117a:	2300      	movs	r3, #0
 800117c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 800117e:	e002      	b.n	8001186 <DHT_getData+0x1ba>
 8001180:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001182:	3301      	adds	r3, #1
 8001184:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	889b      	ldrh	r3, [r3, #4]
 800118e:	4619      	mov	r1, r3
 8001190:	4610      	mov	r0, r2
 8001192:	f007 fb63 	bl	800885c <HAL_GPIO_ReadPin>
 8001196:	4603      	mov	r3, r0
 8001198:	2b01      	cmp	r3, #1
 800119a:	d004      	beq.n	80011a6 <DHT_getData+0x1da>
 800119c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800119e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d1ec      	bne.n	8001180 <DHT_getData+0x1b4>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	86bb      	strh	r3, [r7, #52]	@ 0x34
			while(getLine()&& hT != 65535) hT++;
 80011aa:	e002      	b.n	80011b2 <DHT_getData+0x1e6>
 80011ac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80011ae:	3301      	adds	r3, #1
 80011b0:	863b      	strh	r3, [r7, #48]	@ 0x30
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	889b      	ldrh	r3, [r3, #4]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4610      	mov	r0, r2
 80011be:	f007 fb4d 	bl	800885c <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d104      	bne.n	80011d2 <DHT_getData+0x206>
 80011c8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80011ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d1ec      	bne.n	80011ac <DHT_getData+0x1e0>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80011d2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80011d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d915      	bls.n	8001206 <DHT_getData+0x23a>
 80011da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011de:	3338      	adds	r3, #56	@ 0x38
 80011e0:	443b      	add	r3, r7
 80011e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b25a      	sxtb	r2, r3
 80011f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	3338      	adds	r3, #56	@ 0x38
 8001200:	443b      	add	r3, r7
 8001202:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(uint8_t b = 7; b != 255; b--) {
 8001206:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800120a:	3b01      	subs	r3, #1
 800120c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001210:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001214:	2bff      	cmp	r3, #255	@ 0xff
 8001216:	d1ae      	bne.n	8001176 <DHT_getData+0x1aa>
	for(uint8_t a = 0; a < 5; a++) {
 8001218:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800121c:	3301      	adds	r3, #1
 800121e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001222:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001226:	2b04      	cmp	r3, #4
 8001228:	d9a1      	bls.n	800116e <DHT_getData+0x1a2>
  __ASM volatile ("cpsie i" : : : "memory");
 800122a:	b662      	cpsie	i
}
 800122c:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 800122e:	7d3a      	ldrb	r2, [r7, #20]
 8001230:	7d7b      	ldrb	r3, [r7, #21]
 8001232:	4413      	add	r3, r2
 8001234:	b2da      	uxtb	r2, r3
 8001236:	7dbb      	ldrb	r3, [r7, #22]
 8001238:	4413      	add	r3, r2
 800123a:	b2da      	uxtb	r2, r3
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	4413      	add	r3, r2
 8001240:	b2da      	uxtb	r2, r3
 8001242:	7e3b      	ldrb	r3, [r7, #24]
 8001244:	429a      	cmp	r2, r3
 8001246:	d149      	bne.n	80012dc <DHT_getData+0x310>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	799b      	ldrb	r3, [r3, #6]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d133      	bne.n	80012b8 <DHT_getData+0x2ec>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001250:	7d3b      	ldrb	r3, [r7, #20]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	7d7a      	ldrb	r2, [r7, #21]
 8001256:	4313      	orrs	r3, r2
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001260:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001318 <DHT_getData+0x34c>
 8001264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001268:	edc7 7a07 	vstr	s15, [r7, #28]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 800126c:	7dbb      	ldrb	r3, [r7, #22]
 800126e:	b25b      	sxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0e      	blt.n	8001292 <DHT_getData+0x2c6>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001274:	7dbb      	ldrb	r3, [r7, #22]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	7dfa      	ldrb	r2, [r7, #23]
 800127a:	4313      	orrs	r3, r2
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001284:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001318 <DHT_getData+0x34c>
 8001288:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128c:	edc7 7a08 	vstr	s15, [r7, #32]
 8001290:	e012      	b.n	80012b8 <DHT_getData+0x2ec>
			}	else {
				rawData[2] &= ~(1<<7);
 8001292:	7dbb      	ldrb	r3, [r7, #22]
 8001294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001298:	b2db      	uxtb	r3, r3
 800129a:	75bb      	strb	r3, [r7, #22]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 800129c:	7dbb      	ldrb	r3, [r7, #22]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	7dfa      	ldrb	r2, [r7, #23]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ac:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800131c <DHT_getData+0x350>
 80012b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b4:	edc7 7a08 	vstr	s15, [r7, #32]
			}
		}
		if (sensor->type == DHT11) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	799b      	ldrb	r3, [r3, #6]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10d      	bne.n	80012dc <DHT_getData+0x310>
			data.hum = (float)rawData[0];
 80012c0:	7d3b      	ldrb	r3, [r7, #20]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ca:	edc7 7a07 	vstr	s15, [r7, #28]
			data.temp = (float)rawData[2];
 80012ce:	7dbb      	ldrb	r3, [r7, #22]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d8:	edc7 7a08 	vstr	s15, [r7, #32]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80012e2:	6a3a      	ldr	r2, [r7, #32]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80012e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ec:	f107 021c 	add.w	r2, r7, #28
 80012f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80012f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012fc:	ee07 2a10 	vmov	s14, r2
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eeb0 0a47 	vmov.f32	s0, s14
 8001308:	eef0 0a67 	vmov.f32	s1, s15
 800130c:	3738      	adds	r7, #56	@ 0x38
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	0800ef38 	.word	0x0800ef38
 8001318:	3dcccccd 	.word	0x3dcccccd
 800131c:	bdcccccd 	.word	0xbdcccccd

08001320 <DHT_ReadData>:

void DHT_ReadData(float *temperature, float *humidity) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	DHT_sensor mySensor = {
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
 800133a:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <DHT_ReadData+0x84>)
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	2301      	movs	r3, #1
 8001340:	833b      	strh	r3, [r7, #24]
 8001342:	2301      	movs	r3, #1
 8001344:	76bb      	strb	r3, [r7, #26]
	    .DHT_Pin = GPIO_PIN_0,
	    .type = DHT22,
	    .pullUp = GPIO_NOPULL
	};

	DHT_data data = DHT_getData(&mySensor);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fe3e 	bl	8000fcc <DHT_getData>
 8001350:	eeb0 7a40 	vmov.f32	s14, s0
 8001354:	eef0 7a60 	vmov.f32	s15, s1
 8001358:	ed87 7a03 	vstr	s14, [r7, #12]
 800135c:	edc7 7a04 	vstr	s15, [r7, #16]
	if (data.temp != -1 && data.hum != -1) {
 8001360:	edd7 7a04 	vldr	s15, [r7, #16]
 8001364:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001368:	eef4 7a47 	vcmp.f32	s15, s14
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	d00f      	beq.n	8001392 <DHT_ReadData+0x72>
 8001372:	edd7 7a03 	vldr	s15, [r7, #12]
 8001376:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800137a:	eef4 7a47 	vcmp.f32	s15, s14
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	d006      	beq.n	8001392 <DHT_ReadData+0x72>
	    *temperature = data.temp;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	601a      	str	r2, [r3, #0]
	    *humidity = data.hum;
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e003      	b.n	800139a <DHT_ReadData+0x7a>
	} else {
	    // Hiển thị lỗi nếu đọc thất bại
	    lcdPrintf("DHT22 Read Error\n");
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <DHT_ReadData+0x88>)
 8001394:	f004 fb4a 	bl	8005a2c <lcdPrintf>
	}
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	@ 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40020800 	.word	0x40020800
 80013a8:	0800ef40 	.word	0x0800ef40

080013ac <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <case_insensitive_strcmp+0x16>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e056      	b.n	8001474 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d10d      	bne.n	80013ea <case_insensitive_strcmp+0x3e>
    {
        return 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e050      	b.n	8001474 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <case_insensitive_strcmp+0x32>
        {
            return 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	e04a      	b.n	8001474 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3301      	adds	r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a22      	ldr	r2, [pc, #136]	@ (8001480 <case_insensitive_strcmp+0xd4>)
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d103      	bne.n	800140a <case_insensitive_strcmp+0x5e>
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	f103 0220 	add.w	r2, r3, #32
 8001408:	e000      	b.n	800140c <case_insensitive_strcmp+0x60>
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	73bb      	strb	r3, [r7, #14]
 8001412:	7bbb      	ldrb	r3, [r7, #14]
 8001414:	3301      	adds	r3, #1
 8001416:	491a      	ldr	r1, [pc, #104]	@ (8001480 <case_insensitive_strcmp+0xd4>)
 8001418:	440b      	add	r3, r1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d102      	bne.n	800142a <case_insensitive_strcmp+0x7e>
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	3320      	adds	r3, #32
 8001428:	e000      	b.n	800142c <case_insensitive_strcmp+0x80>
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	429a      	cmp	r2, r3
 800142e:	d0d0      	beq.n	80013d2 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	737b      	strb	r3, [r7, #13]
 8001436:	7b7b      	ldrb	r3, [r7, #13]
 8001438:	3301      	adds	r3, #1
 800143a:	4a11      	ldr	r2, [pc, #68]	@ (8001480 <case_insensitive_strcmp+0xd4>)
 800143c:	4413      	add	r3, r2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d103      	bne.n	8001450 <case_insensitive_strcmp+0xa4>
 8001448:	7b7b      	ldrb	r3, [r7, #13]
 800144a:	f103 0220 	add.w	r2, r3, #32
 800144e:	e000      	b.n	8001452 <case_insensitive_strcmp+0xa6>
 8001450:	7b7a      	ldrb	r2, [r7, #13]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	733b      	strb	r3, [r7, #12]
 8001458:	7b3b      	ldrb	r3, [r7, #12]
 800145a:	3301      	adds	r3, #1
 800145c:	4908      	ldr	r1, [pc, #32]	@ (8001480 <case_insensitive_strcmp+0xd4>)
 800145e:	440b      	add	r3, r1
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b01      	cmp	r3, #1
 8001468:	d102      	bne.n	8001470 <case_insensitive_strcmp+0xc4>
 800146a:	7b3b      	ldrb	r3, [r7, #12]
 800146c:	3320      	adds	r3, #32
 800146e:	e000      	b.n	8001472 <case_insensitive_strcmp+0xc6>
 8001470:	7b3b      	ldrb	r3, [r7, #12]
 8001472:	1ad3      	subs	r3, r2, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	0804bfa8 	.word	0x0804bfa8

08001484 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2028      	movs	r0, #40	@ 0x28
 8001492:	4798      	blx	r3
 8001494:	60f8      	str	r0, [r7, #12]
    if (node)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800149c:	2228      	movs	r2, #40	@ 0x28
 800149e:	2100      	movs	r1, #0
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f00b f8bf 	bl	800c624 <memset>
    }

    return node;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80014bc:	e03d      	b.n	800153a <cJSON_Delete+0x8a>
    {
        next = item->next;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d108      	bne.n	80014e2 <cJSON_Delete+0x32>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ffe7 	bl	80014b0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <cJSON_Delete+0x58>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d008      	beq.n	8001508 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <cJSON_Delete+0x9c>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6912      	ldr	r2, [r2, #16]
 80014fe:	4610      	mov	r0, r2
 8001500:	4798      	blx	r3
            item->valuestring = NULL;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10c      	bne.n	800152e <cJSON_Delete+0x7e>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 800151c:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <cJSON_Delete+0x9c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6a12      	ldr	r2, [r2, #32]
 8001524:	4610      	mov	r0, r2
 8001526:	4798      	blx	r3
            item->string = NULL;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <cJSON_Delete+0x9c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	4798      	blx	r3
        item = next;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1be      	bne.n	80014be <cJSON_Delete+0xe>
    }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000

08001550 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001554:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b098      	sub	sp, #96	@ 0x60
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
    double number = 0;
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 8001576:	2300      	movs	r3, #0
 8001578:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800157a:	f7ff ffe9 	bl	8001550 <get_decimal_point>
 800157e:	4603      	mov	r3, r0
 8001580:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <parse_number+0x36>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <parse_number+0x3a>
    {
        return false;
 8001596:	2300      	movs	r3, #0
 8001598:	e0a0      	b.n	80016dc <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800159a:	2300      	movs	r3, #0
 800159c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800159e:	e03d      	b.n	800161c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6899      	ldr	r1, [r3, #8]
 80015a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015aa:	440b      	add	r3, r1
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b45      	cmp	r3, #69	@ 0x45
 80015b2:	dc17      	bgt.n	80015e4 <parse_number+0x84>
 80015b4:	2b2b      	cmp	r3, #43	@ 0x2b
 80015b6:	db40      	blt.n	800163a <parse_number+0xda>
 80015b8:	3b2b      	subs	r3, #43	@ 0x2b
 80015ba:	2201      	movs	r2, #1
 80015bc:	409a      	lsls	r2, r3
 80015be:	4b4c      	ldr	r3, [pc, #304]	@ (80016f0 <parse_number+0x190>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf14      	ite	ne
 80015c6:	2301      	movne	r3, #1
 80015c8:	2300      	moveq	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10b      	bne.n	80015e8 <parse_number+0x88>
 80015d0:	f002 0308 	and.w	r3, r2, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf14      	ite	ne
 80015d8:	2301      	movne	r3, #1
 80015da:	2300      	moveq	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d111      	bne.n	8001606 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80015e2:	e02a      	b.n	800163a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80015e4:	2b65      	cmp	r3, #101	@ 0x65
 80015e6:	d128      	bne.n	800163a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6899      	ldr	r1, [r3, #8]
 80015f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015f2:	440b      	add	r3, r1
 80015f4:	4413      	add	r3, r2
 80015f6:	7819      	ldrb	r1, [r3, #0]
 80015f8:	f107 0208 	add.w	r2, r7, #8
 80015fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015fe:	4413      	add	r3, r2
 8001600:	460a      	mov	r2, r1
 8001602:	701a      	strb	r2, [r3, #0]
                break;
 8001604:	e007      	b.n	8001616 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8001606:	f107 0208 	add.w	r2, r7, #8
 800160a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800160c:	4413      	add	r3, r2
 800160e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001612:	701a      	strb	r2, [r3, #0]
                break;
 8001614:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001618:	3301      	adds	r3, #1
 800161a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800161c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800161e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001620:	d80d      	bhi.n	800163e <parse_number+0xde>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00a      	beq.n	800163e <parse_number+0xde>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800162e:	441a      	add	r2, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3b3      	bcc.n	80015a0 <parse_number+0x40>
        }
    }
loop_end:
 8001638:	e001      	b.n	800163e <parse_number+0xde>
                goto loop_end;
 800163a:	bf00      	nop
 800163c:	e000      	b.n	8001640 <parse_number+0xe0>
loop_end:
 800163e:	bf00      	nop
    number_c_string[i] = '\0';
 8001640:	f107 0208 	add.w	r2, r7, #8
 8001644:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001646:	4413      	add	r3, r2
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800164c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f00a fe52 	bl	800c300 <strtod>
 800165c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001660:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	429a      	cmp	r2, r3
 8001668:	d101      	bne.n	800166e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800166a:	2300      	movs	r3, #0
 800166c:	e036      	b.n	80016dc <parse_number+0x17c>
    }

    item->valuedouble = number;
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001674:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001678:	a31b      	add	r3, pc, #108	@ (adr r3, 80016e8 <parse_number+0x188>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001682:	f7ff fa4f 	bl	8000b24 <__aeabi_dcmpge>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001692:	615a      	str	r2, [r3, #20]
 8001694:	e015      	b.n	80016c2 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <parse_number+0x194>)
 800169c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80016a0:	f7ff fa36 	bl	8000b10 <__aeabi_dcmple>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	e006      	b.n	80016c2 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 80016b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80016b8:	f7ff fa48 	bl	8000b4c <__aeabi_d2iz>
 80016bc:	4602      	mov	r2, r0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2208      	movs	r2, #8
 80016c6:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80016ce:	f107 0208 	add.w	r2, r7, #8
 80016d2:	1a8a      	subs	r2, r1, r2
 80016d4:	441a      	add	r2, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	609a      	str	r2, [r3, #8]
    return true;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3760      	adds	r7, #96	@ 0x60
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	f3af 8000 	nop.w
 80016e8:	ffc00000 	.word	0xffc00000
 80016ec:	41dfffff 	.word	0x41dfffff
 80016f0:	04007fe5 	.word	0x04007fe5
 80016f4:	c1e00000 	.word	0xc1e00000

080016f8 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	e04c      	b.n	80017a8 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4413      	add	r3, r2
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b2f      	cmp	r3, #47	@ 0x2f
 8001718:	d90f      	bls.n	800173a <parse_hex4+0x42>
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b39      	cmp	r3, #57	@ 0x39
 8001724:	d809      	bhi.n	800173a <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	3b30      	subs	r3, #48	@ 0x30
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e02d      	b.n	8001796 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b40      	cmp	r3, #64	@ 0x40
 8001744:	d90f      	bls.n	8001766 <parse_hex4+0x6e>
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b46      	cmp	r3, #70	@ 0x46
 8001750:	d809      	bhi.n	8001766 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	3b37      	subs	r3, #55	@ 0x37
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	e017      	b.n	8001796 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b60      	cmp	r3, #96	@ 0x60
 8001770:	d90f      	bls.n	8001792 <parse_hex4+0x9a>
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4413      	add	r3, r2
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b66      	cmp	r3, #102	@ 0x66
 800177c:	d809      	bhi.n	8001792 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	3b57      	subs	r3, #87	@ 0x57
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	e001      	b.n	8001796 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001792:	2300      	movs	r3, #0
 8001794:	e00c      	b.n	80017b0 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d802      	bhi.n	80017a2 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d9af      	bls.n	800170e <parse_hex4+0x16>
        }
    }

    return h;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	f340 80b7 	ble.w	8001966 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	3302      	adds	r3, #2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff7b 	bl	80016f8 <parse_hex4>
 8001802:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800180a:	d304      	bcc.n	8001816 <utf16_literal_to_utf8+0x5a>
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001812:	f0c0 80aa 	bcc.w	800196a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800181c:	d337      	bcc.n	800188e <utf16_literal_to_utf8+0xd2>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001824:	d233      	bcs.n	800188e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	3306      	adds	r3, #6
 800182a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001830:	230c      	movs	r3, #12
 8001832:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b05      	cmp	r3, #5
 800183e:	f340 8096 	ble.w	800196e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b5c      	cmp	r3, #92	@ 0x5c
 8001848:	f040 8093 	bne.w	8001972 <utf16_literal_to_utf8+0x1b6>
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b75      	cmp	r3, #117	@ 0x75
 8001854:	f040 808d 	bne.w	8001972 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3302      	adds	r3, #2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff4b 	bl	80016f8 <parse_hex4>
 8001862:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800186a:	f0c0 8084 	bcc.w	8001976 <utf16_literal_to_utf8+0x1ba>
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001874:	d27f      	bcs.n	8001976 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	029a      	lsls	r2, r3, #10
 800187a:	4b43      	ldr	r3, [pc, #268]	@ (8001988 <utf16_literal_to_utf8+0x1cc>)
 800187c:	4013      	ands	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001884:	4313      	orrs	r3, r2
 8001886:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800188c:	e004      	b.n	8001898 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800188e:	2306      	movs	r3, #6
 8001890:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	2b7f      	cmp	r3, #127	@ 0x7f
 800189c:	d803      	bhi.n	80018a6 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018a4:	e01f      	b.n	80018e6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018ac:	d206      	bcs.n	80018bc <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80018b4:	23c0      	movs	r3, #192	@ 0xc0
 80018b6:	f887 3020 	strb.w	r3, [r7, #32]
 80018ba:	e014      	b.n	80018e6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c2:	d206      	bcs.n	80018d2 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80018ca:	23e0      	movs	r3, #224	@ 0xe0
 80018cc:	f887 3020 	strb.w	r3, [r7, #32]
 80018d0:	e009      	b.n	80018e6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80018d8:	d24f      	bcs.n	800197a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80018da:	2304      	movs	r3, #4
 80018dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80018e0:	23f0      	movs	r3, #240	@ 0xf0
 80018e2:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80018e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80018f0:	e015      	b.n	800191e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6819      	ldr	r1, [r3, #0]
 8001900:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001904:	440b      	add	r3, r1
 8001906:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	099b      	lsrs	r3, r3, #6
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001914:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001918:	3b01      	subs	r3, #1
 800191a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800191e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1e5      	bne.n	80018f2 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001926:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800192a:	2b01      	cmp	r3, #1
 800192c:	d909      	bls.n	8001942 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	b2d9      	uxtb	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f897 2020 	ldrb.w	r2, [r7, #32]
 800193a:	430a      	orrs	r2, r1
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e007      	b.n	8001952 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	b2da      	uxtb	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800195a:	441a      	add	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001960:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001964:	e00b      	b.n	800197e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001966:	bf00      	nop
 8001968:	e008      	b.n	800197c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800196a:	bf00      	nop
 800196c:	e006      	b.n	800197c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800196e:	bf00      	nop
 8001970:	e004      	b.n	800197c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001972:	bf00      	nop
 8001974:	e002      	b.n	800197c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001976:	bf00      	nop
 8001978:	e000      	b.n	800197c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800197a:	bf00      	nop

fail:
    return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3728      	adds	r7, #40	@ 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	000ffc00 	.word	0x000ffc00

0800198c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	@ 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	3301      	adds	r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b22      	cmp	r3, #34	@ 0x22
 80019c8:	f040 8103 	bne.w	8001bd2 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80019d4:	e017      	b.n	8001a06 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b5c      	cmp	r3, #92	@ 0x5c
 80019dc:	d110      	bne.n	8001a00 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	f080 80f1 	bcs.w	8001bd6 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	3301      	adds	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
                input_end++;
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	3301      	adds	r3, #1
 80019fe:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	3301      	adds	r3, #1
 8001a04:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6a3a      	ldr	r2, [r7, #32]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d203      	bcs.n	8001a20 <parse_string+0x94>
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b22      	cmp	r3, #34	@ 0x22
 8001a1e:	d1da      	bne.n	80019d6 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6a3a      	ldr	r2, [r7, #32]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	f080 80d3 	bcs.w	8001bda <parse_string+0x24e>
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b22      	cmp	r3, #34	@ 0x22
 8001a3a:	f040 80ce 	bne.w	8001bda <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	4413      	add	r3, r2
 8001a48:	6a3a      	ldr	r2, [r7, #32]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	3201      	adds	r2, #1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4798      	blx	r3
 8001a60:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80ba 	beq.w	8001bde <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001a6e:	e094      	b.n	8001b9a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b5c      	cmp	r3, #92	@ 0x5c
 8001a76:	d008      	beq.n	8001a8a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a7a:	1c53      	adds	r3, r2, #1
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1c59      	adds	r1, r3, #1
 8001a82:	60f9      	str	r1, [r7, #12]
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e087      	b.n	8001b9a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001a8e:	6a3a      	ldr	r2, [r7, #32]
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f340 80a4 	ble.w	8001be2 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b75      	cmp	r3, #117	@ 0x75
 8001aa2:	f300 80a0 	bgt.w	8001be6 <parse_string+0x25a>
 8001aa6:	2b5c      	cmp	r3, #92	@ 0x5c
 8001aa8:	da04      	bge.n	8001ab4 <parse_string+0x128>
 8001aaa:	2b22      	cmp	r3, #34	@ 0x22
 8001aac:	d05c      	beq.n	8001b68 <parse_string+0x1dc>
 8001aae:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ab0:	d05a      	beq.n	8001b68 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001ab2:	e098      	b.n	8001be6 <parse_string+0x25a>
            switch (input_pointer[1])
 8001ab4:	3b5c      	subs	r3, #92	@ 0x5c
 8001ab6:	2b19      	cmp	r3, #25
 8001ab8:	f200 8095 	bhi.w	8001be6 <parse_string+0x25a>
 8001abc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac4 <parse_string+0x138>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001b69 	.word	0x08001b69
 8001ac8:	08001be7 	.word	0x08001be7
 8001acc:	08001be7 	.word	0x08001be7
 8001ad0:	08001be7 	.word	0x08001be7
 8001ad4:	08001be7 	.word	0x08001be7
 8001ad8:	08001be7 	.word	0x08001be7
 8001adc:	08001b2d 	.word	0x08001b2d
 8001ae0:	08001be7 	.word	0x08001be7
 8001ae4:	08001be7 	.word	0x08001be7
 8001ae8:	08001be7 	.word	0x08001be7
 8001aec:	08001b39 	.word	0x08001b39
 8001af0:	08001be7 	.word	0x08001be7
 8001af4:	08001be7 	.word	0x08001be7
 8001af8:	08001be7 	.word	0x08001be7
 8001afc:	08001be7 	.word	0x08001be7
 8001b00:	08001be7 	.word	0x08001be7
 8001b04:	08001be7 	.word	0x08001be7
 8001b08:	08001be7 	.word	0x08001be7
 8001b0c:	08001b45 	.word	0x08001b45
 8001b10:	08001be7 	.word	0x08001be7
 8001b14:	08001be7 	.word	0x08001be7
 8001b18:	08001be7 	.word	0x08001be7
 8001b1c:	08001b51 	.word	0x08001b51
 8001b20:	08001be7 	.word	0x08001be7
 8001b24:	08001b5d 	.word	0x08001b5d
 8001b28:	08001b79 	.word	0x08001b79
                    *output_pointer++ = '\b';
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60fa      	str	r2, [r7, #12]
 8001b32:	2208      	movs	r2, #8
 8001b34:	701a      	strb	r2, [r3, #0]
                    break;
 8001b36:	e02c      	b.n	8001b92 <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60fa      	str	r2, [r7, #12]
 8001b3e:	220c      	movs	r2, #12
 8001b40:	701a      	strb	r2, [r3, #0]
                    break;
 8001b42:	e026      	b.n	8001b92 <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60fa      	str	r2, [r7, #12]
 8001b4a:	220a      	movs	r2, #10
 8001b4c:	701a      	strb	r2, [r3, #0]
                    break;
 8001b4e:	e020      	b.n	8001b92 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	60fa      	str	r2, [r7, #12]
 8001b56:	220d      	movs	r2, #13
 8001b58:	701a      	strb	r2, [r3, #0]
                    break;
 8001b5a:	e01a      	b.n	8001b92 <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	60fa      	str	r2, [r7, #12]
 8001b62:	2209      	movs	r2, #9
 8001b64:	701a      	strb	r2, [r3, #0]
                    break;
 8001b66:	e014      	b.n	8001b92 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1c59      	adds	r1, r3, #1
 8001b70:	60f9      	str	r1, [r7, #12]
 8001b72:	7812      	ldrb	r2, [r2, #0]
 8001b74:	701a      	strb	r2, [r3, #0]
                    break;
 8001b76:	e00c      	b.n	8001b92 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	6a39      	ldr	r1, [r7, #32]
 8001b80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b82:	f7ff fe1b 	bl	80017bc <utf16_literal_to_utf8>
 8001b86:	4603      	mov	r3, r0
 8001b88:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d02c      	beq.n	8001bea <parse_string+0x25e>
                    break;
 8001b90:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b96:	4413      	add	r3, r2
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	f4ff af66 	bcc.w	8001a70 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2210      	movs	r2, #16
 8001bae:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a3a      	ldr	r2, [r7, #32]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	609a      	str	r2, [r3, #8]

    return true;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e020      	b.n	8001c14 <parse_string+0x288>
        goto fail;
 8001bd2:	bf00      	nop
 8001bd4:	e00a      	b.n	8001bec <parse_string+0x260>
                    goto fail;
 8001bd6:	bf00      	nop
 8001bd8:	e008      	b.n	8001bec <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001bda:	bf00      	nop
 8001bdc:	e006      	b.n	8001bec <parse_string+0x260>
            goto fail; /* allocation failure */
 8001bde:	bf00      	nop
 8001be0:	e004      	b.n	8001bec <parse_string+0x260>
                goto fail;
 8001be2:	bf00      	nop
 8001be4:	e002      	b.n	8001bec <parse_string+0x260>
                    goto fail;
 8001be6:	bf00      	nop
 8001be8:	e000      	b.n	8001bec <parse_string+0x260>
                        goto fail;
 8001bea:	bf00      	nop

fail:
    if (output != NULL)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	69f8      	ldr	r0, [r7, #28]
 8001bf8:	4798      	blx	r3
        output = NULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3728      	adds	r7, #40	@ 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <buffer_skip_whitespace+0x16>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e02c      	b.n	8001c90 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <buffer_skip_whitespace+0x2c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d306      	bcc.n	8001c56 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	e021      	b.n	8001c90 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00d      	beq.n	8001c78 <buffer_skip_whitespace+0x5c>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <buffer_skip_whitespace+0x5c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4413      	add	r3, r2
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d9e9      	bls.n	8001c4c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d104      	bne.n	8001c8e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	1e5a      	subs	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001c8e:	687b      	ldr	r3, [r7, #4]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <skip_utf8_bom+0x1e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <skip_utf8_bom+0x1e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <skip_utf8_bom+0x22>
    {
        return NULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e01c      	b.n	8001cf8 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d018      	beq.n	8001cf6 <skip_utf8_bom+0x5a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	1d1a      	adds	r2, r3, #4
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d211      	bcs.n	8001cf6 <skip_utf8_bom+0x5a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	4413      	add	r3, r2
 8001cdc:	2203      	movs	r2, #3
 8001cde:	4908      	ldr	r1, [pc, #32]	@ (8001d00 <skip_utf8_bom+0x64>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00a fcba 	bl	800c65a <strncmp>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d104      	bne.n	8001cf6 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	1cda      	adds	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	0800ef8c 	.word	0x0800ef8c

08001d04 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e00c      	b.n	8001d34 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7fe fa62 	bl	80001e4 <strlen>
 8001d20:	4603      	mov	r3, r0
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	6979      	ldr	r1, [r7, #20]
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 f805 	bl	8001d3c <cJSON_ParseWithLengthOpts>
 8001d32:	4603      	mov	r3, r0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08e      	sub	sp, #56	@ 0x38
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001d4a:	f107 0318 	add.w	r3, r7, #24
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]
 8001d5a:	615a      	str	r2, [r3, #20]
 8001d5c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001d62:	4b41      	ldr	r3, [pc, #260]	@ (8001e68 <cJSON_ParseWithLengthOpts+0x12c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001d68:	4b3f      	ldr	r3, [pc, #252]	@ (8001e68 <cJSON_ParseWithLengthOpts+0x12c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d042      	beq.n	8001dfa <cJSON_ParseWithLengthOpts+0xbe>
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d03f      	beq.n	8001dfa <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001d86:	4a39      	ldr	r2, [pc, #228]	@ (8001e6c <cJSON_ParseWithLengthOpts+0x130>)
 8001d88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001d92:	4836      	ldr	r0, [pc, #216]	@ (8001e6c <cJSON_ParseWithLengthOpts+0x130>)
 8001d94:	f7ff fb76 	bl	8001484 <cJSON_New_Item>
 8001d98:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d02e      	beq.n	8001dfe <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff79 	bl	8001c9c <skip_utf8_bom>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff35 	bl	8001c1c <buffer_skip_whitespace>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4619      	mov	r1, r3
 8001db6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001db8:	f000 f868 	bl	8001e8c <parse_value>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01f      	beq.n	8001e02 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00e      	beq.n	8001de6 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff25 	bl	8001c1c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001dd2:	6a3a      	ldr	r2, [r7, #32]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d215      	bcs.n	8001e06 <cJSON_ParseWithLengthOpts+0xca>
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10f      	bne.n	8001e06 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d004      	beq.n	8001df6 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	441a      	add	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df8:	e031      	b.n	8001e5e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001dfa:	bf00      	nop
 8001dfc:	e004      	b.n	8001e08 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001dfe:	bf00      	nop
 8001e00:	e002      	b.n	8001e08 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001e02:	bf00      	nop
 8001e04:	e000      	b.n	8001e08 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001e06:	bf00      	nop

fail:
    if (item != NULL)
 8001e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001e0e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e10:	f7ff fb4e 	bl	80014b0 <cJSON_Delete>
    }

    if (value != NULL)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d020      	beq.n	8001e5c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001e22:	6a3a      	ldr	r2, [r7, #32]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d202      	bcs.n	8001e30 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e005      	b.n	8001e3c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	441a      	add	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <cJSON_ParseWithLengthOpts+0x12c>)
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e58:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3738      	adds	r7, #56	@ 0x38
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20002a4c 	.word	0x20002a4c
 8001e6c:	20000000 	.word	0x20000000

08001e70 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff41 	bl	8001d04 <cJSON_ParseWithOpts>
 8001e82:	4603      	mov	r3, r0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <parse_value+0x18>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <parse_value+0x1c>
    {
        return false; /* no input */
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e0d2      	b.n	800204e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01d      	beq.n	8001eea <parse_value+0x5e>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	1d1a      	adds	r2, r3, #4
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d816      	bhi.n	8001eea <parse_value+0x5e>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	4963      	ldr	r1, [pc, #396]	@ (8002058 <parse_value+0x1cc>)
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f00a fbc5 	bl	800c65a <strncmp>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2204      	movs	r2, #4
 8001eda:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	1d1a      	adds	r2, r3, #4
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	609a      	str	r2, [r3, #8]
        return true;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e0b1      	b.n	800204e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01d      	beq.n	8001f2c <parse_value+0xa0>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	1d5a      	adds	r2, r3, #5
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d816      	bhi.n	8001f2c <parse_value+0xa0>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4413      	add	r3, r2
 8001f08:	2205      	movs	r2, #5
 8001f0a:	4954      	ldr	r1, [pc, #336]	@ (800205c <parse_value+0x1d0>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f00a fba4 	bl	800c65a <strncmp>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	1d5a      	adds	r2, r3, #5
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	609a      	str	r2, [r3, #8]
        return true;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e090      	b.n	800204e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d020      	beq.n	8001f74 <parse_value+0xe8>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	1d1a      	adds	r2, r3, #4
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d819      	bhi.n	8001f74 <parse_value+0xe8>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4413      	add	r3, r2
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	4944      	ldr	r1, [pc, #272]	@ (8002060 <parse_value+0x1d4>)
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f00a fb83 	bl	800c65a <strncmp>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	1d1a      	adds	r2, r3, #4
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	609a      	str	r2, [r3, #8]
        return true;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e06c      	b.n	800204e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d013      	beq.n	8001fa2 <parse_value+0x116>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d20d      	bcs.n	8001fa2 <parse_value+0x116>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	4413      	add	r3, r2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b22      	cmp	r3, #34	@ 0x22
 8001f94:	d105      	bne.n	8001fa2 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001f96:	6839      	ldr	r1, [r7, #0]
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fcf7 	bl	800198c <parse_string>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	e055      	b.n	800204e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d023      	beq.n	8001ff0 <parse_value+0x164>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d21d      	bcs.n	8001ff0 <parse_value+0x164>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b2d      	cmp	r3, #45	@ 0x2d
 8001fc2:	d00f      	beq.n	8001fe4 <parse_value+0x158>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4413      	add	r3, r2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b2f      	cmp	r3, #47	@ 0x2f
 8001fd2:	d90d      	bls.n	8001ff0 <parse_value+0x164>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4413      	add	r3, r2
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b39      	cmp	r3, #57	@ 0x39
 8001fe2:	d805      	bhi.n	8001ff0 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff faba 	bl	8001560 <parse_number>
 8001fec:	4603      	mov	r3, r0
 8001fee:	e02e      	b.n	800204e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d013      	beq.n	800201e <parse_value+0x192>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d20d      	bcs.n	800201e <parse_value+0x192>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b5b      	cmp	r3, #91	@ 0x5b
 8002010:	d105      	bne.n	800201e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8002012:	6839      	ldr	r1, [r7, #0]
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f825 	bl	8002064 <parse_array>
 800201a:	4603      	mov	r3, r0
 800201c:	e017      	b.n	800204e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <parse_value+0x1c0>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	d20d      	bcs.n	800204c <parse_value+0x1c0>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b7b      	cmp	r3, #123	@ 0x7b
 800203e:	d105      	bne.n	800204c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8d2 	bl	80021ec <parse_object>
 8002048:	4603      	mov	r3, r0
 800204a:	e000      	b.n	800204e <parse_value+0x1c2>
    }

    return false;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	0800ef60 	.word	0x0800ef60
 800205c:	0800ef90 	.word	0x0800ef90
 8002060:	0800ef98 	.word	0x0800ef98

08002064 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800207e:	d301      	bcc.n	8002084 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002080:	2300      	movs	r3, #0
 8002082:	e0af      	b.n	80021e4 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	4413      	add	r3, r2
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b5b      	cmp	r3, #91	@ 0x5b
 800209c:	f040 8094 	bne.w	80021c8 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80020aa:	6838      	ldr	r0, [r7, #0]
 80020ac:	f7ff fdb6 	bl	8001c1c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00d      	beq.n	80020d2 <parse_array+0x6e>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d207      	bcs.n	80020d2 <parse_array+0x6e>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4413      	add	r3, r2
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b5d      	cmp	r3, #93	@ 0x5d
 80020d0:	d061      	beq.n	8002196 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <parse_array+0x80>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d305      	bcc.n	80020f0 <parse_array+0x8c>
    {
        input_buffer->offset--;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	1e5a      	subs	r2, r3, #1
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	609a      	str	r2, [r3, #8]
        goto fail;
 80020ee:	e072      	b.n	80021d6 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	1e5a      	subs	r2, r3, #1
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	3310      	adds	r3, #16
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f9c0 	bl	8001484 <cJSON_New_Item>
 8002104:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d05f      	beq.n	80021cc <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d104      	bne.n	800211c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	e007      	b.n	800212c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002136:	6838      	ldr	r0, [r7, #0]
 8002138:	f7ff fd70 	bl	8001c1c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800213c:	6839      	ldr	r1, [r7, #0]
 800213e:	6938      	ldr	r0, [r7, #16]
 8002140:	f7ff fea4 	bl	8001e8c <parse_value>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d042      	beq.n	80021d0 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800214a:	6838      	ldr	r0, [r7, #0]
 800214c:	f7ff fd66 	bl	8001c1c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00d      	beq.n	8002172 <parse_array+0x10e>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	d207      	bcs.n	8002172 <parse_array+0x10e>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b2c      	cmp	r3, #44	@ 0x2c
 8002170:	d0c3      	beq.n	80020fa <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d02d      	beq.n	80021d4 <parse_array+0x170>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	d227      	bcs.n	80021d4 <parse_array+0x170>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4413      	add	r3, r2
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b5d      	cmp	r3, #93	@ 0x5d
 8002192:	d11f      	bne.n	80021d4 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002194:	e000      	b.n	8002198 <parse_array+0x134>
        goto success;
 8002196:	bf00      	nop
    input_buffer->depth--;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <parse_array+0x14a>
        head->prev = current_item;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2220      	movs	r2, #32
 80021b2:	60da      	str	r2, [r3, #12]
    item->child = head;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	609a      	str	r2, [r3, #8]

    return true;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e00d      	b.n	80021e4 <parse_array+0x180>
        goto fail;
 80021c8:	bf00      	nop
 80021ca:	e004      	b.n	80021d6 <parse_array+0x172>
            goto fail; /* allocation failure */
 80021cc:	bf00      	nop
 80021ce:	e002      	b.n	80021d6 <parse_array+0x172>
            goto fail; /* failed to parse value */
 80021d0:	bf00      	nop
 80021d2:	e000      	b.n	80021d6 <parse_array+0x172>
        goto fail; /* expected end of array */
 80021d4:	bf00      	nop

fail:
    if (head != NULL)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f7ff f967 	bl	80014b0 <cJSON_Delete>
    }

    return false;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002206:	d301      	bcc.n	800220c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002208:	2300      	movs	r3, #0
 800220a:	e0f7      	b.n	80023fc <parse_object+0x210>
    }
    input_buffer->depth++;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80db 	beq.w	80023d4 <parse_object+0x1e8>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	f080 80d4 	bcs.w	80023d4 <parse_object+0x1e8>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4413      	add	r3, r2
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b7b      	cmp	r3, #123	@ 0x7b
 800223a:	f040 80cb 	bne.w	80023d4 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002248:	6838      	ldr	r0, [r7, #0]
 800224a:	f7ff fce7 	bl	8001c1c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00e      	beq.n	8002272 <parse_object+0x86>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	d208      	bcs.n	8002272 <parse_object+0x86>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4413      	add	r3, r2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b7d      	cmp	r3, #125	@ 0x7d
 800226e:	f000 8098 	beq.w	80023a2 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <parse_object+0x98>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d305      	bcc.n	8002290 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	1e5a      	subs	r2, r3, #1
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	609a      	str	r2, [r3, #8]
        goto fail;
 800228e:	e0ae      	b.n	80023ee <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	1e5a      	subs	r2, r3, #1
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3310      	adds	r3, #16
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f8f0 	bl	8001484 <cJSON_New_Item>
 80022a4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8095 	beq.w	80023d8 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	e007      	b.n	80022ce <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8083 	beq.w	80023dc <parse_object+0x1f0>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d27b      	bcs.n	80023dc <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80022ee:	6838      	ldr	r0, [r7, #0]
 80022f0:	f7ff fc94 	bl	8001c1c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	6938      	ldr	r0, [r7, #16]
 80022f8:	f7ff fb48 	bl	800198c <parse_string>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d06e      	beq.n	80023e0 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002302:	6838      	ldr	r0, [r7, #0]
 8002304:	f7ff fc8a 	bl	8001c1c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d063      	beq.n	80023e4 <parse_object+0x1f8>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	d25d      	bcs.n	80023e4 <parse_object+0x1f8>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4413      	add	r3, r2
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b3a      	cmp	r3, #58	@ 0x3a
 8002336:	d155      	bne.n	80023e4 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002342:	6838      	ldr	r0, [r7, #0]
 8002344:	f7ff fc6a 	bl	8001c1c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002348:	6839      	ldr	r1, [r7, #0]
 800234a:	6938      	ldr	r0, [r7, #16]
 800234c:	f7ff fd9e 	bl	8001e8c <parse_value>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d048      	beq.n	80023e8 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002356:	6838      	ldr	r0, [r7, #0]
 8002358:	f7ff fc60 	bl	8001c1c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <parse_object+0x192>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	429a      	cmp	r2, r3
 800236c:	d207      	bcs.n	800237e <parse_object+0x192>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	4413      	add	r3, r2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b2c      	cmp	r3, #44	@ 0x2c
 800237c:	d08d      	beq.n	800229a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d033      	beq.n	80023ec <parse_object+0x200>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	d22d      	bcs.n	80023ec <parse_object+0x200>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4413      	add	r3, r2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b7d      	cmp	r3, #125	@ 0x7d
 800239e:	d125      	bne.n	80023ec <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 80023a0:	e000      	b.n	80023a4 <parse_object+0x1b8>
        goto success; /* empty object */
 80023a2:	bf00      	nop
    input_buffer->depth--;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	1e5a      	subs	r2, r3, #1
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <parse_object+0x1ce>
        head->prev = current_item;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2240      	movs	r2, #64	@ 0x40
 80023be:	60da      	str	r2, [r3, #12]
    item->child = head;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	609a      	str	r2, [r3, #8]
    return true;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e013      	b.n	80023fc <parse_object+0x210>
        goto fail; /* not an object */
 80023d4:	bf00      	nop
 80023d6:	e00a      	b.n	80023ee <parse_object+0x202>
            goto fail; /* allocation failure */
 80023d8:	bf00      	nop
 80023da:	e008      	b.n	80023ee <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 80023dc:	bf00      	nop
 80023de:	e006      	b.n	80023ee <parse_object+0x202>
            goto fail; /* failed to parse name */
 80023e0:	bf00      	nop
 80023e2:	e004      	b.n	80023ee <parse_object+0x202>
            goto fail; /* invalid object */
 80023e4:	bf00      	nop
 80023e6:	e002      	b.n	80023ee <parse_object+0x202>
            goto fail; /* failed to parse value */
 80023e8:	bf00      	nop
 80023ea:	e000      	b.n	80023ee <parse_object+0x202>
        goto fail; /* expected end of object */
 80023ec:	bf00      	nop

fail:
    if (head != NULL)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <parse_object+0x20e>
    {
        cJSON_Delete(head);
 80023f4:	6978      	ldr	r0, [r7, #20]
 80023f6:	f7ff f85b 	bl	80014b0 <cJSON_Delete>
    }

    return false;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <cJSON_GetArraySize>:
    return true;
}

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <cJSON_GetArraySize+0x1a>
    {
        return 0;
 800241a:	2300      	movs	r3, #0
 800241c:	e00d      	b.n	800243a <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 8002424:	e005      	b.n	8002432 <cJSON_GetArraySize+0x2e>
    {
        size++;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3301      	adds	r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
        child = child->next;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f6      	bne.n	8002426 <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 8002438:	68bb      	ldr	r3, [r7, #8]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <get_array_item+0x18>
    {
        return NULL;
 800245a:	2300      	movs	r3, #0
 800245c:	e010      	b.n	8002480 <get_array_item+0x3a>
    }

    current_child = array->child;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8002464:	e005      	b.n	8002472 <get_array_item+0x2c>
    {
        index--;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	3b01      	subs	r3, #1
 800246a:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <get_array_item+0x38>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f3      	bne.n	8002466 <get_array_item+0x20>
    }

    return current_child;
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	da01      	bge.n	80024a0 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 800249c:	2300      	movs	r3, #0
 800249e:	e005      	b.n	80024ac <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4619      	mov	r1, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ffce 	bl	8002446 <get_array_item>
 80024aa:	4603      	mov	r3, r0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <get_object_item+0x1c>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <get_object_item+0x20>
    {
        return NULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e033      	b.n	800253c <get_object_item+0x88>
    }

    current_element = object->child;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d017      	beq.n	8002510 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80024e0:	e002      	b.n	80024e8 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d01c      	beq.n	8002528 <get_object_item+0x74>
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d018      	beq.n	8002528 <get_object_item+0x74>
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4619      	mov	r1, r3
 80024fc:	68b8      	ldr	r0, [r7, #8]
 80024fe:	f7fd fe67 	bl	80001d0 <strcmp>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ec      	bne.n	80024e2 <get_object_item+0x2e>
 8002508:	e00e      	b.n	8002528 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <get_object_item+0x74>
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4619      	mov	r1, r3
 800251c:	68b8      	ldr	r0, [r7, #8]
 800251e:	f7fe ff45 	bl	80013ac <case_insensitive_strcmp>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <get_object_item+0x82>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <get_object_item+0x86>
        return NULL;
 8002536:	2300      	movs	r3, #0
 8002538:	e000      	b.n	800253c <get_object_item+0x88>
    }

    return current_element;
 800253a:	697b      	ldr	r3, [r7, #20]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800254e:	2200      	movs	r2, #0
 8002550:	6839      	ldr	r1, [r7, #0]
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffae 	bl	80024b4 <get_object_item>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <setCalibrationMatrix>:
#include "calibrate.h"

int setCalibrationMatrix( POINT_T * displayPtr,
						  POINT_T * screenPtr,
                          MATRIX * matrixPtr)
{
 8002562:	b480      	push	{r7}
 8002564:	b087      	sub	sp, #28
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]

    int  retValue = OK ;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]



    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3310      	adds	r3, #16
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	3208      	adds	r2, #8
 8002582:	6851      	ldr	r1, [r2, #4]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	3210      	adds	r2, #16
 8002588:	6852      	ldr	r2, [r2, #4]
 800258a:	1a8a      	subs	r2, r1, r2
 800258c:	fb03 f202 	mul.w	r2, r3, r2
                         ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	3308      	adds	r3, #8
 8002594:	6819      	ldr	r1, [r3, #0]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3310      	adds	r3, #16
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	1acb      	subs	r3, r1, r3
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	6848      	ldr	r0, [r1, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	3110      	adds	r1, #16
 80025a6:	6849      	ldr	r1, [r1, #4]
 80025a8:	1a41      	subs	r1, r0, r1
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 80025ae:	1ad2      	subs	r2, r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	619a      	str	r2, [r3, #24]

    if( matrixPtr->Divider == 0 )
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d103      	bne.n	80025c4 <setCalibrationMatrix+0x62>
    {
        retValue = NOT_OK ;
 80025bc:	f04f 33ff 	mov.w	r3, #4294967295
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e105      	b.n	80027d0 <setCalibrationMatrix+0x26e>
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3310      	adds	r3, #16
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	3208      	adds	r2, #8
 80025d4:	6851      	ldr	r1, [r2, #4]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	3210      	adds	r2, #16
 80025da:	6852      	ldr	r2, [r2, #4]
 80025dc:	1a8a      	subs	r2, r1, r2
 80025de:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3308      	adds	r3, #8
 80025e6:	6819      	ldr	r1, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3310      	adds	r3, #16
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	1acb      	subs	r3, r1, r3
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	6848      	ldr	r0, [r1, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	3110      	adds	r1, #16
 80025f8:	6849      	ldr	r1, [r1, #4]
 80025fa:	1a41      	subs	r1, r0, r1
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8002600:	1ad2      	subs	r2, r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	601a      	str	r2, [r3, #0]

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3310      	adds	r3, #16
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	3208      	adds	r2, #8
 8002616:	6811      	ldr	r1, [r2, #0]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	3210      	adds	r2, #16
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	1a8a      	subs	r2, r1, r2
 8002620:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6819      	ldr	r1, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3310      	adds	r3, #16
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	1acb      	subs	r3, r1, r3
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	3108      	adds	r1, #8
 8002634:	6808      	ldr	r0, [r1, #0]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	3110      	adds	r1, #16
 800263a:	6809      	ldr	r1, [r1, #0]
 800263c:	1a41      	subs	r1, r0, r1
 800263e:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 8002642:	1ad2      	subs	r2, r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	605a      	str	r2, [r3, #4]

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	3310      	adds	r3, #16
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	3208      	adds	r2, #8
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	fb03 f202 	mul.w	r2, r3, r2
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	3308      	adds	r3, #8
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68f9      	ldr	r1, [r7, #12]
 8002660:	3110      	adds	r1, #16
 8002662:	6809      	ldr	r1, [r1, #0]
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	6852      	ldr	r2, [r2, #4]
 800266e:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68f9      	ldr	r1, [r7, #12]
 8002678:	3110      	adds	r1, #16
 800267a:	6809      	ldr	r1, [r1, #0]
 800267c:	fb03 f101 	mul.w	r1, r3, r1
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	3310      	adds	r3, #16
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	6800      	ldr	r0, [r0, #0]
 800268a:	fb00 f303 	mul.w	r3, r0, r3
 800268e:	1acb      	subs	r3, r1, r3
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	3108      	adds	r1, #8
 8002694:	6849      	ldr	r1, [r1, #4]
 8002696:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 800269a:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	3308      	adds	r3, #8
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	6809      	ldr	r1, [r1, #0]
 80026a6:	fb03 f101 	mul.w	r1, r3, r1
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	3008      	adds	r0, #8
 80026b2:	6800      	ldr	r0, [r0, #0]
 80026b4:	fb00 f303 	mul.w	r3, r0, r3
 80026b8:	1acb      	subs	r3, r1, r3
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	3110      	adds	r1, #16
 80026be:	6849      	ldr	r1, [r1, #4]
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 80026c4:	441a      	add	r2, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	609a      	str	r2, [r3, #8]

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3310      	adds	r3, #16
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	3208      	adds	r2, #8
 80026da:	6851      	ldr	r1, [r2, #4]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	3210      	adds	r2, #16
 80026e0:	6852      	ldr	r2, [r2, #4]
 80026e2:	1a8a      	subs	r2, r1, r2
 80026e4:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3308      	adds	r3, #8
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3310      	adds	r3, #16
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	1acb      	subs	r3, r1, r3
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	6848      	ldr	r0, [r1, #4]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	3110      	adds	r1, #16
 80026fe:	6849      	ldr	r1, [r1, #4]
 8002700:	1a41      	subs	r1, r0, r1
 8002702:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 8002706:	1ad2      	subs	r2, r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	60da      	str	r2, [r3, #12]

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	3310      	adds	r3, #16
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	3208      	adds	r2, #8
 800271c:	6851      	ldr	r1, [r2, #4]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	3210      	adds	r2, #16
 8002722:	6852      	ldr	r2, [r2, #4]
 8002724:	1a8a      	subs	r2, r1, r2
 8002726:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3310      	adds	r3, #16
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	1acb      	subs	r3, r1, r3
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	3108      	adds	r1, #8
 800273a:	6808      	ldr	r0, [r1, #0]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	3110      	adds	r1, #16
 8002740:	6809      	ldr	r1, [r1, #0]
 8002742:	1a41      	subs	r1, r0, r1
 8002744:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 8002748:	1ad2      	subs	r2, r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	611a      	str	r2, [r3, #16]

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3310      	adds	r3, #16
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	3208      	adds	r2, #8
 8002758:	6852      	ldr	r2, [r2, #4]
 800275a:	fb03 f202 	mul.w	r2, r3, r2
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3308      	adds	r3, #8
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68f9      	ldr	r1, [r7, #12]
 8002766:	3110      	adds	r1, #16
 8002768:	6849      	ldr	r1, [r1, #4]
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	6852      	ldr	r2, [r2, #4]
 8002774:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	3110      	adds	r1, #16
 8002780:	6849      	ldr	r1, [r1, #4]
 8002782:	fb03 f101 	mul.w	r1, r3, r1
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3310      	adds	r3, #16
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	6840      	ldr	r0, [r0, #4]
 8002790:	fb00 f303 	mul.w	r3, r0, r3
 8002794:	1acb      	subs	r3, r1, r3
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	3108      	adds	r1, #8
 800279a:	6849      	ldr	r1, [r1, #4]
 800279c:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 80027a0:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3308      	adds	r3, #8
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68f9      	ldr	r1, [r7, #12]
 80027aa:	6849      	ldr	r1, [r1, #4]
 80027ac:	fb03 f101 	mul.w	r1, r3, r1
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	3008      	adds	r0, #8
 80027b8:	6840      	ldr	r0, [r0, #4]
 80027ba:	fb00 f303 	mul.w	r3, r0, r3
 80027be:	1acb      	subs	r3, r1, r3
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	3110      	adds	r1, #16
 80027c4:	6849      	ldr	r1, [r1, #4]
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 80027ca:	441a      	add	r2, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	615a      	str	r2, [r3, #20]
    }

    return( retValue ) ;
 80027d0:	697b      	ldr	r3, [r7, #20]

} /* end of setCalibrationMatrix() */
 80027d2:	4618      	mov	r0, r3
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <getDisplayPoint>:
 *
 */
int getDisplayPoint( POINT_T * displayPtr,
					 POINT_T * screenPtr,
                     MATRIX * matrixPtr )
{
 80027de:	b480      	push	{r7}
 80027e0:	b087      	sub	sp, #28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
    int retValue = OK ;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]


    if( matrixPtr->Divider != 0 )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d02c      	beq.n	8002850 <getDisplayPoint+0x72>
        /* Operation order is important since we are doing integer */
        /*  math. Make sure you add all terms together before      */
        /*  dividing, so that the remainder is not rounded off     */
        /*  prematurely.                                           */

        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	fb03 f202 	mul.w	r2, r3, r2
                          (matrixPtr->Bn * screenPtr->y) +
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	6849      	ldr	r1, [r1, #4]
 800280a:	fb01 f303 	mul.w	r3, r1, r3
        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 800280e:	441a      	add	r2, r3
                           matrixPtr->Cn
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
                          (matrixPtr->Bn * screenPtr->y) +
 8002814:	441a      	add	r2, r3
                        ) / matrixPtr->Divider ;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	fb92 f2f3 	sdiv	r2, r2, r3
        displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	601a      	str	r2, [r3, #0]

        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	fb03 f202 	mul.w	r2, r3, r2
                          (matrixPtr->En * screenPtr->y) +
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	6849      	ldr	r1, [r1, #4]
 8002836:	fb01 f303 	mul.w	r3, r1, r3
        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 800283a:	441a      	add	r2, r3
                           matrixPtr->Fn
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
                          (matrixPtr->En * screenPtr->y) +
 8002840:	441a      	add	r2, r3
                        ) / matrixPtr->Divider ;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	fb92 f2f3 	sdiv	r2, r2, r3
        displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	e002      	b.n	8002856 <getDisplayPoint+0x78>
    }
    else
    {
        retValue = NOT_OK;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295
 8002854:	617b      	str	r3, [r7, #20]
    }

    return (retValue);
 8002856:	697b      	ldr	r3, [r7, #20]

} /* end of getDisplayPoint() */
 8002858:	4618      	mov	r0, r3
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <DrawCloud>:
  lcdDrawImage(0, (lcdGetHeight() - bmBackGround.ySize) / 2, &bmBackGround);
 }
 return HAL_GetTick() - start;
}

void DrawCloud(int x, int y) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmicon3);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	b29b      	uxth	r3, r3
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	b291      	uxth	r1, r2
 8002876:	4a04      	ldr	r2, [pc, #16]	@ (8002888 <DrawCloud+0x24>)
 8002878:	4618      	mov	r0, r3
 800287a:	f002 ffd9 	bl	8005830 <lcdDrawImage>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	08048b70 	.word	0x08048b70

0800288c <TextTitle>:

void TextTitle(int16_t x, int16_t y){
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	460a      	mov	r2, r1
 8002896:	80fb      	strh	r3, [r7, #6]
 8002898:	4613      	mov	r3, r2
 800289a:	80bb      	strh	r3, [r7, #4]
	lcdSetCursor(x, y);
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	88ba      	ldrh	r2, [r7, #4]
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 f9de 	bl	8005c64 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 80028a8:	f249 517f 	movw	r1, #38271	@ 0x957f
 80028ac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80028b0:	f003 f958 	bl	8005b64 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 80028b4:	4804      	ldr	r0, [pc, #16]	@ (80028c8 <TextTitle+0x3c>)
 80028b6:	f003 f945 	bl	8005b44 <lcdSetTextFont>
	lcdPrintf("Weather Report\r\n");
 80028ba:	4804      	ldr	r0, [pc, #16]	@ (80028cc <TextTitle+0x40>)
 80028bc:	f003 f8b6 	bl	8005a2c <lcdPrintf>

}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	2000001c 	.word	0x2000001c
 80028cc:	0800f0cc 	.word	0x0800f0cc

080028d0 <CloudRain>:
	lcdDrawThickArc(x0 , y0 ,r , start_angle , -93  , thickness , COLOR_GREEN);
	lcdDrawThickArc(x0 , y0 ,r , -87 , -23  , thickness , COLOR_BLUE);
	lcdDrawThickArc(x0 , y0 ,r , -17 , end_angle  , thickness , COLOR_ORANGE);
}

void CloudRain (int x, int y){
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	b218      	sxth	r0, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	b219      	sxth	r1, r3
 80028e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	2305      	movs	r3, #5
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	230a      	movs	r3, #10
 80028ee:	221e      	movs	r2, #30
 80028f0:	f002 ff38 	bl	8005764 <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3318      	adds	r3, #24
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	b218      	sxth	r0, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	3302      	adds	r3, #2
 8002904:	b29b      	uxth	r3, r3
 8002906:	b219      	sxth	r1, r3
 8002908:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800290c:	2207      	movs	r2, #7
 800290e:	f002 fdf4 	bl	80054fa <lcdFillCircle>
    lcdFillCircle(x + 15, y , 9, COLOR_WHITE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	b29b      	uxth	r3, r3
 8002916:	330f      	adds	r3, #15
 8002918:	b29b      	uxth	r3, r3
 800291a:	b218      	sxth	r0, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	b219      	sxth	r1, r3
 8002920:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002924:	2209      	movs	r2, #9
 8002926:	f002 fde8 	bl	80054fa <lcdFillCircle>

    lcdDrawLine(x + 7, y + 13, x + 5, y + 16, COLOR_BLUE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	b29b      	uxth	r3, r3
 800292e:	3307      	adds	r3, #7
 8002930:	b29b      	uxth	r3, r3
 8002932:	b218      	sxth	r0, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	330d      	adds	r3, #13
 800293a:	b29b      	uxth	r3, r3
 800293c:	b219      	sxth	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	b29b      	uxth	r3, r3
 8002942:	3305      	adds	r3, #5
 8002944:	b29b      	uxth	r3, r3
 8002946:	b21a      	sxth	r2, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	3310      	adds	r3, #16
 800294e:	b29b      	uxth	r3, r3
 8002950:	b21b      	sxth	r3, r3
 8002952:	241f      	movs	r4, #31
 8002954:	9400      	str	r4, [sp, #0]
 8002956:	f002 fae9 	bl	8004f2c <lcdDrawLine>
    lcdDrawLine(x + 8, y + 13, x + 6, y + 16, COLOR_BLUE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	b29b      	uxth	r3, r3
 800295e:	3308      	adds	r3, #8
 8002960:	b29b      	uxth	r3, r3
 8002962:	b218      	sxth	r0, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	330d      	adds	r3, #13
 800296a:	b29b      	uxth	r3, r3
 800296c:	b219      	sxth	r1, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	b29b      	uxth	r3, r3
 8002972:	3306      	adds	r3, #6
 8002974:	b29b      	uxth	r3, r3
 8002976:	b21a      	sxth	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	3310      	adds	r3, #16
 800297e:	b29b      	uxth	r3, r3
 8002980:	b21b      	sxth	r3, r3
 8002982:	241f      	movs	r4, #31
 8002984:	9400      	str	r4, [sp, #0]
 8002986:	f002 fad1 	bl	8004f2c <lcdDrawLine>

    lcdDrawLine(x + 13, y + 13, x + 8, y + 19, COLOR_BLUE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	b29b      	uxth	r3, r3
 800298e:	330d      	adds	r3, #13
 8002990:	b29b      	uxth	r3, r3
 8002992:	b218      	sxth	r0, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	330d      	adds	r3, #13
 800299a:	b29b      	uxth	r3, r3
 800299c:	b219      	sxth	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3308      	adds	r3, #8
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3313      	adds	r3, #19
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	241f      	movs	r4, #31
 80029b4:	9400      	str	r4, [sp, #0]
 80029b6:	f002 fab9 	bl	8004f2c <lcdDrawLine>
    lcdDrawLine(x + 14, y + 13, x + 9, y + 19, COLOR_BLUE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	330e      	adds	r3, #14
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	b218      	sxth	r0, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	330d      	adds	r3, #13
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	b219      	sxth	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3309      	adds	r3, #9
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3313      	adds	r3, #19
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b21b      	sxth	r3, r3
 80029e2:	241f      	movs	r4, #31
 80029e4:	9400      	str	r4, [sp, #0]
 80029e6:	f002 faa1 	bl	8004f2c <lcdDrawLine>

    lcdDrawLine(x + 19, y + 13, x + 17, y + 16, COLOR_BLUE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3313      	adds	r3, #19
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	b218      	sxth	r0, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	330d      	adds	r3, #13
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	b219      	sxth	r1, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3311      	adds	r3, #17
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	b21a      	sxth	r2, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3310      	adds	r3, #16
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	241f      	movs	r4, #31
 8002a14:	9400      	str	r4, [sp, #0]
 8002a16:	f002 fa89 	bl	8004f2c <lcdDrawLine>
    lcdDrawLine(x + 20, y + 13, x + 18, y + 16, COLOR_BLUE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3314      	adds	r3, #20
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	b218      	sxth	r0, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	330d      	adds	r3, #13
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	b219      	sxth	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3312      	adds	r3, #18
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3310      	adds	r3, #16
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	241f      	movs	r4, #31
 8002a44:	9400      	str	r4, [sp, #0]
 8002a46:	f002 fa71 	bl	8004f2c <lcdDrawLine>

    lcdDrawLine(x + 25, y + 13, x + 20, y + 19, COLOR_BLUE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3319      	adds	r3, #25
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	b218      	sxth	r0, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	330d      	adds	r3, #13
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	b219      	sxth	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3314      	adds	r3, #20
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	b21a      	sxth	r2, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3313      	adds	r3, #19
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	b21b      	sxth	r3, r3
 8002a72:	241f      	movs	r4, #31
 8002a74:	9400      	str	r4, [sp, #0]
 8002a76:	f002 fa59 	bl	8004f2c <lcdDrawLine>
    lcdDrawLine(x + 26, y + 13, x + 21, y + 19, COLOR_BLUE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	331a      	adds	r3, #26
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	b218      	sxth	r0, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	330d      	adds	r3, #13
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	b219      	sxth	r1, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3315      	adds	r3, #21
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	b21a      	sxth	r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3313      	adds	r3, #19
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	b21b      	sxth	r3, r3
 8002aa2:	241f      	movs	r4, #31
 8002aa4:	9400      	str	r4, [sp, #0]
 8002aa6:	f002 fa41 	bl	8004f2c <lcdDrawLine>
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd90      	pop	{r4, r7, pc}

08002ab2 <CloudSun>:
void CloudSun (int x, int y){
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af02      	add	r7, sp, #8
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]

	lcdFillCircle(x + 21, y - 5 , 7, COLOR_DARKYELLOW);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3315      	adds	r3, #21
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	b218      	sxth	r0, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b05      	subs	r3, #5
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b219      	sxth	r1, r3
 8002ad0:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002ad4:	2207      	movs	r2, #7
 8002ad6:	f002 fd10 	bl	80054fa <lcdFillCircle>
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	b218      	sxth	r0, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b219      	sxth	r1, r3
 8002ae2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	2305      	movs	r3, #5
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	230a      	movs	r3, #10
 8002aee:	221e      	movs	r2, #30
 8002af0:	f002 fe38 	bl	8005764 <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3318      	adds	r3, #24
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	b218      	sxth	r0, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3302      	adds	r3, #2
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	b219      	sxth	r1, r3
 8002b08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	f002 fcf4 	bl	80054fa <lcdFillCircle>
    lcdFillCircle(x + 15, y , 9, COLOR_WHITE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	330f      	adds	r3, #15
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	b218      	sxth	r0, r3
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	b219      	sxth	r1, r3
 8002b20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b24:	2209      	movs	r2, #9
 8002b26:	f002 fce8 	bl	80054fa <lcdFillCircle>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <CloudThunder>:
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
    lcdFillCircle(x + 20, y , 9, COLOR_WHITE);


}
void CloudThunder (int x, int y){
 8002b32:	b590      	push	{r4, r7, lr}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af02      	add	r7, sp, #8
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
    // Draw the cloud body using rounded rectangles and circles
	lcdFillRoundRect(x, y, 30, 10, 5, COLOR_WHITE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	b218      	sxth	r0, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b219      	sxth	r1, r3
 8002b44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b48:	9301      	str	r3, [sp, #4]
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	230a      	movs	r3, #10
 8002b50:	221e      	movs	r2, #30
 8002b52:	f002 fe07 	bl	8005764 <lcdFillRoundRect>
    lcdFillCircle(x + 24, y + 2, 7, COLOR_WHITE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	b218      	sxth	r0, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3302      	adds	r3, #2
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	b219      	sxth	r1, r3
 8002b6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b6e:	2207      	movs	r2, #7
 8002b70:	f002 fcc3 	bl	80054fa <lcdFillCircle>
    lcdFillCircle(x + 15, y , 9, COLOR_WHITE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	330f      	adds	r3, #15
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b218      	sxth	r0, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	b219      	sxth	r1, r3
 8002b82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b86:	2209      	movs	r2, #9
 8002b88:	f002 fcb7 	bl	80054fa <lcdFillCircle>

    // Draw the first thunderbolt using lines for a zigzag shape
        lcdDrawLine(x + 7, y + 10, x + 5, y + 15, COLOR_YELLOW);   // First thunderbolt
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3307      	adds	r3, #7
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	b218      	sxth	r0, r3
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	330a      	adds	r3, #10
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	b219      	sxth	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3305      	adds	r3, #5
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	b21a      	sxth	r2, r3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	330f      	adds	r3, #15
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002bb8:	9400      	str	r4, [sp, #0]
 8002bba:	f002 f9b7 	bl	8004f2c <lcdDrawLine>
        lcdDrawLine(x + 5, y + 15, x + 9, y + 15, COLOR_YELLOW);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3305      	adds	r3, #5
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b218      	sxth	r0, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	330f      	adds	r3, #15
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	b219      	sxth	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3309      	adds	r3, #9
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	b21a      	sxth	r2, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	330f      	adds	r3, #15
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	b21b      	sxth	r3, r3
 8002be6:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002bea:	9400      	str	r4, [sp, #0]
 8002bec:	f002 f99e 	bl	8004f2c <lcdDrawLine>
        lcdDrawLine(x + 9, y + 15, x + 6, y + 21, COLOR_YELLOW);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3309      	adds	r3, #9
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	b218      	sxth	r0, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	330f      	adds	r3, #15
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	b219      	sxth	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3306      	adds	r3, #6
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	b21a      	sxth	r2, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3315      	adds	r3, #21
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	b21b      	sxth	r3, r3
 8002c18:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002c1c:	9400      	str	r4, [sp, #0]
 8002c1e:	f002 f985 	bl	8004f2c <lcdDrawLine>

        // Draw the second thunderbolt (centered below the cloud)
        lcdDrawLine(x + 15, y + 10, x + 13, y + 15, COLOR_YELLOW);  // Second thunderbolt
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	330f      	adds	r3, #15
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	b218      	sxth	r0, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	330a      	adds	r3, #10
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	b219      	sxth	r1, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	330d      	adds	r3, #13
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	b21a      	sxth	r2, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	330f      	adds	r3, #15
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	b21b      	sxth	r3, r3
 8002c4a:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002c4e:	9400      	str	r4, [sp, #0]
 8002c50:	f002 f96c 	bl	8004f2c <lcdDrawLine>
        lcdDrawLine(x + 13, y + 15, x + 17, y + 15, COLOR_YELLOW);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	330d      	adds	r3, #13
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	b218      	sxth	r0, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	330f      	adds	r3, #15
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b219      	sxth	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3311      	adds	r3, #17
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	b21a      	sxth	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	330f      	adds	r3, #15
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002c80:	9400      	str	r4, [sp, #0]
 8002c82:	f002 f953 	bl	8004f2c <lcdDrawLine>
        lcdDrawLine(x + 17, y + 15, x + 14, y + 21, COLOR_YELLOW);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3311      	adds	r3, #17
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	b218      	sxth	r0, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	330f      	adds	r3, #15
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	b219      	sxth	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	330e      	adds	r3, #14
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b21a      	sxth	r2, r3
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3315      	adds	r3, #21
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	b21b      	sxth	r3, r3
 8002cae:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002cb2:	9400      	str	r4, [sp, #0]
 8002cb4:	f002 f93a 	bl	8004f2c <lcdDrawLine>

        // Draw the third thunderbolt (right side)
        lcdDrawLine(x + 23, y + 10, x + 21, y + 15, COLOR_YELLOW);  // Third thunderbolt
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3317      	adds	r3, #23
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	b218      	sxth	r0, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	330a      	adds	r3, #10
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	b219      	sxth	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3315      	adds	r3, #21
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	b21a      	sxth	r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	330f      	adds	r3, #15
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	b21b      	sxth	r3, r3
 8002ce0:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002ce4:	9400      	str	r4, [sp, #0]
 8002ce6:	f002 f921 	bl	8004f2c <lcdDrawLine>
        lcdDrawLine(x + 21, y + 15, x + 25, y + 15, COLOR_YELLOW);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3315      	adds	r3, #21
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	b218      	sxth	r0, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	330f      	adds	r3, #15
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	b219      	sxth	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3319      	adds	r3, #25
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	b21a      	sxth	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	330f      	adds	r3, #15
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002d16:	9400      	str	r4, [sp, #0]
 8002d18:	f002 f908 	bl	8004f2c <lcdDrawLine>
        lcdDrawLine(x + 25, y + 15, x + 22, y + 21, COLOR_YELLOW);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3319      	adds	r3, #25
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	b218      	sxth	r0, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	330f      	adds	r3, #15
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	b219      	sxth	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3316      	adds	r3, #22
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	b21a      	sxth	r2, r3
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3315      	adds	r3, #21
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	b21b      	sxth	r3, r3
 8002d44:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002d48:	9400      	str	r4, [sp, #0]
 8002d4a:	f002 f8ef 	bl	8004f2c <lcdDrawLine>

        // Draw the first thunderbolt using lines for a zigzag shape
		lcdDrawLine(x + 7 + 1, y + 10, x + 5 + 1, y + 15, COLOR_YELLOW);   // First thunderbolt
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3308      	adds	r3, #8
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	b218      	sxth	r0, r3
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	330a      	adds	r3, #10
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	b219      	sxth	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3306      	adds	r3, #6
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	b21a      	sxth	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	330f      	adds	r3, #15
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002d7a:	9400      	str	r4, [sp, #0]
 8002d7c:	f002 f8d6 	bl	8004f2c <lcdDrawLine>
		lcdDrawLine(x + 5 + 1, y + 15, x + 9 + 1, y + 15, COLOR_YELLOW);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3306      	adds	r3, #6
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	b218      	sxth	r0, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	330f      	adds	r3, #15
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	b219      	sxth	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	330a      	adds	r3, #10
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	b21a      	sxth	r2, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	330f      	adds	r3, #15
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	b21b      	sxth	r3, r3
 8002da8:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002dac:	9400      	str	r4, [sp, #0]
 8002dae:	f002 f8bd 	bl	8004f2c <lcdDrawLine>
		lcdDrawLine(x + 9 + 1, y + 15, x + 6 + 1, y + 21, COLOR_YELLOW);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	330a      	adds	r3, #10
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	b218      	sxth	r0, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	330f      	adds	r3, #15
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	b219      	sxth	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3307      	adds	r3, #7
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	b21a      	sxth	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3315      	adds	r3, #21
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	b21b      	sxth	r3, r3
 8002dda:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002dde:	9400      	str	r4, [sp, #0]
 8002de0:	f002 f8a4 	bl	8004f2c <lcdDrawLine>

		// Draw the second thunderbolt (centered below the cloud)
		lcdDrawLine(x + 15 + 1, y + 10, x + 13 + 1, y + 15, COLOR_YELLOW);  // Second thunderbolt
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3310      	adds	r3, #16
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	b218      	sxth	r0, r3
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	330a      	adds	r3, #10
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	b219      	sxth	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	330e      	adds	r3, #14
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	b21a      	sxth	r2, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	330f      	adds	r3, #15
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	b21b      	sxth	r3, r3
 8002e0c:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002e10:	9400      	str	r4, [sp, #0]
 8002e12:	f002 f88b 	bl	8004f2c <lcdDrawLine>
		lcdDrawLine(x + 13 + 1, y + 15, x + 17 + 1, y + 15, COLOR_YELLOW);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	330e      	adds	r3, #14
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	b218      	sxth	r0, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	330f      	adds	r3, #15
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	b219      	sxth	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3312      	adds	r3, #18
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	b21a      	sxth	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	330f      	adds	r3, #15
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	b21b      	sxth	r3, r3
 8002e3e:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002e42:	9400      	str	r4, [sp, #0]
 8002e44:	f002 f872 	bl	8004f2c <lcdDrawLine>
		lcdDrawLine(x + 17 + 1, y + 15, x + 14 + 1, y + 21, COLOR_YELLOW);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3312      	adds	r3, #18
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	b218      	sxth	r0, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	330f      	adds	r3, #15
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	b219      	sxth	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	330f      	adds	r3, #15
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3315      	adds	r3, #21
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002e74:	9400      	str	r4, [sp, #0]
 8002e76:	f002 f859 	bl	8004f2c <lcdDrawLine>

		// Draw the third thunderbolt (right side)
		lcdDrawLine(x + 23 + 1, y + 10, x + 21 + 1, y + 15, COLOR_YELLOW);  // Third thunderbolt
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3318      	adds	r3, #24
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	b218      	sxth	r0, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	330a      	adds	r3, #10
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	b219      	sxth	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3316      	adds	r3, #22
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b21a      	sxth	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	330f      	adds	r3, #15
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002ea6:	9400      	str	r4, [sp, #0]
 8002ea8:	f002 f840 	bl	8004f2c <lcdDrawLine>
		lcdDrawLine(x + 21 + 1, y + 15, x + 25 + 1, y + 15, COLOR_YELLOW);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3316      	adds	r3, #22
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	b218      	sxth	r0, r3
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	330f      	adds	r3, #15
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	b219      	sxth	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	331a      	adds	r3, #26
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	330f      	adds	r3, #15
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002ed8:	9400      	str	r4, [sp, #0]
 8002eda:	f002 f827 	bl	8004f2c <lcdDrawLine>
		lcdDrawLine(x + 25 + 1, y + 15, x + 22 + 1, y + 21, COLOR_YELLOW);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	331a      	adds	r3, #26
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	b218      	sxth	r0, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	330f      	adds	r3, #15
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	b219      	sxth	r1, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3317      	adds	r3, #23
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	b21a      	sxth	r2, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3315      	adds	r3, #21
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002f0a:	9400      	str	r4, [sp, #0]
 8002f0c:	f002 f80e 	bl	8004f2c <lcdDrawLine>
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd90      	pop	{r4, r7, pc}

08002f18 <interpolateColor>:

uint16_t interpolateColor(uint16_t color1, uint16_t color2, float ratio) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	@ 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	460a      	mov	r2, r1
 8002f22:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f26:	81fb      	strh	r3, [r7, #14]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	81bb      	strh	r3, [r7, #12]
    uint8_t r1 = (color1 >> 11) & 0x1F;
 8002f2c:	89fb      	ldrh	r3, [r7, #14]
 8002f2e:	0adb      	lsrs	r3, r3, #11
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	77fb      	strb	r3, [r7, #31]
    uint8_t g1 = (color1 >> 5) & 0x3F;
 8002f3a:	89fb      	ldrh	r3, [r7, #14]
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f46:	77bb      	strb	r3, [r7, #30]
    uint8_t b1 = color1 & 0x1F;
 8002f48:	89fb      	ldrh	r3, [r7, #14]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	777b      	strb	r3, [r7, #29]

    uint8_t r2 = (color2 >> 11) & 0x1F;
 8002f52:	89bb      	ldrh	r3, [r7, #12]
 8002f54:	0adb      	lsrs	r3, r3, #11
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	773b      	strb	r3, [r7, #28]
    uint8_t g2 = (color2 >> 5) & 0x3F;
 8002f60:	89bb      	ldrh	r3, [r7, #12]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f6c:	76fb      	strb	r3, [r7, #27]
    uint8_t b2 = color2 & 0x1F;
 8002f6e:	89bb      	ldrh	r3, [r7, #12]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	76bb      	strb	r3, [r7, #26]

    uint8_t r = r1 + (r2 - r1) * ratio;
 8002f78:	7ffb      	ldrb	r3, [r7, #31]
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f82:	7f3a      	ldrb	r2, [r7, #28]
 8002f84:	7ffb      	ldrb	r3, [r7, #31]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f90:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fa0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fa4:	793b      	ldrb	r3, [r7, #4]
 8002fa6:	767b      	strb	r3, [r7, #25]
    uint8_t g = g1 + (g2 - g1) * ratio;
 8002fa8:	7fbb      	ldrb	r3, [r7, #30]
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fb2:	7efa      	ldrb	r2, [r7, #27]
 8002fb4:	7fbb      	ldrb	r3, [r7, #30]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	ee07 3a90 	vmov	s15, r3
 8002fbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fd0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fd4:	793b      	ldrb	r3, [r7, #4]
 8002fd6:	763b      	strb	r3, [r7, #24]
    uint8_t b = b1 + (b2 - b1) * ratio;
 8002fd8:	7f7b      	ldrb	r3, [r7, #29]
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fe2:	7eba      	ldrb	r2, [r7, #26]
 8002fe4:	7f7b      	ldrb	r3, [r7, #29]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	ee07 3a90 	vmov	s15, r3
 8002fec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ff0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003000:	edc7 7a01 	vstr	s15, [r7, #4]
 8003004:	793b      	ldrb	r3, [r7, #4]
 8003006:	75fb      	strb	r3, [r7, #23]

    return (r << 11) | (g << 5) | b;
 8003008:	7e7b      	ldrb	r3, [r7, #25]
 800300a:	02db      	lsls	r3, r3, #11
 800300c:	b21a      	sxth	r2, r3
 800300e:	7e3b      	ldrb	r3, [r7, #24]
 8003010:	015b      	lsls	r3, r3, #5
 8003012:	b21b      	sxth	r3, r3
 8003014:	4313      	orrs	r3, r2
 8003016:	b21a      	sxth	r2, r3
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	b21b      	sxth	r3, r3
 800301c:	4313      	orrs	r3, r2
 800301e:	b21b      	sxth	r3, r3
 8003020:	b29b      	uxth	r3, r3
}
 8003022:	4618      	mov	r0, r3
 8003024:	3724      	adds	r7, #36	@ 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <DrawGradientLine>:

void DrawGradientLine(int16_t x, int16_t y, int16_t length, int16_t thickness, uint16_t colorStart, uint16_t colorEnd , int Vitri) {
 800302e:	b590      	push	{r4, r7, lr}
 8003030:	b087      	sub	sp, #28
 8003032:	af00      	add	r7, sp, #0
 8003034:	4604      	mov	r4, r0
 8003036:	4608      	mov	r0, r1
 8003038:	4611      	mov	r1, r2
 800303a:	461a      	mov	r2, r3
 800303c:	4623      	mov	r3, r4
 800303e:	80fb      	strh	r3, [r7, #6]
 8003040:	4603      	mov	r3, r0
 8003042:	80bb      	strh	r3, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
 8003048:	4613      	mov	r3, r2
 800304a:	803b      	strh	r3, [r7, #0]
    // Radius for rounded ends, equal to half the thickness of the line
    int16_t radius = thickness / 2;
 800304c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003050:	0fda      	lsrs	r2, r3, #31
 8003052:	4413      	add	r3, r2
 8003054:	105b      	asrs	r3, r3, #1
 8003056:	827b      	strh	r3, [r7, #18]

    // Draw the main gradient line with thickness
    for (int16_t i = 0; i < length; i++) {
 8003058:	2300      	movs	r3, #0
 800305a:	82fb      	strh	r3, [r7, #22]
 800305c:	e03d      	b.n	80030da <DrawGradientLine+0xac>
        float ratio = (float)i / length;  // Calculate the interpolation ratio
 800305e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800306a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800307a:	edc7 7a03 	vstr	s15, [r7, #12]
        uint16_t color = interpolateColor(colorStart, colorEnd, ratio);
 800307e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003080:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003082:	ed97 0a03 	vldr	s0, [r7, #12]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff45 	bl	8002f18 <interpolateColor>
 800308e:	4603      	mov	r3, r0
 8003090:	817b      	strh	r3, [r7, #10]

        // Draw a vertical line of "thickness" pixels at each position along the gradient line
        for (int16_t j = -radius + 1; j <= radius; j++) {
 8003092:	8a7b      	ldrh	r3, [r7, #18]
 8003094:	f1c3 0301 	rsb	r3, r3, #1
 8003098:	b29b      	uxth	r3, r3
 800309a:	82bb      	strh	r3, [r7, #20]
 800309c:	e011      	b.n	80030c2 <DrawGradientLine+0x94>
            lcdDrawPixel(x + i , y + j, color);  // Center the thickness vertically
 800309e:	88fa      	ldrh	r2, [r7, #6]
 80030a0:	8afb      	ldrh	r3, [r7, #22]
 80030a2:	4413      	add	r3, r2
 80030a4:	b298      	uxth	r0, r3
 80030a6:	88ba      	ldrh	r2, [r7, #4]
 80030a8:	8abb      	ldrh	r3, [r7, #20]
 80030aa:	4413      	add	r3, r2
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	897a      	ldrh	r2, [r7, #10]
 80030b0:	4619      	mov	r1, r3
 80030b2:	f001 fe81 	bl	8004db8 <lcdDrawPixel>
        for (int16_t j = -radius + 1; j <= radius; j++) {
 80030b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	b29b      	uxth	r3, r3
 80030c0:	82bb      	strh	r3, [r7, #20]
 80030c2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80030c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	dde7      	ble.n	800309e <DrawGradientLine+0x70>
    for (int16_t i = 0; i < length; i++) {
 80030ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3301      	adds	r3, #1
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	82fb      	strh	r3, [r7, #22]
 80030da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	dbbb      	blt.n	800305e <DrawGradientLine+0x30>
        }
    }

    // Draw rounded ends as circles with colors matching the ends of the gradient
    lcdFillCircle(x, y  , radius - 1, colorStart);                 // Start of the line
 80030e6:	8a7b      	ldrh	r3, [r7, #18]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	b21a      	sxth	r2, r3
 80030ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030f0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80030f4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80030f8:	f002 f9ff 	bl	80054fa <lcdFillCircle>
    lcdFillCircle(x + length - 1, y , radius - 1, colorEnd);      // End of the line
 80030fc:	88fa      	ldrh	r2, [r7, #6]
 80030fe:	887b      	ldrh	r3, [r7, #2]
 8003100:	4413      	add	r3, r2
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29b      	uxth	r3, r3
 8003108:	b218      	sxth	r0, r3
 800310a:	8a7b      	ldrh	r3, [r7, #18]
 800310c:	3b01      	subs	r3, #1
 800310e:	b29b      	uxth	r3, r3
 8003110:	b21a      	sxth	r2, r3
 8003112:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003114:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003118:	f002 f9ef 	bl	80054fa <lcdFillCircle>
    lcdDrawCircle(x + Vitri, y , radius , COLOR_THEME_SKYBLUE_BASE);
 800311c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311e:	b29a      	uxth	r2, r3
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	4413      	add	r3, r2
 8003124:	b29b      	uxth	r3, r3
 8003126:	b218      	sxth	r0, r3
 8003128:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800312c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003130:	f249 537f 	movw	r3, #38271	@ 0x957f
 8003134:	f002 f90d 	bl	8005352 <lcdDrawCircle>
    lcdDrawCircle(x + Vitri, y , radius - 1 , COLOR_WHITE);
 8003138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313a:	b29a      	uxth	r2, r3
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	4413      	add	r3, r2
 8003140:	b29b      	uxth	r3, r3
 8003142:	b218      	sxth	r0, r3
 8003144:	8a7b      	ldrh	r3, [r7, #18]
 8003146:	3b01      	subs	r3, #1
 8003148:	b29b      	uxth	r3, r3
 800314a:	b21a      	sxth	r2, r3
 800314c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003150:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003154:	f002 f8fd 	bl	8005352 <lcdDrawCircle>
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	bd90      	pop	{r4, r7, pc}

08003160 <WeatherDay>:

void WeatherDay (int x , int y , int TempMax , int TempMin , int weather_code , int current_temp ){
 8003160:	b580      	push	{r7, lr}
 8003162:	b090      	sub	sp, #64	@ 0x40
 8003164:	af04      	add	r7, sp, #16
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
	int rate = weather_code;
 800316e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c

	  lcdSetCursor(x + 5, y + 20);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	b29b      	uxth	r3, r3
 8003176:	3305      	adds	r3, #5
 8003178:	b29a      	uxth	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	b29b      	uxth	r3, r3
 800317e:	3314      	adds	r3, #20
 8003180:	b29b      	uxth	r3, r3
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f002 fd6d 	bl	8005c64 <lcdSetCursor>
	  lcdSetTextFont(&Font16);
 800318a:	488f      	ldr	r0, [pc, #572]	@ (80033c8 <WeatherDay+0x268>)
 800318c:	f002 fcda 	bl	8005b44 <lcdSetTextFont>
	  lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003190:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003194:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003198:	f002 fce4 	bl	8005b64 <lcdSetTextColor>

	  if (weather_code <= 57){
 800319c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319e:	2b39      	cmp	r3, #57	@ 0x39
 80031a0:	dc09      	bgt.n	80031b6 <WeatherDay+0x56>
	  		  CloudSun(x + 45, y + 14);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	330e      	adds	r3, #14
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f7ff fc7f 	bl	8002ab2 <CloudSun>
 80031b4:	e02b      	b.n	800320e <WeatherDay+0xae>
	  	  }
	  	  else if (weather_code <= 67) {
 80031b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b8:	2b43      	cmp	r3, #67	@ 0x43
 80031ba:	dc09      	bgt.n	80031d0 <WeatherDay+0x70>
	  		  //Rain
	  		  CloudRain(x + 45 , y + 10 );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	330a      	adds	r3, #10
 80031c6:	4619      	mov	r1, r3
 80031c8:	4610      	mov	r0, r2
 80031ca:	f7ff fb81 	bl	80028d0 <CloudRain>
 80031ce:	e01e      	b.n	800320e <WeatherDay+0xae>
	  	  }
	  	  else if (weather_code < 95){
 80031d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d2:	2b5e      	cmp	r3, #94	@ 0x5e
 80031d4:	dc12      	bgt.n	80031fc <WeatherDay+0x9c>
	  		  if (weather_code ==80 || weather_code == 81 || weather_code == 82){
 80031d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d8:	2b50      	cmp	r3, #80	@ 0x50
 80031da:	d005      	beq.n	80031e8 <WeatherDay+0x88>
 80031dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031de:	2b51      	cmp	r3, #81	@ 0x51
 80031e0:	d002      	beq.n	80031e8 <WeatherDay+0x88>
 80031e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e4:	2b52      	cmp	r3, #82	@ 0x52
 80031e6:	d112      	bne.n	800320e <WeatherDay+0xae>
	  			  //Rain
	  			  CloudRain(x + 45 , y + 10);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	330a      	adds	r3, #10
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f7ff fb6b 	bl	80028d0 <CloudRain>
 80031fa:	e008      	b.n	800320e <WeatherDay+0xae>
	  			  //Snow
	  		  }
	  	  }
	  	  else{
	  		  //Thunder
	  		  CloudThunder (x + 45, y + 9);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3309      	adds	r3, #9
 8003206:	4619      	mov	r1, r3
 8003208:	4610      	mov	r0, r2
 800320a:	f7ff fc92 	bl	8002b32 <CloudThunder>
	  	  }
	  lcdSetTextFont(&Font12);
 800320e:	486f      	ldr	r0, [pc, #444]	@ (80033cc <WeatherDay+0x26c>)
 8003210:	f002 fc98 	bl	8005b44 <lcdSetTextFont>
	  if (rate >= 10)
 8003214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003216:	2b09      	cmp	r3, #9
 8003218:	dd10      	ble.n	800323c <WeatherDay+0xdc>
	  {
		  lcdSetCursor(x + 53, y + 32);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	b29b      	uxth	r3, r3
 800321e:	3335      	adds	r3, #53	@ 0x35
 8003220:	b29a      	uxth	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	b29b      	uxth	r3, r3
 8003226:	3320      	adds	r3, #32
 8003228:	b29b      	uxth	r3, r3
 800322a:	4619      	mov	r1, r3
 800322c:	4610      	mov	r0, r2
 800322e:	f002 fd19 	bl	8005c64 <lcdSetCursor>
		  lcdPrintf("%d", rate);
 8003232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003234:	4866      	ldr	r0, [pc, #408]	@ (80033d0 <WeatherDay+0x270>)
 8003236:	f002 fbf9 	bl	8005a2c <lcdPrintf>
 800323a:	e00f      	b.n	800325c <WeatherDay+0xfc>

	  }
	  else{
		  lcdSetCursor(x + 57, y + 32);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	b29b      	uxth	r3, r3
 8003240:	3339      	adds	r3, #57	@ 0x39
 8003242:	b29a      	uxth	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	b29b      	uxth	r3, r3
 8003248:	3320      	adds	r3, #32
 800324a:	b29b      	uxth	r3, r3
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f002 fd08 	bl	8005c64 <lcdSetCursor>
		  lcdPrintf("%d", rate);
 8003254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003256:	485e      	ldr	r0, [pc, #376]	@ (80033d0 <WeatherDay+0x270>)
 8003258:	f002 fbe8 	bl	8005a2c <lcdPrintf>
	  }

	  lcdSetCursor(x + 5, y + 20);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	b29b      	uxth	r3, r3
 8003260:	3305      	adds	r3, #5
 8003262:	b29a      	uxth	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	b29b      	uxth	r3, r3
 8003268:	3314      	adds	r3, #20
 800326a:	b29b      	uxth	r3, r3
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f002 fcf8 	bl	8005c64 <lcdSetCursor>
	  lcdSetTextFont(&Font16);
 8003274:	4854      	ldr	r0, [pc, #336]	@ (80033c8 <WeatherDay+0x268>)
 8003276:	f002 fc65 	bl	8005b44 <lcdSetTextFont>
	  lcdPrintf("Now");
 800327a:	4856      	ldr	r0, [pc, #344]	@ (80033d4 <WeatherDay+0x274>)
 800327c:	f002 fbd6 	bl	8005a2c <lcdPrintf>
	  lcdSetCursor(x + 93, y + 20);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	b29b      	uxth	r3, r3
 8003284:	335d      	adds	r3, #93	@ 0x5d
 8003286:	b29a      	uxth	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	b29b      	uxth	r3, r3
 800328c:	3314      	adds	r3, #20
 800328e:	b29b      	uxth	r3, r3
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f002 fce6 	bl	8005c64 <lcdSetCursor>
	  if (10 <= TempMin)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b09      	cmp	r3, #9
 800329c:	dd2e      	ble.n	80032fc <WeatherDay+0x19c>
	  {
		lcdSetCursor(x + 93, y + 20);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	335d      	adds	r3, #93	@ 0x5d
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3314      	adds	r3, #20
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4619      	mov	r1, r3
 80032b0:	4610      	mov	r0, r2
 80032b2:	f002 fcd7 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d" , TempMin);
 80032b6:	6839      	ldr	r1, [r7, #0]
 80032b8:	4845      	ldr	r0, [pc, #276]	@ (80033d0 <WeatherDay+0x270>)
 80032ba:	f002 fbb7 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 121 , y + 19 , 3, COLOR_WHITE);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3379      	adds	r3, #121	@ 0x79
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	b218      	sxth	r0, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3313      	adds	r3, #19
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	b219      	sxth	r1, r3
 80032d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032d6:	2203      	movs	r2, #3
 80032d8:	f002 f83b 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 121 , y + 19 , 2, COLOR_WHITE);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3379      	adds	r3, #121	@ 0x79
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	b218      	sxth	r0, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3313      	adds	r3, #19
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	b219      	sxth	r1, r3
 80032f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032f4:	2202      	movs	r2, #2
 80032f6:	f002 f82c 	bl	8005352 <lcdDrawCircle>
 80032fa:	e09b      	b.n	8003434 <WeatherDay+0x2d4>
	  }
	  else if ( 0 <  TempMin)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	dd2e      	ble.n	8003360 <WeatherDay+0x200>
	  {
		lcdSetCursor(x + 104, y + 20);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	b29b      	uxth	r3, r3
 8003306:	3368      	adds	r3, #104	@ 0x68
 8003308:	b29a      	uxth	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	b29b      	uxth	r3, r3
 800330e:	3314      	adds	r3, #20
 8003310:	b29b      	uxth	r3, r3
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f002 fca5 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d" , TempMin);
 800331a:	6839      	ldr	r1, [r7, #0]
 800331c:	482c      	ldr	r0, [pc, #176]	@ (80033d0 <WeatherDay+0x270>)
 800331e:	f002 fb85 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 121 , y + 19 , 3, COLOR_WHITE);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	b29b      	uxth	r3, r3
 8003326:	3379      	adds	r3, #121	@ 0x79
 8003328:	b29b      	uxth	r3, r3
 800332a:	b218      	sxth	r0, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	b29b      	uxth	r3, r3
 8003330:	3313      	adds	r3, #19
 8003332:	b29b      	uxth	r3, r3
 8003334:	b219      	sxth	r1, r3
 8003336:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800333a:	2203      	movs	r2, #3
 800333c:	f002 f809 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 121 , y + 19 , 2, COLOR_WHITE);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	b29b      	uxth	r3, r3
 8003344:	3379      	adds	r3, #121	@ 0x79
 8003346:	b29b      	uxth	r3, r3
 8003348:	b218      	sxth	r0, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	b29b      	uxth	r3, r3
 800334e:	3313      	adds	r3, #19
 8003350:	b29b      	uxth	r3, r3
 8003352:	b219      	sxth	r1, r3
 8003354:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003358:	2202      	movs	r2, #2
 800335a:	f001 fffa 	bl	8005352 <lcdDrawCircle>
 800335e:	e069      	b.n	8003434 <WeatherDay+0x2d4>
	  }
	  else if (-10 < TempMin )
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	f113 0f09 	cmn.w	r3, #9
 8003366:	db37      	blt.n	80033d8 <WeatherDay+0x278>
	  {
		lcdSetCursor(x + 93, y + 20);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	b29b      	uxth	r3, r3
 800336c:	335d      	adds	r3, #93	@ 0x5d
 800336e:	b29a      	uxth	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	b29b      	uxth	r3, r3
 8003374:	3314      	adds	r3, #20
 8003376:	b29b      	uxth	r3, r3
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f002 fc72 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d" , TempMin);
 8003380:	6839      	ldr	r1, [r7, #0]
 8003382:	4813      	ldr	r0, [pc, #76]	@ (80033d0 <WeatherDay+0x270>)
 8003384:	f002 fb52 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 121 , y + 19 , 3, COLOR_WHITE);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	b29b      	uxth	r3, r3
 800338c:	3379      	adds	r3, #121	@ 0x79
 800338e:	b29b      	uxth	r3, r3
 8003390:	b218      	sxth	r0, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	b29b      	uxth	r3, r3
 8003396:	3313      	adds	r3, #19
 8003398:	b29b      	uxth	r3, r3
 800339a:	b219      	sxth	r1, r3
 800339c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033a0:	2203      	movs	r2, #3
 80033a2:	f001 ffd6 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 121 , y + 19 , 2, COLOR_WHITE);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3379      	adds	r3, #121	@ 0x79
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	b218      	sxth	r0, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3313      	adds	r3, #19
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	b219      	sxth	r1, r3
 80033ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033be:	2202      	movs	r2, #2
 80033c0:	f001 ffc7 	bl	8005352 <lcdDrawCircle>
 80033c4:	e036      	b.n	8003434 <WeatherDay+0x2d4>
 80033c6:	bf00      	nop
 80033c8:	20000014 	.word	0x20000014
 80033cc:	2000000c 	.word	0x2000000c
 80033d0:	0800f104 	.word	0x0800f104
 80033d4:	0800f114 	.word	0x0800f114
	  }
	  else
	  {
		lcdSetCursor(x + 82, y + 20);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3352      	adds	r3, #82	@ 0x52
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3314      	adds	r3, #20
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4619      	mov	r1, r3
 80033ea:	4610      	mov	r0, r2
 80033ec:	f002 fc3a 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d" , TempMin);
 80033f0:	6839      	ldr	r1, [r7, #0]
 80033f2:	489b      	ldr	r0, [pc, #620]	@ (8003660 <WeatherDay+0x500>)
 80033f4:	f002 fb1a 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 121 , y + 19 , 3, COLOR_WHITE);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3379      	adds	r3, #121	@ 0x79
 80033fe:	b29b      	uxth	r3, r3
 8003400:	b218      	sxth	r0, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	b29b      	uxth	r3, r3
 8003406:	3313      	adds	r3, #19
 8003408:	b29b      	uxth	r3, r3
 800340a:	b219      	sxth	r1, r3
 800340c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003410:	2203      	movs	r2, #3
 8003412:	f001 ff9e 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 121 , y + 19 , 2, COLOR_WHITE);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	b29b      	uxth	r3, r3
 800341a:	3379      	adds	r3, #121	@ 0x79
 800341c:	b29b      	uxth	r3, r3
 800341e:	b218      	sxth	r0, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	b29b      	uxth	r3, r3
 8003424:	3313      	adds	r3, #19
 8003426:	b29b      	uxth	r3, r3
 8003428:	b219      	sxth	r1, r3
 800342a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800342e:	2202      	movs	r2, #2
 8003430:	f001 ff8f 	bl	8005352 <lcdDrawCircle>
	  }
	  double Dolon = TempMax - TempMin;
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd f882 	bl	8000544 <__aeabi_i2d>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  double Dolon1 = current_temp - TempMin;
 8003448:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd f878 	bl	8000544 <__aeabi_i2d>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  int Vitri = (Dolon1 / Dolon) * 50;
 800345c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003460:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003464:	f7fd fa02 	bl	800086c <__aeabi_ddiv>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	4b7b      	ldr	r3, [pc, #492]	@ (8003664 <WeatherDay+0x504>)
 8003476:	f7fd f8cf 	bl	8000618 <__aeabi_dmul>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	f7fd fb63 	bl	8000b4c <__aeabi_d2iz>
 8003486:	4603      	mov	r3, r0
 8003488:	617b      	str	r3, [r7, #20]

	  DrawGradientLine(x + 133, y + 25 , 50 , 6 ,  COLOR_ORANGE , COLOR_RED , Vitri);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	b29b      	uxth	r3, r3
 800348e:	3385      	adds	r3, #133	@ 0x85
 8003490:	b29b      	uxth	r3, r3
 8003492:	b218      	sxth	r0, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	b29b      	uxth	r3, r3
 8003498:	3319      	adds	r3, #25
 800349a:	b29b      	uxth	r3, r3
 800349c:	b219      	sxth	r1, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	9302      	str	r3, [sp, #8]
 80034a2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	2306      	movs	r3, #6
 80034b0:	2232      	movs	r2, #50	@ 0x32
 80034b2:	f7ff fdbc 	bl	800302e <DrawGradientLine>

	  lcdSetCursor(x + 188, y + 20);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	33bc      	adds	r3, #188	@ 0xbc
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3314      	adds	r3, #20
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	4619      	mov	r1, r3
 80034c8:	4610      	mov	r0, r2
 80034ca:	f002 fbcb 	bl	8005c64 <lcdSetCursor>
	  if (10 < TempMax)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b0a      	cmp	r3, #10
 80034d2:	dd2e      	ble.n	8003532 <WeatherDay+0x3d2>
	  {
		lcdSetCursor(x + 191, y + 20);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	33bf      	adds	r3, #191	@ 0xbf
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3314      	adds	r3, #20
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f002 fbbc 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d" , TempMax);
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	485c      	ldr	r0, [pc, #368]	@ (8003660 <WeatherDay+0x500>)
 80034f0:	f002 fa9c 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 218 , y + 19 , 3, COLOR_WHITE);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	33da      	adds	r3, #218	@ 0xda
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	b218      	sxth	r0, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	b29b      	uxth	r3, r3
 8003502:	3313      	adds	r3, #19
 8003504:	b29b      	uxth	r3, r3
 8003506:	b219      	sxth	r1, r3
 8003508:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800350c:	2203      	movs	r2, #3
 800350e:	f001 ff20 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 218 , y + 19 , 2, COLOR_WHITE);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	b29b      	uxth	r3, r3
 8003516:	33da      	adds	r3, #218	@ 0xda
 8003518:	b29b      	uxth	r3, r3
 800351a:	b218      	sxth	r0, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	b29b      	uxth	r3, r3
 8003520:	3313      	adds	r3, #19
 8003522:	b29b      	uxth	r3, r3
 8003524:	b219      	sxth	r1, r3
 8003526:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800352a:	2202      	movs	r2, #2
 800352c:	f001 ff11 	bl	8005352 <lcdDrawCircle>
		lcdSetCursor(x + 191, y + 20);
		lcdPrintf("%d" , TempMax);
		lcdDrawCircle( x + 229 , y + 19 , 3, COLOR_WHITE);
		lcdDrawCircle( x + 229 , y + 19 , 2, COLOR_WHITE);
	  }
}
 8003530:	e092      	b.n	8003658 <WeatherDay+0x4f8>
	  else if ( 0 <  TempMax)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	dd2e      	ble.n	8003596 <WeatherDay+0x436>
		lcdSetCursor(x + 191, y + 20);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	b29b      	uxth	r3, r3
 800353c:	33bf      	adds	r3, #191	@ 0xbf
 800353e:	b29a      	uxth	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	b29b      	uxth	r3, r3
 8003544:	3314      	adds	r3, #20
 8003546:	b29b      	uxth	r3, r3
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f002 fb8a 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d" , TempMax);
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4843      	ldr	r0, [pc, #268]	@ (8003660 <WeatherDay+0x500>)
 8003554:	f002 fa6a 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 207 , y + 19 , 3, COLOR_WHITE);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	b29b      	uxth	r3, r3
 800355c:	33cf      	adds	r3, #207	@ 0xcf
 800355e:	b29b      	uxth	r3, r3
 8003560:	b218      	sxth	r0, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	b29b      	uxth	r3, r3
 8003566:	3313      	adds	r3, #19
 8003568:	b29b      	uxth	r3, r3
 800356a:	b219      	sxth	r1, r3
 800356c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003570:	2203      	movs	r2, #3
 8003572:	f001 feee 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 207 , y + 19 , 2, COLOR_WHITE);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	b29b      	uxth	r3, r3
 800357a:	33cf      	adds	r3, #207	@ 0xcf
 800357c:	b29b      	uxth	r3, r3
 800357e:	b218      	sxth	r0, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	b29b      	uxth	r3, r3
 8003584:	3313      	adds	r3, #19
 8003586:	b29b      	uxth	r3, r3
 8003588:	b219      	sxth	r1, r3
 800358a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800358e:	2202      	movs	r2, #2
 8003590:	f001 fedf 	bl	8005352 <lcdDrawCircle>
}
 8003594:	e060      	b.n	8003658 <WeatherDay+0x4f8>
	  else if (-10 < TempMax )
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f113 0f09 	cmn.w	r3, #9
 800359c:	db2e      	blt.n	80035fc <WeatherDay+0x49c>
		lcdSetCursor(x + 191, y + 20);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	33bf      	adds	r3, #191	@ 0xbf
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3314      	adds	r3, #20
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f002 fb57 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d" , TempMax);
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4829      	ldr	r0, [pc, #164]	@ (8003660 <WeatherDay+0x500>)
 80035ba:	f002 fa37 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 218 , y + 19 , 3, COLOR_WHITE);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	33da      	adds	r3, #218	@ 0xda
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	b218      	sxth	r0, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3313      	adds	r3, #19
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	b219      	sxth	r1, r3
 80035d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035d6:	2203      	movs	r2, #3
 80035d8:	f001 febb 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 218 , y + 19 , 2, COLOR_WHITE);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	33da      	adds	r3, #218	@ 0xda
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	b218      	sxth	r0, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3313      	adds	r3, #19
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	b219      	sxth	r1, r3
 80035f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035f4:	2202      	movs	r2, #2
 80035f6:	f001 feac 	bl	8005352 <lcdDrawCircle>
}
 80035fa:	e02d      	b.n	8003658 <WeatherDay+0x4f8>
		lcdSetCursor(x + 191, y + 20);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	33bf      	adds	r3, #191	@ 0xbf
 8003602:	b29a      	uxth	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	b29b      	uxth	r3, r3
 8003608:	3314      	adds	r3, #20
 800360a:	b29b      	uxth	r3, r3
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f002 fb28 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d" , TempMax);
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4812      	ldr	r0, [pc, #72]	@ (8003660 <WeatherDay+0x500>)
 8003618:	f002 fa08 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 229 , y + 19 , 3, COLOR_WHITE);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	b29b      	uxth	r3, r3
 8003620:	33e5      	adds	r3, #229	@ 0xe5
 8003622:	b29b      	uxth	r3, r3
 8003624:	b218      	sxth	r0, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	b29b      	uxth	r3, r3
 800362a:	3313      	adds	r3, #19
 800362c:	b29b      	uxth	r3, r3
 800362e:	b219      	sxth	r1, r3
 8003630:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003634:	2203      	movs	r2, #3
 8003636:	f001 fe8c 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 229 , y + 19 , 2, COLOR_WHITE);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	b29b      	uxth	r3, r3
 800363e:	33e5      	adds	r3, #229	@ 0xe5
 8003640:	b29b      	uxth	r3, r3
 8003642:	b218      	sxth	r0, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	b29b      	uxth	r3, r3
 8003648:	3313      	adds	r3, #19
 800364a:	b29b      	uxth	r3, r3
 800364c:	b219      	sxth	r1, r3
 800364e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003652:	2202      	movs	r2, #2
 8003654:	f001 fe7d 	bl	8005352 <lcdDrawCircle>
}
 8003658:	bf00      	nop
 800365a:	3730      	adds	r7, #48	@ 0x30
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	0800f104 	.word	0x0800f104
 8003664:	40490000 	.word	0x40490000

08003668 <DrawThermometer>:

    // Vẽ vòng tròn trung tâm
    lcdDrawCircle(centerX, centerY, 5, COLOR_WHITE);
}

void DrawThermometer(int x, int y, int height, int width, int fillHeight, uint16_t borderColor, uint16_t fillColor) {
 8003668:	b5b0      	push	{r4, r5, r7, lr}
 800366a:	b090      	sub	sp, #64	@ 0x40
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
    int bulbRadius = width / 2;                  // Radius of the bulb at the bottom
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	0fda      	lsrs	r2, r3, #31
 800367a:	4413      	add	r3, r2
 800367c:	105b      	asrs	r3, r3, #1
 800367e:	633b      	str	r3, [r7, #48]	@ 0x30
    int tubeWidth = width / 2;                   // Width of the thermometer tube
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	0fda      	lsrs	r2, r3, #31
 8003684:	4413      	add	r3, r2
 8003686:	105b      	asrs	r3, r3, #1
 8003688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int tubeHeight = height - bulbRadius * 2;    // Height of the thermometer tube
 800368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Draw the bulb at the bottom
    lcdFillCircle(x, y + height - bulbRadius, bulbRadius , borderColor);           // Outer circle for bulb
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	b218      	sxth	r0, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	b29a      	uxth	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	b219      	sxth	r1, r3
 80036ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b0:	b21a      	sxth	r2, r3
 80036b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80036b6:	f001 ff20 	bl	80054fa <lcdFillCircle>
    lcdFillCircle(x, y + height - bulbRadius, bulbRadius - 2, COLOR_WHITE);       // Inner circle for bulb border
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	b218      	sxth	r0, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	b219      	sxth	r1, r3
 80036d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b02      	subs	r3, #2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	b21a      	sxth	r2, r3
 80036de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036e2:	f001 ff0a 	bl	80054fa <lcdFillCircle>
    lcdFillCircle(x, y + height - bulbRadius, bulbRadius - 3, fillColor);         // Inner fill for "mercury" in bulb
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	b218      	sxth	r0, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	b219      	sxth	r1, r3
 8003700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b03      	subs	r3, #3
 8003706:	b29b      	uxth	r3, r3
 8003708:	b21a      	sxth	r2, r3
 800370a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800370e:	f001 fef4 	bl	80054fa <lcdFillCircle>

    // Draw the thermometer tube
    lcdFillRoundRect(x - tubeWidth / 2, y, tubeWidth, tubeHeight + 1 , tubeWidth / 2, borderColor);       // Outer tube border
 8003712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003714:	0fda      	lsrs	r2, r3, #31
 8003716:	4413      	add	r3, r2
 8003718:	105b      	asrs	r3, r3, #1
 800371a:	425b      	negs	r3, r3
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	b29b      	uxth	r3, r3
 8003722:	4413      	add	r3, r2
 8003724:	b29b      	uxth	r3, r3
 8003726:	b218      	sxth	r0, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	b219      	sxth	r1, r3
 800372c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372e:	b21c      	sxth	r4, r3
 8003730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003732:	b29b      	uxth	r3, r3
 8003734:	3301      	adds	r3, #1
 8003736:	b29b      	uxth	r3, r3
 8003738:	b21d      	sxth	r5, r3
 800373a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373c:	0fda      	lsrs	r2, r3, #31
 800373e:	4413      	add	r3, r2
 8003740:	105b      	asrs	r3, r3, #1
 8003742:	b21b      	sxth	r3, r3
 8003744:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003748:	9201      	str	r2, [sp, #4]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	462b      	mov	r3, r5
 800374e:	4622      	mov	r2, r4
 8003750:	f002 f808 	bl	8005764 <lcdFillRoundRect>
    lcdFillRoundRect(x - tubeWidth / 2 + 2, y + 2, tubeWidth - 4, tubeHeight - 4, tubeWidth / 2 - 2, COLOR_WHITE); // Inner tube border
 8003754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003756:	0fda      	lsrs	r2, r3, #31
 8003758:	4413      	add	r3, r2
 800375a:	105b      	asrs	r3, r3, #1
 800375c:	425b      	negs	r3, r3
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	b29b      	uxth	r3, r3
 8003764:	4413      	add	r3, r2
 8003766:	b29b      	uxth	r3, r3
 8003768:	3302      	adds	r3, #2
 800376a:	b29b      	uxth	r3, r3
 800376c:	b218      	sxth	r0, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	b29b      	uxth	r3, r3
 8003772:	3302      	adds	r3, #2
 8003774:	b29b      	uxth	r3, r3
 8003776:	b219      	sxth	r1, r3
 8003778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b04      	subs	r3, #4
 800377e:	b29b      	uxth	r3, r3
 8003780:	b21c      	sxth	r4, r3
 8003782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b04      	subs	r3, #4
 8003788:	b29b      	uxth	r3, r3
 800378a:	b21d      	sxth	r5, r3
 800378c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378e:	0fda      	lsrs	r2, r3, #31
 8003790:	4413      	add	r3, r2
 8003792:	105b      	asrs	r3, r3, #1
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b02      	subs	r3, #2
 8003798:	b29b      	uxth	r3, r3
 800379a:	b21b      	sxth	r3, r3
 800379c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037a0:	9201      	str	r2, [sp, #4]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	462b      	mov	r3, r5
 80037a6:	4622      	mov	r2, r4
 80037a8:	f001 ffdc 	bl	8005764 <lcdFillRoundRect>

    // Fill the thermometer tube based on the fill height
    int filledTubeHeight = fillHeight * tubeHeight / height;  // Scale fill height to tube height
 80037ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037b0:	fb03 f202 	mul.w	r2, r3, r2
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
    lcdFillRect(x - tubeWidth / 2 + 2, y + tubeHeight - filledTubeHeight + 2, tubeWidth - 5, filledTubeHeight, fillColor);  // Fill tube with "mercury"
 80037bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037be:	0fda      	lsrs	r2, r3, #31
 80037c0:	4413      	add	r3, r2
 80037c2:	105b      	asrs	r3, r3, #1
 80037c4:	425b      	negs	r3, r3
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3302      	adds	r3, #2
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	b218      	sxth	r0, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	b29a      	uxth	r2, r3
 80037da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037dc:	b29b      	uxth	r3, r3
 80037de:	4413      	add	r3, r2
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3302      	adds	r3, #2
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	b219      	sxth	r1, r3
 80037f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b05      	subs	r3, #5
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	b21a      	sxth	r2, r3
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	b21c      	sxth	r4, r3
 80037fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4623      	mov	r3, r4
 8003806:	f001 ff51 	bl	80056ac <lcdFillRect>

    // Draw finer scale marks on the side of the thermometer
    int markCount = 8;  // Increased number of marks for more detail
 800380a:	2308      	movs	r3, #8
 800380c:	623b      	str	r3, [r7, #32]
    int markSpacing = tubeHeight / markCount; // Spacing between marks
 800380e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	fb92 f3f3 	sdiv	r3, r2, r3
 8003816:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i <= markCount; i++) {
 8003818:	2300      	movs	r3, #0
 800381a:	637b      	str	r3, [r7, #52]	@ 0x34
 800381c:	e03a      	b.n	8003894 <DrawThermometer+0x22c>
        int markY = y + tubeHeight - i * markSpacing;
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	441a      	add	r2, r3
 8003824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003826:	69f9      	ldr	r1, [r7, #28]
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	61bb      	str	r3, [r7, #24]
        int markLength = (i % 2 == 0) ? 8 : 5;  // Longer marks every other line for a clearer scale
 8003830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <DrawThermometer+0x1d6>
 800383a:	2308      	movs	r3, #8
 800383c:	e000      	b.n	8003840 <DrawThermometer+0x1d8>
 800383e:	2305      	movs	r3, #5
 8003840:	617b      	str	r3, [r7, #20]
        lcdDrawLine(x + tubeWidth / 2 + 3, markY, x + tubeWidth / 2 + 3 + markLength, markY, borderColor);
 8003842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003844:	0fda      	lsrs	r2, r3, #31
 8003846:	4413      	add	r3, r2
 8003848:	105b      	asrs	r3, r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	b29b      	uxth	r3, r3
 8003850:	4413      	add	r3, r2
 8003852:	b29b      	uxth	r3, r3
 8003854:	3303      	adds	r3, #3
 8003856:	b29b      	uxth	r3, r3
 8003858:	b218      	sxth	r0, r3
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	b219      	sxth	r1, r3
 800385e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003860:	0fda      	lsrs	r2, r3, #31
 8003862:	4413      	add	r3, r2
 8003864:	105b      	asrs	r3, r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	b29b      	uxth	r3, r3
 800386c:	4413      	add	r3, r2
 800386e:	b29a      	uxth	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	b29b      	uxth	r3, r3
 8003874:	4413      	add	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	3303      	adds	r3, #3
 800387a:	b29b      	uxth	r3, r3
 800387c:	b21a      	sxth	r2, r3
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	b21c      	sxth	r4, r3
 8003882:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4623      	mov	r3, r4
 800388a:	f001 fb4f 	bl	8004f2c <lcdDrawLine>
    for (int i = 0; i <= markCount; i++) {
 800388e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003890:	3301      	adds	r3, #1
 8003892:	637b      	str	r3, [r7, #52]	@ 0x34
 8003894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	429a      	cmp	r2, r3
 800389a:	ddc0      	ble.n	800381e <DrawThermometer+0x1b6>
    }
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	3738      	adds	r7, #56	@ 0x38
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080038a8 <DrawIconHumidyti1>:

void DrawIconHumidyti1 (int x, int y)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmicon1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	b291      	uxth	r1, r2
 80038ba:	4a04      	ldr	r2, [pc, #16]	@ (80038cc <DrawIconHumidyti1+0x24>)
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 ffb7 	bl	8005830 <lcdDrawImage>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	08045890 	.word	0x08045890

080038d0 <DrawIconDate>:

void DrawIconDate (int x, int y)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmicon2);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	b291      	uxth	r1, r2
 80038e2:	4a04      	ldr	r2, [pc, #16]	@ (80038f4 <DrawIconDate+0x24>)
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 ffa3 	bl	8005830 <lcdDrawImage>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	0804651c 	.word	0x0804651c

080038f8 <DrawIconWeather>:
void DrawIconWeather (int x, int y)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmwether);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	b29b      	uxth	r3, r3
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	b291      	uxth	r1, r2
 800390a:	4a04      	ldr	r2, [pc, #16]	@ (800391c <DrawIconWeather+0x24>)
 800390c:	4618      	mov	r0, r3
 800390e:	f001 ff8f 	bl	8005830 <lcdDrawImage>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	0804b864 	.word	0x0804b864

08003920 <DrawIconTem>:
void DrawIconTem (int x, int y)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmTem);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	b29b      	uxth	r3, r3
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	b291      	uxth	r1, r2
 8003932:	4a04      	ldr	r2, [pc, #16]	@ (8003944 <DrawIconTem+0x24>)
 8003934:	4618      	mov	r0, r3
 8003936:	f001 ff7b 	bl	8005830 <lcdDrawImage>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	0803dbac 	.word	0x0803dbac

08003948 <DrawIconWind>:
void DrawIconWind (int x, int y)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y , &bmwind);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	b29b      	uxth	r3, r3
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	b291      	uxth	r1, r2
 800395a:	4a04      	ldr	r2, [pc, #16]	@ (800396c <DrawIconWind+0x24>)
 800395c:	4618      	mov	r0, r3
 800395e:	f001 ff67 	bl	8005830 <lcdDrawImage>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	0804bf3c 	.word	0x0804bf3c

08003970 <TextTemperature16>:
void TextTemperature16 (int x , int y , int temperature){
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 800397c:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003980:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003984:	f002 f8ee 	bl	8005b64 <lcdSetTextColor>
	lcdSetTextFont(&Font24);
 8003988:	4861      	ldr	r0, [pc, #388]	@ (8003b10 <TextTemperature16+0x1a0>)
 800398a:	f002 f8db 	bl	8005b44 <lcdSetTextFont>
	if (10 <= temperature)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b09      	cmp	r3, #9
 8003992:	dd2c      	ble.n	80039ee <TextTemperature16+0x7e>
	{
		lcdSetCursor(x + 5 , y );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	b29b      	uxth	r3, r3
 8003998:	3305      	adds	r3, #5
 800399a:	b29b      	uxth	r3, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	b292      	uxth	r2, r2
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f002 f95e 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	485a      	ldr	r0, [pc, #360]	@ (8003b14 <TextTemperature16+0x1a4>)
 80039ac:	f002 f83e 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 47 , y + 3 , 3, COLOR_WHITE);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	332f      	adds	r3, #47	@ 0x2f
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	b218      	sxth	r0, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3303      	adds	r3, #3
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	b219      	sxth	r1, r3
 80039c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039c8:	2203      	movs	r2, #3
 80039ca:	f001 fcc2 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 47 , y + 3 , 2, COLOR_WHITE);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	332f      	adds	r3, #47	@ 0x2f
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	b218      	sxth	r0, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3303      	adds	r3, #3
 80039de:	b29b      	uxth	r3, r3
 80039e0:	b219      	sxth	r1, r3
 80039e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039e6:	2202      	movs	r2, #2
 80039e8:	f001 fcb3 	bl	8005352 <lcdDrawCircle>
		lcdSetCursor(x - 3  , y );
		lcdPrintf("%d C\r\n" , temperature);
		lcdDrawCircle( x + 56 , y + 3 , 3, COLOR_WHITE);
		lcdDrawCircle( x + 56 , y + 3 , 2, COLOR_WHITE);
	}
}
 80039ec:	e08c      	b.n	8003b08 <TextTemperature16+0x198>
	else if ( 0 <  temperature)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	dd2c      	ble.n	8003a4e <TextTemperature16+0xde>
		lcdSetCursor(x + 12  , y );
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	330c      	adds	r3, #12
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	b292      	uxth	r2, r2
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f002 f92e 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4842      	ldr	r0, [pc, #264]	@ (8003b14 <TextTemperature16+0x1a4>)
 8003a0c:	f002 f80e 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 36 , y + 3 , 3, COLOR_WHITE);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3324      	adds	r3, #36	@ 0x24
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	b218      	sxth	r0, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3303      	adds	r3, #3
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	b219      	sxth	r1, r3
 8003a24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a28:	2203      	movs	r2, #3
 8003a2a:	f001 fc92 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 36 , y + 3 , 2, COLOR_WHITE);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3324      	adds	r3, #36	@ 0x24
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	b218      	sxth	r0, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3303      	adds	r3, #3
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	b219      	sxth	r1, r3
 8003a42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a46:	2202      	movs	r2, #2
 8003a48:	f001 fc83 	bl	8005352 <lcdDrawCircle>
}
 8003a4c:	e05c      	b.n	8003b08 <TextTemperature16+0x198>
	else if (-10 < temperature )
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f113 0f09 	cmn.w	r3, #9
 8003a54:	db2c      	blt.n	8003ab0 <TextTemperature16+0x140>
		lcdSetCursor(x + 5  , y );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3305      	adds	r3, #5
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	b292      	uxth	r2, r2
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f002 f8fd 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4829      	ldr	r0, [pc, #164]	@ (8003b14 <TextTemperature16+0x1a4>)
 8003a6e:	f001 ffdd 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 47 , y + 3 , 3, COLOR_WHITE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	332f      	adds	r3, #47	@ 0x2f
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	b218      	sxth	r0, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3303      	adds	r3, #3
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	b219      	sxth	r1, r3
 8003a86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	f001 fc61 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 47 , y + 3 , 2, COLOR_WHITE);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	332f      	adds	r3, #47	@ 0x2f
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	b218      	sxth	r0, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3303      	adds	r3, #3
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	b219      	sxth	r1, r3
 8003aa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	f001 fc52 	bl	8005352 <lcdDrawCircle>
}
 8003aae:	e02b      	b.n	8003b08 <TextTemperature16+0x198>
		lcdSetCursor(x - 3  , y );
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b03      	subs	r3, #3
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	b292      	uxth	r2, r2
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f002 f8d0 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d C\r\n" , temperature);
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4813      	ldr	r0, [pc, #76]	@ (8003b14 <TextTemperature16+0x1a4>)
 8003ac8:	f001 ffb0 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 56 , y + 3 , 3, COLOR_WHITE);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3338      	adds	r3, #56	@ 0x38
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	b218      	sxth	r0, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3303      	adds	r3, #3
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	b219      	sxth	r1, r3
 8003ae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	f001 fc34 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 56 , y + 3 , 2, COLOR_WHITE);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3338      	adds	r3, #56	@ 0x38
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	b218      	sxth	r0, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3303      	adds	r3, #3
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	b219      	sxth	r1, r3
 8003afe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b02:	2202      	movs	r2, #2
 8003b04:	f001 fc25 	bl	8005352 <lcdDrawCircle>
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000024 	.word	0x20000024
 8003b14:	0800f0fc 	.word	0x0800f0fc

08003b18 <TextHumidyti16>:

void TextHumidyti16 (int x , int y , int humidyti){
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003b24:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003b28:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003b2c:	f002 f81a 	bl	8005b64 <lcdSetTextColor>
	lcdSetTextFont(&Font24);
 8003b30:	4830      	ldr	r0, [pc, #192]	@ (8003bf4 <TextHumidyti16+0xdc>)
 8003b32:	f002 f807 	bl	8005b44 <lcdSetTextFont>
	if (humidyti < 10){
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b09      	cmp	r3, #9
 8003b3a:	dc2a      	bgt.n	8003b92 <TextHumidyti16+0x7a>
		lcdSetCursor(x  , y );
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	b292      	uxth	r2, r2
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f002 f88c 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d/\r\n" , humidyti);
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	482a      	ldr	r0, [pc, #168]	@ (8003bf8 <TextHumidyti16+0xe0>)
 8003b50:	f001 ff6c 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 20 , y + 3 , 2, COLOR_WHITE);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3314      	adds	r3, #20
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	b218      	sxth	r0, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3303      	adds	r3, #3
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	b219      	sxth	r1, r3
 8003b68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f001 fbf0 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 29 , y + 16 , 2, COLOR_WHITE);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	331d      	adds	r3, #29
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	b218      	sxth	r0, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3310      	adds	r3, #16
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	b219      	sxth	r1, r3
 8003b86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f001 fbe1 	bl	8005352 <lcdDrawCircle>
		lcdSetCursor(x - 5  , y );
		lcdPrintf("%d/\r\n" , humidyti);
		lcdDrawCircle( x + 33 , y + 3 , 2, COLOR_WHITE);
		lcdDrawCircle( x + 41 , y + 15 , 2, COLOR_WHITE);
	}
}
 8003b90:	e02b      	b.n	8003bea <TextHumidyti16+0xd2>
		lcdSetCursor(x - 5  , y );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b05      	subs	r3, #5
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	b292      	uxth	r2, r2
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f002 f85f 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("%d/\r\n" , humidyti);
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4813      	ldr	r0, [pc, #76]	@ (8003bf8 <TextHumidyti16+0xe0>)
 8003baa:	f001 ff3f 	bl	8005a2c <lcdPrintf>
		lcdDrawCircle( x + 33 , y + 3 , 2, COLOR_WHITE);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3321      	adds	r3, #33	@ 0x21
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	b218      	sxth	r0, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3303      	adds	r3, #3
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	b219      	sxth	r1, r3
 8003bc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f001 fbc3 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle( x + 41 , y + 15 , 2, COLOR_WHITE);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3329      	adds	r3, #41	@ 0x29
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	b218      	sxth	r0, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	330f      	adds	r3, #15
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	b219      	sxth	r1, r3
 8003be0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003be4:	2202      	movs	r2, #2
 8003be6:	f001 fbb4 	bl	8005352 <lcdDrawCircle>
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000024 	.word	0x20000024
 8003bf8:	0800f10c 	.word	0x0800f10c

08003bfc <TextTime>:
void TextTime(int x , int y , char * current_time){
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
	lcdSetCursor(x, y);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	b292      	uxth	r2, r2
 8003c10:	4611      	mov	r1, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f002 f826 	bl	8005c64 <lcdSetCursor>
	lcdSetTextFont(&Font12);
 8003c18:	4808      	ldr	r0, [pc, #32]	@ (8003c3c <TextTime+0x40>)
 8003c1a:	f001 ff93 	bl	8005b44 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003c1e:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003c22:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003c26:	f001 ff9d 	bl	8005b64 <lcdSetTextColor>
	lcdPrintf("Time: %s" , current_time);
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4804      	ldr	r0, [pc, #16]	@ (8003c40 <TextTime+0x44>)
 8003c2e:	f001 fefd 	bl	8005a2c <lcdPrintf>
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000000c 	.word	0x2000000c
 8003c40:	0800f118 	.word	0x0800f118

08003c44 <TextDate>:
void TextDate(int x , int y , char * current_date){
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
	lcdSetCursor(x, y);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	b292      	uxth	r2, r2
 8003c58:	4611      	mov	r1, r2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f002 f802 	bl	8005c64 <lcdSetCursor>
	lcdSetTextFont(&Font12);
 8003c60:	4808      	ldr	r0, [pc, #32]	@ (8003c84 <TextDate+0x40>)
 8003c62:	f001 ff6f 	bl	8005b44 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003c66:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003c6a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003c6e:	f001 ff79 	bl	8005b64 <lcdSetTextColor>
	lcdPrintf("Date: %s" , current_date);
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	4804      	ldr	r0, [pc, #16]	@ (8003c88 <TextDate+0x44>)
 8003c76:	f001 fed9 	bl	8005a2c <lcdPrintf>
}
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	2000000c 	.word	0x2000000c
 8003c88:	0800f124 	.word	0x0800f124

08003c8c <TextLocation>:
void TextLocation(int x , int y , int choice)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
	lcdSetCursor(x, y);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 ffde 	bl	8005c64 <lcdSetCursor>
	lcdSetTextFont(&Font12);
 8003ca8:	4817      	ldr	r0, [pc, #92]	@ (8003d08 <TextLocation+0x7c>)
 8003caa:	f001 ff4b 	bl	8005b44 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003cae:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003cb2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003cb6:	f001 ff55 	bl	8005b64 <lcdSetTextColor>
    if (choice == 1){
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d103      	bne.n	8003cc8 <TextLocation+0x3c>
    	lcdPrintf("City: Ho Chi Minh");
 8003cc0:	4812      	ldr	r0, [pc, #72]	@ (8003d0c <TextLocation+0x80>)
 8003cc2:	f001 feb3 	bl	8005a2c <lcdPrintf>
    	lcdPrintf("City: Can Tho");
	}
    else if(choice == 5){
    	lcdPrintf("City: Da Nang");
	}
}
 8003cc6:	e01a      	b.n	8003cfe <TextLocation+0x72>
    else if(choice == 2){
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d103      	bne.n	8003cd6 <TextLocation+0x4a>
    	lcdPrintf("City: Ha Noi");
 8003cce:	4810      	ldr	r0, [pc, #64]	@ (8003d10 <TextLocation+0x84>)
 8003cd0:	f001 feac 	bl	8005a2c <lcdPrintf>
}
 8003cd4:	e013      	b.n	8003cfe <TextLocation+0x72>
    else if(choice == 3){
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d103      	bne.n	8003ce4 <TextLocation+0x58>
    	lcdPrintf("City: Hai Phong");
 8003cdc:	480d      	ldr	r0, [pc, #52]	@ (8003d14 <TextLocation+0x88>)
 8003cde:	f001 fea5 	bl	8005a2c <lcdPrintf>
}
 8003ce2:	e00c      	b.n	8003cfe <TextLocation+0x72>
    else if(choice == 4){
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d103      	bne.n	8003cf2 <TextLocation+0x66>
    	lcdPrintf("City: Can Tho");
 8003cea:	480b      	ldr	r0, [pc, #44]	@ (8003d18 <TextLocation+0x8c>)
 8003cec:	f001 fe9e 	bl	8005a2c <lcdPrintf>
}
 8003cf0:	e005      	b.n	8003cfe <TextLocation+0x72>
    else if(choice == 5){
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d102      	bne.n	8003cfe <TextLocation+0x72>
    	lcdPrintf("City: Da Nang");
 8003cf8:	4808      	ldr	r0, [pc, #32]	@ (8003d1c <TextLocation+0x90>)
 8003cfa:	f001 fe97 	bl	8005a2c <lcdPrintf>
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	2000000c 	.word	0x2000000c
 8003d0c:	0800f130 	.word	0x0800f130
 8003d10:	0800f144 	.word	0x0800f144
 8003d14:	0800f154 	.word	0x0800f154
 8003d18:	0800f164 	.word	0x0800f164
 8003d1c:	0800f174 	.word	0x0800f174

08003d20 <TextSensor>:
void TextSensor(int x , int y ,float temperature ,float humidity ){
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d2e:	edc7 0a00 	vstr	s1, [r7]
	lcdSetCursor(x + 40, y);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3328      	adds	r3, #40	@ 0x28
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	b292      	uxth	r2, r2
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f001 ff8f 	bl	8005c64 <lcdSetCursor>
	lcdSetTextFont(&Font16);
 8003d46:	4843      	ldr	r0, [pc, #268]	@ (8003e54 <TextSensor+0x134>)
 8003d48:	f001 fefc 	bl	8005b44 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003d4c:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003d50:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003d54:	f001 ff06 	bl	8005b64 <lcdSetTextColor>
	lcdPrintf("Sensor");
 8003d58:	483f      	ldr	r0, [pc, #252]	@ (8003e58 <TextSensor+0x138>)
 8003d5a:	f001 fe67 	bl	8005a2c <lcdPrintf>
	lcdSetCursor(x + 12, y + 55);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	330c      	adds	r3, #12
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3337      	adds	r3, #55	@ 0x37
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f001 ff77 	bl	8005c64 <lcdSetCursor>
	lcdPrintf("%d C", (int)temperature);
 8003d76:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d7e:	ee17 1a90 	vmov	r1, s15
 8003d82:	4836      	ldr	r0, [pc, #216]	@ (8003e5c <TextSensor+0x13c>)
 8003d84:	f001 fe52 	bl	8005a2c <lcdPrintf>
	if (temperature < 0 || temperature >= 10){
 8003d88:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d94:	d408      	bmi.n	8003da8 <TextSensor+0x88>
 8003d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d9a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da6:	db1e      	blt.n	8003de6 <TextSensor+0xc6>
		lcdDrawCircle(x + 39, y + 56, 2, COLOR_WHITE);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3327      	adds	r3, #39	@ 0x27
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	b218      	sxth	r0, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3338      	adds	r3, #56	@ 0x38
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	b219      	sxth	r1, r3
 8003dbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f001 fac6 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle(x + 39, y + 56, 3, COLOR_WHITE);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3327      	adds	r3, #39	@ 0x27
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	b218      	sxth	r0, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3338      	adds	r3, #56	@ 0x38
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	b219      	sxth	r1, r3
 8003dda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dde:	2203      	movs	r2, #3
 8003de0:	f001 fab7 	bl	8005352 <lcdDrawCircle>
 8003de4:	e01d      	b.n	8003e22 <TextSensor+0x102>
	}
	else {
		lcdDrawCircle(x + 28, y + 56, 2, COLOR_WHITE);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	331c      	adds	r3, #28
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	b218      	sxth	r0, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3338      	adds	r3, #56	@ 0x38
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	b219      	sxth	r1, r3
 8003dfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f001 faa7 	bl	8005352 <lcdDrawCircle>
		lcdDrawCircle(x + 28, y + 56, 3, COLOR_WHITE);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	331c      	adds	r3, #28
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	b218      	sxth	r0, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3338      	adds	r3, #56	@ 0x38
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	b219      	sxth	r1, r3
 8003e18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	f001 fa98 	bl	8005352 <lcdDrawCircle>
	}
	lcdSetCursor(x + 90, y + 55);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	335a      	adds	r3, #90	@ 0x5a
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3337      	adds	r3, #55	@ 0x37
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f001 ff15 	bl	8005c64 <lcdSetCursor>
	lcdPrintf("%d%%", (int)humidity);
 8003e3a:	edd7 7a00 	vldr	s15, [r7]
 8003e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e42:	ee17 1a90 	vmov	r1, s15
 8003e46:	4806      	ldr	r0, [pc, #24]	@ (8003e60 <TextSensor+0x140>)
 8003e48:	f001 fdf0 	bl	8005a2c <lcdPrintf>
}
 8003e4c:	bf00      	nop
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000014 	.word	0x20000014
 8003e58:	0800f184 	.word	0x0800f184
 8003e5c:	0800f18c 	.word	0x0800f18c
 8003e60:	0800f194 	.word	0x0800f194

08003e64 <TextCloudRate>:
void TextCloudRate(int x , int y , int cloud_rate ){
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
	lcdSetCursor(x + 10, y);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	330a      	adds	r3, #10
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	b292      	uxth	r2, r2
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 fef0 	bl	8005c64 <lcdSetCursor>
	lcdSetTextFont(&Font16);
 8003e84:	4817      	ldr	r0, [pc, #92]	@ (8003ee4 <TextCloudRate+0x80>)
 8003e86:	f001 fe5d 	bl	8005b44 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8003e8a:	f249 517f 	movw	r1, #38271	@ 0x957f
 8003e8e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003e92:	f001 fe67 	bl	8005b64 <lcdSetTextColor>
	lcdPrintf("Cloud");
 8003e96:	4814      	ldr	r0, [pc, #80]	@ (8003ee8 <TextCloudRate+0x84>)
 8003e98:	f001 fdc8 	bl	8005a2c <lcdPrintf>
	if (cloud_rate < 100){
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b63      	cmp	r3, #99	@ 0x63
 8003ea0:	dc0c      	bgt.n	8003ebc <TextCloudRate+0x58>
		lcdSetCursor(x + 22, y + 55);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3316      	adds	r3, #22
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3337      	adds	r3, #55	@ 0x37
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	f001 fed5 	bl	8005c64 <lcdSetCursor>
 8003eba:	e00b      	b.n	8003ed4 <TextCloudRate+0x70>
	}
	else {
		lcdSetCursor(x + 15, y + 55);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	330f      	adds	r3, #15
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3337      	adds	r3, #55	@ 0x37
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f001 fec8 	bl	8005c64 <lcdSetCursor>
	}
	lcdPrintf("%d%%", cloud_rate);
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4805      	ldr	r0, [pc, #20]	@ (8003eec <TextCloudRate+0x88>)
 8003ed8:	f001 fda8 	bl	8005a2c <lcdPrintf>
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000014 	.word	0x20000014
 8003ee8:	0800f19c 	.word	0x0800f19c
 8003eec:	0800f194 	.word	0x0800f194

08003ef0 <DrawIconHot>:
	lcdSetCursor(x , y);
	lcdSetTextFont(&Font16);
	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
	lcdPrintf("UV: %.1f" , UV);
}
void DrawIconHot (int x, int y){
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmhot);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	b291      	uxth	r1, r2
 8003f02:	4a04      	ldr	r2, [pc, #16]	@ (8003f14 <DrawIconHot+0x24>)
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 fc93 	bl	8005830 <lcdDrawImage>
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	080444a0 	.word	0x080444a0

08003f18 <DrawIconIce>:
void DrawIconIce (int x, int y){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmice);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	b291      	uxth	r1, r2
 8003f2a:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <DrawIconIce+0x24>)
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 fc7f 	bl	8005830 <lcdDrawImage>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	08044bb4 	.word	0x08044bb4

08003f40 <DrawIconTree>:
void DrawIconTree (int x, int y){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmtree1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	b291      	uxth	r1, r2
 8003f52:	4a04      	ldr	r2, [pc, #16]	@ (8003f64 <DrawIconTree+0x24>)
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 fc6b 	bl	8005830 <lcdDrawImage>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	0804a4c4 	.word	0x0804a4c4

08003f68 <DrawIconWater>:
void DrawIconWater (int x, int y){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
	  lcdDrawImage(x, y, &bmwater);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	b291      	uxth	r1, r2
 8003f7a:	4a04      	ldr	r2, [pc, #16]	@ (8003f8c <DrawIconWater+0x24>)
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 fc57 	bl	8005830 <lcdDrawImage>
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	0804abd8 	.word	0x0804abd8

08003f90 <DrawIconClockTem>:
void DrawIconClockTem(int x , int y){
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmclocktem);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	b291      	uxth	r1, r2
 8003fa2:	4a04      	ldr	r2, [pc, #16]	@ (8003fb4 <DrawIconClockTem+0x24>)
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f001 fc43 	bl	8005830 <lcdDrawImage>
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	0803f334 	.word	0x0803f334

08003fb8 <DrawIconClockHumi>:
void DrawIconClockHumi(int x , int y){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmclockhumi);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	b291      	uxth	r1, r2
 8003fca:	4a04      	ldr	r2, [pc, #16]	@ (8003fdc <DrawIconClockHumi+0x24>)
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 fc2f 	bl	8005830 <lcdDrawImage>
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	0803e770 	.word	0x0803e770

08003fe0 <DrawIconCloudRate>:
void DrawIconCloudRate(int x , int y){
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmcloudrate);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	b291      	uxth	r1, r2
 8003ff2:	4a04      	ldr	r2, [pc, #16]	@ (8004004 <DrawIconCloudRate+0x24>)
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 fc1b 	bl	8005830 <lcdDrawImage>
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	080403a8 	.word	0x080403a8

08004008 <DrawIconLocation>:
void DrawIconLocation(int x , int y){
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmlocation);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	b29b      	uxth	r3, r3
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	b291      	uxth	r1, r2
 800401a:	4a04      	ldr	r2, [pc, #16]	@ (800402c <DrawIconLocation+0x24>)
 800401c:	4618      	mov	r0, r3
 800401e:	f001 fc07 	bl	8005830 <lcdDrawImage>
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	08049484 	.word	0x08049484

08004030 <DrawIconNext1>:
void DrawIconNext(int x , int y){
	lcdDrawImage(x, y, &bmnext);
}
void DrawIconNext1(int x , int y){
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmnext1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	b29b      	uxth	r3, r3
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	b291      	uxth	r1, r2
 8004042:	4a04      	ldr	r2, [pc, #16]	@ (8004054 <DrawIconNext1+0x24>)
 8004044:	4618      	mov	r0, r3
 8004046:	f001 fbf3 	bl	8005830 <lcdDrawImage>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	08049d98 	.word	0x08049d98

08004058 <DrawIconBack>:
void DrawIconBack(int x , int y){
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmBack);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	b29b      	uxth	r3, r3
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	b291      	uxth	r1, r2
 800406a:	4a04      	ldr	r2, [pc, #16]	@ (800407c <DrawIconBack+0x24>)
 800406c:	4618      	mov	r0, r3
 800406e:	f001 fbdf 	bl	8005830 <lcdDrawImage>
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	0800fd74 	.word	0x0800fd74

08004080 <DrawIconOk>:
void DrawIconOk(int x , int y){
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmOK);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	b29b      	uxth	r3, r3
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	b291      	uxth	r1, r2
 8004092:	4a04      	ldr	r2, [pc, #16]	@ (80040a4 <DrawIconOk+0x24>)
 8004094:	4618      	mov	r0, r3
 8004096:	f001 fbcb 	bl	8005830 <lcdDrawImage>
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	0803cf20 	.word	0x0803cf20

080040a8 <DrawBackGround>:
void DrawBackGround(int x , int y){
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
	lcdDrawImage(x, y, &bmCity);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	b291      	uxth	r1, r2
 80040ba:	4a04      	ldr	r2, [pc, #16]	@ (80040cc <DrawBackGround+0x24>)
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 fbb7 	bl	8005830 <lcdDrawImage>
}
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	08035580 	.word	0x08035580

080040d0 <OneDay>:
void DrawConfirm(int x , int y){
	lcdDrawImage(x, y, &bmconfirm);
}
void OneDay(int x , int y, int MinTem , int MaxTem , int wind , char day_name[] , int day_code , char date[]){
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
	  lcdSetCursor(x + 7 , y - 6);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3307      	adds	r3, #7
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b06      	subs	r3, #6
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	4619      	mov	r1, r3
 80040f0:	4610      	mov	r0, r2
 80040f2:	f001 fdb7 	bl	8005c64 <lcdSetCursor>
	  lcdSetTextFont(&Font12);
 80040f6:	486f      	ldr	r0, [pc, #444]	@ (80042b4 <OneDay+0x1e4>)
 80040f8:	f001 fd24 	bl	8005b44 <lcdSetTextFont>
	  lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 80040fc:	f249 517f 	movw	r1, #38271	@ 0x957f
 8004100:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004104:	f001 fd2e 	bl	8005b64 <lcdSetTextColor>
	  lcdPrintf(day_name);
 8004108:	69f8      	ldr	r0, [r7, #28]
 800410a:	f001 fc8f 	bl	8005a2c <lcdPrintf>
	  lcdSetCursor(x , y + 7);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	b29a      	uxth	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	b29b      	uxth	r3, r3
 8004116:	3307      	adds	r3, #7
 8004118:	b29b      	uxth	r3, r3
 800411a:	4619      	mov	r1, r3
 800411c:	4610      	mov	r0, r2
 800411e:	f001 fda1 	bl	8005c64 <lcdSetCursor>
	  lcdPrintf(date);
 8004122:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004124:	f001 fc82 	bl	8005a2c <lcdPrintf>
	  lcdSetTextFont(&Font16);
 8004128:	4863      	ldr	r0, [pc, #396]	@ (80042b8 <OneDay+0x1e8>)
 800412a:	f001 fd0b 	bl	8005b44 <lcdSetTextFont>

	  lcdSetCursor(x + 103, y);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	b29b      	uxth	r3, r3
 8004132:	3367      	adds	r3, #103	@ 0x67
 8004134:	b29b      	uxth	r3, r3
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	b292      	uxth	r2, r2
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f001 fd91 	bl	8005c64 <lcdSetCursor>
	  if (MinTem < 10){
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b09      	cmp	r3, #9
 8004146:	dc0e      	bgt.n	8004166 <OneDay+0x96>
		  if (MaxTem < 10){
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b09      	cmp	r3, #9
 800414c:	dc05      	bgt.n	800415a <OneDay+0x8a>
			lcdPrintf("0%d-0%d", MinTem , MaxTem);
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	485a      	ldr	r0, [pc, #360]	@ (80042bc <OneDay+0x1ec>)
 8004154:	f001 fc6a 	bl	8005a2c <lcdPrintf>
 8004158:	e013      	b.n	8004182 <OneDay+0xb2>
		  }
		  else {
			  lcdPrintf("0%d-%d", MinTem , MaxTem);
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4858      	ldr	r0, [pc, #352]	@ (80042c0 <OneDay+0x1f0>)
 8004160:	f001 fc64 	bl	8005a2c <lcdPrintf>
 8004164:	e00d      	b.n	8004182 <OneDay+0xb2>
		  }
	  }
	  else{
		  if (MaxTem < 10){
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b09      	cmp	r3, #9
 800416a:	dc05      	bgt.n	8004178 <OneDay+0xa8>
			  lcdPrintf("%d-0%d", MinTem , MaxTem);
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4854      	ldr	r0, [pc, #336]	@ (80042c4 <OneDay+0x1f4>)
 8004172:	f001 fc5b 	bl	8005a2c <lcdPrintf>
 8004176:	e004      	b.n	8004182 <OneDay+0xb2>
		  }
		  else {
			  lcdPrintf("%d-%d", MinTem , MaxTem);
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4852      	ldr	r0, [pc, #328]	@ (80042c8 <OneDay+0x1f8>)
 800417e:	f001 fc55 	bl	8005a2c <lcdPrintf>
		  }
	  }

	  lcdDrawCircle(x + 163, y - 2, 2, COLOR_WHITE);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	b29b      	uxth	r3, r3
 8004186:	33a3      	adds	r3, #163	@ 0xa3
 8004188:	b29b      	uxth	r3, r3
 800418a:	b218      	sxth	r0, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b02      	subs	r3, #2
 8004192:	b29b      	uxth	r3, r3
 8004194:	b219      	sxth	r1, r3
 8004196:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800419a:	2202      	movs	r2, #2
 800419c:	f001 f8d9 	bl	8005352 <lcdDrawCircle>
	  lcdDrawCircle(x + 163, y - 2, 3, COLOR_WHITE);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	33a3      	adds	r3, #163	@ 0xa3
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	b218      	sxth	r0, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b02      	subs	r3, #2
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	b219      	sxth	r1, r3
 80041b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041b8:	2203      	movs	r2, #3
 80041ba:	f001 f8ca 	bl	8005352 <lcdDrawCircle>

	  if (day_code <= 57){
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	2b39      	cmp	r3, #57	@ 0x39
 80041c2:	dc09      	bgt.n	80041d8 <OneDay+0x108>
		  CloudSun(x + 51, y + 5);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	3305      	adds	r3, #5
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f7fe fc6e 	bl	8002ab2 <CloudSun>
 80041d6:	e025      	b.n	8004224 <OneDay+0x154>
	  }
	  else if (day_code <= 67) {
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	2b43      	cmp	r3, #67	@ 0x43
 80041dc:	dc06      	bgt.n	80041ec <OneDay+0x11c>
		  //Rain
		  CloudRain(x + 51 , y );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3333      	adds	r3, #51	@ 0x33
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe fb73 	bl	80028d0 <CloudRain>
 80041ea:	e01b      	b.n	8004224 <OneDay+0x154>
	  }
	  else if (day_code < 95){
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	2b5e      	cmp	r3, #94	@ 0x5e
 80041f0:	dc0f      	bgt.n	8004212 <OneDay+0x142>
		  if (day_code ==80 || day_code == 81 || day_code == 82){
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	2b50      	cmp	r3, #80	@ 0x50
 80041f6:	d005      	beq.n	8004204 <OneDay+0x134>
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	2b51      	cmp	r3, #81	@ 0x51
 80041fc:	d002      	beq.n	8004204 <OneDay+0x134>
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	2b52      	cmp	r3, #82	@ 0x52
 8004202:	d10f      	bne.n	8004224 <OneDay+0x154>
			  //Rain
			  CloudRain(x + 51 , y );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3333      	adds	r3, #51	@ 0x33
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fb60 	bl	80028d0 <CloudRain>
 8004210:	e008      	b.n	8004224 <OneDay+0x154>
			  //Snow
		  }
	  }
	  else{
		  //Thunder
		  CloudThunder (x + 51, y - 1);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	3b01      	subs	r3, #1
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f7fe fc87 	bl	8002b32 <CloudThunder>
	  }

	  if (wind >= 10){
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b09      	cmp	r3, #9
 8004228:	dd20      	ble.n	800426c <OneDay+0x19c>
		  lcdSetCursor(x + 178, y);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	b29b      	uxth	r3, r3
 800422e:	33b2      	adds	r3, #178	@ 0xb2
 8004230:	b29b      	uxth	r3, r3
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	b292      	uxth	r2, r2
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f001 fd13 	bl	8005c64 <lcdSetCursor>
		  lcdPrintf("%d",wind);
 800423e:	69b9      	ldr	r1, [r7, #24]
 8004240:	4822      	ldr	r0, [pc, #136]	@ (80042cc <OneDay+0x1fc>)
 8004242:	f001 fbf3 	bl	8005a2c <lcdPrintf>

		  lcdSetCursor(x + 202, y+1);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	b29b      	uxth	r3, r3
 800424a:	33ca      	adds	r3, #202	@ 0xca
 800424c:	b29a      	uxth	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	b29b      	uxth	r3, r3
 8004252:	3301      	adds	r3, #1
 8004254:	b29b      	uxth	r3, r3
 8004256:	4619      	mov	r1, r3
 8004258:	4610      	mov	r0, r2
 800425a:	f001 fd03 	bl	8005c64 <lcdSetCursor>
		  lcdSetTextFont(&Font12);
 800425e:	4815      	ldr	r0, [pc, #84]	@ (80042b4 <OneDay+0x1e4>)
 8004260:	f001 fc70 	bl	8005b44 <lcdSetTextFont>
		  lcdPrintf("km/h");
 8004264:	481a      	ldr	r0, [pc, #104]	@ (80042d0 <OneDay+0x200>)
 8004266:	f001 fbe1 	bl	8005a2c <lcdPrintf>
		  lcdSetTextFont(&Font12);
		  lcdPrintf("km/h");
//		  lcdDrawCircle(x + 209, y + 2, 2, COLOR_WHITE);
//		  lcdDrawCircle(x + 215, y + 10, 2, COLOR_WHITE);
	  }
}
 800426a:	e01f      	b.n	80042ac <OneDay+0x1dc>
		  lcdSetCursor(x + 178, y);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	b29b      	uxth	r3, r3
 8004270:	33b2      	adds	r3, #178	@ 0xb2
 8004272:	b29b      	uxth	r3, r3
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	b292      	uxth	r2, r2
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f001 fcf2 	bl	8005c64 <lcdSetCursor>
		  lcdPrintf("0%d",wind);
 8004280:	69b9      	ldr	r1, [r7, #24]
 8004282:	4814      	ldr	r0, [pc, #80]	@ (80042d4 <OneDay+0x204>)
 8004284:	f001 fbd2 	bl	8005a2c <lcdPrintf>
		  lcdSetCursor(x + 202, y+1);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	b29b      	uxth	r3, r3
 800428c:	33ca      	adds	r3, #202	@ 0xca
 800428e:	b29a      	uxth	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	b29b      	uxth	r3, r3
 8004294:	3301      	adds	r3, #1
 8004296:	b29b      	uxth	r3, r3
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f001 fce2 	bl	8005c64 <lcdSetCursor>
		  lcdSetTextFont(&Font12);
 80042a0:	4804      	ldr	r0, [pc, #16]	@ (80042b4 <OneDay+0x1e4>)
 80042a2:	f001 fc4f 	bl	8005b44 <lcdSetTextFont>
		  lcdPrintf("km/h");
 80042a6:	480a      	ldr	r0, [pc, #40]	@ (80042d0 <OneDay+0x200>)
 80042a8:	f001 fbc0 	bl	8005a2c <lcdPrintf>
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	2000000c 	.word	0x2000000c
 80042b8:	20000014 	.word	0x20000014
 80042bc:	0800f1b0 	.word	0x0800f1b0
 80042c0:	0800f1b8 	.word	0x0800f1b8
 80042c4:	0800f1c0 	.word	0x0800f1c0
 80042c8:	0800f1c8 	.word	0x0800f1c8
 80042cc:	0800f104 	.word	0x0800f104
 80042d0:	0800f1d0 	.word	0x0800f1d0
 80042d4:	0800f1d8 	.word	0x0800f1d8

080042d8 <Screen0>:

void Screen0(){
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
	lcdFillRGB(COLOR_THEME_SKYBLUE_BASE);
 80042dc:	f249 507f 	movw	r0, #38271	@ 0x957f
 80042e0:	f000 fd40 	bl	8004d64 <lcdFillRGB>
	lcdDrawImage(60, 100, &bmLoading);
 80042e4:	4a03      	ldr	r2, [pc, #12]	@ (80042f4 <Screen0+0x1c>)
 80042e6:	2164      	movs	r1, #100	@ 0x64
 80042e8:	203c      	movs	r0, #60	@ 0x3c
 80042ea:	f001 faa1 	bl	8005830 <lcdDrawImage>
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	0803c60c 	.word	0x0803c60c

080042f8 <Screen1>:
void Screen1(int TempMax , int TempMin , int current_temp ,int current_humi , int current_code , int current_cloud , char * current_time , char * current_date , int choice){
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af04      	add	r7, sp, #16
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]


	lcdFillRGB(COLOR_THEME_SKYBLUE_BASE);
 8004306:	f249 507f 	movw	r0, #38271	@ 0x957f
 800430a:	f000 fd2b 	bl	8004d64 <lcdFillRGB>
	// Divide layout

	lcdDrawRoundRect(158, 25, 40, 40, 5, COLOR_THEME_SKYBLUE_SHADOW);
 800430e:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	2305      	movs	r3, #5
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	2328      	movs	r3, #40	@ 0x28
 800431a:	2228      	movs	r2, #40	@ 0x28
 800431c:	2119      	movs	r1, #25
 800431e:	209e      	movs	r0, #158	@ 0x9e
 8004320:	f000 fea2 	bl	8005068 <lcdDrawRoundRect>
	DrawIconLocation(161, 28);
 8004324:	211c      	movs	r1, #28
 8004326:	20a1      	movs	r0, #161	@ 0xa1
 8004328:	f7ff fe6e 	bl	8004008 <DrawIconLocation>

	lcdDrawRoundRect(199, 25, 40, 40, 5, COLOR_THEME_SKYBLUE_SHADOW);
 800432c:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	2305      	movs	r3, #5
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2328      	movs	r3, #40	@ 0x28
 8004338:	2228      	movs	r2, #40	@ 0x28
 800433a:	2119      	movs	r1, #25
 800433c:	20c7      	movs	r0, #199	@ 0xc7
 800433e:	f000 fe93 	bl	8005068 <lcdDrawRoundRect>
	DrawIconNext1(202, 28);
 8004342:	211c      	movs	r1, #28
 8004344:	20ca      	movs	r0, #202	@ 0xca
 8004346:	f7ff fe73 	bl	8004030 <DrawIconNext1>

	lcdDrawRoundRect(76, 70, 163, 110, 6, COLOR_THEME_SKYBLUE_SHADOW);
 800434a:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	2306      	movs	r3, #6
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	236e      	movs	r3, #110	@ 0x6e
 8004356:	22a3      	movs	r2, #163	@ 0xa3
 8004358:	2146      	movs	r1, #70	@ 0x46
 800435a:	204c      	movs	r0, #76	@ 0x4c
 800435c:	f000 fe84 	bl	8005068 <lcdDrawRoundRect>

	lcdDrawRoundRect(1, 70, 73, 110, 6, COLOR_THEME_SKYBLUE_SHADOW);
 8004360:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	2306      	movs	r3, #6
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	236e      	movs	r3, #110	@ 0x6e
 800436c:	2249      	movs	r2, #73	@ 0x49
 800436e:	2146      	movs	r1, #70	@ 0x46
 8004370:	2001      	movs	r0, #1
 8004372:	f000 fe79 	bl	8005068 <lcdDrawRoundRect>

	lcdDrawRoundRect(1, 187, 238, 50, 6, COLOR_THEME_SKYBLUE_SHADOW);
 8004376:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 800437a:	9301      	str	r3, [sp, #4]
 800437c:	2306      	movs	r3, #6
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	2332      	movs	r3, #50	@ 0x32
 8004382:	22ee      	movs	r2, #238	@ 0xee
 8004384:	21bb      	movs	r1, #187	@ 0xbb
 8004386:	2001      	movs	r0, #1
 8004388:	f000 fe6e 	bl	8005068 <lcdDrawRoundRect>



	lcdDrawRoundRect(1, 240, 150, 78, 6, COLOR_THEME_SKYBLUE_SHADOW);
 800438c:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	2306      	movs	r3, #6
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	234e      	movs	r3, #78	@ 0x4e
 8004398:	2296      	movs	r2, #150	@ 0x96
 800439a:	21f0      	movs	r1, #240	@ 0xf0
 800439c:	2001      	movs	r0, #1
 800439e:	f000 fe63 	bl	8005068 <lcdDrawRoundRect>
	lcdDrawLine(1 , 262 , 150 , 262 , COLOR_BLACK);
 80043a2:	2300      	movs	r3, #0
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80043aa:	2296      	movs	r2, #150	@ 0x96
 80043ac:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80043b0:	2001      	movs	r0, #1
 80043b2:	f000 fdbb 	bl	8004f2c <lcdDrawLine>

	lcdDrawLine(76, 262, 76, 317, COLOR_BLACK);
 80043b6:	2300      	movs	r3, #0
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	f240 133d 	movw	r3, #317	@ 0x13d
 80043be:	224c      	movs	r2, #76	@ 0x4c
 80043c0:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80043c4:	204c      	movs	r0, #76	@ 0x4c
 80043c6:	f000 fdb1 	bl	8004f2c <lcdDrawLine>

	lcdDrawRoundRect(155, 240, 84, 78, 6, COLOR_THEME_SKYBLUE_SHADOW);
 80043ca:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	2306      	movs	r3, #6
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	234e      	movs	r3, #78	@ 0x4e
 80043d6:	2254      	movs	r2, #84	@ 0x54
 80043d8:	21f0      	movs	r1, #240	@ 0xf0
 80043da:	209b      	movs	r0, #155	@ 0x9b
 80043dc:	f000 fe44 	bl	8005068 <lcdDrawRoundRect>
	lcdDrawLine(155 , 262 , 239 , 262 , COLOR_BLACK);
 80043e0:	2300      	movs	r3, #0
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80043e8:	22ef      	movs	r2, #239	@ 0xef
 80043ea:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80043ee:	209b      	movs	r0, #155	@ 0x9b
 80043f0:	f000 fd9c 	bl	8004f2c <lcdDrawLine>


	// Cac text va icon ban dau
	TextTitle( 22 , 2);
 80043f4:	2102      	movs	r1, #2
 80043f6:	2016      	movs	r0, #22
 80043f8:	f7fe fa48 	bl	800288c <TextTitle>
	TextTime(5, 25 , current_time);
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	2119      	movs	r1, #25
 8004400:	2005      	movs	r0, #5
 8004402:	f7ff fbfb 	bl	8003bfc <TextTime>
	TextDate(5, 40 , current_date);
 8004406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004408:	2128      	movs	r1, #40	@ 0x28
 800440a:	2005      	movs	r0, #5
 800440c:	f7ff fc1a 	bl	8003c44 <TextDate>
	TextLocation(5, 55 , choice);
 8004410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004412:	2137      	movs	r1, #55	@ 0x37
 8004414:	2005      	movs	r0, #5
 8004416:	f7ff fc39 	bl	8003c8c <TextLocation>
	DrawCloud (3 , 80);
 800441a:	2150      	movs	r1, #80	@ 0x50
 800441c:	2003      	movs	r0, #3
 800441e:	f7fe fa21 	bl	8002864 <DrawCloud>
//	TextUV(5 , 160 , 1.2);

	// Ve icon nhiet do va hien thi nhiet do
	DrawThermometer(95, 80 , 40, 12, 25, COLOR_BLACK, COLOR_RED);
 8004422:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004426:	9302      	str	r3, [sp, #8]
 8004428:	2300      	movs	r3, #0
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	2319      	movs	r3, #25
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	230c      	movs	r3, #12
 8004432:	2228      	movs	r2, #40	@ 0x28
 8004434:	2150      	movs	r1, #80	@ 0x50
 8004436:	205f      	movs	r0, #95	@ 0x5f
 8004438:	f7ff f916 	bl	8003668 <DrawThermometer>
	TextTemperature16(120, 95, current_temp);
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	215f      	movs	r1, #95	@ 0x5f
 8004440:	2078      	movs	r0, #120	@ 0x78
 8004442:	f7ff fa95 	bl	8003970 <TextTemperature16>

	if (current_temp >= 29){
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b1c      	cmp	r3, #28
 800444a:	dd04      	ble.n	8004456 <Screen1+0x15e>
	  DrawIconHot(205 , 85);
 800444c:	2155      	movs	r1, #85	@ 0x55
 800444e:	20cd      	movs	r0, #205	@ 0xcd
 8004450:	f7ff fd4e 	bl	8003ef0 <DrawIconHot>
 8004454:	e00b      	b.n	800446e <Screen1+0x176>
	}
	else if ( current_temp < 20){
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b13      	cmp	r3, #19
 800445a:	dc04      	bgt.n	8004466 <Screen1+0x16e>
	  DrawIconIce(205 , 85);
 800445c:	2155      	movs	r1, #85	@ 0x55
 800445e:	20cd      	movs	r0, #205	@ 0xcd
 8004460:	f7ff fd5a 	bl	8003f18 <DrawIconIce>
 8004464:	e003      	b.n	800446e <Screen1+0x176>
	}
	else {
	  DrawIconTree(205 , 85);
 8004466:	2155      	movs	r1, #85	@ 0x55
 8004468:	20cd      	movs	r0, #205	@ 0xcd
 800446a:	f7ff fd69 	bl	8003f40 <DrawIconTree>
	}


	// Ve icon do am va hien thi do am
	DrawIconWater(205 , 138);
 800446e:	218a      	movs	r1, #138	@ 0x8a
 8004470:	20cd      	movs	r0, #205	@ 0xcd
 8004472:	f7ff fd79 	bl	8003f68 <DrawIconWater>
	TextHumidyti16 (140, 146 , current_humi);
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	2192      	movs	r1, #146	@ 0x92
 800447a:	208c      	movs	r0, #140	@ 0x8c
 800447c:	f7ff fb4c 	bl	8003b18 <TextHumidyti16>
	DrawIconHumidyti1(77, 130);
 8004480:	2182      	movs	r1, #130	@ 0x82
 8004482:	204d      	movs	r0, #77	@ 0x4d
 8004484:	f7ff fa10 	bl	80038a8 <DrawIconHumidyti1>

	// Hien thi nhiet do max min trong ngay
	WeatherDay(0, 190 , TempMax , TempMin , current_code , current_temp);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	21be      	movs	r1, #190	@ 0xbe
 8004496:	2000      	movs	r0, #0
 8004498:	f7fe fe62 	bl	8003160 <WeatherDay>

	// Hien thi sensor
	TextSensor(5, 245 , current_temp , current_humi);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	ee07 3a10 	vmov	s14, r3
 80044ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044b0:	eef0 0a47 	vmov.f32	s1, s14
 80044b4:	eeb0 0a67 	vmov.f32	s0, s15
 80044b8:	21f5      	movs	r1, #245	@ 0xf5
 80044ba:	2005      	movs	r0, #5
 80044bc:	f7ff fc30 	bl	8003d20 <TextSensor>
	TextCloudRate(159, 245, current_cloud);
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	21f5      	movs	r1, #245	@ 0xf5
 80044c4:	209f      	movs	r0, #159	@ 0x9f
 80044c6:	f7ff fccd 	bl	8003e64 <TextCloudRate>
	DrawIconClockTem(14 , 265);
 80044ca:	f240 1109 	movw	r1, #265	@ 0x109
 80044ce:	200e      	movs	r0, #14
 80044d0:	f7ff fd5e 	bl	8003f90 <DrawIconClockTem>
	DrawIconClockHumi(88, 265);
 80044d4:	f240 1109 	movw	r1, #265	@ 0x109
 80044d8:	2058      	movs	r0, #88	@ 0x58
 80044da:	f7ff fd6d 	bl	8003fb8 <DrawIconClockHumi>
	DrawIconCloudRate(170, 265);
 80044de:	f240 1109 	movw	r1, #265	@ 0x109
 80044e2:	20aa      	movs	r0, #170	@ 0xaa
 80044e4:	f7ff fd7c 	bl	8003fe0 <DrawIconCloudRate>



}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <Screen2>:

void Screen2(int Max_temp[] , int Min_temp[] , int day_code[] , char day_name[][4] , int Wind_speed[] , char date [][6] , char * current_time , char * current_date , int choice){
 80044f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f2:	b08d      	sub	sp, #52	@ 0x34
 80044f4:	af04      	add	r7, sp, #16
 80044f6:	6178      	str	r0, [r7, #20]
 80044f8:	6139      	str	r1, [r7, #16]
 80044fa:	60fa      	str	r2, [r7, #12]
 80044fc:	60bb      	str	r3, [r7, #8]

	lcdFillRGB(COLOR_THEME_SKYBLUE_BASE);
 80044fe:	f249 507f 	movw	r0, #38271	@ 0x957f
 8004502:	f000 fc2f 	bl	8004d64 <lcdFillRGB>

	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8004506:	f249 517f 	movw	r1, #38271	@ 0x957f
 800450a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800450e:	f001 fb29 	bl	8005b64 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 8004512:	4870      	ldr	r0, [pc, #448]	@ (80046d4 <Screen2+0x1e4>)
 8004514:	f001 fb16 	bl	8005b44 <lcdSetTextFont>
	lcdSetCursor(28, 6);
 8004518:	2106      	movs	r1, #6
 800451a:	201c      	movs	r0, #28
 800451c:	f001 fba2 	bl	8005c64 <lcdSetCursor>
	lcdPrintf("Forecast Days");
 8004520:	486d      	ldr	r0, [pc, #436]	@ (80046d8 <Screen2+0x1e8>)
 8004522:	f001 fa83 	bl	8005a2c <lcdPrintf>

	//
	lcdDrawRoundRect(199, 23, 40, 40, 5, COLOR_THEME_SKYBLUE_SHADOW);
 8004526:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	2305      	movs	r3, #5
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	2328      	movs	r3, #40	@ 0x28
 8004532:	2228      	movs	r2, #40	@ 0x28
 8004534:	2117      	movs	r1, #23
 8004536:	20c7      	movs	r0, #199	@ 0xc7
 8004538:	f000 fd96 	bl	8005068 <lcdDrawRoundRect>
	DrawIconBack(202, 26);
 800453c:	211a      	movs	r1, #26
 800453e:	20ca      	movs	r0, #202	@ 0xca
 8004540:	f7ff fd8a 	bl	8004058 <DrawIconBack>
	TextTime(5, 26 , current_time);
 8004544:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004546:	211a      	movs	r1, #26
 8004548:	2005      	movs	r0, #5
 800454a:	f7ff fb57 	bl	8003bfc <TextTime>
	TextDate(5, 38 , current_date);
 800454e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004550:	2126      	movs	r1, #38	@ 0x26
 8004552:	2005      	movs	r0, #5
 8004554:	f7ff fb76 	bl	8003c44 <TextDate>
	TextLocation(5, 50 , choice);
 8004558:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800455a:	2132      	movs	r1, #50	@ 0x32
 800455c:	2005      	movs	r0, #5
 800455e:	f7ff fb95 	bl	8003c8c <TextLocation>


	  DrawIconDate(5, 65);
 8004562:	2141      	movs	r1, #65	@ 0x41
 8004564:	2005      	movs	r0, #5
 8004566:	f7ff f9b3 	bl	80038d0 <DrawIconDate>
	  DrawIconWeather(55, 65);
 800456a:	2141      	movs	r1, #65	@ 0x41
 800456c:	2037      	movs	r0, #55	@ 0x37
 800456e:	f7ff f9c3 	bl	80038f8 <DrawIconWeather>
	  DrawIconTem(120, 65);
 8004572:	2141      	movs	r1, #65	@ 0x41
 8004574:	2078      	movs	r0, #120	@ 0x78
 8004576:	f7ff f9d3 	bl	8003920 <DrawIconTem>
	  DrawIconWind(195, 72);
 800457a:	2148      	movs	r1, #72	@ 0x48
 800457c:	20c3      	movs	r0, #195	@ 0xc3
 800457e:	f7ff f9e3 	bl	8003948 <DrawIconWind>

	  lcdDrawLine(0, 65, 0, 319, COLOR_BLACK);
 8004582:	2300      	movs	r3, #0
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	f240 133f 	movw	r3, #319	@ 0x13f
 800458a:	2200      	movs	r2, #0
 800458c:	2141      	movs	r1, #65	@ 0x41
 800458e:	2000      	movs	r0, #0
 8004590:	f000 fccc 	bl	8004f2c <lcdDrawLine>
	  lcdDrawLine(239, 65, 239, 319, COLOR_BLACK);
 8004594:	2300      	movs	r3, #0
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	f240 133f 	movw	r3, #319	@ 0x13f
 800459c:	22ef      	movs	r2, #239	@ 0xef
 800459e:	2141      	movs	r1, #65	@ 0x41
 80045a0:	20ef      	movs	r0, #239	@ 0xef
 80045a2:	f000 fcc3 	bl	8004f2c <lcdDrawLine>
	  lcdDrawLine(50, 65, 50, 319, COLOR_BLACK);
 80045a6:	2300      	movs	r3, #0
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	f240 133f 	movw	r3, #319	@ 0x13f
 80045ae:	2232      	movs	r2, #50	@ 0x32
 80045b0:	2141      	movs	r1, #65	@ 0x41
 80045b2:	2032      	movs	r0, #50	@ 0x32
 80045b4:	f000 fcba 	bl	8004f2c <lcdDrawLine>
	  lcdDrawLine(100, 65, 100, 319, COLOR_BLACK);
 80045b8:	2300      	movs	r3, #0
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	f240 133f 	movw	r3, #319	@ 0x13f
 80045c0:	2264      	movs	r2, #100	@ 0x64
 80045c2:	2141      	movs	r1, #65	@ 0x41
 80045c4:	2064      	movs	r0, #100	@ 0x64
 80045c6:	f000 fcb1 	bl	8004f2c <lcdDrawLine>
	  lcdDrawLine(180, 65, 180, 319, COLOR_BLACK);
 80045ca:	2300      	movs	r3, #0
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	f240 133f 	movw	r3, #319	@ 0x13f
 80045d2:	22b4      	movs	r2, #180	@ 0xb4
 80045d4:	2141      	movs	r1, #65	@ 0x41
 80045d6:	20b4      	movs	r0, #180	@ 0xb4
 80045d8:	f000 fca8 	bl	8004f2c <lcdDrawLine>

	  lcdDrawLine(0, 65 , 239, 65  , COLOR_BLACK);
 80045dc:	2300      	movs	r3, #0
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2341      	movs	r3, #65	@ 0x41
 80045e2:	22ef      	movs	r2, #239	@ 0xef
 80045e4:	2141      	movs	r1, #65	@ 0x41
 80045e6:	2000      	movs	r0, #0
 80045e8:	f000 fca0 	bl	8004f2c <lcdDrawLine>
	  lcdDrawLine(0, 108, 239, 108 , COLOR_BLACK);
 80045ec:	2300      	movs	r3, #0
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	236c      	movs	r3, #108	@ 0x6c
 80045f2:	22ef      	movs	r2, #239	@ 0xef
 80045f4:	216c      	movs	r1, #108	@ 0x6c
 80045f6:	2000      	movs	r0, #0
 80045f8:	f000 fc98 	bl	8004f2c <lcdDrawLine>
	  lcdDrawLine(0, 143, 239, 143 , COLOR_BLACK);
 80045fc:	2300      	movs	r3, #0
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	238f      	movs	r3, #143	@ 0x8f
 8004602:	22ef      	movs	r2, #239	@ 0xef
 8004604:	218f      	movs	r1, #143	@ 0x8f
 8004606:	2000      	movs	r0, #0
 8004608:	f000 fc90 	bl	8004f2c <lcdDrawLine>
	  lcdDrawLine(0, 178, 239, 178 , COLOR_BLACK);
 800460c:	2300      	movs	r3, #0
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	23b2      	movs	r3, #178	@ 0xb2
 8004612:	22ef      	movs	r2, #239	@ 0xef
 8004614:	21b2      	movs	r1, #178	@ 0xb2
 8004616:	2000      	movs	r0, #0
 8004618:	f000 fc88 	bl	8004f2c <lcdDrawLine>
	  lcdDrawLine(0, 213, 239, 213 , COLOR_BLACK);
 800461c:	2300      	movs	r3, #0
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	23d5      	movs	r3, #213	@ 0xd5
 8004622:	22ef      	movs	r2, #239	@ 0xef
 8004624:	21d5      	movs	r1, #213	@ 0xd5
 8004626:	2000      	movs	r0, #0
 8004628:	f000 fc80 	bl	8004f2c <lcdDrawLine>
	  lcdDrawLine(0, 248, 239, 248 , COLOR_BLACK);
 800462c:	2300      	movs	r3, #0
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	23f8      	movs	r3, #248	@ 0xf8
 8004632:	22ef      	movs	r2, #239	@ 0xef
 8004634:	21f8      	movs	r1, #248	@ 0xf8
 8004636:	2000      	movs	r0, #0
 8004638:	f000 fc78 	bl	8004f2c <lcdDrawLine>
	  lcdDrawLine(0, 283, 239, 283 , COLOR_BLACK);
 800463c:	2300      	movs	r3, #0
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	f240 131b 	movw	r3, #283	@ 0x11b
 8004644:	22ef      	movs	r2, #239	@ 0xef
 8004646:	f240 111b 	movw	r1, #283	@ 0x11b
 800464a:	2000      	movs	r0, #0
 800464c:	f000 fc6e 	bl	8004f2c <lcdDrawLine>
	  for (int i = 1 ; i < 7 ; i++)
 8004650:	2301      	movs	r3, #1
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	e035      	b.n	80046c2 <Screen2+0x1d2>
	  {

		  OneDay(7, 85 + i * 35, Min_temp[i]  , Max_temp[i] , Wind_speed[i] , day_name[i] , day_code[i] , date[i]);
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	00da      	lsls	r2, r3, #3
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f103 0555 	add.w	r5, r3, #85	@ 0x55
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	681e      	ldr	r6, [r3, #0]
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4413      	add	r3, r2
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004682:	4413      	add	r3, r2
 8004684:	6819      	ldr	r1, [r3, #0]
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	18d0      	adds	r0, r2, r3
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	681c      	ldr	r4, [r3, #0]
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	4613      	mov	r3, r2
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4413      	add	r3, r2
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	461a      	mov	r2, r3
 80046a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a6:	4413      	add	r3, r2
 80046a8:	9303      	str	r3, [sp, #12]
 80046aa:	9402      	str	r4, [sp, #8]
 80046ac:	9001      	str	r0, [sp, #4]
 80046ae:	9100      	str	r1, [sp, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4632      	mov	r2, r6
 80046b4:	4629      	mov	r1, r5
 80046b6:	2007      	movs	r0, #7
 80046b8:	f7ff fd0a 	bl	80040d0 <OneDay>
	  for (int i = 1 ; i < 7 ; i++)
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	3301      	adds	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b06      	cmp	r3, #6
 80046c6:	ddc6      	ble.n	8004656 <Screen2+0x166>
	  }
}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	3724      	adds	r7, #36	@ 0x24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d2:	bf00      	nop
 80046d4:	2000001c 	.word	0x2000001c
 80046d8:	0800f1dc 	.word	0x0800f1dc

080046dc <Screen3>:
void Screen3(int choice)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	6078      	str	r0, [r7, #4]
	DrawBackGround(0, 0);
 80046e4:	2100      	movs	r1, #0
 80046e6:	2000      	movs	r0, #0
 80046e8:	f7ff fcde 	bl	80040a8 <DrawBackGround>
	lcdSetTextFont(&Font24);
 80046ec:	48b4      	ldr	r0, [pc, #720]	@ (80049c0 <Screen3+0x2e4>)
 80046ee:	f001 fa29 	bl	8005b44 <lcdSetTextFont>
	lcdFillRoundRect(35,6, 170, 27, 13  , COLOR_THEME_SKYBLUE_BASE);
 80046f2:	f249 537f 	movw	r3, #38271	@ 0x957f
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	230d      	movs	r3, #13
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	231b      	movs	r3, #27
 80046fe:	22aa      	movs	r2, #170	@ 0xaa
 8004700:	2106      	movs	r1, #6
 8004702:	2023      	movs	r0, #35	@ 0x23
 8004704:	f001 f82e 	bl	8005764 <lcdFillRoundRect>
	lcdDrawRoundRect(35,6, 170, 28, 13  , COLOR_BLACK);
 8004708:	2300      	movs	r3, #0
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	230d      	movs	r3, #13
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	231c      	movs	r3, #28
 8004712:	22aa      	movs	r2, #170	@ 0xaa
 8004714:	2106      	movs	r1, #6
 8004716:	2023      	movs	r0, #35	@ 0x23
 8004718:	f000 fca6 	bl	8005068 <lcdDrawRoundRect>
	lcdSetCursor(52, 9);
 800471c:	2109      	movs	r1, #9
 800471e:	2034      	movs	r0, #52	@ 0x34
 8004720:	f001 faa0 	bl	8005c64 <lcdSetCursor>

	lcdSetTextColor(COLOR_WHITE, COLOR_THEME_SKYBLUE_BASE);
 8004724:	f249 517f 	movw	r1, #38271	@ 0x957f
 8004728:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800472c:	f001 fa1a 	bl	8005b64 <lcdSetTextColor>
	lcdPrintf("Location");
 8004730:	48a4      	ldr	r0, [pc, #656]	@ (80049c4 <Screen3+0x2e8>)
 8004732:	f001 f97b 	bl	8005a2c <lcdPrintf>


	lcdFillRoundRect(20,50, 200, 35, 6, COLOR_LIGHTGREY);
 8004736:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800473a:	9301      	str	r3, [sp, #4]
 800473c:	2306      	movs	r3, #6
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	2323      	movs	r3, #35	@ 0x23
 8004742:	22c8      	movs	r2, #200	@ 0xc8
 8004744:	2132      	movs	r1, #50	@ 0x32
 8004746:	2014      	movs	r0, #20
 8004748:	f001 f80c 	bl	8005764 <lcdFillRoundRect>
	lcdFillRoundRect(20,95, 200, 35, 6, COLOR_LIGHTGREY);
 800474c:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	2306      	movs	r3, #6
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	2323      	movs	r3, #35	@ 0x23
 8004758:	22c8      	movs	r2, #200	@ 0xc8
 800475a:	215f      	movs	r1, #95	@ 0x5f
 800475c:	2014      	movs	r0, #20
 800475e:	f001 f801 	bl	8005764 <lcdFillRoundRect>
	lcdFillRoundRect(20,140, 200, 35, 6, COLOR_LIGHTGREY);
 8004762:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	2306      	movs	r3, #6
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	2323      	movs	r3, #35	@ 0x23
 800476e:	22c8      	movs	r2, #200	@ 0xc8
 8004770:	218c      	movs	r1, #140	@ 0x8c
 8004772:	2014      	movs	r0, #20
 8004774:	f000 fff6 	bl	8005764 <lcdFillRoundRect>
	lcdFillRoundRect(20,185, 200, 35, 6, COLOR_LIGHTGREY);
 8004778:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	2306      	movs	r3, #6
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	2323      	movs	r3, #35	@ 0x23
 8004784:	22c8      	movs	r2, #200	@ 0xc8
 8004786:	21b9      	movs	r1, #185	@ 0xb9
 8004788:	2014      	movs	r0, #20
 800478a:	f000 ffeb 	bl	8005764 <lcdFillRoundRect>
	lcdFillRoundRect(20,230, 200, 35, 6, COLOR_LIGHTGREY);
 800478e:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8004792:	9301      	str	r3, [sp, #4]
 8004794:	2306      	movs	r3, #6
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	2323      	movs	r3, #35	@ 0x23
 800479a:	22c8      	movs	r2, #200	@ 0xc8
 800479c:	21e6      	movs	r1, #230	@ 0xe6
 800479e:	2014      	movs	r0, #20
 80047a0:	f000 ffe0 	bl	8005764 <lcdFillRoundRect>

	lcdDrawRoundRect(20,50, 200, 36, 6, COLOR_BLACK);
 80047a4:	2300      	movs	r3, #0
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	2306      	movs	r3, #6
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2324      	movs	r3, #36	@ 0x24
 80047ae:	22c8      	movs	r2, #200	@ 0xc8
 80047b0:	2132      	movs	r1, #50	@ 0x32
 80047b2:	2014      	movs	r0, #20
 80047b4:	f000 fc58 	bl	8005068 <lcdDrawRoundRect>
	lcdDrawRoundRect(20,95, 200, 36, 6, COLOR_BLACK);
 80047b8:	2300      	movs	r3, #0
 80047ba:	9301      	str	r3, [sp, #4]
 80047bc:	2306      	movs	r3, #6
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	2324      	movs	r3, #36	@ 0x24
 80047c2:	22c8      	movs	r2, #200	@ 0xc8
 80047c4:	215f      	movs	r1, #95	@ 0x5f
 80047c6:	2014      	movs	r0, #20
 80047c8:	f000 fc4e 	bl	8005068 <lcdDrawRoundRect>
	lcdDrawRoundRect(20,140, 200, 36, 6, COLOR_BLACK);
 80047cc:	2300      	movs	r3, #0
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	2306      	movs	r3, #6
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	2324      	movs	r3, #36	@ 0x24
 80047d6:	22c8      	movs	r2, #200	@ 0xc8
 80047d8:	218c      	movs	r1, #140	@ 0x8c
 80047da:	2014      	movs	r0, #20
 80047dc:	f000 fc44 	bl	8005068 <lcdDrawRoundRect>
	lcdDrawRoundRect(20,185, 200, 36, 6, COLOR_BLACK);
 80047e0:	2300      	movs	r3, #0
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	2306      	movs	r3, #6
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	2324      	movs	r3, #36	@ 0x24
 80047ea:	22c8      	movs	r2, #200	@ 0xc8
 80047ec:	21b9      	movs	r1, #185	@ 0xb9
 80047ee:	2014      	movs	r0, #20
 80047f0:	f000 fc3a 	bl	8005068 <lcdDrawRoundRect>
	lcdDrawRoundRect(20,230, 200, 36, 6, COLOR_BLACK);
 80047f4:	2300      	movs	r3, #0
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	2306      	movs	r3, #6
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	2324      	movs	r3, #36	@ 0x24
 80047fe:	22c8      	movs	r2, #200	@ 0xc8
 8004800:	21e6      	movs	r1, #230	@ 0xe6
 8004802:	2014      	movs	r0, #20
 8004804:	f000 fc30 	bl	8005068 <lcdDrawRoundRect>

	lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8004808:	f24c 6118 	movw	r1, #50712	@ 0xc618
 800480c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004810:	f001 f9a8 	bl	8005b64 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 8004814:	486c      	ldr	r0, [pc, #432]	@ (80049c8 <Screen3+0x2ec>)
 8004816:	f001 f995 	bl	8005b44 <lcdSetTextFont>
	lcdSetCursor(25, 60);
 800481a:	213c      	movs	r1, #60	@ 0x3c
 800481c:	2019      	movs	r0, #25
 800481e:	f001 fa21 	bl	8005c64 <lcdSetCursor>
	lcdPrintf("TP.HCM");
 8004822:	486a      	ldr	r0, [pc, #424]	@ (80049cc <Screen3+0x2f0>)
 8004824:	f001 f902 	bl	8005a2c <lcdPrintf>



	lcdSetTextFont(&Font20);
 8004828:	4867      	ldr	r0, [pc, #412]	@ (80049c8 <Screen3+0x2ec>)
 800482a:	f001 f98b 	bl	8005b44 <lcdSetTextFont>
	lcdSetCursor(25, 105);
 800482e:	2169      	movs	r1, #105	@ 0x69
 8004830:	2019      	movs	r0, #25
 8004832:	f001 fa17 	bl	8005c64 <lcdSetCursor>
	lcdPrintf("Ha Noi");
 8004836:	4866      	ldr	r0, [pc, #408]	@ (80049d0 <Screen3+0x2f4>)
 8004838:	f001 f8f8 	bl	8005a2c <lcdPrintf>


	lcdSetTextFont(&Font20);
 800483c:	4862      	ldr	r0, [pc, #392]	@ (80049c8 <Screen3+0x2ec>)
 800483e:	f001 f981 	bl	8005b44 <lcdSetTextFont>
	lcdSetCursor(25, 150);
 8004842:	2196      	movs	r1, #150	@ 0x96
 8004844:	2019      	movs	r0, #25
 8004846:	f001 fa0d 	bl	8005c64 <lcdSetCursor>
	lcdPrintf("Hai Phong");
 800484a:	4862      	ldr	r0, [pc, #392]	@ (80049d4 <Screen3+0x2f8>)
 800484c:	f001 f8ee 	bl	8005a2c <lcdPrintf>


	lcdSetTextFont(&Font20);
 8004850:	485d      	ldr	r0, [pc, #372]	@ (80049c8 <Screen3+0x2ec>)
 8004852:	f001 f977 	bl	8005b44 <lcdSetTextFont>
	lcdSetCursor(25, 195);
 8004856:	21c3      	movs	r1, #195	@ 0xc3
 8004858:	2019      	movs	r0, #25
 800485a:	f001 fa03 	bl	8005c64 <lcdSetCursor>
	lcdPrintf("Can Tho");
 800485e:	485e      	ldr	r0, [pc, #376]	@ (80049d8 <Screen3+0x2fc>)
 8004860:	f001 f8e4 	bl	8005a2c <lcdPrintf>

	lcdSetTextFont(&Font20);
 8004864:	4858      	ldr	r0, [pc, #352]	@ (80049c8 <Screen3+0x2ec>)
 8004866:	f001 f96d 	bl	8005b44 <lcdSetTextFont>
	lcdSetCursor(25, 240);
 800486a:	21f0      	movs	r1, #240	@ 0xf0
 800486c:	2019      	movs	r0, #25
 800486e:	f001 f9f9 	bl	8005c64 <lcdSetCursor>
	lcdPrintf("Da Nang");
 8004872:	485a      	ldr	r0, [pc, #360]	@ (80049dc <Screen3+0x300>)
 8004874:	f001 f8da 	bl	8005a2c <lcdPrintf>

	if(choice == 1){
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d125      	bne.n	80048ca <Screen3+0x1ee>
		lcdFillRoundRect(20,50, 200, 35, 6, COLOR_GREEN);
 800487e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	2306      	movs	r3, #6
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2323      	movs	r3, #35	@ 0x23
 800488a:	22c8      	movs	r2, #200	@ 0xc8
 800488c:	2132      	movs	r1, #50	@ 0x32
 800488e:	2014      	movs	r0, #20
 8004890:	f000 ff68 	bl	8005764 <lcdFillRoundRect>
		lcdDrawRoundRect(20,50, 200, 36, 6, COLOR_BLACK);
 8004894:	2300      	movs	r3, #0
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	2306      	movs	r3, #6
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2324      	movs	r3, #36	@ 0x24
 800489e:	22c8      	movs	r2, #200	@ 0xc8
 80048a0:	2132      	movs	r1, #50	@ 0x32
 80048a2:	2014      	movs	r0, #20
 80048a4:	f000 fbe0 	bl	8005068 <lcdDrawRoundRect>
		lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 80048a8:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80048ac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80048b0:	f001 f958 	bl	8005b64 <lcdSetTextColor>
		lcdSetTextFont(&Font20);
 80048b4:	4844      	ldr	r0, [pc, #272]	@ (80049c8 <Screen3+0x2ec>)
 80048b6:	f001 f945 	bl	8005b44 <lcdSetTextFont>
		lcdSetCursor(25, 60);
 80048ba:	213c      	movs	r1, #60	@ 0x3c
 80048bc:	2019      	movs	r0, #25
 80048be:	f001 f9d1 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("TP.HCM");
 80048c2:	4842      	ldr	r0, [pc, #264]	@ (80049cc <Screen3+0x2f0>)
 80048c4:	f001 f8b2 	bl	8005a2c <lcdPrintf>
 80048c8:	e0b2      	b.n	8004a30 <Screen3+0x354>

	}
	else if(choice == 2){
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d125      	bne.n	800491c <Screen3+0x240>
		lcdFillRoundRect(20,95, 200, 35, 6, COLOR_GREEN);
 80048d0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	2306      	movs	r3, #6
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	2323      	movs	r3, #35	@ 0x23
 80048dc:	22c8      	movs	r2, #200	@ 0xc8
 80048de:	215f      	movs	r1, #95	@ 0x5f
 80048e0:	2014      	movs	r0, #20
 80048e2:	f000 ff3f 	bl	8005764 <lcdFillRoundRect>
		lcdDrawRoundRect(20,95, 200, 36, 6, COLOR_BLACK);
 80048e6:	2300      	movs	r3, #0
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	2306      	movs	r3, #6
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	2324      	movs	r3, #36	@ 0x24
 80048f0:	22c8      	movs	r2, #200	@ 0xc8
 80048f2:	215f      	movs	r1, #95	@ 0x5f
 80048f4:	2014      	movs	r0, #20
 80048f6:	f000 fbb7 	bl	8005068 <lcdDrawRoundRect>
		lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 80048fa:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80048fe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004902:	f001 f92f 	bl	8005b64 <lcdSetTextColor>
		lcdSetTextFont(&Font20);
 8004906:	4830      	ldr	r0, [pc, #192]	@ (80049c8 <Screen3+0x2ec>)
 8004908:	f001 f91c 	bl	8005b44 <lcdSetTextFont>
		lcdSetCursor(25, 105);
 800490c:	2169      	movs	r1, #105	@ 0x69
 800490e:	2019      	movs	r0, #25
 8004910:	f001 f9a8 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("Ha Noi");
 8004914:	482e      	ldr	r0, [pc, #184]	@ (80049d0 <Screen3+0x2f4>)
 8004916:	f001 f889 	bl	8005a2c <lcdPrintf>
 800491a:	e089      	b.n	8004a30 <Screen3+0x354>
	}
	else if(choice == 3){
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b03      	cmp	r3, #3
 8004920:	d125      	bne.n	800496e <Screen3+0x292>
		lcdFillRoundRect(20,140, 200, 35, 6, COLOR_GREEN);
 8004922:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004926:	9301      	str	r3, [sp, #4]
 8004928:	2306      	movs	r3, #6
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2323      	movs	r3, #35	@ 0x23
 800492e:	22c8      	movs	r2, #200	@ 0xc8
 8004930:	218c      	movs	r1, #140	@ 0x8c
 8004932:	2014      	movs	r0, #20
 8004934:	f000 ff16 	bl	8005764 <lcdFillRoundRect>
		lcdDrawRoundRect(20,140, 200, 36, 6, COLOR_BLACK);
 8004938:	2300      	movs	r3, #0
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	2306      	movs	r3, #6
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2324      	movs	r3, #36	@ 0x24
 8004942:	22c8      	movs	r2, #200	@ 0xc8
 8004944:	218c      	movs	r1, #140	@ 0x8c
 8004946:	2014      	movs	r0, #20
 8004948:	f000 fb8e 	bl	8005068 <lcdDrawRoundRect>
		lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 800494c:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8004950:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004954:	f001 f906 	bl	8005b64 <lcdSetTextColor>
		lcdSetTextFont(&Font20);
 8004958:	481b      	ldr	r0, [pc, #108]	@ (80049c8 <Screen3+0x2ec>)
 800495a:	f001 f8f3 	bl	8005b44 <lcdSetTextFont>
		lcdSetCursor(25, 150);
 800495e:	2196      	movs	r1, #150	@ 0x96
 8004960:	2019      	movs	r0, #25
 8004962:	f001 f97f 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("Hai Phong");
 8004966:	481b      	ldr	r0, [pc, #108]	@ (80049d4 <Screen3+0x2f8>)
 8004968:	f001 f860 	bl	8005a2c <lcdPrintf>
 800496c:	e060      	b.n	8004a30 <Screen3+0x354>
	}
	else if(choice == 4){
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b04      	cmp	r3, #4
 8004972:	d135      	bne.n	80049e0 <Screen3+0x304>
		lcdFillRoundRect(20,185, 200, 35, 6, COLOR_GREEN);
 8004974:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	2306      	movs	r3, #6
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	2323      	movs	r3, #35	@ 0x23
 8004980:	22c8      	movs	r2, #200	@ 0xc8
 8004982:	21b9      	movs	r1, #185	@ 0xb9
 8004984:	2014      	movs	r0, #20
 8004986:	f000 feed 	bl	8005764 <lcdFillRoundRect>
		lcdDrawRoundRect(20,185, 200, 36, 6, COLOR_BLACK);
 800498a:	2300      	movs	r3, #0
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	2306      	movs	r3, #6
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	2324      	movs	r3, #36	@ 0x24
 8004994:	22c8      	movs	r2, #200	@ 0xc8
 8004996:	21b9      	movs	r1, #185	@ 0xb9
 8004998:	2014      	movs	r0, #20
 800499a:	f000 fb65 	bl	8005068 <lcdDrawRoundRect>
		lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 800499e:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80049a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80049a6:	f001 f8dd 	bl	8005b64 <lcdSetTextColor>
		lcdSetTextFont(&Font20);
 80049aa:	4807      	ldr	r0, [pc, #28]	@ (80049c8 <Screen3+0x2ec>)
 80049ac:	f001 f8ca 	bl	8005b44 <lcdSetTextFont>
		lcdSetCursor(25, 195);
 80049b0:	21c3      	movs	r1, #195	@ 0xc3
 80049b2:	2019      	movs	r0, #25
 80049b4:	f001 f956 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("Can Tho");
 80049b8:	4807      	ldr	r0, [pc, #28]	@ (80049d8 <Screen3+0x2fc>)
 80049ba:	f001 f837 	bl	8005a2c <lcdPrintf>
 80049be:	e037      	b.n	8004a30 <Screen3+0x354>
 80049c0:	20000024 	.word	0x20000024
 80049c4:	0800f1ec 	.word	0x0800f1ec
 80049c8:	2000001c 	.word	0x2000001c
 80049cc:	0800f1f8 	.word	0x0800f1f8
 80049d0:	0800f200 	.word	0x0800f200
 80049d4:	0800f208 	.word	0x0800f208
 80049d8:	0800f214 	.word	0x0800f214
 80049dc:	0800f21c 	.word	0x0800f21c
	}
	else if(choice == 5){
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d124      	bne.n	8004a30 <Screen3+0x354>
		lcdFillRoundRect(20,230, 200, 35, 6, COLOR_GREEN);
 80049e6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	2306      	movs	r3, #6
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	2323      	movs	r3, #35	@ 0x23
 80049f2:	22c8      	movs	r2, #200	@ 0xc8
 80049f4:	21e6      	movs	r1, #230	@ 0xe6
 80049f6:	2014      	movs	r0, #20
 80049f8:	f000 feb4 	bl	8005764 <lcdFillRoundRect>
		lcdDrawRoundRect(20,230, 200, 36, 6, COLOR_BLACK);
 80049fc:	2300      	movs	r3, #0
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	2306      	movs	r3, #6
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2324      	movs	r3, #36	@ 0x24
 8004a06:	22c8      	movs	r2, #200	@ 0xc8
 8004a08:	21e6      	movs	r1, #230	@ 0xe6
 8004a0a:	2014      	movs	r0, #20
 8004a0c:	f000 fb2c 	bl	8005068 <lcdDrawRoundRect>
		lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 8004a10:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8004a14:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004a18:	f001 f8a4 	bl	8005b64 <lcdSetTextColor>
		lcdSetTextFont(&Font20);
 8004a1c:	4815      	ldr	r0, [pc, #84]	@ (8004a74 <Screen3+0x398>)
 8004a1e:	f001 f891 	bl	8005b44 <lcdSetTextFont>
		lcdSetCursor(25, 240);
 8004a22:	21f0      	movs	r1, #240	@ 0xf0
 8004a24:	2019      	movs	r0, #25
 8004a26:	f001 f91d 	bl	8005c64 <lcdSetCursor>
		lcdPrintf("Da Nang");
 8004a2a:	4813      	ldr	r0, [pc, #76]	@ (8004a78 <Screen3+0x39c>)
 8004a2c:	f000 fffe 	bl	8005a2c <lcdPrintf>
	}

	//
	lcdFillRoundRect(100, 275, 40, 39, 5, COLOR_THEME_SKYBLUE_BASE);
 8004a30:	f249 537f 	movw	r3, #38271	@ 0x957f
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	2305      	movs	r3, #5
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	2327      	movs	r3, #39	@ 0x27
 8004a3c:	2228      	movs	r2, #40	@ 0x28
 8004a3e:	f240 1113 	movw	r1, #275	@ 0x113
 8004a42:	2064      	movs	r0, #100	@ 0x64
 8004a44:	f000 fe8e 	bl	8005764 <lcdFillRoundRect>
	lcdDrawRoundRect(100, 275, 40, 40, 5, COLOR_THEME_SKYBLUE_SHADOW);
 8004a48:	f644 23cf 	movw	r3, #19151	@ 0x4acf
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	2305      	movs	r3, #5
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	2328      	movs	r3, #40	@ 0x28
 8004a54:	2228      	movs	r2, #40	@ 0x28
 8004a56:	f240 1113 	movw	r1, #275	@ 0x113
 8004a5a:	2064      	movs	r0, #100	@ 0x64
 8004a5c:	f000 fb04 	bl	8005068 <lcdDrawRoundRect>
	DrawIconOk(103, 278);
 8004a60:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8004a64:	2067      	movs	r0, #103	@ 0x67
 8004a66:	f7ff fb0b 	bl	8004080 <DrawIconOk>
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	2000001c 	.word	0x2000001c
 8004a78:	0800f21c 	.word	0x0800f21c

08004a7c <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8004a82:	2300      	movs	r3, #0
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	2301      	movs	r3, #1
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2101      	movs	r1, #1
 8004a90:	2000      	movs	r0, #0
 8004a92:	f001 f9a3 	bl	8005ddc <lcdBuildMemoryAccessControlConfig>
 8004a96:	4603      	mov	r3, r0
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4bae      	ldr	r3, [pc, #696]	@ (8004d54 <lcdInit+0x2d8>)
 8004a9c:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	2100      	movs	r1, #0
 8004aac:	2000      	movs	r0, #0
 8004aae:	f001 f995 	bl	8005ddc <lcdBuildMemoryAccessControlConfig>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4ba8      	ldr	r3, [pc, #672]	@ (8004d58 <lcdInit+0x2dc>)
 8004ab8:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8004aba:	2300      	movs	r3, #0
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	2301      	movs	r3, #1
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	2001      	movs	r0, #1
 8004aca:	f001 f987 	bl	8005ddc <lcdBuildMemoryAccessControlConfig>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4ba2      	ldr	r3, [pc, #648]	@ (8004d5c <lcdInit+0x2e0>)
 8004ad4:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	2301      	movs	r3, #1
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	f001 f979 	bl	8005ddc <lcdBuildMemoryAccessControlConfig>
 8004aea:	4603      	mov	r3, r0
 8004aec:	461a      	mov	r2, r3
 8004aee:	4b9c      	ldr	r3, [pc, #624]	@ (8004d60 <lcdInit+0x2e4>)
 8004af0:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 8004af2:	f001 f949 	bl	8005d88 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 8004af6:	2028      	movs	r0, #40	@ 0x28
 8004af8:	f001 f950 	bl	8005d9c <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 8004afc:	20cf      	movs	r0, #207	@ 0xcf
 8004afe:	f001 f94d 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x00);
 8004b02:	2000      	movs	r0, #0
 8004b04:	f001 f95a 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x83);
 8004b08:	2083      	movs	r0, #131	@ 0x83
 8004b0a:	f001 f957 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x30);
 8004b0e:	2030      	movs	r0, #48	@ 0x30
 8004b10:	f001 f954 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(0xED);
 8004b14:	20ed      	movs	r0, #237	@ 0xed
 8004b16:	f001 f941 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x64);
 8004b1a:	2064      	movs	r0, #100	@ 0x64
 8004b1c:	f001 f94e 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x03);
 8004b20:	2003      	movs	r0, #3
 8004b22:	f001 f94b 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x12);
 8004b26:	2012      	movs	r0, #18
 8004b28:	f001 f948 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x81);
 8004b2c:	2081      	movs	r0, #129	@ 0x81
 8004b2e:	f001 f945 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(0xE8);
 8004b32:	20e8      	movs	r0, #232	@ 0xe8
 8004b34:	f001 f932 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x85);
 8004b38:	2085      	movs	r0, #133	@ 0x85
 8004b3a:	f001 f93f 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x01);
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f001 f93c 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x79);
 8004b44:	2079      	movs	r0, #121	@ 0x79
 8004b46:	f001 f939 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(0xCB);
 8004b4a:	20cb      	movs	r0, #203	@ 0xcb
 8004b4c:	f001 f926 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x39);
 8004b50:	2039      	movs	r0, #57	@ 0x39
 8004b52:	f001 f933 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x2C);
 8004b56:	202c      	movs	r0, #44	@ 0x2c
 8004b58:	f001 f930 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x00);
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f001 f92d 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x34);
 8004b62:	2034      	movs	r0, #52	@ 0x34
 8004b64:	f001 f92a 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x02);
 8004b68:	2002      	movs	r0, #2
 8004b6a:	f001 f927 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(0xF7);
 8004b6e:	20f7      	movs	r0, #247	@ 0xf7
 8004b70:	f001 f914 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x20);
 8004b74:	2020      	movs	r0, #32
 8004b76:	f001 f921 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(0xEA);
 8004b7a:	20ea      	movs	r0, #234	@ 0xea
 8004b7c:	f001 f90e 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x00);
 8004b80:	2000      	movs	r0, #0
 8004b82:	f001 f91b 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x00);
 8004b86:	2000      	movs	r0, #0
 8004b88:	f001 f918 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8004b8c:	20c0      	movs	r0, #192	@ 0xc0
 8004b8e:	f001 f905 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x26);
 8004b92:	2026      	movs	r0, #38	@ 0x26
 8004b94:	f001 f912 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8004b98:	20c1      	movs	r0, #193	@ 0xc1
 8004b9a:	f001 f8ff 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x11);
 8004b9e:	2011      	movs	r0, #17
 8004ba0:	f001 f90c 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8004ba4:	20c5      	movs	r0, #197	@ 0xc5
 8004ba6:	f001 f8f9 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x35);
 8004baa:	2035      	movs	r0, #53	@ 0x35
 8004bac:	f001 f906 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x3E);
 8004bb0:	203e      	movs	r0, #62	@ 0x3e
 8004bb2:	f001 f903 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8004bb6:	20c7      	movs	r0, #199	@ 0xc7
 8004bb8:	f001 f8f0 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0xBE);
 8004bbc:	20be      	movs	r0, #190	@ 0xbe
 8004bbe:	f001 f8fd 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 8004bc2:	2036      	movs	r0, #54	@ 0x36
 8004bc4:	f001 f8ea 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8004bc8:	4b62      	ldr	r3, [pc, #392]	@ (8004d54 <lcdInit+0x2d8>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 f8f5 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 8004bd2:	203a      	movs	r0, #58	@ 0x3a
 8004bd4:	f001 f8e2 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x55);
 8004bd8:	2055      	movs	r0, #85	@ 0x55
 8004bda:	f001 f8ef 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 8004bde:	20b1      	movs	r0, #177	@ 0xb1
 8004be0:	f001 f8dc 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x00);
 8004be4:	2000      	movs	r0, #0
 8004be6:	f001 f8e9 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x1B);
 8004bea:	201b      	movs	r0, #27
 8004bec:	f001 f8e6 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(0xF2);
 8004bf0:	20f2      	movs	r0, #242	@ 0xf2
 8004bf2:	f001 f8d3 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x08);
 8004bf6:	2008      	movs	r0, #8
 8004bf8:	f001 f8e0 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 8004bfc:	2026      	movs	r0, #38	@ 0x26
 8004bfe:	f001 f8cd 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x01);
 8004c02:	2001      	movs	r0, #1
 8004c04:	f001 f8da 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 8004c08:	20e0      	movs	r0, #224	@ 0xe0
 8004c0a:	f001 f8c7 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x1F);
 8004c0e:	201f      	movs	r0, #31
 8004c10:	f001 f8d4 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x1A);
 8004c14:	201a      	movs	r0, #26
 8004c16:	f001 f8d1 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x18);
 8004c1a:	2018      	movs	r0, #24
 8004c1c:	f001 f8ce 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x0A);
 8004c20:	200a      	movs	r0, #10
 8004c22:	f001 f8cb 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x0F);
 8004c26:	200f      	movs	r0, #15
 8004c28:	f001 f8c8 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x06);
 8004c2c:	2006      	movs	r0, #6
 8004c2e:	f001 f8c5 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x45);
 8004c32:	2045      	movs	r0, #69	@ 0x45
 8004c34:	f001 f8c2 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x87);
 8004c38:	2087      	movs	r0, #135	@ 0x87
 8004c3a:	f001 f8bf 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x32);
 8004c3e:	2032      	movs	r0, #50	@ 0x32
 8004c40:	f001 f8bc 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x0A);
 8004c44:	200a      	movs	r0, #10
 8004c46:	f001 f8b9 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x07);
 8004c4a:	2007      	movs	r0, #7
 8004c4c:	f001 f8b6 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x02);
 8004c50:	2002      	movs	r0, #2
 8004c52:	f001 f8b3 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x07);
 8004c56:	2007      	movs	r0, #7
 8004c58:	f001 f8b0 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x05);
 8004c5c:	2005      	movs	r0, #5
 8004c5e:	f001 f8ad 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x00);
 8004c62:	2000      	movs	r0, #0
 8004c64:	f001 f8aa 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8004c68:	20e1      	movs	r0, #225	@ 0xe1
 8004c6a:	f001 f897 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x00);
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f001 f8a4 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x25);
 8004c74:	2025      	movs	r0, #37	@ 0x25
 8004c76:	f001 f8a1 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x27);
 8004c7a:	2027      	movs	r0, #39	@ 0x27
 8004c7c:	f001 f89e 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x05);
 8004c80:	2005      	movs	r0, #5
 8004c82:	f001 f89b 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x10);
 8004c86:	2010      	movs	r0, #16
 8004c88:	f001 f898 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x09);
 8004c8c:	2009      	movs	r0, #9
 8004c8e:	f001 f895 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x3A);
 8004c92:	203a      	movs	r0, #58	@ 0x3a
 8004c94:	f001 f892 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x78);
 8004c98:	2078      	movs	r0, #120	@ 0x78
 8004c9a:	f001 f88f 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x4D);
 8004c9e:	204d      	movs	r0, #77	@ 0x4d
 8004ca0:	f001 f88c 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x05);
 8004ca4:	2005      	movs	r0, #5
 8004ca6:	f001 f889 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x18);
 8004caa:	2018      	movs	r0, #24
 8004cac:	f001 f886 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x0D);
 8004cb0:	200d      	movs	r0, #13
 8004cb2:	f001 f883 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x38);
 8004cb6:	2038      	movs	r0, #56	@ 0x38
 8004cb8:	f001 f880 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x3A);
 8004cbc:	203a      	movs	r0, #58	@ 0x3a
 8004cbe:	f001 f87d 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x1F);
 8004cc2:	201f      	movs	r0, #31
 8004cc4:	f001 f87a 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8004cc8:	202a      	movs	r0, #42	@ 0x2a
 8004cca:	f001 f867 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x00);
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f001 f874 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x00);
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f001 f871 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x00);
 8004cda:	2000      	movs	r0, #0
 8004cdc:	f001 f86e 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0xEF);
 8004ce0:	20ef      	movs	r0, #239	@ 0xef
 8004ce2:	f001 f86b 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8004ce6:	202b      	movs	r0, #43	@ 0x2b
 8004ce8:	f001 f858 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x00);
 8004cec:	2000      	movs	r0, #0
 8004cee:	f001 f865 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x00);
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f001 f862 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x01);
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	f001 f85f 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x3F);
 8004cfe:	203f      	movs	r0, #63	@ 0x3f
 8004d00:	f001 f85c 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 8004d04:	20b7      	movs	r0, #183	@ 0xb7
 8004d06:	f001 f849 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x07);
 8004d0a:	2007      	movs	r0, #7
 8004d0c:	f001 f856 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 8004d10:	20b6      	movs	r0, #182	@ 0xb6
 8004d12:	f001 f843 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData(0x0A);
 8004d16:	200a      	movs	r0, #10
 8004d18:	f001 f850 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x82);
 8004d1c:	2082      	movs	r0, #130	@ 0x82
 8004d1e:	f001 f84d 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x27);
 8004d22:	2027      	movs	r0, #39	@ 0x27
 8004d24:	f001 f84a 	bl	8005dbc <lcdWriteData>
  lcdWriteData(0x00);
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f001 f847 	bl	8005dbc <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8004d2e:	2011      	movs	r0, #17
 8004d30:	f001 f834 	bl	8005d9c <lcdWriteCommand>
  HAL_Delay(100);
 8004d34:	2064      	movs	r0, #100	@ 0x64
 8004d36:	f003 fa2d 	bl	8008194 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8004d3a:	2029      	movs	r0, #41	@ 0x29
 8004d3c:	f001 f82e 	bl	8005d9c <lcdWriteCommand>
  HAL_Delay(100);
 8004d40:	2064      	movs	r0, #100	@ 0x64
 8004d42:	f003 fa27 	bl	8008194 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8004d46:	202c      	movs	r0, #44	@ 0x2c
 8004d48:	f001 f828 	bl	8005d9c <lcdWriteCommand>
}
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20002a58 	.word	0x20002a58
 8004d58:	20002a59 	.word	0x20002a59
 8004d5c:	20002a5a 	.word	0x20002a5a
 8004d60:	20002a5b 	.word	0x20002a5b

08004d64 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8004d6e:	4b11      	ldr	r3, [pc, #68]	@ (8004db4 <lcdFillRGB+0x50>)
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	4b0f      	ldr	r3, [pc, #60]	@ (8004db4 <lcdFillRGB+0x50>)
 8004d78:	885b      	ldrh	r3, [r3, #2]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2100      	movs	r1, #0
 8004d80:	2000      	movs	r0, #0
 8004d82:	f000 ff89 	bl	8005c98 <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <lcdFillRGB+0x50>)
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b09      	ldr	r3, [pc, #36]	@ (8004db4 <lcdFillRGB+0x50>)
 8004d8e:	885b      	ldrh	r3, [r3, #2]
 8004d90:	fb02 f303 	mul.w	r3, r2, r3
 8004d94:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8004d96:	e003      	b.n	8004da0 <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8004d98:	88fb      	ldrh	r3, [r7, #6]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 f80e 	bl	8005dbc <lcdWriteData>
  while(dimensions--)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1e5a      	subs	r2, r3, #1
 8004da4:	60fa      	str	r2, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f6      	bne.n	8004d98 <lcdFillRGB+0x34>
  }
}
 8004daa:	bf00      	nop
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	2000002c 	.word	0x2000002c

08004db8 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	80fb      	strh	r3, [r7, #6]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	80bb      	strh	r3, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8004dca:	4b0c      	ldr	r3, [pc, #48]	@ (8004dfc <lcdDrawPixel+0x44>)
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	88fa      	ldrh	r2, [r7, #6]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d20f      	bcs.n	8004df4 <lcdDrawPixel+0x3c>
 8004dd4:	4b09      	ldr	r3, [pc, #36]	@ (8004dfc <lcdDrawPixel+0x44>)
 8004dd6:	885b      	ldrh	r3, [r3, #2]
 8004dd8:	88ba      	ldrh	r2, [r7, #4]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d20a      	bcs.n	8004df4 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8004dde:	88bb      	ldrh	r3, [r7, #4]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	88b9      	ldrh	r1, [r7, #4]
 8004de4:	88f8      	ldrh	r0, [r7, #6]
 8004de6:	f000 ff57 	bl	8005c98 <lcdSetWindow>
    lcdWriteData(color);
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 ffe5 	bl	8005dbc <lcdWriteData>
 8004df2:	e000      	b.n	8004df6 <lcdDrawPixel+0x3e>
        return;
 8004df4:	bf00      	nop
}
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	2000002c 	.word	0x2000002c

08004e00 <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8004e00:	b590      	push	{r4, r7, lr}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4604      	mov	r4, r0
 8004e08:	4608      	mov	r0, r1
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4623      	mov	r3, r4
 8004e10:	80fb      	strh	r3, [r7, #6]
 8004e12:	4603      	mov	r3, r0
 8004e14:	80bb      	strh	r3, [r7, #4]
 8004e16:	460b      	mov	r3, r1
 8004e18:	807b      	strh	r3, [r7, #2]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8004e1e:	88ba      	ldrh	r2, [r7, #4]
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d205      	bcs.n	8004e32 <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	817b      	strh	r3, [r7, #10]
 8004e2a:	88bb      	ldrh	r3, [r7, #4]
 8004e2c:	80fb      	strh	r3, [r7, #6]
 8004e2e:	897b      	ldrh	r3, [r7, #10]
 8004e30:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8004e32:	4b15      	ldr	r3, [pc, #84]	@ (8004e88 <lcdDrawHLine+0x88>)
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	88ba      	ldrh	r2, [r7, #4]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d303      	bcc.n	8004e44 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8004e3c:	4b12      	ldr	r3, [pc, #72]	@ (8004e88 <lcdDrawHLine+0x88>)
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8004e44:	4b10      	ldr	r3, [pc, #64]	@ (8004e88 <lcdDrawHLine+0x88>)
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	88fa      	ldrh	r2, [r7, #6]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d303      	bcc.n	8004e56 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8004e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e88 <lcdDrawHLine+0x88>)
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8004e56:	887b      	ldrh	r3, [r7, #2]
 8004e58:	88ba      	ldrh	r2, [r7, #4]
 8004e5a:	8879      	ldrh	r1, [r7, #2]
 8004e5c:	88f8      	ldrh	r0, [r7, #6]
 8004e5e:	f000 ff1b 	bl	8005c98 <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e006      	b.n	8004e76 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8004e68:	883b      	ldrh	r3, [r7, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 ffa6 	bl	8005dbc <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	88bb      	ldrh	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	ddf4      	ble.n	8004e68 <lcdDrawHLine+0x68>
	}
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd90      	pop	{r4, r7, pc}
 8004e88:	2000002c 	.word	0x2000002c

08004e8c <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4604      	mov	r4, r0
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	80fb      	strh	r3, [r7, #6]
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	80bb      	strh	r3, [r7, #4]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	807b      	strh	r3, [r7, #2]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8004eaa:	887a      	ldrh	r2, [r7, #2]
 8004eac:	88bb      	ldrh	r3, [r7, #4]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d205      	bcs.n	8004ebe <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8004eb2:	88bb      	ldrh	r3, [r7, #4]
 8004eb4:	817b      	strh	r3, [r7, #10]
 8004eb6:	887b      	ldrh	r3, [r7, #2]
 8004eb8:	80bb      	strh	r3, [r7, #4]
 8004eba:	897b      	ldrh	r3, [r7, #10]
 8004ebc:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8004ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8004f28 <lcdDrawVLine+0x9c>)
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d303      	bcc.n	8004ed0 <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8004ec8:	4b17      	ldr	r3, [pc, #92]	@ (8004f28 <lcdDrawVLine+0x9c>)
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8004ed0:	4b15      	ldr	r3, [pc, #84]	@ (8004f28 <lcdDrawVLine+0x9c>)
 8004ed2:	885b      	ldrh	r3, [r3, #2]
 8004ed4:	88ba      	ldrh	r2, [r7, #4]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d303      	bcc.n	8004ee2 <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8004eda:	4b13      	ldr	r3, [pc, #76]	@ (8004f28 <lcdDrawVLine+0x9c>)
 8004edc:	885b      	ldrh	r3, [r3, #2]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8004ee2:	4b11      	ldr	r3, [pc, #68]	@ (8004f28 <lcdDrawVLine+0x9c>)
 8004ee4:	885b      	ldrh	r3, [r3, #2]
 8004ee6:	887a      	ldrh	r2, [r7, #2]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d303      	bcc.n	8004ef4 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8004eec:	4b0e      	ldr	r3, [pc, #56]	@ (8004f28 <lcdDrawVLine+0x9c>)
 8004eee:	885b      	ldrh	r3, [r3, #2]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8004ef4:	887b      	ldrh	r3, [r7, #2]
 8004ef6:	88fa      	ldrh	r2, [r7, #6]
 8004ef8:	88b9      	ldrh	r1, [r7, #4]
 8004efa:	88f8      	ldrh	r0, [r7, #6]
 8004efc:	f000 fecc 	bl	8005c98 <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8004f00:	88bb      	ldrh	r3, [r7, #4]
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e006      	b.n	8004f14 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8004f06:	883b      	ldrh	r3, [r7, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 ff57 	bl	8005dbc <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3301      	adds	r3, #1
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	887b      	ldrh	r3, [r7, #2]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	ddf4      	ble.n	8004f06 <lcdDrawVLine+0x7a>
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd90      	pop	{r4, r7, pc}
 8004f26:	bf00      	nop
 8004f28:	2000002c 	.word	0x2000002c

08004f2c <lcdDrawLine>:
 * \param color	Color
 *
 * \return void
 */
void lcdDrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b089      	sub	sp, #36	@ 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4604      	mov	r4, r0
 8004f34:	4608      	mov	r0, r1
 8004f36:	4611      	mov	r1, r2
 8004f38:	461a      	mov	r2, r3
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	80fb      	strh	r3, [r7, #6]
 8004f3e:	4603      	mov	r3, r0
 8004f40:	80bb      	strh	r3, [r7, #4]
 8004f42:	460b      	mov	r3, r1
 8004f44:	807b      	strh	r3, [r7, #2]
 8004f46:	4613      	mov	r3, r2
 8004f48:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8004f4a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004f4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004f58:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004f5c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f64:	1acb      	subs	r3, r1, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bfb8      	it	lt
 8004f6a:	425b      	neglt	r3, r3
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	bfcc      	ite	gt
 8004f70:	2301      	movgt	r3, #1
 8004f72:	2300      	movle	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	837b      	strh	r3, [r7, #26]
	if (steep)
 8004f78:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00b      	beq.n	8004f98 <lcdDrawLine+0x6c>
	{
		swap(x1, y1);
 8004f80:	88fb      	ldrh	r3, [r7, #6]
 8004f82:	833b      	strh	r3, [r7, #24]
 8004f84:	88bb      	ldrh	r3, [r7, #4]
 8004f86:	80fb      	strh	r3, [r7, #6]
 8004f88:	8b3b      	ldrh	r3, [r7, #24]
 8004f8a:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8004f8c:	887b      	ldrh	r3, [r7, #2]
 8004f8e:	82fb      	strh	r3, [r7, #22]
 8004f90:	883b      	ldrh	r3, [r7, #0]
 8004f92:	807b      	strh	r3, [r7, #2]
 8004f94:	8afb      	ldrh	r3, [r7, #22]
 8004f96:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2)
 8004f98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	dd0b      	ble.n	8004fbc <lcdDrawLine+0x90>
	{
		swap(x1, x2);
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	82bb      	strh	r3, [r7, #20]
 8004fa8:	887b      	ldrh	r3, [r7, #2]
 8004faa:	80fb      	strh	r3, [r7, #6]
 8004fac:	8abb      	ldrh	r3, [r7, #20]
 8004fae:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8004fb0:	88bb      	ldrh	r3, [r7, #4]
 8004fb2:	827b      	strh	r3, [r7, #18]
 8004fb4:	883b      	ldrh	r3, [r7, #0]
 8004fb6:	80bb      	strh	r3, [r7, #4]
 8004fb8:	8a7b      	ldrh	r3, [r7, #18]
 8004fba:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8004fbc:	887a      	ldrh	r2, [r7, #2]
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 8004fc6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004fca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bfb8      	it	lt
 8004fd4:	425b      	neglt	r3, r3
 8004fd6:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8004fd8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004fdc:	0fda      	lsrs	r2, r3, #31
 8004fde:	4413      	add	r3, r2
 8004fe0:	105b      	asrs	r3, r3, #1
 8004fe2:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2)
 8004fe4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004fe8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	da02      	bge.n	8004ff6 <lcdDrawLine+0xca>
	{
		ystep = 1;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	83bb      	strh	r3, [r7, #28]
 8004ff4:	e02d      	b.n	8005052 <lcdDrawLine+0x126>
	}
	else
	{
		ystep = -1;
 8004ff6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ffa:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++)
 8004ffc:	e029      	b.n	8005052 <lcdDrawLine+0x126>
	{
		if (steep)
 8004ffe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d006      	beq.n	8005014 <lcdDrawLine+0xe8>
		{
			lcdDrawPixel(y1, x1, color);
 8005006:	88bb      	ldrh	r3, [r7, #4]
 8005008:	88f9      	ldrh	r1, [r7, #6]
 800500a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fed3 	bl	8004db8 <lcdDrawPixel>
 8005012:	e005      	b.n	8005020 <lcdDrawLine+0xf4>
		}
		else
		{
			lcdDrawPixel(x1, y1, color);
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	88b9      	ldrh	r1, [r7, #4]
 8005018:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fecc 	bl	8004db8 <lcdDrawPixel>
		}
		err -= dy;
 8005020:	8bfa      	ldrh	r2, [r7, #30]
 8005022:	89fb      	ldrh	r3, [r7, #14]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	b29b      	uxth	r3, r3
 8005028:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 800502a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800502e:	2b00      	cmp	r3, #0
 8005030:	da09      	bge.n	8005046 <lcdDrawLine+0x11a>
		{
			y1 += ystep;
 8005032:	88ba      	ldrh	r2, [r7, #4]
 8005034:	8bbb      	ldrh	r3, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	b29b      	uxth	r3, r3
 800503a:	80bb      	strh	r3, [r7, #4]
			err += dx;
 800503c:	8bfa      	ldrh	r2, [r7, #30]
 800503e:	8a3b      	ldrh	r3, [r7, #16]
 8005040:	4413      	add	r3, r2
 8005042:	b29b      	uxth	r3, r3
 8005044:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++)
 8005046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800504a:	b29b      	uxth	r3, r3
 800504c:	3301      	adds	r3, #1
 800504e:	b29b      	uxth	r3, r3
 8005050:	80fb      	strh	r3, [r7, #6]
 8005052:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005056:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800505a:	429a      	cmp	r2, r3
 800505c:	ddcf      	ble.n	8004ffe <lcdDrawLine+0xd2>
		}
	}
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	3724      	adds	r7, #36	@ 0x24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd90      	pop	{r4, r7, pc}

08005068 <lcdDrawRoundRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b085      	sub	sp, #20
 800506c:	af02      	add	r7, sp, #8
 800506e:	4604      	mov	r4, r0
 8005070:	4608      	mov	r0, r1
 8005072:	4611      	mov	r1, r2
 8005074:	461a      	mov	r2, r3
 8005076:	4623      	mov	r3, r4
 8005078:	80fb      	strh	r3, [r7, #6]
 800507a:	4603      	mov	r3, r0
 800507c:	80bb      	strh	r3, [r7, #4]
 800507e:	460b      	mov	r3, r1
 8005080:	807b      	strh	r3, [r7, #2]
 8005082:	4613      	mov	r3, r2
 8005084:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdDrawHLine(x + r, x + w - r, y, color);
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	8b3b      	ldrh	r3, [r7, #24]
 800508a:	4413      	add	r3, r2
 800508c:	b298      	uxth	r0, r3
 800508e:	88fa      	ldrh	r2, [r7, #6]
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	4413      	add	r3, r2
 8005094:	b29a      	uxth	r2, r3
 8005096:	8b3b      	ldrh	r3, [r7, #24]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	b299      	uxth	r1, r3
 800509c:	88ba      	ldrh	r2, [r7, #4]
 800509e:	8bbb      	ldrh	r3, [r7, #28]
 80050a0:	f7ff feae 	bl	8004e00 <lcdDrawHLine>
	lcdDrawHLine(x + r, x + w - r, y + h - 1, color);
 80050a4:	88fa      	ldrh	r2, [r7, #6]
 80050a6:	8b3b      	ldrh	r3, [r7, #24]
 80050a8:	4413      	add	r3, r2
 80050aa:	b298      	uxth	r0, r3
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	887b      	ldrh	r3, [r7, #2]
 80050b0:	4413      	add	r3, r2
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	8b3b      	ldrh	r3, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	b299      	uxth	r1, r3
 80050ba:	88ba      	ldrh	r2, [r7, #4]
 80050bc:	883b      	ldrh	r3, [r7, #0]
 80050be:	4413      	add	r3, r2
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	8bbb      	ldrh	r3, [r7, #28]
 80050c8:	f7ff fe9a 	bl	8004e00 <lcdDrawHLine>
	lcdDrawVLine(x, y + r, y + h - r, color);
 80050cc:	88f8      	ldrh	r0, [r7, #6]
 80050ce:	88ba      	ldrh	r2, [r7, #4]
 80050d0:	8b3b      	ldrh	r3, [r7, #24]
 80050d2:	4413      	add	r3, r2
 80050d4:	b299      	uxth	r1, r3
 80050d6:	88ba      	ldrh	r2, [r7, #4]
 80050d8:	883b      	ldrh	r3, [r7, #0]
 80050da:	4413      	add	r3, r2
 80050dc:	b29a      	uxth	r2, r3
 80050de:	8b3b      	ldrh	r3, [r7, #24]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	8bbb      	ldrh	r3, [r7, #28]
 80050e6:	f7ff fed1 	bl	8004e8c <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y + r, y + h - r, color);
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	887b      	ldrh	r3, [r7, #2]
 80050ee:	4413      	add	r3, r2
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b298      	uxth	r0, r3
 80050f6:	88ba      	ldrh	r2, [r7, #4]
 80050f8:	8b3b      	ldrh	r3, [r7, #24]
 80050fa:	4413      	add	r3, r2
 80050fc:	b299      	uxth	r1, r3
 80050fe:	88ba      	ldrh	r2, [r7, #4]
 8005100:	883b      	ldrh	r3, [r7, #0]
 8005102:	4413      	add	r3, r2
 8005104:	b29a      	uxth	r2, r3
 8005106:	8b3b      	ldrh	r3, [r7, #24]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	b29a      	uxth	r2, r3
 800510c:	8bbb      	ldrh	r3, [r7, #28]
 800510e:	f7ff febd 	bl	8004e8c <lcdDrawVLine>

	// draw four corners
	lcdDrawCircleHelper(x + r, y + r, r, 1, color);
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	8b3b      	ldrh	r3, [r7, #24]
 8005116:	4413      	add	r3, r2
 8005118:	b29b      	uxth	r3, r3
 800511a:	b218      	sxth	r0, r3
 800511c:	88ba      	ldrh	r2, [r7, #4]
 800511e:	8b3b      	ldrh	r3, [r7, #24]
 8005120:	4413      	add	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	b219      	sxth	r1, r3
 8005126:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800512a:	8bbb      	ldrh	r3, [r7, #28]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	2301      	movs	r3, #1
 8005130:	f000 f84b 	bl	80051ca <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8005134:	88fa      	ldrh	r2, [r7, #6]
 8005136:	887b      	ldrh	r3, [r7, #2]
 8005138:	4413      	add	r3, r2
 800513a:	b29a      	uxth	r2, r3
 800513c:	8b3b      	ldrh	r3, [r7, #24]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29b      	uxth	r3, r3
 8005146:	b218      	sxth	r0, r3
 8005148:	88ba      	ldrh	r2, [r7, #4]
 800514a:	8b3b      	ldrh	r3, [r7, #24]
 800514c:	4413      	add	r3, r2
 800514e:	b29b      	uxth	r3, r3
 8005150:	b219      	sxth	r1, r3
 8005152:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005156:	8bbb      	ldrh	r3, [r7, #28]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	2302      	movs	r3, #2
 800515c:	f000 f835 	bl	80051ca <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	887b      	ldrh	r3, [r7, #2]
 8005164:	4413      	add	r3, r2
 8005166:	b29a      	uxth	r2, r3
 8005168:	8b3b      	ldrh	r3, [r7, #24]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29b      	uxth	r3, r3
 8005172:	b218      	sxth	r0, r3
 8005174:	88ba      	ldrh	r2, [r7, #4]
 8005176:	883b      	ldrh	r3, [r7, #0]
 8005178:	4413      	add	r3, r2
 800517a:	b29a      	uxth	r2, r3
 800517c:	8b3b      	ldrh	r3, [r7, #24]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29b      	uxth	r3, r3
 8005186:	b219      	sxth	r1, r3
 8005188:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800518c:	8bbb      	ldrh	r3, [r7, #28]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	2304      	movs	r3, #4
 8005192:	f000 f81a 	bl	80051ca <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8005196:	88fa      	ldrh	r2, [r7, #6]
 8005198:	8b3b      	ldrh	r3, [r7, #24]
 800519a:	4413      	add	r3, r2
 800519c:	b29b      	uxth	r3, r3
 800519e:	b218      	sxth	r0, r3
 80051a0:	88ba      	ldrh	r2, [r7, #4]
 80051a2:	883b      	ldrh	r3, [r7, #0]
 80051a4:	4413      	add	r3, r2
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	8b3b      	ldrh	r3, [r7, #24]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	b219      	sxth	r1, r3
 80051b4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80051b8:	8bbb      	ldrh	r3, [r7, #28]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	2308      	movs	r3, #8
 80051be:	f000 f804 	bl	80051ca <lcdDrawCircleHelper>
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd90      	pop	{r4, r7, pc}

080051ca <lcdDrawCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdDrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 80051ca:	b590      	push	{r4, r7, lr}
 80051cc:	b087      	sub	sp, #28
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	4604      	mov	r4, r0
 80051d2:	4608      	mov	r0, r1
 80051d4:	4611      	mov	r1, r2
 80051d6:	461a      	mov	r2, r3
 80051d8:	4623      	mov	r3, r4
 80051da:	80fb      	strh	r3, [r7, #6]
 80051dc:	4603      	mov	r3, r0
 80051de:	80bb      	strh	r3, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	807b      	strh	r3, [r7, #2]
 80051e4:	4613      	mov	r3, r2
 80051e6:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80051e8:	887b      	ldrh	r3, [r7, #2]
 80051ea:	f1c3 0301 	rsb	r3, r3, #1
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80051f2:	2301      	movs	r3, #1
 80051f4:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80051f6:	887b      	ldrh	r3, [r7, #2]
 80051f8:	461a      	mov	r2, r3
 80051fa:	03d2      	lsls	r2, r2, #15
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	b29b      	uxth	r3, r3
 8005202:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8005208:	887b      	ldrh	r3, [r7, #2]
 800520a:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 800520c:	e095      	b.n	800533a <lcdDrawCircleHelper+0x170>
	{
		if (f >= 0)
 800520e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005212:	2b00      	cmp	r3, #0
 8005214:	db0e      	blt.n	8005234 <lcdDrawCircleHelper+0x6a>
		{
			y--;
 8005216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29b      	uxth	r3, r3
 8005220:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8005222:	8a7b      	ldrh	r3, [r7, #18]
 8005224:	3302      	adds	r3, #2
 8005226:	b29b      	uxth	r3, r3
 8005228:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800522a:	8afa      	ldrh	r2, [r7, #22]
 800522c:	8a7b      	ldrh	r3, [r7, #18]
 800522e:	4413      	add	r3, r2
 8005230:	b29b      	uxth	r3, r3
 8005232:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8005234:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005238:	b29b      	uxth	r3, r3
 800523a:	3301      	adds	r3, #1
 800523c:	b29b      	uxth	r3, r3
 800523e:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8005240:	8abb      	ldrh	r3, [r7, #20]
 8005242:	3302      	adds	r3, #2
 8005244:	b29b      	uxth	r3, r3
 8005246:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8005248:	8afa      	ldrh	r2, [r7, #22]
 800524a:	8abb      	ldrh	r3, [r7, #20]
 800524c:	4413      	add	r3, r2
 800524e:	b29b      	uxth	r3, r3
 8005250:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4)
 8005252:	787b      	ldrb	r3, [r7, #1]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d017      	beq.n	800528c <lcdDrawCircleHelper+0xc2>
		{
			lcdDrawPixel(x0 + x, y0 + y, color);
 800525c:	88fa      	ldrh	r2, [r7, #6]
 800525e:	8a3b      	ldrh	r3, [r7, #16]
 8005260:	4413      	add	r3, r2
 8005262:	b298      	uxth	r0, r3
 8005264:	88ba      	ldrh	r2, [r7, #4]
 8005266:	89fb      	ldrh	r3, [r7, #14]
 8005268:	4413      	add	r3, r2
 800526a:	b29b      	uxth	r3, r3
 800526c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800526e:	4619      	mov	r1, r3
 8005270:	f7ff fda2 	bl	8004db8 <lcdDrawPixel>
			lcdDrawPixel(x0 + y, y0 + x, color);
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	89fb      	ldrh	r3, [r7, #14]
 8005278:	4413      	add	r3, r2
 800527a:	b298      	uxth	r0, r3
 800527c:	88ba      	ldrh	r2, [r7, #4]
 800527e:	8a3b      	ldrh	r3, [r7, #16]
 8005280:	4413      	add	r3, r2
 8005282:	b29b      	uxth	r3, r3
 8005284:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005286:	4619      	mov	r1, r3
 8005288:	f7ff fd96 	bl	8004db8 <lcdDrawPixel>
		}
		if (cornername & 0x2)
 800528c:	787b      	ldrb	r3, [r7, #1]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d017      	beq.n	80052c6 <lcdDrawCircleHelper+0xfc>
		{
			lcdDrawPixel(x0 + x, y0 - y, color);
 8005296:	88fa      	ldrh	r2, [r7, #6]
 8005298:	8a3b      	ldrh	r3, [r7, #16]
 800529a:	4413      	add	r3, r2
 800529c:	b298      	uxth	r0, r3
 800529e:	88ba      	ldrh	r2, [r7, #4]
 80052a0:	89fb      	ldrh	r3, [r7, #14]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80052a8:	4619      	mov	r1, r3
 80052aa:	f7ff fd85 	bl	8004db8 <lcdDrawPixel>
			lcdDrawPixel(x0 + y, y0 - x, color);
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	89fb      	ldrh	r3, [r7, #14]
 80052b2:	4413      	add	r3, r2
 80052b4:	b298      	uxth	r0, r3
 80052b6:	88ba      	ldrh	r2, [r7, #4]
 80052b8:	8a3b      	ldrh	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	b29b      	uxth	r3, r3
 80052be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80052c0:	4619      	mov	r1, r3
 80052c2:	f7ff fd79 	bl	8004db8 <lcdDrawPixel>
		}
		if (cornername & 0x8)
 80052c6:	787b      	ldrb	r3, [r7, #1]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d017      	beq.n	8005300 <lcdDrawCircleHelper+0x136>
		{
			lcdDrawPixel(x0 - y, y0 + x, color);
 80052d0:	88fa      	ldrh	r2, [r7, #6]
 80052d2:	89fb      	ldrh	r3, [r7, #14]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	b298      	uxth	r0, r3
 80052d8:	88ba      	ldrh	r2, [r7, #4]
 80052da:	8a3b      	ldrh	r3, [r7, #16]
 80052dc:	4413      	add	r3, r2
 80052de:	b29b      	uxth	r3, r3
 80052e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80052e2:	4619      	mov	r1, r3
 80052e4:	f7ff fd68 	bl	8004db8 <lcdDrawPixel>
			lcdDrawPixel(x0 - x, y0 + y, color);
 80052e8:	88fa      	ldrh	r2, [r7, #6]
 80052ea:	8a3b      	ldrh	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	b298      	uxth	r0, r3
 80052f0:	88ba      	ldrh	r2, [r7, #4]
 80052f2:	89fb      	ldrh	r3, [r7, #14]
 80052f4:	4413      	add	r3, r2
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80052fa:	4619      	mov	r1, r3
 80052fc:	f7ff fd5c 	bl	8004db8 <lcdDrawPixel>
		}
		if (cornername & 0x1)
 8005300:	787b      	ldrb	r3, [r7, #1]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d017      	beq.n	800533a <lcdDrawCircleHelper+0x170>
		{
			lcdDrawPixel(x0 - y, y0 - x, color);
 800530a:	88fa      	ldrh	r2, [r7, #6]
 800530c:	89fb      	ldrh	r3, [r7, #14]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	b298      	uxth	r0, r3
 8005312:	88ba      	ldrh	r2, [r7, #4]
 8005314:	8a3b      	ldrh	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	b29b      	uxth	r3, r3
 800531a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800531c:	4619      	mov	r1, r3
 800531e:	f7ff fd4b 	bl	8004db8 <lcdDrawPixel>
			lcdDrawPixel(x0 - x, y0 - y, color);
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	8a3b      	ldrh	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	b298      	uxth	r0, r3
 800532a:	88ba      	ldrh	r2, [r7, #4]
 800532c:	89fb      	ldrh	r3, [r7, #14]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	b29b      	uxth	r3, r3
 8005332:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005334:	4619      	mov	r1, r3
 8005336:	f7ff fd3f 	bl	8004db8 <lcdDrawPixel>
	while (x < y)
 800533a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800533e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005342:	429a      	cmp	r2, r3
 8005344:	f6ff af63 	blt.w	800520e <lcdDrawCircleHelper+0x44>
		}
	}
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	bd90      	pop	{r4, r7, pc}

08005352 <lcdDrawCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8005352:	b590      	push	{r4, r7, lr}
 8005354:	b087      	sub	sp, #28
 8005356:	af00      	add	r7, sp, #0
 8005358:	4604      	mov	r4, r0
 800535a:	4608      	mov	r0, r1
 800535c:	4611      	mov	r1, r2
 800535e:	461a      	mov	r2, r3
 8005360:	4623      	mov	r3, r4
 8005362:	80fb      	strh	r3, [r7, #6]
 8005364:	4603      	mov	r3, r0
 8005366:	80bb      	strh	r3, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	807b      	strh	r3, [r7, #2]
 800536c:	4613      	mov	r3, r2
 800536e:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8005370:	887b      	ldrh	r3, [r7, #2]
 8005372:	f1c3 0301 	rsb	r3, r3, #1
 8005376:	b29b      	uxth	r3, r3
 8005378:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800537a:	2301      	movs	r3, #1
 800537c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800537e:	887b      	ldrh	r3, [r7, #2]
 8005380:	461a      	mov	r2, r3
 8005382:	03d2      	lsls	r2, r2, #15
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	b29b      	uxth	r3, r3
 800538a:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8005390:	887b      	ldrh	r3, [r7, #2]
 8005392:	81fb      	strh	r3, [r7, #14]

	lcdDrawPixel(x0, y0 + r, color);
 8005394:	88f8      	ldrh	r0, [r7, #6]
 8005396:	88ba      	ldrh	r2, [r7, #4]
 8005398:	887b      	ldrh	r3, [r7, #2]
 800539a:	4413      	add	r3, r2
 800539c:	b29b      	uxth	r3, r3
 800539e:	883a      	ldrh	r2, [r7, #0]
 80053a0:	4619      	mov	r1, r3
 80053a2:	f7ff fd09 	bl	8004db8 <lcdDrawPixel>
	lcdDrawPixel(x0, y0 - r, color);
 80053a6:	88f8      	ldrh	r0, [r7, #6]
 80053a8:	88ba      	ldrh	r2, [r7, #4]
 80053aa:	887b      	ldrh	r3, [r7, #2]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	883a      	ldrh	r2, [r7, #0]
 80053b2:	4619      	mov	r1, r3
 80053b4:	f7ff fd00 	bl	8004db8 <lcdDrawPixel>
	lcdDrawPixel(x0 + r, y0, color);
 80053b8:	88fa      	ldrh	r2, [r7, #6]
 80053ba:	887b      	ldrh	r3, [r7, #2]
 80053bc:	4413      	add	r3, r2
 80053be:	b29b      	uxth	r3, r3
 80053c0:	88b9      	ldrh	r1, [r7, #4]
 80053c2:	883a      	ldrh	r2, [r7, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fcf7 	bl	8004db8 <lcdDrawPixel>
	lcdDrawPixel(x0 - r, y0, color);
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	887b      	ldrh	r3, [r7, #2]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	88b9      	ldrh	r1, [r7, #4]
 80053d4:	883a      	ldrh	r2, [r7, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fcee 	bl	8004db8 <lcdDrawPixel>

	while (x < y)
 80053dc:	e081      	b.n	80054e2 <lcdDrawCircle+0x190>
	{
		if (f >= 0)
 80053de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	db0e      	blt.n	8005404 <lcdDrawCircle+0xb2>
		{
			y--;
 80053e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80053f2:	8a7b      	ldrh	r3, [r7, #18]
 80053f4:	3302      	adds	r3, #2
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80053fa:	8afa      	ldrh	r2, [r7, #22]
 80053fc:	8a7b      	ldrh	r3, [r7, #18]
 80053fe:	4413      	add	r3, r2
 8005400:	b29b      	uxth	r3, r3
 8005402:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8005404:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005408:	b29b      	uxth	r3, r3
 800540a:	3301      	adds	r3, #1
 800540c:	b29b      	uxth	r3, r3
 800540e:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8005410:	8abb      	ldrh	r3, [r7, #20]
 8005412:	3302      	adds	r3, #2
 8005414:	b29b      	uxth	r3, r3
 8005416:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8005418:	8afa      	ldrh	r2, [r7, #22]
 800541a:	8abb      	ldrh	r3, [r7, #20]
 800541c:	4413      	add	r3, r2
 800541e:	b29b      	uxth	r3, r3
 8005420:	82fb      	strh	r3, [r7, #22]

		lcdDrawPixel(x0 + x, y0 + y, color);
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	8a3b      	ldrh	r3, [r7, #16]
 8005426:	4413      	add	r3, r2
 8005428:	b298      	uxth	r0, r3
 800542a:	88ba      	ldrh	r2, [r7, #4]
 800542c:	89fb      	ldrh	r3, [r7, #14]
 800542e:	4413      	add	r3, r2
 8005430:	b29b      	uxth	r3, r3
 8005432:	883a      	ldrh	r2, [r7, #0]
 8005434:	4619      	mov	r1, r3
 8005436:	f7ff fcbf 	bl	8004db8 <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 + y, color);
 800543a:	88fa      	ldrh	r2, [r7, #6]
 800543c:	8a3b      	ldrh	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	b298      	uxth	r0, r3
 8005442:	88ba      	ldrh	r2, [r7, #4]
 8005444:	89fb      	ldrh	r3, [r7, #14]
 8005446:	4413      	add	r3, r2
 8005448:	b29b      	uxth	r3, r3
 800544a:	883a      	ldrh	r2, [r7, #0]
 800544c:	4619      	mov	r1, r3
 800544e:	f7ff fcb3 	bl	8004db8 <lcdDrawPixel>
		lcdDrawPixel(x0 + x, y0 - y, color);
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	8a3b      	ldrh	r3, [r7, #16]
 8005456:	4413      	add	r3, r2
 8005458:	b298      	uxth	r0, r3
 800545a:	88ba      	ldrh	r2, [r7, #4]
 800545c:	89fb      	ldrh	r3, [r7, #14]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	b29b      	uxth	r3, r3
 8005462:	883a      	ldrh	r2, [r7, #0]
 8005464:	4619      	mov	r1, r3
 8005466:	f7ff fca7 	bl	8004db8 <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 - y, color);
 800546a:	88fa      	ldrh	r2, [r7, #6]
 800546c:	8a3b      	ldrh	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	b298      	uxth	r0, r3
 8005472:	88ba      	ldrh	r2, [r7, #4]
 8005474:	89fb      	ldrh	r3, [r7, #14]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	b29b      	uxth	r3, r3
 800547a:	883a      	ldrh	r2, [r7, #0]
 800547c:	4619      	mov	r1, r3
 800547e:	f7ff fc9b 	bl	8004db8 <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 + x, color);
 8005482:	88fa      	ldrh	r2, [r7, #6]
 8005484:	89fb      	ldrh	r3, [r7, #14]
 8005486:	4413      	add	r3, r2
 8005488:	b298      	uxth	r0, r3
 800548a:	88ba      	ldrh	r2, [r7, #4]
 800548c:	8a3b      	ldrh	r3, [r7, #16]
 800548e:	4413      	add	r3, r2
 8005490:	b29b      	uxth	r3, r3
 8005492:	883a      	ldrh	r2, [r7, #0]
 8005494:	4619      	mov	r1, r3
 8005496:	f7ff fc8f 	bl	8004db8 <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 + x, color);
 800549a:	88fa      	ldrh	r2, [r7, #6]
 800549c:	89fb      	ldrh	r3, [r7, #14]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	b298      	uxth	r0, r3
 80054a2:	88ba      	ldrh	r2, [r7, #4]
 80054a4:	8a3b      	ldrh	r3, [r7, #16]
 80054a6:	4413      	add	r3, r2
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	883a      	ldrh	r2, [r7, #0]
 80054ac:	4619      	mov	r1, r3
 80054ae:	f7ff fc83 	bl	8004db8 <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 - x, color);
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	89fb      	ldrh	r3, [r7, #14]
 80054b6:	4413      	add	r3, r2
 80054b8:	b298      	uxth	r0, r3
 80054ba:	88ba      	ldrh	r2, [r7, #4]
 80054bc:	8a3b      	ldrh	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	883a      	ldrh	r2, [r7, #0]
 80054c4:	4619      	mov	r1, r3
 80054c6:	f7ff fc77 	bl	8004db8 <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 - x, color);
 80054ca:	88fa      	ldrh	r2, [r7, #6]
 80054cc:	89fb      	ldrh	r3, [r7, #14]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	b298      	uxth	r0, r3
 80054d2:	88ba      	ldrh	r2, [r7, #4]
 80054d4:	8a3b      	ldrh	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	b29b      	uxth	r3, r3
 80054da:	883a      	ldrh	r2, [r7, #0]
 80054dc:	4619      	mov	r1, r3
 80054de:	f7ff fc6b 	bl	8004db8 <lcdDrawPixel>
	while (x < y)
 80054e2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80054e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	f6ff af77 	blt.w	80053de <lcdDrawCircle+0x8c>
	}
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd90      	pop	{r4, r7, pc}

080054fa <lcdFillCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdFillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80054fa:	b590      	push	{r4, r7, lr}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af02      	add	r7, sp, #8
 8005500:	4604      	mov	r4, r0
 8005502:	4608      	mov	r0, r1
 8005504:	4611      	mov	r1, r2
 8005506:	461a      	mov	r2, r3
 8005508:	4623      	mov	r3, r4
 800550a:	80fb      	strh	r3, [r7, #6]
 800550c:	4603      	mov	r3, r0
 800550e:	80bb      	strh	r3, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	807b      	strh	r3, [r7, #2]
 8005514:	4613      	mov	r3, r2
 8005516:	803b      	strh	r3, [r7, #0]
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 8005518:	88f8      	ldrh	r0, [r7, #6]
 800551a:	88ba      	ldrh	r2, [r7, #4]
 800551c:	887b      	ldrh	r3, [r7, #2]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	b299      	uxth	r1, r3
 8005522:	88ba      	ldrh	r2, [r7, #4]
 8005524:	887b      	ldrh	r3, [r7, #2]
 8005526:	4413      	add	r3, r2
 8005528:	b29b      	uxth	r3, r3
 800552a:	3301      	adds	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	883b      	ldrh	r3, [r7, #0]
 8005530:	f7ff fcac 	bl	8004e8c <lcdDrawVLine>
	lcdFillCircleHelper(x0, y0, r, 3, 0, color);
 8005534:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005538:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800553c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005540:	883b      	ldrh	r3, [r7, #0]
 8005542:	9301      	str	r3, [sp, #4]
 8005544:	2300      	movs	r3, #0
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	2303      	movs	r3, #3
 800554a:	f000 f804 	bl	8005556 <lcdFillCircleHelper>
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	bd90      	pop	{r4, r7, pc}

08005556 <lcdFillCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8005556:	b590      	push	{r4, r7, lr}
 8005558:	b087      	sub	sp, #28
 800555a:	af00      	add	r7, sp, #0
 800555c:	4604      	mov	r4, r0
 800555e:	4608      	mov	r0, r1
 8005560:	4611      	mov	r1, r2
 8005562:	461a      	mov	r2, r3
 8005564:	4623      	mov	r3, r4
 8005566:	80fb      	strh	r3, [r7, #6]
 8005568:	4603      	mov	r3, r0
 800556a:	80bb      	strh	r3, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	807b      	strh	r3, [r7, #2]
 8005570:	4613      	mov	r3, r2
 8005572:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8005574:	887b      	ldrh	r3, [r7, #2]
 8005576:	f1c3 0301 	rsb	r3, r3, #1
 800557a:	b29b      	uxth	r3, r3
 800557c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800557e:	2301      	movs	r3, #1
 8005580:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8005582:	887b      	ldrh	r3, [r7, #2]
 8005584:	461a      	mov	r2, r3
 8005586:	03d2      	lsls	r2, r2, #15
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	b29b      	uxth	r3, r3
 800558e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8005594:	887b      	ldrh	r3, [r7, #2]
 8005596:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 8005598:	e07b      	b.n	8005692 <lcdFillCircleHelper+0x13c>
	{
		if (f >= 0)
 800559a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	db0e      	blt.n	80055c0 <lcdFillCircleHelper+0x6a>
		{
			y--;
 80055a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80055ae:	8a7b      	ldrh	r3, [r7, #18]
 80055b0:	3302      	adds	r3, #2
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80055b6:	8afa      	ldrh	r2, [r7, #22]
 80055b8:	8a7b      	ldrh	r3, [r7, #18]
 80055ba:	4413      	add	r3, r2
 80055bc:	b29b      	uxth	r3, r3
 80055be:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80055c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3301      	adds	r3, #1
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80055cc:	8abb      	ldrh	r3, [r7, #20]
 80055ce:	3302      	adds	r3, #2
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80055d4:	8afa      	ldrh	r2, [r7, #22]
 80055d6:	8abb      	ldrh	r3, [r7, #20]
 80055d8:	4413      	add	r3, r2
 80055da:	b29b      	uxth	r3, r3
 80055dc:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1)
 80055de:	787b      	ldrb	r3, [r7, #1]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d027      	beq.n	8005638 <lcdFillCircleHelper+0xe2>
		{
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 80055e8:	88fa      	ldrh	r2, [r7, #6]
 80055ea:	8a3b      	ldrh	r3, [r7, #16]
 80055ec:	4413      	add	r3, r2
 80055ee:	b298      	uxth	r0, r3
 80055f0:	88ba      	ldrh	r2, [r7, #4]
 80055f2:	89fb      	ldrh	r3, [r7, #14]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	b299      	uxth	r1, r3
 80055f8:	88ba      	ldrh	r2, [r7, #4]
 80055fa:	89fb      	ldrh	r3, [r7, #14]
 80055fc:	4413      	add	r3, r2
 80055fe:	b29a      	uxth	r2, r3
 8005600:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005602:	4413      	add	r3, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	3301      	adds	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800560c:	f7ff fc3e 	bl	8004e8c <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 8005610:	88fa      	ldrh	r2, [r7, #6]
 8005612:	89fb      	ldrh	r3, [r7, #14]
 8005614:	4413      	add	r3, r2
 8005616:	b298      	uxth	r0, r3
 8005618:	88ba      	ldrh	r2, [r7, #4]
 800561a:	8a3b      	ldrh	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	b299      	uxth	r1, r3
 8005620:	88ba      	ldrh	r2, [r7, #4]
 8005622:	8a3b      	ldrh	r3, [r7, #16]
 8005624:	4413      	add	r3, r2
 8005626:	b29a      	uxth	r2, r3
 8005628:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800562a:	4413      	add	r3, r2
 800562c:	b29b      	uxth	r3, r3
 800562e:	3301      	adds	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005634:	f7ff fc2a 	bl	8004e8c <lcdDrawVLine>
		}
		if (cornername & 0x2)
 8005638:	787b      	ldrb	r3, [r7, #1]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d027      	beq.n	8005692 <lcdFillCircleHelper+0x13c>
		{
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	8a3b      	ldrh	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	b298      	uxth	r0, r3
 800564a:	88ba      	ldrh	r2, [r7, #4]
 800564c:	89fb      	ldrh	r3, [r7, #14]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	b299      	uxth	r1, r3
 8005652:	88ba      	ldrh	r2, [r7, #4]
 8005654:	89fb      	ldrh	r3, [r7, #14]
 8005656:	4413      	add	r3, r2
 8005658:	b29a      	uxth	r2, r3
 800565a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800565c:	4413      	add	r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	3301      	adds	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005666:	f7ff fc11 	bl	8004e8c <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	89fb      	ldrh	r3, [r7, #14]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	b298      	uxth	r0, r3
 8005672:	88ba      	ldrh	r2, [r7, #4]
 8005674:	8a3b      	ldrh	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	b299      	uxth	r1, r3
 800567a:	88ba      	ldrh	r2, [r7, #4]
 800567c:	8a3b      	ldrh	r3, [r7, #16]
 800567e:	4413      	add	r3, r2
 8005680:	b29a      	uxth	r2, r3
 8005682:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005684:	4413      	add	r3, r2
 8005686:	b29b      	uxth	r3, r3
 8005688:	3301      	adds	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800568e:	f7ff fbfd 	bl	8004e8c <lcdDrawVLine>
	while (x < y)
 8005692:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005696:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800569a:	429a      	cmp	r2, r3
 800569c:	f6ff af7d 	blt.w	800559a <lcdFillCircleHelper+0x44>
		}
	}
}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd90      	pop	{r4, r7, pc}
	...

080056ac <lcdFillRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 80056ac:	b590      	push	{r4, r7, lr}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4604      	mov	r4, r0
 80056b4:	4608      	mov	r0, r1
 80056b6:	4611      	mov	r1, r2
 80056b8:	461a      	mov	r2, r3
 80056ba:	4623      	mov	r3, r4
 80056bc:	80fb      	strh	r3, [r7, #6]
 80056be:	4603      	mov	r3, r0
 80056c0:	80bb      	strh	r3, [r7, #4]
 80056c2:	460b      	mov	r3, r1
 80056c4:	807b      	strh	r3, [r7, #2]
 80056c6:	4613      	mov	r3, r2
 80056c8:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80056ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ce:	4a24      	ldr	r2, [pc, #144]	@ (8005760 <lcdFillRect+0xb4>)
 80056d0:	8812      	ldrh	r2, [r2, #0]
 80056d2:	4293      	cmp	r3, r2
 80056d4:	da3f      	bge.n	8005756 <lcdFillRect+0xaa>
 80056d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80056da:	4a21      	ldr	r2, [pc, #132]	@ (8005760 <lcdFillRect+0xb4>)
 80056dc:	8852      	ldrh	r2, [r2, #2]
 80056de:	4293      	cmp	r3, r2
 80056e0:	da39      	bge.n	8005756 <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 80056e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056ea:	4413      	add	r3, r2
 80056ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005760 <lcdFillRect+0xb4>)
 80056ee:	8812      	ldrh	r2, [r2, #0]
 80056f0:	4293      	cmp	r3, r2
 80056f2:	dd05      	ble.n	8005700 <lcdFillRect+0x54>
 80056f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005760 <lcdFillRect+0xb4>)
 80056f6:	881a      	ldrh	r2, [r3, #0]
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8005700:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005704:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005708:	4413      	add	r3, r2
 800570a:	4a15      	ldr	r2, [pc, #84]	@ (8005760 <lcdFillRect+0xb4>)
 800570c:	8852      	ldrh	r2, [r2, #2]
 800570e:	4293      	cmp	r3, r2
 8005710:	dd05      	ble.n	800571e <lcdFillRect+0x72>
 8005712:	4b13      	ldr	r3, [pc, #76]	@ (8005760 <lcdFillRect+0xb4>)
 8005714:	885a      	ldrh	r2, [r3, #2]
 8005716:	88bb      	ldrh	r3, [r7, #4]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	b29b      	uxth	r3, r3
 800571c:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 800571e:	88bb      	ldrh	r3, [r7, #4]
 8005720:	81fb      	strh	r3, [r7, #14]
 8005722:	e00e      	b.n	8005742 <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8005724:	88f8      	ldrh	r0, [r7, #6]
 8005726:	88fa      	ldrh	r2, [r7, #6]
 8005728:	887b      	ldrh	r3, [r7, #2]
 800572a:	4413      	add	r3, r2
 800572c:	b299      	uxth	r1, r3
 800572e:	89fa      	ldrh	r2, [r7, #14]
 8005730:	8c3b      	ldrh	r3, [r7, #32]
 8005732:	f7ff fb65 	bl	8004e00 <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 8005736:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800573a:	b29b      	uxth	r3, r3
 800573c:	3301      	adds	r3, #1
 800573e:	b29b      	uxth	r3, r3
 8005740:	81fb      	strh	r3, [r7, #14]
 8005742:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005746:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800574a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800574e:	440b      	add	r3, r1
 8005750:	429a      	cmp	r2, r3
 8005752:	dde7      	ble.n	8005724 <lcdFillRect+0x78>
 8005754:	e000      	b.n	8005758 <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8005756:	bf00      	nop
	}
}
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	bd90      	pop	{r4, r7, pc}
 800575e:	bf00      	nop
 8005760:	2000002c 	.word	0x2000002c

08005764 <lcdFillRoundRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8005764:	b590      	push	{r4, r7, lr}
 8005766:	b085      	sub	sp, #20
 8005768:	af02      	add	r7, sp, #8
 800576a:	4604      	mov	r4, r0
 800576c:	4608      	mov	r0, r1
 800576e:	4611      	mov	r1, r2
 8005770:	461a      	mov	r2, r3
 8005772:	4623      	mov	r3, r4
 8005774:	80fb      	strh	r3, [r7, #6]
 8005776:	4603      	mov	r3, r0
 8005778:	80bb      	strh	r3, [r7, #4]
 800577a:	460b      	mov	r3, r1
 800577c:	807b      	strh	r3, [r7, #2]
 800577e:	4613      	mov	r3, r2
 8005780:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdFillRect(x + r, y, w - 2 * r, h, color);
 8005782:	88fa      	ldrh	r2, [r7, #6]
 8005784:	8b3b      	ldrh	r3, [r7, #24]
 8005786:	4413      	add	r3, r2
 8005788:	b29b      	uxth	r3, r3
 800578a:	b218      	sxth	r0, r3
 800578c:	887a      	ldrh	r2, [r7, #2]
 800578e:	8b3b      	ldrh	r3, [r7, #24]
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	b29b      	uxth	r3, r3
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	b29b      	uxth	r3, r3
 8005798:	b21a      	sxth	r2, r3
 800579a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800579e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80057a2:	8bbb      	ldrh	r3, [r7, #28]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	4623      	mov	r3, r4
 80057a8:	f7ff ff80 	bl	80056ac <lcdFillRect>

	// draw four corners
	lcdFillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	887b      	ldrh	r3, [r7, #2]
 80057b0:	4413      	add	r3, r2
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	8b3b      	ldrh	r3, [r7, #24]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29b      	uxth	r3, r3
 80057be:	b218      	sxth	r0, r3
 80057c0:	88ba      	ldrh	r2, [r7, #4]
 80057c2:	8b3b      	ldrh	r3, [r7, #24]
 80057c4:	4413      	add	r3, r2
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	b219      	sxth	r1, r3
 80057ca:	883a      	ldrh	r2, [r7, #0]
 80057cc:	8b3b      	ldrh	r3, [r7, #24]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29b      	uxth	r3, r3
 80057da:	b21b      	sxth	r3, r3
 80057dc:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80057e0:	8bba      	ldrh	r2, [r7, #28]
 80057e2:	9201      	str	r2, [sp, #4]
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	2301      	movs	r3, #1
 80057e8:	4622      	mov	r2, r4
 80057ea:	f7ff feb4 	bl	8005556 <lcdFillCircleHelper>
	lcdFillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 80057ee:	88fa      	ldrh	r2, [r7, #6]
 80057f0:	8b3b      	ldrh	r3, [r7, #24]
 80057f2:	4413      	add	r3, r2
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	b218      	sxth	r0, r3
 80057f8:	88ba      	ldrh	r2, [r7, #4]
 80057fa:	8b3b      	ldrh	r3, [r7, #24]
 80057fc:	4413      	add	r3, r2
 80057fe:	b29b      	uxth	r3, r3
 8005800:	b219      	sxth	r1, r3
 8005802:	883a      	ldrh	r2, [r7, #0]
 8005804:	8b3b      	ldrh	r3, [r7, #24]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	b29b      	uxth	r3, r3
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	b29b      	uxth	r3, r3
 8005812:	b21b      	sxth	r3, r3
 8005814:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8005818:	8bba      	ldrh	r2, [r7, #28]
 800581a:	9201      	str	r2, [sp, #4]
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	2302      	movs	r3, #2
 8005820:	4622      	mov	r2, r4
 8005822:	f7ff fe98 	bl	8005556 <lcdFillCircleHelper>
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	bd90      	pop	{r4, r7, pc}
	...

08005830 <lcdDrawImage>:
        lcdDrawHLine(a, b + 1, y, color);
    }
}

void lcdDrawImage(uint16_t x, uint16_t y, GUI_CONST_STORAGE GUI_BITMAP* pBitmap)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	4603      	mov	r3, r0
 8005838:	603a      	str	r2, [r7, #0]
 800583a:	80fb      	strh	r3, [r7, #6]
 800583c:	460b      	mov	r3, r1
 800583e:	80bb      	strh	r3, [r7, #4]
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8005840:	4b24      	ldr	r3, [pc, #144]	@ (80058d4 <lcdDrawImage+0xa4>)
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	88fa      	ldrh	r2, [r7, #6]
 8005846:	429a      	cmp	r2, r3
 8005848:	d23b      	bcs.n	80058c2 <lcdDrawImage+0x92>
 800584a:	4b22      	ldr	r3, [pc, #136]	@ (80058d4 <lcdDrawImage+0xa4>)
 800584c:	885b      	ldrh	r3, [r3, #2]
 800584e:	88ba      	ldrh	r2, [r7, #4]
 8005850:	429a      	cmp	r2, r3
 8005852:	d236      	bcs.n	80058c2 <lcdDrawImage+0x92>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	8812      	ldrh	r2, [r2, #0]
 800585a:	4413      	add	r3, r2
 800585c:	4a1d      	ldr	r2, [pc, #116]	@ (80058d4 <lcdDrawImage+0xa4>)
 800585e:	8812      	ldrh	r2, [r2, #0]
 8005860:	4293      	cmp	r3, r2
 8005862:	dc30      	bgt.n	80058c6 <lcdDrawImage+0x96>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8005864:	88bb      	ldrh	r3, [r7, #4]
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	8852      	ldrh	r2, [r2, #2]
 800586a:	4413      	add	r3, r2
 800586c:	4a19      	ldr	r2, [pc, #100]	@ (80058d4 <lcdDrawImage+0xa4>)
 800586e:	8852      	ldrh	r2, [r2, #2]
 8005870:	4293      	cmp	r3, r2
 8005872:	dc2a      	bgt.n	80058ca <lcdDrawImage+0x9a>

	for (int i = 0; i < pBitmap->ySize; ++i)
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e01c      	b.n	80058b4 <lcdDrawImage+0x84>
	{
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	b29a      	uxth	r2, r3
 800587e:	88bb      	ldrh	r3, [r7, #4]
 8005880:	4413      	add	r3, r2
 8005882:	b299      	uxth	r1, r3
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	8892      	ldrh	r2, [r2, #4]
 800588c:	4610      	mov	r0, r2
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	fb00 f202 	mul.w	r2, r0, r2
 8005894:	441a      	add	r2, r3
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	889b      	ldrh	r3, [r3, #4]
 800589a:	4618      	mov	r0, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	799b      	ldrb	r3, [r3, #6]
 80058a0:	08db      	lsrs	r3, r3, #3
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	fb90 f3f3 	sdiv	r3, r0, r3
 80058a8:	88f8      	ldrh	r0, [r7, #6]
 80058aa:	f000 fa41 	bl	8005d30 <lcdDrawPixels>
	for (int i = 0; i < pBitmap->ySize; ++i)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3301      	adds	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	885b      	ldrh	r3, [r3, #2]
 80058b8:	461a      	mov	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4293      	cmp	r3, r2
 80058be:	dbdc      	blt.n	800587a <lcdDrawImage+0x4a>
 80058c0:	e004      	b.n	80058cc <lcdDrawImage+0x9c>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80058c2:	bf00      	nop
 80058c4:	e002      	b.n	80058cc <lcdDrawImage+0x9c>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 80058c6:	bf00      	nop
 80058c8:	e000      	b.n	80058cc <lcdDrawImage+0x9c>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 80058ca:	bf00      	nop
	}
}
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	2000002c 	.word	0x2000002c

080058d8 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 80058d8:	b590      	push	{r4, r7, lr}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4604      	mov	r4, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	461a      	mov	r2, r3
 80058e6:	4623      	mov	r3, r4
 80058e8:	80fb      	strh	r3, [r7, #6]
 80058ea:	4603      	mov	r3, r0
 80058ec:	80bb      	strh	r3, [r7, #4]
 80058ee:	460b      	mov	r3, r1
 80058f0:	70fb      	strb	r3, [r7, #3]
 80058f2:	4613      	mov	r3, r2
 80058f4:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 80058f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058fa:	4a4a      	ldr	r2, [pc, #296]	@ (8005a24 <lcdDrawChar+0x14c>)
 80058fc:	8812      	ldrh	r2, [r2, #0]
 80058fe:	4293      	cmp	r3, r2
 8005900:	f280 808c 	bge.w	8005a1c <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8005904:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005908:	4a46      	ldr	r2, [pc, #280]	@ (8005a24 <lcdDrawChar+0x14c>)
 800590a:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 800590c:	4293      	cmp	r3, r2
 800590e:	f280 8085 	bge.w	8005a1c <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8005912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005916:	4a44      	ldr	r2, [pc, #272]	@ (8005a28 <lcdDrawChar+0x150>)
 8005918:	6892      	ldr	r2, [r2, #8]
 800591a:	8892      	ldrh	r2, [r2, #4]
 800591c:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 800591e:	2b00      	cmp	r3, #0
 8005920:	db7c      	blt.n	8005a1c <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8005922:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005926:	4a40      	ldr	r2, [pc, #256]	@ (8005a28 <lcdDrawChar+0x150>)
 8005928:	6892      	ldr	r2, [r2, #8]
 800592a:	88d2      	ldrh	r2, [r2, #6]
 800592c:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 800592e:	2b00      	cmp	r3, #0
 8005930:	db74      	blt.n	8005a1c <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8005932:	4b3d      	ldr	r3, [pc, #244]	@ (8005a28 <lcdDrawChar+0x150>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	88db      	ldrh	r3, [r3, #6]
 8005938:	08db      	lsrs	r3, r3, #3
 800593a:	b29b      	uxth	r3, r3
 800593c:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8005942:	2300      	movs	r3, #0
 8005944:	73bb      	strb	r3, [r7, #14]
 8005946:	e061      	b.n	8005a0c <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8005948:	2300      	movs	r3, #0
 800594a:	733b      	strb	r3, [r7, #12]
 800594c:	e055      	b.n	80059fa <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 800594e:	4b36      	ldr	r3, [pc, #216]	@ (8005a28 <lcdDrawChar+0x150>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	78fa      	ldrb	r2, [r7, #3]
 8005956:	3a20      	subs	r2, #32
 8005958:	4933      	ldr	r1, [pc, #204]	@ (8005a28 <lcdDrawChar+0x150>)
 800595a:	6889      	ldr	r1, [r1, #8]
 800595c:	88c9      	ldrh	r1, [r1, #6]
 800595e:	fb01 f202 	mul.w	r2, r1, r2
 8005962:	7ab9      	ldrb	r1, [r7, #10]
 8005964:	fb02 f101 	mul.w	r1, r2, r1
 8005968:	7bba      	ldrb	r2, [r7, #14]
 800596a:	7ab8      	ldrb	r0, [r7, #10]
 800596c:	fb00 f202 	mul.w	r2, r0, r2
 8005970:	4411      	add	r1, r2
 8005972:	7b3a      	ldrb	r2, [r7, #12]
 8005974:	440a      	add	r2, r1
 8005976:	4413      	add	r3, r2
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 800597c:	2300      	movs	r3, #0
 800597e:	72fb      	strb	r3, [r7, #11]
 8005980:	e032      	b.n	80059e8 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8005982:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005986:	2b00      	cmp	r3, #0
 8005988:	da12      	bge.n	80059b0 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 800598a:	7afb      	ldrb	r3, [r7, #11]
 800598c:	b29a      	uxth	r2, r3
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	4413      	add	r3, r2
 8005992:	b29a      	uxth	r2, r3
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	b29b      	uxth	r3, r3
 8005998:	4413      	add	r3, r2
 800599a:	b298      	uxth	r0, r3
 800599c:	7bbb      	ldrb	r3, [r7, #14]
 800599e:	b29a      	uxth	r2, r3
 80059a0:	88bb      	ldrh	r3, [r7, #4]
 80059a2:	4413      	add	r3, r2
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	883a      	ldrh	r2, [r7, #0]
 80059a8:	4619      	mov	r1, r3
 80059aa:	f7ff fa05 	bl	8004db8 <lcdDrawPixel>
 80059ae:	e015      	b.n	80059dc <lcdDrawChar+0x104>
				}
				else if (bg != color)
 80059b0:	8c3a      	ldrh	r2, [r7, #32]
 80059b2:	883b      	ldrh	r3, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d011      	beq.n	80059dc <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 80059b8:	7afb      	ldrb	r3, [r7, #11]
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	88fb      	ldrh	r3, [r7, #6]
 80059be:	4413      	add	r3, r2
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	4413      	add	r3, r2
 80059c8:	b298      	uxth	r0, r3
 80059ca:	7bbb      	ldrb	r3, [r7, #14]
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	88bb      	ldrh	r3, [r7, #4]
 80059d0:	4413      	add	r3, r2
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8c3a      	ldrh	r2, [r7, #32]
 80059d6:	4619      	mov	r1, r3
 80059d8:	f7ff f9ee 	bl	8004db8 <lcdDrawPixel>
				}
				line <<= 1;
 80059dc:	7b7b      	ldrb	r3, [r7, #13]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 80059e2:	7afb      	ldrb	r3, [r7, #11]
 80059e4:	3301      	adds	r3, #1
 80059e6:	72fb      	strb	r3, [r7, #11]
 80059e8:	7afb      	ldrb	r3, [r7, #11]
 80059ea:	2b07      	cmp	r3, #7
 80059ec:	d9c9      	bls.n	8005982 <lcdDrawChar+0xaa>
			}

			xP += 8;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	3308      	adds	r3, #8
 80059f2:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 80059f4:	7b3b      	ldrb	r3, [r7, #12]
 80059f6:	3301      	adds	r3, #1
 80059f8:	733b      	strb	r3, [r7, #12]
 80059fa:	7b3a      	ldrb	r2, [r7, #12]
 80059fc:	7abb      	ldrb	r3, [r7, #10]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d3a5      	bcc.n	800594e <lcdDrawChar+0x76>
		}

		xP = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8005a06:	7bbb      	ldrb	r3, [r7, #14]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	73bb      	strb	r3, [r7, #14]
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	4b05      	ldr	r3, [pc, #20]	@ (8005a28 <lcdDrawChar+0x150>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	88db      	ldrh	r3, [r3, #6]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d396      	bcc.n	8005948 <lcdDrawChar+0x70>
 8005a1a:	e000      	b.n	8005a1e <lcdDrawChar+0x146>
		return;
 8005a1c:	bf00      	nop
	}
}
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd90      	pop	{r4, r7, pc}
 8005a24:	2000002c 	.word	0x2000002c
 8005a28:	20000034 	.word	0x20000034

08005a2c <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8005a2c:	b40f      	push	{r0, r1, r2, r3}
 8005a2e:	b590      	push	{r4, r7, lr}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8005a34:	f107 031c 	add.w	r3, r7, #28
 8005a38:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	69b9      	ldr	r1, [r7, #24]
 8005a3e:	483d      	ldr	r0, [pc, #244]	@ (8005b34 <lcdPrintf+0x108>)
 8005a40:	f006 fde6 	bl	800c610 <vsiprintf>
	va_end(lst);

	p = buf;
 8005a44:	4b3b      	ldr	r3, [pc, #236]	@ (8005b34 <lcdPrintf+0x108>)
 8005a46:	607b      	str	r3, [r7, #4]
	while (*p)
 8005a48:	e067      	b.n	8005b1a <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b0a      	cmp	r3, #10
 8005a50:	d10c      	bne.n	8005a6c <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8005a52:	4b39      	ldr	r3, [pc, #228]	@ (8005b38 <lcdPrintf+0x10c>)
 8005a54:	885a      	ldrh	r2, [r3, #2]
 8005a56:	4b39      	ldr	r3, [pc, #228]	@ (8005b3c <lcdPrintf+0x110>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	88db      	ldrh	r3, [r3, #6]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	4b35      	ldr	r3, [pc, #212]	@ (8005b38 <lcdPrintf+0x10c>)
 8005a62:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8005a64:	4b34      	ldr	r3, [pc, #208]	@ (8005b38 <lcdPrintf+0x10c>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	e04a      	b.n	8005b02 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b0d      	cmp	r3, #13
 8005a72:	d046      	beq.n	8005b02 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b09      	cmp	r3, #9
 8005a7a:	d10b      	bne.n	8005a94 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8005a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8005b38 <lcdPrintf+0x10c>)
 8005a7e:	881a      	ldrh	r2, [r3, #0]
 8005a80:	4b2e      	ldr	r3, [pc, #184]	@ (8005b3c <lcdPrintf+0x110>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	889b      	ldrh	r3, [r3, #4]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	4413      	add	r3, r2
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8005b38 <lcdPrintf+0x10c>)
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	e036      	b.n	8005b02 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8005a94:	4b28      	ldr	r3, [pc, #160]	@ (8005b38 <lcdPrintf+0x10c>)
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b218      	sxth	r0, r3
 8005a9a:	4b27      	ldr	r3, [pc, #156]	@ (8005b38 <lcdPrintf+0x10c>)
 8005a9c:	885b      	ldrh	r3, [r3, #2]
 8005a9e:	b219      	sxth	r1, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	781a      	ldrb	r2, [r3, #0]
 8005aa4:	4b25      	ldr	r3, [pc, #148]	@ (8005b3c <lcdPrintf+0x110>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	b29c      	uxth	r4, r3
 8005aaa:	4b24      	ldr	r3, [pc, #144]	@ (8005b3c <lcdPrintf+0x110>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	4623      	mov	r3, r4
 8005ab4:	f7ff ff10 	bl	80058d8 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8005ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8005b38 <lcdPrintf+0x10c>)
 8005aba:	881a      	ldrh	r2, [r3, #0]
 8005abc:	4b1f      	ldr	r3, [pc, #124]	@ (8005b3c <lcdPrintf+0x110>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	889b      	ldrh	r3, [r3, #4]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8005b38 <lcdPrintf+0x10c>)
 8005ac8:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8005aca:	4b1c      	ldr	r3, [pc, #112]	@ (8005b3c <lcdPrintf+0x110>)
 8005acc:	7b1b      	ldrb	r3, [r3, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d017      	beq.n	8005b02 <lcdPrintf+0xd6>
 8005ad2:	4b19      	ldr	r3, [pc, #100]	@ (8005b38 <lcdPrintf+0x10c>)
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4b19      	ldr	r3, [pc, #100]	@ (8005b40 <lcdPrintf+0x114>)
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	4619      	mov	r1, r3
 8005ade:	4b17      	ldr	r3, [pc, #92]	@ (8005b3c <lcdPrintf+0x110>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	889b      	ldrh	r3, [r3, #4]
 8005ae4:	1acb      	subs	r3, r1, r3
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	dd0b      	ble.n	8005b02 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8005aea:	4b13      	ldr	r3, [pc, #76]	@ (8005b38 <lcdPrintf+0x10c>)
 8005aec:	885a      	ldrh	r2, [r3, #2]
 8005aee:	4b13      	ldr	r3, [pc, #76]	@ (8005b3c <lcdPrintf+0x110>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	88db      	ldrh	r3, [r3, #6]
 8005af4:	4413      	add	r3, r2
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b38 <lcdPrintf+0x10c>)
 8005afa:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8005afc:	4b0e      	ldr	r3, [pc, #56]	@ (8005b38 <lcdPrintf+0x10c>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3301      	adds	r3, #1
 8005b06:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8005b08:	4b0b      	ldr	r3, [pc, #44]	@ (8005b38 <lcdPrintf+0x10c>)
 8005b0a:	885a      	ldrh	r2, [r3, #2]
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b40 <lcdPrintf+0x114>)
 8005b0e:	885b      	ldrh	r3, [r3, #2]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d302      	bcc.n	8005b1a <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8005b14:	4b08      	ldr	r3, [pc, #32]	@ (8005b38 <lcdPrintf+0x10c>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	805a      	strh	r2, [r3, #2]
	while (*p)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d193      	bne.n	8005a4a <lcdPrintf+0x1e>
		}
	}
}
 8005b22:	bf00      	nop
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005b2e:	b004      	add	sp, #16
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	20002a5c 	.word	0x20002a5c
 8005b38:	20002a54 	.word	0x20002a54
 8005b3c:	20000034 	.word	0x20000034
 8005b40:	2000002c 	.word	0x2000002c

08005b44 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8005b4c:	4a04      	ldr	r2, [pc, #16]	@ (8005b60 <lcdSetTextFont+0x1c>)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6093      	str	r3, [r2, #8]
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000034 	.word	0x20000034

08005b64 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	460a      	mov	r2, r1
 8005b6e:	80fb      	strh	r3, [r7, #6]
 8005b70:	4613      	mov	r3, r2
 8005b72:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	4a05      	ldr	r2, [pc, #20]	@ (8005b8c <lcdSetTextColor+0x28>)
 8005b78:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8005b7a:	88bb      	ldrh	r3, [r7, #4]
 8005b7c:	4a03      	ldr	r2, [pc, #12]	@ (8005b8c <lcdSetTextColor+0x28>)
 8005b7e:	6053      	str	r3, [r2, #4]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	20000034 	.word	0x20000034

08005b90 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4603      	mov	r3, r0
 8005b98:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8005b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c50 <lcdSetOrientation+0xc0>)
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8005ba0:	2036      	movs	r0, #54	@ 0x36
 8005ba2:	f000 f8fb 	bl	8005d9c <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8005ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c50 <lcdSetOrientation+0xc0>)
 8005ba8:	791b      	ldrb	r3, [r3, #4]
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d83e      	bhi.n	8005c2c <lcdSetOrientation+0x9c>
 8005bae:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb4 <lcdSetOrientation+0x24>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005bc5 	.word	0x08005bc5
 8005bb8:	08005bf9 	.word	0x08005bf9
 8005bbc:	08005bdf 	.word	0x08005bdf
 8005bc0:	08005c13 	.word	0x08005c13
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8005bc4:	4b23      	ldr	r3, [pc, #140]	@ (8005c54 <lcdSetOrientation+0xc4>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 f8f7 	bl	8005dbc <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8005bce:	4b20      	ldr	r3, [pc, #128]	@ (8005c50 <lcdSetOrientation+0xc0>)
 8005bd0:	22f0      	movs	r2, #240	@ 0xf0
 8005bd2:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8005bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8005c50 <lcdSetOrientation+0xc0>)
 8005bd6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005bda:	805a      	strh	r2, [r3, #2]
			break;
 8005bdc:	e027      	b.n	8005c2e <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8005bde:	4b1e      	ldr	r3, [pc, #120]	@ (8005c58 <lcdSetOrientation+0xc8>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 f8ea 	bl	8005dbc <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8005be8:	4b19      	ldr	r3, [pc, #100]	@ (8005c50 <lcdSetOrientation+0xc0>)
 8005bea:	22f0      	movs	r2, #240	@ 0xf0
 8005bec:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8005bee:	4b18      	ldr	r3, [pc, #96]	@ (8005c50 <lcdSetOrientation+0xc0>)
 8005bf0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005bf4:	805a      	strh	r2, [r3, #2]
			break;
 8005bf6:	e01a      	b.n	8005c2e <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8005bf8:	4b18      	ldr	r3, [pc, #96]	@ (8005c5c <lcdSetOrientation+0xcc>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 f8dd 	bl	8005dbc <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8005c02:	4b13      	ldr	r3, [pc, #76]	@ (8005c50 <lcdSetOrientation+0xc0>)
 8005c04:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005c08:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8005c0a:	4b11      	ldr	r3, [pc, #68]	@ (8005c50 <lcdSetOrientation+0xc0>)
 8005c0c:	22f0      	movs	r2, #240	@ 0xf0
 8005c0e:	805a      	strh	r2, [r3, #2]
			break;
 8005c10:	e00d      	b.n	8005c2e <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8005c12:	4b13      	ldr	r3, [pc, #76]	@ (8005c60 <lcdSetOrientation+0xd0>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 f8d0 	bl	8005dbc <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c50 <lcdSetOrientation+0xc0>)
 8005c1e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005c22:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8005c24:	4b0a      	ldr	r3, [pc, #40]	@ (8005c50 <lcdSetOrientation+0xc0>)
 8005c26:	22f0      	movs	r2, #240	@ 0xf0
 8005c28:	805a      	strh	r2, [r3, #2]
			break;
 8005c2a:	e000      	b.n	8005c2e <lcdSetOrientation+0x9e>
		default:
			break;
 8005c2c:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8005c2e:	4b08      	ldr	r3, [pc, #32]	@ (8005c50 <lcdSetOrientation+0xc0>)
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	4b06      	ldr	r3, [pc, #24]	@ (8005c50 <lcdSetOrientation+0xc0>)
 8005c38:	885b      	ldrh	r3, [r3, #2]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2100      	movs	r1, #0
 8005c40:	2000      	movs	r0, #0
 8005c42:	f000 f829 	bl	8005c98 <lcdSetWindow>
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	2000002c 	.word	0x2000002c
 8005c54:	20002a58 	.word	0x20002a58
 8005c58:	20002a5a 	.word	0x20002a5a
 8005c5c:	20002a59 	.word	0x20002a59
 8005c60:	20002a5b 	.word	0x20002a5b

08005c64 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	460a      	mov	r2, r1
 8005c6e:	80fb      	strh	r3, [r7, #6]
 8005c70:	4613      	mov	r3, r2
 8005c72:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8005c74:	4a07      	ldr	r2, [pc, #28]	@ (8005c94 <lcdSetCursor+0x30>)
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8005c7a:	4a06      	ldr	r2, [pc, #24]	@ (8005c94 <lcdSetCursor+0x30>)
 8005c7c:	88bb      	ldrh	r3, [r7, #4]
 8005c7e:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8005c80:	88bb      	ldrh	r3, [r7, #4]
 8005c82:	88fa      	ldrh	r2, [r7, #6]
 8005c84:	88b9      	ldrh	r1, [r7, #4]
 8005c86:	88f8      	ldrh	r0, [r7, #6]
 8005c88:	f000 f806 	bl	8005c98 <lcdSetWindow>
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20002a54 	.word	0x20002a54

08005c98 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8005c98:	b590      	push	{r4, r7, lr}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	4608      	mov	r0, r1
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	4623      	mov	r3, r4
 8005ca8:	80fb      	strh	r3, [r7, #6]
 8005caa:	4603      	mov	r3, r0
 8005cac:	80bb      	strh	r3, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	807b      	strh	r3, [r7, #2]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8005cb6:	202a      	movs	r0, #42	@ 0x2a
 8005cb8:	f000 f870 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	0a1b      	lsrs	r3, r3, #8
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 f87a 	bl	8005dbc <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f874 	bl	8005dbc <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8005cd4:	887b      	ldrh	r3, [r7, #2]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f86e 	bl	8005dbc <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8005ce0:	887b      	ldrh	r3, [r7, #2]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f868 	bl	8005dbc <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8005cec:	202b      	movs	r0, #43	@ 0x2b
 8005cee:	f000 f855 	bl	8005d9c <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 8005cf2:	88bb      	ldrh	r3, [r7, #4]
 8005cf4:	0a1b      	lsrs	r3, r3, #8
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 f85f 	bl	8005dbc <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 8005cfe:	88bb      	ldrh	r3, [r7, #4]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 f859 	bl	8005dbc <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8005d0a:	883b      	ldrh	r3, [r7, #0]
 8005d0c:	0a1b      	lsrs	r3, r3, #8
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 f853 	bl	8005dbc <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 8005d16:	883b      	ldrh	r3, [r7, #0]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 f84d 	bl	8005dbc <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8005d22:	202c      	movs	r0, #44	@ 0x2c
 8005d24:	f000 f83a 	bl	8005d9c <lcdWriteCommand>
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd90      	pop	{r4, r7, pc}

08005d30 <lcdDrawPixels>:
}

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60ba      	str	r2, [r7, #8]
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	81fb      	strh	r3, [r7, #14]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	81bb      	strh	r3, [r7, #12]
  uint32_t i = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]

  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8005d46:	4b0f      	ldr	r3, [pc, #60]	@ (8005d84 <lcdDrawPixels+0x54>)
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d84 <lcdDrawPixels+0x54>)
 8005d50:	885b      	ldrh	r3, [r3, #2]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	89b9      	ldrh	r1, [r7, #12]
 8005d58:	89f8      	ldrh	r0, [r7, #14]
 8005d5a:	f7ff ff9d 	bl	8005c98 <lcdSetWindow>

  do
  {
    lcdWriteData(data[i++]);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	617a      	str	r2, [r7, #20]
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	4413      	add	r3, r2
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 f825 	bl	8005dbc <lcdWriteData>
  }
  while (i < dataLength);
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d3f1      	bcc.n	8005d5e <lcdDrawPixels+0x2e>
}
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	2000002c 	.word	0x2000002c

08005d88 <lcdReset>:

static void lcdReset(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8005d8c:	2001      	movs	r0, #1
 8005d8e:	f000 f805 	bl	8005d9c <lcdWriteCommand>
	HAL_Delay(50);
 8005d92:	2032      	movs	r0, #50	@ 0x32
 8005d94:	f002 f9fe 	bl	8008194 <HAL_Delay>
}
 8005d98:	bf00      	nop
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8005da6:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8005daa:	79fa      	ldrb	r2, [r7, #7]
 8005dac:	b292      	uxth	r2, r2
 8005dae:	801a      	strh	r2, [r3, #0]
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8005dc6:	4a04      	ldr	r2, [pc, #16]	@ (8005dd8 <lcdWriteData+0x1c>)
 8005dc8:	88fb      	ldrh	r3, [r7, #6]
 8005dca:	8013      	strh	r3, [r2, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	60080000 	.word	0x60080000

08005ddc <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8005ddc:	b490      	push	{r4, r7}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4604      	mov	r4, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	4611      	mov	r1, r2
 8005de8:	461a      	mov	r2, r3
 8005dea:	4623      	mov	r3, r4
 8005dec:	71fb      	strb	r3, [r7, #7]
 8005dee:	4603      	mov	r3, r0
 8005df0:	71bb      	strb	r3, [r7, #6]
 8005df2:	460b      	mov	r3, r1
 8005df4:	717b      	strb	r3, [r7, #5]
 8005df6:	4613      	mov	r3, r2
 8005df8:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8005dfe:	7f3b      	ldrb	r3, [r7, #28]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <lcdBuildMemoryAccessControlConfig+0x30>
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	f043 0304 	orr.w	r3, r3, #4
 8005e0a:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8005e0c:	7e3b      	ldrb	r3, [r7, #24]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <lcdBuildMemoryAccessControlConfig+0x3e>
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	f043 0308 	orr.w	r3, r3, #8
 8005e18:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8005e1a:	793b      	ldrb	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <lcdBuildMemoryAccessControlConfig+0x4c>
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	f043 0310 	orr.w	r3, r3, #16
 8005e26:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8005e28:	797b      	ldrb	r3, [r7, #5]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <lcdBuildMemoryAccessControlConfig+0x5a>
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	f043 0320 	orr.w	r3, r3, #32
 8005e34:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8005e36:	79bb      	ldrb	r3, [r7, #6]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <lcdBuildMemoryAccessControlConfig+0x68>
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e42:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8005e44:	79fb      	ldrb	r3, [r7, #7]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <lcdBuildMemoryAccessControlConfig+0x76>
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e50:	73fb      	strb	r3, [r7, #15]
  return value;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc90      	pop	{r4, r7}
 8005e5c:	4770      	bx	lr
	...

08005e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e66:	f002 f923 	bl	80080b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e6a:	f000 f839 	bl	8005ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e6e:	f000 f94f 	bl	8006110 <MX_GPIO_Init>
  MX_FSMC_Init();
 8005e72:	f000 f9d7 	bl	8006224 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8005e76:	f000 f921 	bl	80060bc <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8005e7a:	f000 f89b 	bl	8005fb4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8005e7e:	f000 f8cf 	bl	8006020 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LCD_BL_ON();
 8005e82:	2201      	movs	r2, #1
 8005e84:	2102      	movs	r1, #2
 8005e86:	4812      	ldr	r0, [pc, #72]	@ (8005ed0 <main+0x70>)
 8005e88:	f002 fd00 	bl	800888c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 8005e8c:	4811      	ldr	r0, [pc, #68]	@ (8005ed4 <main+0x74>)
 8005e8e:	f003 fd55 	bl	800993c <HAL_TIM_Base_Start_IT>
  TouchCalibrate();
 8005e92:	f002 f8b5 	bl	8008000 <TouchCalibrate>

  lcdInit();
 8005e96:	f7fe fdf1 	bl	8004a7c <lcdInit>
  int i = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	607b      	str	r3, [r7, #4]

  lcdSetOrientation(i%4);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	425a      	negs	r2, r3
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	f002 0203 	and.w	r2, r2, #3
 8005eaa:	bf58      	it	pl
 8005eac:	4253      	negpl	r3, r2
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fe6d 	bl	8005b90 <lcdSetOrientation>
  lcdFillRGB(COLOR_BLACK);
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f7fe ff54 	bl	8004d64 <lcdFillRGB>
//  while (1){
//	  Screen3(choice);
//	  HAL_Delay(10000);
//  }

  Send_AT_Commands(&huart1);
 8005ebc:	4806      	ldr	r0, [pc, #24]	@ (8005ed8 <main+0x78>)
 8005ebe:	f000 faa7 	bl	8006410 <Send_AT_Commands>


  processWeather(uart_rx_buffer);
 8005ec2:	4806      	ldr	r0, [pc, #24]	@ (8005edc <main+0x7c>)
 8005ec4:	f000 fbc8 	bl	8006658 <processWeather>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RunProgram();
 8005ec8:	f000 fe3c 	bl	8006b44 <RunProgram>
 8005ecc:	e7fc      	b.n	8005ec8 <main+0x68>
 8005ece:	bf00      	nop
 8005ed0:	40020400 	.word	0x40020400
 8005ed4:	200033b4 	.word	0x200033b4
 8005ed8:	200033fc 	.word	0x200033fc
 8005edc:	20002b5c 	.word	0x20002b5c

08005ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b094      	sub	sp, #80	@ 0x50
 8005ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ee6:	f107 0320 	add.w	r3, r7, #32
 8005eea:	2230      	movs	r2, #48	@ 0x30
 8005eec:	2100      	movs	r1, #0
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f006 fb98 	bl	800c624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ef4:	f107 030c 	add.w	r3, r7, #12
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	609a      	str	r2, [r3, #8]
 8005f00:	60da      	str	r2, [r3, #12]
 8005f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f04:	2300      	movs	r3, #0
 8005f06:	60bb      	str	r3, [r7, #8]
 8005f08:	4b28      	ldr	r3, [pc, #160]	@ (8005fac <SystemClock_Config+0xcc>)
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	4a27      	ldr	r2, [pc, #156]	@ (8005fac <SystemClock_Config+0xcc>)
 8005f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f14:	4b25      	ldr	r3, [pc, #148]	@ (8005fac <SystemClock_Config+0xcc>)
 8005f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f1c:	60bb      	str	r3, [r7, #8]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f20:	2300      	movs	r3, #0
 8005f22:	607b      	str	r3, [r7, #4]
 8005f24:	4b22      	ldr	r3, [pc, #136]	@ (8005fb0 <SystemClock_Config+0xd0>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a21      	ldr	r2, [pc, #132]	@ (8005fb0 <SystemClock_Config+0xd0>)
 8005f2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	4b1f      	ldr	r3, [pc, #124]	@ (8005fb0 <SystemClock_Config+0xd0>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f38:	607b      	str	r3, [r7, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f46:	2302      	movs	r3, #2
 8005f48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005f50:	2304      	movs	r3, #4
 8005f52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005f54:	23a8      	movs	r3, #168	@ 0xa8
 8005f56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f60:	f107 0320 	add.w	r3, r7, #32
 8005f64:	4618      	mov	r0, r3
 8005f66:	f002 fcab 	bl	80088c0 <HAL_RCC_OscConfig>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005f70:	f001 fc4e 	bl	8007810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f74:	230f      	movs	r3, #15
 8005f76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005f80:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005f84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005f8c:	f107 030c 	add.w	r3, r7, #12
 8005f90:	2105      	movs	r1, #5
 8005f92:	4618      	mov	r0, r3
 8005f94:	f002 ff0c 	bl	8008db0 <HAL_RCC_ClockConfig>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005f9e:	f001 fc37 	bl	8007810 <Error_Handler>
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	3750      	adds	r7, #80	@ 0x50
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	40007000 	.word	0x40007000

08005fb4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005fb8:	4b17      	ldr	r3, [pc, #92]	@ (8006018 <MX_SPI2_Init+0x64>)
 8005fba:	4a18      	ldr	r2, [pc, #96]	@ (800601c <MX_SPI2_Init+0x68>)
 8005fbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005fbe:	4b16      	ldr	r3, [pc, #88]	@ (8006018 <MX_SPI2_Init+0x64>)
 8005fc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005fc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005fc6:	4b14      	ldr	r3, [pc, #80]	@ (8006018 <MX_SPI2_Init+0x64>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005fcc:	4b12      	ldr	r3, [pc, #72]	@ (8006018 <MX_SPI2_Init+0x64>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fd2:	4b11      	ldr	r3, [pc, #68]	@ (8006018 <MX_SPI2_Init+0x64>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8006018 <MX_SPI2_Init+0x64>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005fde:	4b0e      	ldr	r3, [pc, #56]	@ (8006018 <MX_SPI2_Init+0x64>)
 8005fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fe4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <MX_SPI2_Init+0x64>)
 8005fe8:	2228      	movs	r2, #40	@ 0x28
 8005fea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005fec:	4b0a      	ldr	r3, [pc, #40]	@ (8006018 <MX_SPI2_Init+0x64>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ff2:	4b09      	ldr	r3, [pc, #36]	@ (8006018 <MX_SPI2_Init+0x64>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ff8:	4b07      	ldr	r3, [pc, #28]	@ (8006018 <MX_SPI2_Init+0x64>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005ffe:	4b06      	ldr	r3, [pc, #24]	@ (8006018 <MX_SPI2_Init+0x64>)
 8006000:	220a      	movs	r2, #10
 8006002:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006004:	4804      	ldr	r0, [pc, #16]	@ (8006018 <MX_SPI2_Init+0x64>)
 8006006:	f003 f8f3 	bl	80091f0 <HAL_SPI_Init>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006010:	f001 fbfe 	bl	8007810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006014:	bf00      	nop
 8006016:	bd80      	pop	{r7, pc}
 8006018:	2000335c 	.word	0x2000335c
 800601c:	40003800 	.word	0x40003800

08006020 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006026:	f107 0308 	add.w	r3, r7, #8
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	605a      	str	r2, [r3, #4]
 8006030:	609a      	str	r2, [r3, #8]
 8006032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006034:	463b      	mov	r3, r7
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800603c:	4b1e      	ldr	r3, [pc, #120]	@ (80060b8 <MX_TIM2_Init+0x98>)
 800603e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006042:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8499;
 8006044:	4b1c      	ldr	r3, [pc, #112]	@ (80060b8 <MX_TIM2_Init+0x98>)
 8006046:	f242 1233 	movw	r2, #8499	@ 0x2133
 800604a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800604c:	4b1a      	ldr	r3, [pc, #104]	@ (80060b8 <MX_TIM2_Init+0x98>)
 800604e:	2200      	movs	r2, #0
 8006050:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8006052:	4b19      	ldr	r3, [pc, #100]	@ (80060b8 <MX_TIM2_Init+0x98>)
 8006054:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006058:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800605a:	4b17      	ldr	r3, [pc, #92]	@ (80060b8 <MX_TIM2_Init+0x98>)
 800605c:	2200      	movs	r2, #0
 800605e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006060:	4b15      	ldr	r3, [pc, #84]	@ (80060b8 <MX_TIM2_Init+0x98>)
 8006062:	2200      	movs	r2, #0
 8006064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006066:	4814      	ldr	r0, [pc, #80]	@ (80060b8 <MX_TIM2_Init+0x98>)
 8006068:	f003 fc18 	bl	800989c <HAL_TIM_Base_Init>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006072:	f001 fbcd 	bl	8007810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800607a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800607c:	f107 0308 	add.w	r3, r7, #8
 8006080:	4619      	mov	r1, r3
 8006082:	480d      	ldr	r0, [pc, #52]	@ (80060b8 <MX_TIM2_Init+0x98>)
 8006084:	f003 fdba 	bl	8009bfc <HAL_TIM_ConfigClockSource>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800608e:	f001 fbbf 	bl	8007810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006092:	2300      	movs	r3, #0
 8006094:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006096:	2300      	movs	r3, #0
 8006098:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800609a:	463b      	mov	r3, r7
 800609c:	4619      	mov	r1, r3
 800609e:	4806      	ldr	r0, [pc, #24]	@ (80060b8 <MX_TIM2_Init+0x98>)
 80060a0:	f003 ffe2 	bl	800a068 <HAL_TIMEx_MasterConfigSynchronization>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80060aa:	f001 fbb1 	bl	8007810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80060ae:	bf00      	nop
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	200033b4 	.word	0x200033b4

080060bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80060c0:	4b11      	ldr	r3, [pc, #68]	@ (8006108 <MX_USART1_UART_Init+0x4c>)
 80060c2:	4a12      	ldr	r2, [pc, #72]	@ (800610c <MX_USART1_UART_Init+0x50>)
 80060c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80060c6:	4b10      	ldr	r3, [pc, #64]	@ (8006108 <MX_USART1_UART_Init+0x4c>)
 80060c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80060cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006108 <MX_USART1_UART_Init+0x4c>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006108 <MX_USART1_UART_Init+0x4c>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060da:	4b0b      	ldr	r3, [pc, #44]	@ (8006108 <MX_USART1_UART_Init+0x4c>)
 80060dc:	2200      	movs	r2, #0
 80060de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060e0:	4b09      	ldr	r3, [pc, #36]	@ (8006108 <MX_USART1_UART_Init+0x4c>)
 80060e2:	220c      	movs	r2, #12
 80060e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060e6:	4b08      	ldr	r3, [pc, #32]	@ (8006108 <MX_USART1_UART_Init+0x4c>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80060ec:	4b06      	ldr	r3, [pc, #24]	@ (8006108 <MX_USART1_UART_Init+0x4c>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80060f2:	4805      	ldr	r0, [pc, #20]	@ (8006108 <MX_USART1_UART_Init+0x4c>)
 80060f4:	f004 f848 	bl	800a188 <HAL_UART_Init>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80060fe:	f001 fb87 	bl	8007810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	200033fc 	.word	0x200033fc
 800610c:	40011000 	.word	0x40011000

08006110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08c      	sub	sp, #48	@ 0x30
 8006114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006116:	f107 031c 	add.w	r3, r7, #28
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	605a      	str	r2, [r3, #4]
 8006120:	609a      	str	r2, [r3, #8]
 8006122:	60da      	str	r2, [r3, #12]
 8006124:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006126:	2300      	movs	r3, #0
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	4b3b      	ldr	r3, [pc, #236]	@ (8006218 <MX_GPIO_Init+0x108>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612e:	4a3a      	ldr	r2, [pc, #232]	@ (8006218 <MX_GPIO_Init+0x108>)
 8006130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006134:	6313      	str	r3, [r2, #48]	@ 0x30
 8006136:	4b38      	ldr	r3, [pc, #224]	@ (8006218 <MX_GPIO_Init+0x108>)
 8006138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	4b34      	ldr	r3, [pc, #208]	@ (8006218 <MX_GPIO_Init+0x108>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614a:	4a33      	ldr	r2, [pc, #204]	@ (8006218 <MX_GPIO_Init+0x108>)
 800614c:	f043 0304 	orr.w	r3, r3, #4
 8006150:	6313      	str	r3, [r2, #48]	@ 0x30
 8006152:	4b31      	ldr	r3, [pc, #196]	@ (8006218 <MX_GPIO_Init+0x108>)
 8006154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800615e:	2300      	movs	r3, #0
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	4b2d      	ldr	r3, [pc, #180]	@ (8006218 <MX_GPIO_Init+0x108>)
 8006164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006166:	4a2c      	ldr	r2, [pc, #176]	@ (8006218 <MX_GPIO_Init+0x108>)
 8006168:	f043 0302 	orr.w	r3, r3, #2
 800616c:	6313      	str	r3, [r2, #48]	@ 0x30
 800616e:	4b2a      	ldr	r3, [pc, #168]	@ (8006218 <MX_GPIO_Init+0x108>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	4b26      	ldr	r3, [pc, #152]	@ (8006218 <MX_GPIO_Init+0x108>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006182:	4a25      	ldr	r2, [pc, #148]	@ (8006218 <MX_GPIO_Init+0x108>)
 8006184:	f043 0310 	orr.w	r3, r3, #16
 8006188:	6313      	str	r3, [r2, #48]	@ 0x30
 800618a:	4b23      	ldr	r3, [pc, #140]	@ (8006218 <MX_GPIO_Init+0x108>)
 800618c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618e:	f003 0310 	and.w	r3, r3, #16
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	4b1f      	ldr	r3, [pc, #124]	@ (8006218 <MX_GPIO_Init+0x108>)
 800619c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619e:	4a1e      	ldr	r2, [pc, #120]	@ (8006218 <MX_GPIO_Init+0x108>)
 80061a0:	f043 0308 	orr.w	r3, r3, #8
 80061a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80061a6:	4b1c      	ldr	r3, [pc, #112]	@ (8006218 <MX_GPIO_Init+0x108>)
 80061a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061b2:	2300      	movs	r3, #0
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	4b18      	ldr	r3, [pc, #96]	@ (8006218 <MX_GPIO_Init+0x108>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ba:	4a17      	ldr	r2, [pc, #92]	@ (8006218 <MX_GPIO_Init+0x108>)
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80061c2:	4b15      	ldr	r3, [pc, #84]	@ (8006218 <MX_GPIO_Init+0x108>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);
 80061ce:	2200      	movs	r2, #0
 80061d0:	f241 0102 	movw	r1, #4098	@ 0x1002
 80061d4:	4811      	ldr	r0, [pc, #68]	@ (800621c <MX_GPIO_Init+0x10c>)
 80061d6:	f002 fb59 	bl	800888c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TC_PEN_Pin */
  GPIO_InitStruct.Pin = TC_PEN_Pin;
 80061da:	2320      	movs	r3, #32
 80061dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061de:	2300      	movs	r3, #0
 80061e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TC_PEN_GPIO_Port, &GPIO_InitStruct);
 80061e6:	f107 031c 	add.w	r3, r7, #28
 80061ea:	4619      	mov	r1, r3
 80061ec:	480c      	ldr	r0, [pc, #48]	@ (8006220 <MX_GPIO_Init+0x110>)
 80061ee:	f002 f999 	bl	8008524 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|TOUCH_CS_Pin;
 80061f2:	f241 0302 	movw	r3, #4098	@ 0x1002
 80061f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061f8:	2301      	movs	r3, #1
 80061fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006200:	2300      	movs	r3, #0
 8006202:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006204:	f107 031c 	add.w	r3, r7, #28
 8006208:	4619      	mov	r1, r3
 800620a:	4804      	ldr	r0, [pc, #16]	@ (800621c <MX_GPIO_Init+0x10c>)
 800620c:	f002 f98a 	bl	8008524 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006210:	bf00      	nop
 8006212:	3730      	adds	r7, #48	@ 0x30
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40023800 	.word	0x40023800
 800621c:	40020400 	.word	0x40020400
 8006220:	40020800 	.word	0x40020800

08006224 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800622a:	1d3b      	adds	r3, r7, #4
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	605a      	str	r2, [r3, #4]
 8006232:	609a      	str	r2, [r3, #8]
 8006234:	60da      	str	r2, [r3, #12]
 8006236:	611a      	str	r2, [r3, #16]
 8006238:	615a      	str	r2, [r3, #20]
 800623a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800623c:	4b27      	ldr	r3, [pc, #156]	@ (80062dc <MX_FSMC_Init+0xb8>)
 800623e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8006242:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8006244:	4b25      	ldr	r3, [pc, #148]	@ (80062dc <MX_FSMC_Init+0xb8>)
 8006246:	4a26      	ldr	r2, [pc, #152]	@ (80062e0 <MX_FSMC_Init+0xbc>)
 8006248:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800624a:	4b24      	ldr	r3, [pc, #144]	@ (80062dc <MX_FSMC_Init+0xb8>)
 800624c:	2200      	movs	r2, #0
 800624e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006250:	4b22      	ldr	r3, [pc, #136]	@ (80062dc <MX_FSMC_Init+0xb8>)
 8006252:	2200      	movs	r2, #0
 8006254:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8006256:	4b21      	ldr	r3, [pc, #132]	@ (80062dc <MX_FSMC_Init+0xb8>)
 8006258:	2200      	movs	r2, #0
 800625a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800625c:	4b1f      	ldr	r3, [pc, #124]	@ (80062dc <MX_FSMC_Init+0xb8>)
 800625e:	2210      	movs	r2, #16
 8006260:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8006262:	4b1e      	ldr	r3, [pc, #120]	@ (80062dc <MX_FSMC_Init+0xb8>)
 8006264:	2200      	movs	r2, #0
 8006266:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8006268:	4b1c      	ldr	r3, [pc, #112]	@ (80062dc <MX_FSMC_Init+0xb8>)
 800626a:	2200      	movs	r2, #0
 800626c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800626e:	4b1b      	ldr	r3, [pc, #108]	@ (80062dc <MX_FSMC_Init+0xb8>)
 8006270:	2200      	movs	r2, #0
 8006272:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8006274:	4b19      	ldr	r3, [pc, #100]	@ (80062dc <MX_FSMC_Init+0xb8>)
 8006276:	2200      	movs	r2, #0
 8006278:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800627a:	4b18      	ldr	r3, [pc, #96]	@ (80062dc <MX_FSMC_Init+0xb8>)
 800627c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006280:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8006282:	4b16      	ldr	r3, [pc, #88]	@ (80062dc <MX_FSMC_Init+0xb8>)
 8006284:	2200      	movs	r2, #0
 8006286:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8006288:	4b14      	ldr	r3, [pc, #80]	@ (80062dc <MX_FSMC_Init+0xb8>)
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800628e:	4b13      	ldr	r3, [pc, #76]	@ (80062dc <MX_FSMC_Init+0xb8>)
 8006290:	2200      	movs	r2, #0
 8006292:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8006294:	4b11      	ldr	r3, [pc, #68]	@ (80062dc <MX_FSMC_Init+0xb8>)
 8006296:	2200      	movs	r2, #0
 8006298:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800629a:	4b10      	ldr	r3, [pc, #64]	@ (80062dc <MX_FSMC_Init+0xb8>)
 800629c:	2200      	movs	r2, #0
 800629e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80062a0:	2301      	movs	r3, #1
 80062a2:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80062a4:	230f      	movs	r3, #15
 80062a6:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80062a8:	2305      	movs	r3, #5
 80062aa:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80062b0:	2310      	movs	r3, #16
 80062b2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80062b4:	2311      	movs	r3, #17
 80062b6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80062b8:	2300      	movs	r3, #0
 80062ba:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80062bc:	1d3b      	adds	r3, r7, #4
 80062be:	2200      	movs	r2, #0
 80062c0:	4619      	mov	r1, r3
 80062c2:	4806      	ldr	r0, [pc, #24]	@ (80062dc <MX_FSMC_Init+0xb8>)
 80062c4:	f003 faa2 	bl	800980c <HAL_SRAM_Init>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80062ce:	f001 fa9f 	bl	8007810 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80062d2:	bf00      	nop
 80062d4:	3720      	adds	r7, #32
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20003444 	.word	0x20003444
 80062e0:	a0000104 	.word	0xa0000104

080062e4 <HAL_TIM_PeriodElapsedCallback>:
// Hàm xử lý ngắt của bộ định th�?i


// Hàm callback khi ngắt xảy ra
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f4:	d120      	bne.n	8006338 <HAL_TIM_PeriodElapsedCallback+0x54>
    {
    	count++;
 80062f6:	4b13      	ldr	r3, [pc, #76]	@ (8006344 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3301      	adds	r3, #1
 80062fc:	4a11      	ldr	r2, [pc, #68]	@ (8006344 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80062fe:	6013      	str	r3, [r2, #0]
    	if (count % 5 == 0){
 8006300:	4b10      	ldr	r3, [pc, #64]	@ (8006344 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	4b10      	ldr	r3, [pc, #64]	@ (8006348 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8006306:	fb83 2301 	smull	r2, r3, r3, r1
 800630a:	105a      	asrs	r2, r3, #1
 800630c:	17cb      	asrs	r3, r1, #31
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	1aca      	subs	r2, r1, r3
 8006318:	2a00      	cmp	r2, #0
 800631a:	d102      	bne.n	8006322 <HAL_TIM_PeriodElapsedCallback+0x3e>
        	readDHT = true; // �?ặt c�? để báo hiệu cần đ�?c dữ liệu
 800631c:	4b0b      	ldr	r3, [pc, #44]	@ (800634c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800631e:	2201      	movs	r2, #1
 8006320:	701a      	strb	r2, [r3, #0]
		}
    	if (count == 300){
 8006322:	4b08      	ldr	r3, [pc, #32]	@ (8006344 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800632a:	d105      	bne.n	8006338 <HAL_TIM_PeriodElapsedCallback+0x54>
    		//call API
    		Recall = true;
 800632c:	4b08      	ldr	r3, [pc, #32]	@ (8006350 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800632e:	2201      	movs	r2, #1
 8006330:	701a      	strb	r2, [r3, #0]
    		count = 0;
 8006332:	4b04      	ldr	r3, [pc, #16]	@ (8006344 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
    	}
    }
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	20003494 	.word	0x20003494
 8006348:	66666667 	.word	0x66666667
 800634c:	20003498 	.word	0x20003498
 8006350:	20003499 	.word	0x20003499

08006354 <Send_AT_Command>:
void Send_AT_Command(UART_HandleTypeDef *huart, const char *command, uint32_t timeout) {
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
    // Gửi lệnh qua UART

    HAL_UART_Transmit(huart, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8006360:	68b8      	ldr	r0, [r7, #8]
 8006362:	f7f9 ff3f 	bl	80001e4 <strlen>
 8006366:	4603      	mov	r3, r0
 8006368:	b29a      	uxth	r2, r3
 800636a:	f04f 33ff 	mov.w	r3, #4294967295
 800636e:	68b9      	ldr	r1, [r7, #8]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f003 ff59 	bl	800a228 <HAL_UART_Transmit>

    // Ch�? phản hồi từ ESP
    memset(uart_rx_buffer, 0, UART_BUFFER_SIZE); // Xóa buffer
 8006376:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800637a:	2100      	movs	r1, #0
 800637c:	480f      	ldr	r0, [pc, #60]	@ (80063bc <Send_AT_Command+0x68>)
 800637e:	f006 f951 	bl	800c624 <memset>
    HAL_UART_Receive(huart, uart_rx_buffer, UART_BUFFER_SIZE, timeout);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006388:	490c      	ldr	r1, [pc, #48]	@ (80063bc <Send_AT_Command+0x68>)
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f003 ffd7 	bl	800a33e <HAL_UART_Receive>

    // Hiển thị phản hồi lên màn hình
    lcdSetCursor(5,220);
 8006390:	21dc      	movs	r1, #220	@ 0xdc
 8006392:	2005      	movs	r0, #5
 8006394:	f7ff fc66 	bl	8005c64 <lcdSetCursor>
    Screen0();
 8006398:	f7fd ff9e 	bl	80042d8 <Screen0>
    lcdSetTextColor(COLOR_BLACK, COLOR_THEME_SKYBLUE_BASE);
 800639c:	f249 517f 	movw	r1, #38271	@ 0x957f
 80063a0:	2000      	movs	r0, #0
 80063a2:	f7ff fbdf 	bl	8005b64 <lcdSetTextColor>
    lcdSetTextFont(&Font16);
 80063a6:	4806      	ldr	r0, [pc, #24]	@ (80063c0 <Send_AT_Command+0x6c>)
 80063a8:	f7ff fbcc 	bl	8005b44 <lcdSetTextFont>
    lcdPrintf("ESP: %s\n", uart_rx_buffer);
 80063ac:	4903      	ldr	r1, [pc, #12]	@ (80063bc <Send_AT_Command+0x68>)
 80063ae:	4805      	ldr	r0, [pc, #20]	@ (80063c4 <Send_AT_Command+0x70>)
 80063b0:	f7ff fb3c 	bl	8005a2c <lcdPrintf>
}
 80063b4:	bf00      	nop
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20002b5c 	.word	0x20002b5c
 80063c0:	20000014 	.word	0x20000014
 80063c4:	0800f224 	.word	0x0800f224

080063c8 <Send_AT_Command1>:
void Send_AT_Command1(UART_HandleTypeDef *huart, const char *command, uint32_t timeout) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
    // Gửi lệnh qua UART

    HAL_UART_Transmit(huart, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 80063d4:	68b8      	ldr	r0, [r7, #8]
 80063d6:	f7f9 ff05 	bl	80001e4 <strlen>
 80063da:	4603      	mov	r3, r0
 80063dc:	b29a      	uxth	r2, r3
 80063de:	f04f 33ff 	mov.w	r3, #4294967295
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f003 ff1f 	bl	800a228 <HAL_UART_Transmit>

    // Ch�? phản hồi từ ESP
    memset(uart_rx_buffer, 0, UART_BUFFER_SIZE); // Xóa buffer
 80063ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063ee:	2100      	movs	r1, #0
 80063f0:	4806      	ldr	r0, [pc, #24]	@ (800640c <Send_AT_Command1+0x44>)
 80063f2:	f006 f917 	bl	800c624 <memset>
    HAL_UART_Receive(huart, uart_rx_buffer, UART_BUFFER_SIZE, timeout);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063fc:	4903      	ldr	r1, [pc, #12]	@ (800640c <Send_AT_Command1+0x44>)
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f003 ff9d 	bl	800a33e <HAL_UART_Receive>
}
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20002b5c 	.word	0x20002b5c

08006410 <Send_AT_Commands>:


void Send_AT_Commands(UART_HandleTypeDef *huart) {
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
    // Gửi từng lệnh AT và xử lý phản hồi

    Send_AT_Command(huart, "AT\r\n", 3000 );
 8006418:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800641c:	492a      	ldr	r1, [pc, #168]	@ (80064c8 <Send_AT_Commands+0xb8>)
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff ff98 	bl	8006354 <Send_AT_Command>
    Send_AT_Command(huart, "AT+CWMODE=3\r\n", 3000 );
 8006424:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006428:	4928      	ldr	r1, [pc, #160]	@ (80064cc <Send_AT_Commands+0xbc>)
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff ff92 	bl	8006354 <Send_AT_Command>
    Send_AT_Command(huart, "AT+CWJAP=\"RedmiTurbo3\",\"88888888\"\r\n", 9000 );
 8006430:	f242 3228 	movw	r2, #9000	@ 0x2328
 8006434:	4926      	ldr	r1, [pc, #152]	@ (80064d0 <Send_AT_Commands+0xc0>)
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7ff ff8c 	bl	8006354 <Send_AT_Command>
    Send_AT_Command(huart, "AT+CIPSTART=\"TCP\",\"api.open-meteo.com\",80\r\n", 3000 );
 800643c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006440:	4924      	ldr	r1, [pc, #144]	@ (80064d4 <Send_AT_Commands+0xc4>)
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7ff ff86 	bl	8006354 <Send_AT_Command>
    Send_AT_Command(huart, "AT+CIPSEND=299\r\n", 3000);
 8006448:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800644c:	4922      	ldr	r1, [pc, #136]	@ (80064d8 <Send_AT_Commands+0xc8>)
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff ff80 	bl	8006354 <Send_AT_Command>

    // Gửi yêu cầu GET cuối cùng
    if (choice == 1){
 8006454:	4b21      	ldr	r3, [pc, #132]	@ (80064dc <Send_AT_Commands+0xcc>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d106      	bne.n	800646a <Send_AT_Commands+0x5a>
    	Send_AT_Command(huart, ATCommand1, 5000);
 800645c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006460:	491f      	ldr	r1, [pc, #124]	@ (80064e0 <Send_AT_Commands+0xd0>)
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff ff76 	bl	8006354 <Send_AT_Command>
	}
    else if(choice == 5){
		Send_AT_Command(huart, ATCommand5, 5000);
	}

}
 8006468:	e02a      	b.n	80064c0 <Send_AT_Commands+0xb0>
    else if(choice == 2){
 800646a:	4b1c      	ldr	r3, [pc, #112]	@ (80064dc <Send_AT_Commands+0xcc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d106      	bne.n	8006480 <Send_AT_Commands+0x70>
    	Send_AT_Command(huart, ATCommand2, 5000);
 8006472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006476:	491b      	ldr	r1, [pc, #108]	@ (80064e4 <Send_AT_Commands+0xd4>)
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff ff6b 	bl	8006354 <Send_AT_Command>
}
 800647e:	e01f      	b.n	80064c0 <Send_AT_Commands+0xb0>
    else if(choice == 3){
 8006480:	4b16      	ldr	r3, [pc, #88]	@ (80064dc <Send_AT_Commands+0xcc>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b03      	cmp	r3, #3
 8006486:	d106      	bne.n	8006496 <Send_AT_Commands+0x86>
		Send_AT_Command(huart, ATCommand3, 5000);
 8006488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800648c:	4916      	ldr	r1, [pc, #88]	@ (80064e8 <Send_AT_Commands+0xd8>)
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff ff60 	bl	8006354 <Send_AT_Command>
}
 8006494:	e014      	b.n	80064c0 <Send_AT_Commands+0xb0>
    else if(choice == 4){
 8006496:	4b11      	ldr	r3, [pc, #68]	@ (80064dc <Send_AT_Commands+0xcc>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b04      	cmp	r3, #4
 800649c:	d106      	bne.n	80064ac <Send_AT_Commands+0x9c>
		Send_AT_Command(huart, ATCommand4, 5000);
 800649e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064a2:	4912      	ldr	r1, [pc, #72]	@ (80064ec <Send_AT_Commands+0xdc>)
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ff55 	bl	8006354 <Send_AT_Command>
}
 80064aa:	e009      	b.n	80064c0 <Send_AT_Commands+0xb0>
    else if(choice == 5){
 80064ac:	4b0b      	ldr	r3, [pc, #44]	@ (80064dc <Send_AT_Commands+0xcc>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b05      	cmp	r3, #5
 80064b2:	d105      	bne.n	80064c0 <Send_AT_Commands+0xb0>
		Send_AT_Command(huart, ATCommand5, 5000);
 80064b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064b8:	490d      	ldr	r1, [pc, #52]	@ (80064f0 <Send_AT_Commands+0xe0>)
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff ff4a 	bl	8006354 <Send_AT_Command>
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	0800f230 	.word	0x0800f230
 80064cc:	0800f238 	.word	0x0800f238
 80064d0:	0800f248 	.word	0x0800f248
 80064d4:	0800f26c 	.word	0x0800f26c
 80064d8:	0800f298 	.word	0x0800f298
 80064dc:	2000004c 	.word	0x2000004c
 80064e0:	2000005c 	.word	0x2000005c
 80064e4:	2000085c 	.word	0x2000085c
 80064e8:	2000105c 	.word	0x2000105c
 80064ec:	2000185c 	.word	0x2000185c
 80064f0:	2000205c 	.word	0x2000205c

080064f4 <Resend_AT_Commands>:
void Resend_AT_Commands(UART_HandleTypeDef *huart){
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
	Send_AT_Command1(huart, "AT+CIPSTART=\"TCP\",\"api.open-meteo.com\",80\r\n", 3000 );
 80064fc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006500:	4921      	ldr	r1, [pc, #132]	@ (8006588 <Resend_AT_Commands+0x94>)
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff ff60 	bl	80063c8 <Send_AT_Command1>
	Send_AT_Command1(huart, "AT+CIPSEND=299\r\n", 3000);
 8006508:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800650c:	491f      	ldr	r1, [pc, #124]	@ (800658c <Resend_AT_Commands+0x98>)
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ff5a 	bl	80063c8 <Send_AT_Command1>

	// Gửi yêu cầu GET cuối cùng
	if (choice == 1){
 8006514:	4b1e      	ldr	r3, [pc, #120]	@ (8006590 <Resend_AT_Commands+0x9c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d106      	bne.n	800652a <Resend_AT_Commands+0x36>
		Send_AT_Command1(huart, ATCommand1, 5000);
 800651c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006520:	491c      	ldr	r1, [pc, #112]	@ (8006594 <Resend_AT_Commands+0xa0>)
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff ff50 	bl	80063c8 <Send_AT_Command1>
		Send_AT_Command1(huart, ATCommand4, 5000);
	}
	else if(choice == 5){
		Send_AT_Command1(huart, ATCommand5, 5000);
	}
}
 8006528:	e02a      	b.n	8006580 <Resend_AT_Commands+0x8c>
	else if(choice == 2){
 800652a:	4b19      	ldr	r3, [pc, #100]	@ (8006590 <Resend_AT_Commands+0x9c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d106      	bne.n	8006540 <Resend_AT_Commands+0x4c>
		Send_AT_Command1(huart, ATCommand2, 5000);
 8006532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006536:	4918      	ldr	r1, [pc, #96]	@ (8006598 <Resend_AT_Commands+0xa4>)
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff ff45 	bl	80063c8 <Send_AT_Command1>
}
 800653e:	e01f      	b.n	8006580 <Resend_AT_Commands+0x8c>
	else if(choice == 3){
 8006540:	4b13      	ldr	r3, [pc, #76]	@ (8006590 <Resend_AT_Commands+0x9c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b03      	cmp	r3, #3
 8006546:	d106      	bne.n	8006556 <Resend_AT_Commands+0x62>
		Send_AT_Command1(huart, ATCommand3, 5000);
 8006548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800654c:	4913      	ldr	r1, [pc, #76]	@ (800659c <Resend_AT_Commands+0xa8>)
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff ff3a 	bl	80063c8 <Send_AT_Command1>
}
 8006554:	e014      	b.n	8006580 <Resend_AT_Commands+0x8c>
	else if(choice == 4){
 8006556:	4b0e      	ldr	r3, [pc, #56]	@ (8006590 <Resend_AT_Commands+0x9c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b04      	cmp	r3, #4
 800655c:	d106      	bne.n	800656c <Resend_AT_Commands+0x78>
		Send_AT_Command1(huart, ATCommand4, 5000);
 800655e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006562:	490f      	ldr	r1, [pc, #60]	@ (80065a0 <Resend_AT_Commands+0xac>)
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff ff2f 	bl	80063c8 <Send_AT_Command1>
}
 800656a:	e009      	b.n	8006580 <Resend_AT_Commands+0x8c>
	else if(choice == 5){
 800656c:	4b08      	ldr	r3, [pc, #32]	@ (8006590 <Resend_AT_Commands+0x9c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b05      	cmp	r3, #5
 8006572:	d105      	bne.n	8006580 <Resend_AT_Commands+0x8c>
		Send_AT_Command1(huart, ATCommand5, 5000);
 8006574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006578:	490a      	ldr	r1, [pc, #40]	@ (80065a4 <Resend_AT_Commands+0xb0>)
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7ff ff24 	bl	80063c8 <Send_AT_Command1>
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	0800f26c 	.word	0x0800f26c
 800658c:	0800f298 	.word	0x0800f298
 8006590:	2000004c 	.word	0x2000004c
 8006594:	2000005c 	.word	0x2000005c
 8006598:	2000085c 	.word	0x2000085c
 800659c:	2000105c 	.word	0x2000105c
 80065a0:	2000185c 	.word	0x2000185c
 80065a4:	2000205c 	.word	0x2000205c

080065a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) { // Kiểm tra UART đúng
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a06      	ldr	r2, [pc, #24]	@ (80065d0 <HAL_UART_RxCpltCallback+0x28>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d105      	bne.n	80065c6 <HAL_UART_RxCpltCallback+0x1e>
        // Xử lý dữ liệu nhận được ở đây

        // Tiếp tục nhận dữ liệu
        HAL_UART_Receive_IT(huart, uart_rx_buffer, UART_BUFFER_SIZE);
 80065ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065be:	4905      	ldr	r1, [pc, #20]	@ (80065d4 <HAL_UART_RxCpltCallback+0x2c>)
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f003 ff53 	bl	800a46c <HAL_UART_Receive_IT>
    }
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40011000 	.word	0x40011000
 80065d4:	20002b5c 	.word	0x20002b5c

080065d8 <extractJsonObject>:
char* extractJsonObject(const char *jsonString) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
    const char *start = strstr(jsonString, "\"current\":{\"t");
 80065e0:	491c      	ldr	r1, [pc, #112]	@ (8006654 <extractJsonObject+0x7c>)
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f006 f874 	bl	800c6d0 <strstr>
 80065e8:	6178      	str	r0, [r7, #20]
    const char *end = strrchr(jsonString, '}');
 80065ea:	217d      	movs	r1, #125	@ 0x7d
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f006 f859 	bl	800c6a4 <strrchr>
 80065f2:	6138      	str	r0, [r7, #16]
    if (start && end && end > start) {
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d027      	beq.n	800664a <extractJsonObject+0x72>
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d024      	beq.n	800664a <extractJsonObject+0x72>
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	429a      	cmp	r2, r3
 8006606:	d920      	bls.n	800664a <extractJsonObject+0x72>
        size_t length = end - start + 1;
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
        char *result = (char *)malloc(length + 2); // Allocate extra space for the '{' character
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3302      	adds	r3, #2
 8006616:	4618      	mov	r0, r3
 8006618:	f004 ff7c 	bl	800b514 <malloc>
 800661c:	4603      	mov	r3, r0
 800661e:	60bb      	str	r3, [r7, #8]
        if (result) {
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d011      	beq.n	800664a <extractJsonObject+0x72>
            result[0] = '{'; // Add '{' at the beginning
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	227b      	movs	r2, #123	@ 0x7b
 800662a:	701a      	strb	r2, [r3, #0]
            strncpy(result + 1, start, length); // Copy the rest of the string
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	3301      	adds	r3, #1
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	6979      	ldr	r1, [r7, #20]
 8006634:	4618      	mov	r0, r3
 8006636:	f006 f822 	bl	800c67e <strncpy>
            result[length + 1] = '\0'; // Null-terminate the string
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4413      	add	r3, r2
 8006642:	2200      	movs	r2, #0
 8006644:	701a      	strb	r2, [r3, #0]
            return result;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	e000      	b.n	800664c <extractJsonObject+0x74>
        }
    }
    return NULL;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	0800f2ac 	.word	0x0800f2ac

08006658 <processWeather>:


void processWeather( char *jsonString) {
 8006658:	b590      	push	{r4, r7, lr}
 800665a:	b0a5      	sub	sp, #148	@ 0x94
 800665c:	af04      	add	r7, sp, #16
 800665e:	6078      	str	r0, [r7, #4]

	jsonString = extractJsonObject(jsonString);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff ffb9 	bl	80065d8 <extractJsonObject>
 8006666:	6078      	str	r0, [r7, #4]

    cJSON *json = cJSON_Parse(jsonString);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7fb fc01 	bl	8001e70 <cJSON_Parse>
 800666e:	67b8      	str	r0, [r7, #120]	@ 0x78

    if (json == NULL) {
 8006670:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10c      	bne.n	8006690 <processWeather+0x38>
        lcdSetCursor(10, 10);
 8006676:	210a      	movs	r1, #10
 8006678:	200a      	movs	r0, #10
 800667a:	f7ff faf3 	bl	8005c64 <lcdSetCursor>
        lcdSetTextColor(COLOR_RED, COLOR_BLACK);
 800667e:	2100      	movs	r1, #0
 8006680:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8006684:	f7ff fa6e 	bl	8005b64 <lcdSetTextColor>
        lcdPrintf("Error parsing JSON!");
 8006688:	487e      	ldr	r0, [pc, #504]	@ (8006884 <processWeather+0x22c>)
 800668a:	f7ff f9cf 	bl	8005a2c <lcdPrintf>
        return;
 800668e:	e233      	b.n	8006af8 <processWeather+0x4a0>
    }

    // Get daily forecast information
    cJSON *daily = cJSON_GetObjectItem(json, "daily");
 8006690:	497d      	ldr	r1, [pc, #500]	@ (8006888 <processWeather+0x230>)
 8006692:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8006694:	f7fb ff56 	bl	8002544 <cJSON_GetObjectItem>
 8006698:	6778      	str	r0, [r7, #116]	@ 0x74
    cJSON *current = cJSON_GetObjectItem(json, "current");
 800669a:	497c      	ldr	r1, [pc, #496]	@ (800688c <processWeather+0x234>)
 800669c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800669e:	f7fb ff51 	bl	8002544 <cJSON_GetObjectItem>
 80066a2:	6738      	str	r0, [r7, #112]	@ 0x70
    if (!daily) {
 80066a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10f      	bne.n	80066ca <processWeather+0x72>
        lcdSetCursor(10, 10);
 80066aa:	210a      	movs	r1, #10
 80066ac:	200a      	movs	r0, #10
 80066ae:	f7ff fad9 	bl	8005c64 <lcdSetCursor>
        lcdSetTextColor(COLOR_RED, COLOR_BLACK);
 80066b2:	2100      	movs	r1, #0
 80066b4:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80066b8:	f7ff fa54 	bl	8005b64 <lcdSetTextColor>
        lcdPrintf("Error: Missing 'daily' object!");
 80066bc:	4874      	ldr	r0, [pc, #464]	@ (8006890 <processWeather+0x238>)
 80066be:	f7ff f9b5 	bl	8005a2c <lcdPrintf>
        cJSON_Delete(json);
 80066c2:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80066c4:	f7fa fef4 	bl	80014b0 <cJSON_Delete>
        return;
 80066c8:	e216      	b.n	8006af8 <processWeather+0x4a0>
    }

    cJSON *dates = cJSON_GetObjectItem(daily, "time");
 80066ca:	4972      	ldr	r1, [pc, #456]	@ (8006894 <processWeather+0x23c>)
 80066cc:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80066ce:	f7fb ff39 	bl	8002544 <cJSON_GetObjectItem>
 80066d2:	66f8      	str	r0, [r7, #108]	@ 0x6c
    cJSON *temp_max_json = cJSON_GetObjectItem(daily, "temperature_2m_max");
 80066d4:	4970      	ldr	r1, [pc, #448]	@ (8006898 <processWeather+0x240>)
 80066d6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80066d8:	f7fb ff34 	bl	8002544 <cJSON_GetObjectItem>
 80066dc:	66b8      	str	r0, [r7, #104]	@ 0x68
    cJSON *temp_min_json = cJSON_GetObjectItem(daily, "temperature_2m_min");
 80066de:	496f      	ldr	r1, [pc, #444]	@ (800689c <processWeather+0x244>)
 80066e0:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80066e2:	f7fb ff2f 	bl	8002544 <cJSON_GetObjectItem>
 80066e6:	6678      	str	r0, [r7, #100]	@ 0x64
    cJSON *uv_json = cJSON_GetObjectItem(daily, "uv_index_max");
 80066e8:	496d      	ldr	r1, [pc, #436]	@ (80068a0 <processWeather+0x248>)
 80066ea:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80066ec:	f7fb ff2a 	bl	8002544 <cJSON_GetObjectItem>
 80066f0:	6638      	str	r0, [r7, #96]	@ 0x60
    cJSON *weather_code = cJSON_GetObjectItem(daily, "weather_code");
 80066f2:	496c      	ldr	r1, [pc, #432]	@ (80068a4 <processWeather+0x24c>)
 80066f4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80066f6:	f7fb ff25 	bl	8002544 <cJSON_GetObjectItem>
 80066fa:	65f8      	str	r0, [r7, #92]	@ 0x5c
    cJSON *wind_speed_json = cJSON_GetObjectItem(daily, "wind_speed_10m_max");
 80066fc:	496a      	ldr	r1, [pc, #424]	@ (80068a8 <processWeather+0x250>)
 80066fe:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006700:	f7fb ff20 	bl	8002544 <cJSON_GetObjectItem>
 8006704:	65b8      	str	r0, [r7, #88]	@ 0x58

    //"time":"2024-12-24T17:30","interval":900,"temperature_2m":26.0,"relative_humidity_2m":65,"weather_code":3,"cloud_cover":98};



    char * Tmp =  cJSON_GetObjectItem(current , "time")->valuestring;
 8006706:	4963      	ldr	r1, [pc, #396]	@ (8006894 <processWeather+0x23c>)
 8006708:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800670a:	f7fb ff1b 	bl	8002544 <cJSON_GetObjectItem>
 800670e:	4603      	mov	r3, r0
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	657b      	str	r3, [r7, #84]	@ 0x54
    int year, month, day, hour , minute;
	char  tmp[17];
	sscanf(Tmp, "%d-%d-%dT%d:%d", &year, &month, &day , &hour ,&minute);
 8006714:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8006718:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800671c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006720:	9302      	str	r3, [sp, #8]
 8006722:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	460b      	mov	r3, r1
 8006730:	495e      	ldr	r1, [pc, #376]	@ (80068ac <processWeather+0x254>)
 8006732:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006734:	f005 fee6 	bl	800c504 <siscanf>
	snprintf(tmp, sizeof(tmp), "%02d-%02d-%02d", day, month , year);
 8006738:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800673a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800673c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800673e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006742:	9201      	str	r2, [sp, #4]
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	460b      	mov	r3, r1
 8006748:	4a59      	ldr	r2, [pc, #356]	@ (80068b0 <processWeather+0x258>)
 800674a:	2111      	movs	r1, #17
 800674c:	f005 fea6 	bl	800c49c <sniprintf>
	strncpy(current_date, tmp, sizeof(current_date) - 1);
 8006750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006754:	220a      	movs	r2, #10
 8006756:	4619      	mov	r1, r3
 8006758:	4856      	ldr	r0, [pc, #344]	@ (80068b4 <processWeather+0x25c>)
 800675a:	f005 ff90 	bl	800c67e <strncpy>
	current_date[sizeof(current_date) - 1] = '\0';
 800675e:	4b55      	ldr	r3, [pc, #340]	@ (80068b4 <processWeather+0x25c>)
 8006760:	2200      	movs	r2, #0
 8006762:	729a      	strb	r2, [r3, #10]

	snprintf(tmp, sizeof(tmp), "%02d:%02d", hour, minute);
 8006764:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006768:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4613      	mov	r3, r2
 8006770:	4a51      	ldr	r2, [pc, #324]	@ (80068b8 <processWeather+0x260>)
 8006772:	2111      	movs	r1, #17
 8006774:	f005 fe92 	bl	800c49c <sniprintf>
	strncpy(current_time, tmp, sizeof(current_time) - 1);
 8006778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800677c:	2205      	movs	r2, #5
 800677e:	4619      	mov	r1, r3
 8006780:	484e      	ldr	r0, [pc, #312]	@ (80068bc <processWeather+0x264>)
 8006782:	f005 ff7c 	bl	800c67e <strncpy>
	current_time[sizeof(current_time) - 1] = '\0';
 8006786:	4b4d      	ldr	r3, [pc, #308]	@ (80068bc <processWeather+0x264>)
 8006788:	2200      	movs	r2, #0
 800678a:	715a      	strb	r2, [r3, #5]

    current_temp =  cJSON_GetObjectItem(current , "temperature_2m")->valueint;
 800678c:	494c      	ldr	r1, [pc, #304]	@ (80068c0 <processWeather+0x268>)
 800678e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006790:	f7fb fed8 	bl	8002544 <cJSON_GetObjectItem>
 8006794:	4603      	mov	r3, r0
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	4a4a      	ldr	r2, [pc, #296]	@ (80068c4 <processWeather+0x26c>)
 800679a:	6013      	str	r3, [r2, #0]

	current_humi =  cJSON_GetObjectItem(current , "relative_humidity_2m")->valueint;
 800679c:	494a      	ldr	r1, [pc, #296]	@ (80068c8 <processWeather+0x270>)
 800679e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80067a0:	f7fb fed0 	bl	8002544 <cJSON_GetObjectItem>
 80067a4:	4603      	mov	r3, r0
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	4a48      	ldr	r2, [pc, #288]	@ (80068cc <processWeather+0x274>)
 80067aa:	6013      	str	r3, [r2, #0]

	current_code =  cJSON_GetObjectItem(current , "weather_code")->valueint;
 80067ac:	493d      	ldr	r1, [pc, #244]	@ (80068a4 <processWeather+0x24c>)
 80067ae:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80067b0:	f7fb fec8 	bl	8002544 <cJSON_GetObjectItem>
 80067b4:	4603      	mov	r3, r0
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	4a45      	ldr	r2, [pc, #276]	@ (80068d0 <processWeather+0x278>)
 80067ba:	6013      	str	r3, [r2, #0]

	current_cloud =  cJSON_GetObjectItem(current , "cloud_cover")->valueint;
 80067bc:	4945      	ldr	r1, [pc, #276]	@ (80068d4 <processWeather+0x27c>)
 80067be:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80067c0:	f7fb fec0 	bl	8002544 <cJSON_GetObjectItem>
 80067c4:	4603      	mov	r3, r0
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	4a43      	ldr	r2, [pc, #268]	@ (80068d8 <processWeather+0x280>)
 80067ca:	6013      	str	r3, [r2, #0]

	isDay = cJSON_GetObjectItem(current , "is_day")->valueint;
 80067cc:	4943      	ldr	r1, [pc, #268]	@ (80068dc <processWeather+0x284>)
 80067ce:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80067d0:	f7fb feb8 	bl	8002544 <cJSON_GetObjectItem>
 80067d4:	4603      	mov	r3, r0
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	4a41      	ldr	r2, [pc, #260]	@ (80068e0 <processWeather+0x288>)
 80067da:	6013      	str	r3, [r2, #0]

    // Allocate memory for global variables
    int num_days = cJSON_GetArraySize(dates);
 80067dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80067de:	f7fb fe11 	bl	8002404 <cJSON_GetArraySize>
 80067e2:	6538      	str	r0, [r7, #80]	@ 0x50
    temp_max = (int *)malloc(num_days * sizeof(int));
 80067e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f004 fe93 	bl	800b514 <malloc>
 80067ee:	4603      	mov	r3, r0
 80067f0:	461a      	mov	r2, r3
 80067f2:	4b3c      	ldr	r3, [pc, #240]	@ (80068e4 <processWeather+0x28c>)
 80067f4:	601a      	str	r2, [r3, #0]
    temp_min = (int *)malloc(num_days * sizeof(int));
 80067f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f004 fe8a 	bl	800b514 <malloc>
 8006800:	4603      	mov	r3, r0
 8006802:	461a      	mov	r2, r3
 8006804:	4b38      	ldr	r3, [pc, #224]	@ (80068e8 <processWeather+0x290>)
 8006806:	601a      	str	r2, [r3, #0]
    UV = (double *)malloc(num_days * sizeof(double));
 8006808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	4618      	mov	r0, r3
 800680e:	f004 fe81 	bl	800b514 <malloc>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	4b35      	ldr	r3, [pc, #212]	@ (80068ec <processWeather+0x294>)
 8006818:	601a      	str	r2, [r3, #0]
    wind_speed = (int *)malloc(num_days * sizeof(int));
 800681a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4618      	mov	r0, r3
 8006820:	f004 fe78 	bl	800b514 <malloc>
 8006824:	4603      	mov	r3, r0
 8006826:	461a      	mov	r2, r3
 8006828:	4b31      	ldr	r3, [pc, #196]	@ (80068f0 <processWeather+0x298>)
 800682a:	601a      	str	r2, [r3, #0]
    day_code = (int *)malloc(num_days * sizeof(int));
 800682c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4618      	mov	r0, r3
 8006832:	f004 fe6f 	bl	800b514 <malloc>
 8006836:	4603      	mov	r3, r0
 8006838:	461a      	mov	r2, r3
 800683a:	4b2e      	ldr	r3, [pc, #184]	@ (80068f4 <processWeather+0x29c>)
 800683c:	601a      	str	r2, [r3, #0]
    if (!temp_max || !temp_min || !wind_speed || !day_code) {
 800683e:	4b29      	ldr	r3, [pc, #164]	@ (80068e4 <processWeather+0x28c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <processWeather+0x206>
 8006846:	4b28      	ldr	r3, [pc, #160]	@ (80068e8 <processWeather+0x290>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <processWeather+0x206>
 800684e:	4b28      	ldr	r3, [pc, #160]	@ (80068f0 <processWeather+0x298>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <processWeather+0x206>
 8006856:	4b27      	ldr	r3, [pc, #156]	@ (80068f4 <processWeather+0x29c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10f      	bne.n	800687e <processWeather+0x226>
        lcdSetCursor(10, 10);
 800685e:	210a      	movs	r1, #10
 8006860:	200a      	movs	r0, #10
 8006862:	f7ff f9ff 	bl	8005c64 <lcdSetCursor>
        lcdSetTextColor(COLOR_RED, COLOR_BLACK);
 8006866:	2100      	movs	r1, #0
 8006868:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800686c:	f7ff f97a 	bl	8005b64 <lcdSetTextColor>
        lcdPrintf("Error allocating memory!");
 8006870:	4821      	ldr	r0, [pc, #132]	@ (80068f8 <processWeather+0x2a0>)
 8006872:	f7ff f8db 	bl	8005a2c <lcdPrintf>
        cJSON_Delete(json);
 8006876:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8006878:	f7fa fe1a 	bl	80014b0 <cJSON_Delete>
        return;
 800687c:	e13c      	b.n	8006af8 <processWeather+0x4a0>
    }

    // Convert dates and extract weather data
    for (int i = 0; i < num_days; i++) {
 800687e:	2300      	movs	r3, #0
 8006880:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006882:	e131      	b.n	8006ae8 <processWeather+0x490>
 8006884:	0800f2bc 	.word	0x0800f2bc
 8006888:	0800f2d0 	.word	0x0800f2d0
 800688c:	0800f2d8 	.word	0x0800f2d8
 8006890:	0800f2e0 	.word	0x0800f2e0
 8006894:	0800f300 	.word	0x0800f300
 8006898:	0800f308 	.word	0x0800f308
 800689c:	0800f31c 	.word	0x0800f31c
 80068a0:	0800f330 	.word	0x0800f330
 80068a4:	0800f340 	.word	0x0800f340
 80068a8:	0800f350 	.word	0x0800f350
 80068ac:	0800f364 	.word	0x0800f364
 80068b0:	0800f374 	.word	0x0800f374
 80068b4:	20003500 	.word	0x20003500
 80068b8:	0800f384 	.word	0x0800f384
 80068bc:	200034f8 	.word	0x200034f8
 80068c0:	0800f390 	.word	0x0800f390
 80068c4:	2000350c 	.word	0x2000350c
 80068c8:	0800f3a0 	.word	0x0800f3a0
 80068cc:	20003510 	.word	0x20003510
 80068d0:	20003514 	.word	0x20003514
 80068d4:	0800f3b8 	.word	0x0800f3b8
 80068d8:	20003518 	.word	0x20003518
 80068dc:	0800f3c4 	.word	0x0800f3c4
 80068e0:	2000351c 	.word	0x2000351c
 80068e4:	2000349c 	.word	0x2000349c
 80068e8:	200034a0 	.word	0x200034a0
 80068ec:	200034a4 	.word	0x200034a4
 80068f0:	200034a8 	.word	0x200034a8
 80068f4:	200034ac 	.word	0x200034ac
 80068f8:	0800f3cc 	.word	0x0800f3cc
        char *date = cJSON_GetArrayItem(dates, i)->valuestring;
 80068fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006900:	f7fb fdc4 	bl	800248c <cJSON_GetArrayItem>
 8006904:	4603      	mov	r3, r0
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	64fb      	str	r3, [r7, #76]	@ 0x4c
        temp_max[i] = (int)cJSON_GetArrayItem(temp_max_json, i)->valuedouble;
 800690a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800690c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800690e:	f7fb fdbd 	bl	800248c <cJSON_GetArrayItem>
 8006912:	4603      	mov	r3, r0
 8006914:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006918:	4979      	ldr	r1, [pc, #484]	@ (8006b00 <processWeather+0x4a8>)
 800691a:	6808      	ldr	r0, [r1, #0]
 800691c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800691e:	0089      	lsls	r1, r1, #2
 8006920:	1844      	adds	r4, r0, r1
 8006922:	4610      	mov	r0, r2
 8006924:	4619      	mov	r1, r3
 8006926:	f7fa f911 	bl	8000b4c <__aeabi_d2iz>
 800692a:	4603      	mov	r3, r0
 800692c:	6023      	str	r3, [r4, #0]
        temp_min[i] = (int)cJSON_GetArrayItem(temp_min_json, i)->valuedouble;
 800692e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006930:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8006932:	f7fb fdab 	bl	800248c <cJSON_GetArrayItem>
 8006936:	4603      	mov	r3, r0
 8006938:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800693c:	4971      	ldr	r1, [pc, #452]	@ (8006b04 <processWeather+0x4ac>)
 800693e:	6808      	ldr	r0, [r1, #0]
 8006940:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006942:	0089      	lsls	r1, r1, #2
 8006944:	1844      	adds	r4, r0, r1
 8006946:	4610      	mov	r0, r2
 8006948:	4619      	mov	r1, r3
 800694a:	f7fa f8ff 	bl	8000b4c <__aeabi_d2iz>
 800694e:	4603      	mov	r3, r0
 8006950:	6023      	str	r3, [r4, #0]
        UV[i] = cJSON_GetArrayItem(uv_json, i)->valuedouble;
 8006952:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006954:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8006956:	f7fb fd99 	bl	800248c <cJSON_GetArrayItem>
 800695a:	4b6b      	ldr	r3, [pc, #428]	@ (8006b08 <processWeather+0x4b0>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	18d1      	adds	r1, r2, r3
 8006964:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8006968:	e9c1 2300 	strd	r2, r3, [r1]
        wind_speed[i] = (int)cJSON_GetArrayItem(wind_speed_json, i)->valuedouble;
 800696c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800696e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006970:	f7fb fd8c 	bl	800248c <cJSON_GetArrayItem>
 8006974:	4603      	mov	r3, r0
 8006976:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800697a:	4964      	ldr	r1, [pc, #400]	@ (8006b0c <processWeather+0x4b4>)
 800697c:	6808      	ldr	r0, [r1, #0]
 800697e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006980:	0089      	lsls	r1, r1, #2
 8006982:	1844      	adds	r4, r0, r1
 8006984:	4610      	mov	r0, r2
 8006986:	4619      	mov	r1, r3
 8006988:	f7fa f8e0 	bl	8000b4c <__aeabi_d2iz>
 800698c:	4603      	mov	r3, r0
 800698e:	6023      	str	r3, [r4, #0]
        day_code[i] = cJSON_GetArrayItem(weather_code, i)->valueint;
 8006990:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006992:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006994:	f7fb fd7a 	bl	800248c <cJSON_GetArrayItem>
 8006998:	4601      	mov	r1, r0
 800699a:	4b5d      	ldr	r3, [pc, #372]	@ (8006b10 <processWeather+0x4b8>)
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	694a      	ldr	r2, [r1, #20]
 80069a6:	601a      	str	r2, [r3, #0]

        // Extract month and day from date string
        int year, month, days;
        char tmp[6];
        sscanf(date, "%d-%d-%d", &year, &month, &days);
 80069a8:	f107 011c 	add.w	r1, r7, #28
 80069ac:	f107 0220 	add.w	r2, r7, #32
 80069b0:	f107 0318 	add.w	r3, r7, #24
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	460b      	mov	r3, r1
 80069b8:	4956      	ldr	r1, [pc, #344]	@ (8006b14 <processWeather+0x4bc>)
 80069ba:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80069bc:	f005 fda2 	bl	800c504 <siscanf>
        snprintf(tmp, sizeof(tmp), "%02d-%02d", days, month);
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f107 0010 	add.w	r0, r7, #16
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	4613      	mov	r3, r2
 80069cc:	4a52      	ldr	r2, [pc, #328]	@ (8006b18 <processWeather+0x4c0>)
 80069ce:	2106      	movs	r1, #6
 80069d0:	f005 fd64 	bl	800c49c <sniprintf>
        strncat(Date[i], tmp, sizeof(Date[i]) - strlen(Date[i]) - 1);
 80069d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80069d6:	4613      	mov	r3, r2
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4413      	add	r3, r2
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	4a4f      	ldr	r2, [pc, #316]	@ (8006b1c <processWeather+0x4c4>)
 80069e0:	189c      	adds	r4, r3, r2
 80069e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80069e4:	4613      	mov	r3, r2
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	4413      	add	r3, r2
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	4a4b      	ldr	r2, [pc, #300]	@ (8006b1c <processWeather+0x4c4>)
 80069ee:	4413      	add	r3, r2
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7f9 fbf7 	bl	80001e4 <strlen>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f1c3 0205 	rsb	r2, r3, #5
 80069fc:	f107 0310 	add.w	r3, r7, #16
 8006a00:	4619      	mov	r1, r3
 8006a02:	4620      	mov	r0, r4
 8006a04:	f005 fe16 	bl	800c634 <strncat>

        // Convert day index to day name
        char day[4];
        switch ((i + 2) % 7) {
 8006a08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a0a:	1c9a      	adds	r2, r3, #2
 8006a0c:	4b44      	ldr	r3, [pc, #272]	@ (8006b20 <processWeather+0x4c8>)
 8006a0e:	fb83 1302 	smull	r1, r3, r3, r2
 8006a12:	4413      	add	r3, r2
 8006a14:	1099      	asrs	r1, r3, #2
 8006a16:	17d3      	asrs	r3, r2, #31
 8006a18:	1ac9      	subs	r1, r1, r3
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	00db      	lsls	r3, r3, #3
 8006a1e:	1a5b      	subs	r3, r3, r1
 8006a20:	1ad1      	subs	r1, r2, r3
 8006a22:	2906      	cmp	r1, #6
 8006a24:	d848      	bhi.n	8006ab8 <processWeather+0x460>
 8006a26:	a301      	add	r3, pc, #4	@ (adr r3, 8006a2c <processWeather+0x3d4>)
 8006a28:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	08006a59 	.word	0x08006a59
 8006a34:	08006a69 	.word	0x08006a69
 8006a38:	08006a79 	.word	0x08006a79
 8006a3c:	08006a89 	.word	0x08006a89
 8006a40:	08006a99 	.word	0x08006a99
 8006a44:	08006aa9 	.word	0x08006aa9
            case 0: snprintf(day, sizeof(day), "Sun"); break;
 8006a48:	f107 030c 	add.w	r3, r7, #12
 8006a4c:	4a35      	ldr	r2, [pc, #212]	@ (8006b24 <processWeather+0x4cc>)
 8006a4e:	2104      	movs	r1, #4
 8006a50:	4618      	mov	r0, r3
 8006a52:	f005 fd23 	bl	800c49c <sniprintf>
 8006a56:	e030      	b.n	8006aba <processWeather+0x462>
            case 1: snprintf(day, sizeof(day), "Mon"); break;
 8006a58:	f107 030c 	add.w	r3, r7, #12
 8006a5c:	4a32      	ldr	r2, [pc, #200]	@ (8006b28 <processWeather+0x4d0>)
 8006a5e:	2104      	movs	r1, #4
 8006a60:	4618      	mov	r0, r3
 8006a62:	f005 fd1b 	bl	800c49c <sniprintf>
 8006a66:	e028      	b.n	8006aba <processWeather+0x462>
            case 2: snprintf(day, sizeof(day), "Tue"); break;
 8006a68:	f107 030c 	add.w	r3, r7, #12
 8006a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8006b2c <processWeather+0x4d4>)
 8006a6e:	2104      	movs	r1, #4
 8006a70:	4618      	mov	r0, r3
 8006a72:	f005 fd13 	bl	800c49c <sniprintf>
 8006a76:	e020      	b.n	8006aba <processWeather+0x462>
            case 3: snprintf(day, sizeof(day), "Wed"); break;
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8006b30 <processWeather+0x4d8>)
 8006a7e:	2104      	movs	r1, #4
 8006a80:	4618      	mov	r0, r3
 8006a82:	f005 fd0b 	bl	800c49c <sniprintf>
 8006a86:	e018      	b.n	8006aba <processWeather+0x462>
            case 4: snprintf(day, sizeof(day), "Thu"); break;
 8006a88:	f107 030c 	add.w	r3, r7, #12
 8006a8c:	4a29      	ldr	r2, [pc, #164]	@ (8006b34 <processWeather+0x4dc>)
 8006a8e:	2104      	movs	r1, #4
 8006a90:	4618      	mov	r0, r3
 8006a92:	f005 fd03 	bl	800c49c <sniprintf>
 8006a96:	e010      	b.n	8006aba <processWeather+0x462>
            case 5: snprintf(day, sizeof(day), "Fri"); break;
 8006a98:	f107 030c 	add.w	r3, r7, #12
 8006a9c:	4a26      	ldr	r2, [pc, #152]	@ (8006b38 <processWeather+0x4e0>)
 8006a9e:	2104      	movs	r1, #4
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f005 fcfb 	bl	800c49c <sniprintf>
 8006aa6:	e008      	b.n	8006aba <processWeather+0x462>
            case 6: snprintf(day, sizeof(day), "Sat"); break;
 8006aa8:	f107 030c 	add.w	r3, r7, #12
 8006aac:	4a23      	ldr	r2, [pc, #140]	@ (8006b3c <processWeather+0x4e4>)
 8006aae:	2104      	movs	r1, #4
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f005 fcf3 	bl	800c49c <sniprintf>
 8006ab6:	e000      	b.n	8006aba <processWeather+0x462>
            default: break;
 8006ab8:	bf00      	nop
        }
        strncat(day_name[i], day, sizeof(day_name[i]) - strlen(day_name[i]) - 1);
 8006aba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4a20      	ldr	r2, [pc, #128]	@ (8006b40 <processWeather+0x4e8>)
 8006ac0:	189c      	adds	r4, r3, r2
 8006ac2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b40 <processWeather+0x4e8>)
 8006ac8:	4413      	add	r3, r2
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7f9 fb8a 	bl	80001e4 <strlen>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f1c3 0203 	rsb	r2, r3, #3
 8006ad6:	f107 030c 	add.w	r3, r7, #12
 8006ada:	4619      	mov	r1, r3
 8006adc:	4620      	mov	r0, r4
 8006ade:	f005 fda9 	bl	800c634 <strncat>
    for (int i = 0; i < num_days; i++) {
 8006ae2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ae8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006aec:	429a      	cmp	r2, r3
 8006aee:	f6ff af05 	blt.w	80068fc <processWeather+0x2a4>
    }

    // Clean up memory
    cJSON_Delete(json);
 8006af2:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8006af4:	f7fa fcdc 	bl	80014b0 <cJSON_Delete>
}
 8006af8:	3784      	adds	r7, #132	@ 0x84
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd90      	pop	{r4, r7, pc}
 8006afe:	bf00      	nop
 8006b00:	2000349c 	.word	0x2000349c
 8006b04:	200034a0 	.word	0x200034a0
 8006b08:	200034a4 	.word	0x200034a4
 8006b0c:	200034a8 	.word	0x200034a8
 8006b10:	200034ac 	.word	0x200034ac
 8006b14:	0800f3e8 	.word	0x0800f3e8
 8006b18:	0800f3f4 	.word	0x0800f3f4
 8006b1c:	200034cc 	.word	0x200034cc
 8006b20:	92492493 	.word	0x92492493
 8006b24:	0800f400 	.word	0x0800f400
 8006b28:	0800f404 	.word	0x0800f404
 8006b2c:	0800f408 	.word	0x0800f408
 8006b30:	0800f40c 	.word	0x0800f40c
 8006b34:	0800f410 	.word	0x0800f410
 8006b38:	0800f414 	.word	0x0800f414
 8006b3c:	0800f418 	.word	0x0800f418
 8006b40:	200034b0 	.word	0x200034b0

08006b44 <RunProgram>:

//

void RunProgram(){
 8006b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af06      	add	r7, sp, #24
  if (readDHT && current == 1)
 8006b4a:	4b87      	ldr	r3, [pc, #540]	@ (8006d68 <RunProgram+0x224>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d018      	beq.n	8006b86 <RunProgram+0x42>
 8006b54:	4b85      	ldr	r3, [pc, #532]	@ (8006d6c <RunProgram+0x228>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d114      	bne.n	8006b86 <RunProgram+0x42>
  {
	  readDHT = false; // Xóa c�?
 8006b5c:	4b82      	ldr	r3, [pc, #520]	@ (8006d68 <RunProgram+0x224>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]
	  DHT_ReadData(&temperature, &humidity);
 8006b62:	4983      	ldr	r1, [pc, #524]	@ (8006d70 <RunProgram+0x22c>)
 8006b64:	4883      	ldr	r0, [pc, #524]	@ (8006d74 <RunProgram+0x230>)
 8006b66:	f7fa fbdb 	bl	8001320 <DHT_ReadData>
	  TextSensor(5, 245, temperature, humidity);
 8006b6a:	4b82      	ldr	r3, [pc, #520]	@ (8006d74 <RunProgram+0x230>)
 8006b6c:	edd3 7a00 	vldr	s15, [r3]
 8006b70:	4b7f      	ldr	r3, [pc, #508]	@ (8006d70 <RunProgram+0x22c>)
 8006b72:	ed93 7a00 	vldr	s14, [r3]
 8006b76:	eef0 0a47 	vmov.f32	s1, s14
 8006b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8006b7e:	21f5      	movs	r1, #245	@ 0xf5
 8006b80:	2005      	movs	r0, #5
 8006b82:	f7fd f8cd 	bl	8003d20 <TextSensor>
  }
  if(choice != choiceTmp && current == 1){
 8006b86:	4b7c      	ldr	r3, [pc, #496]	@ (8006d78 <RunProgram+0x234>)
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4b7c      	ldr	r3, [pc, #496]	@ (8006d7c <RunProgram+0x238>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d00a      	beq.n	8006ba8 <RunProgram+0x64>
 8006b92:	4b76      	ldr	r3, [pc, #472]	@ (8006d6c <RunProgram+0x228>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d106      	bne.n	8006ba8 <RunProgram+0x64>
	  Recall = true;
 8006b9a:	4b79      	ldr	r3, [pc, #484]	@ (8006d80 <RunProgram+0x23c>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	701a      	strb	r2, [r3, #0]
	  choiceTmp = choice;
 8006ba0:	4b75      	ldr	r3, [pc, #468]	@ (8006d78 <RunProgram+0x234>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a75      	ldr	r2, [pc, #468]	@ (8006d7c <RunProgram+0x238>)
 8006ba6:	6013      	str	r3, [r2, #0]
  }

  if (current == 1){
 8006ba8:	4b70      	ldr	r3, [pc, #448]	@ (8006d6c <RunProgram+0x228>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	f040 808a 	bne.w	8006cc6 <RunProgram+0x182>
	  if (updated == true){
 8006bb2:	4b74      	ldr	r3, [pc, #464]	@ (8006d84 <RunProgram+0x240>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d022      	beq.n	8006c00 <RunProgram+0xbc>
		  Screen1(temp_max[0] , temp_min[0] , current_temp ,  current_humi , current_code ,current_cloud ,current_time ,current_date ,choice);
 8006bba:	4b73      	ldr	r3, [pc, #460]	@ (8006d88 <RunProgram+0x244>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	4b72      	ldr	r3, [pc, #456]	@ (8006d8c <RunProgram+0x248>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681c      	ldr	r4, [r3, #0]
 8006bc6:	4b72      	ldr	r3, [pc, #456]	@ (8006d90 <RunProgram+0x24c>)
 8006bc8:	681d      	ldr	r5, [r3, #0]
 8006bca:	4b72      	ldr	r3, [pc, #456]	@ (8006d94 <RunProgram+0x250>)
 8006bcc:	681e      	ldr	r6, [r3, #0]
 8006bce:	4b72      	ldr	r3, [pc, #456]	@ (8006d98 <RunProgram+0x254>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a72      	ldr	r2, [pc, #456]	@ (8006d9c <RunProgram+0x258>)
 8006bd4:	6812      	ldr	r2, [r2, #0]
 8006bd6:	4968      	ldr	r1, [pc, #416]	@ (8006d78 <RunProgram+0x234>)
 8006bd8:	6809      	ldr	r1, [r1, #0]
 8006bda:	9104      	str	r1, [sp, #16]
 8006bdc:	4970      	ldr	r1, [pc, #448]	@ (8006da0 <RunProgram+0x25c>)
 8006bde:	9103      	str	r1, [sp, #12]
 8006be0:	4970      	ldr	r1, [pc, #448]	@ (8006da4 <RunProgram+0x260>)
 8006be2:	9102      	str	r1, [sp, #8]
 8006be4:	9201      	str	r2, [sp, #4]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	4633      	mov	r3, r6
 8006bea:	462a      	mov	r2, r5
 8006bec:	4621      	mov	r1, r4
 8006bee:	f7fd fb83 	bl	80042f8 <Screen1>
		  HAL_Delay(1000);
 8006bf2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006bf6:	f001 facd 	bl	8008194 <HAL_Delay>
		  updated = false;
 8006bfa:	4b62      	ldr	r3, [pc, #392]	@ (8006d84 <RunProgram+0x240>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	701a      	strb	r2, [r3, #0]
	  }
	  if (TouchGetCalibratedPoint(&tx, &ty)){
 8006c00:	4969      	ldr	r1, [pc, #420]	@ (8006da8 <RunProgram+0x264>)
 8006c02:	486a      	ldr	r0, [pc, #424]	@ (8006dac <RunProgram+0x268>)
 8006c04:	f001 f9b6 	bl	8007f74 <TouchGetCalibratedPoint>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d026      	beq.n	8006c5c <RunProgram+0x118>
		  lcdDrawCircle(tx, ty, 2, COLOR_BLUE);
 8006c0e:	4b67      	ldr	r3, [pc, #412]	@ (8006dac <RunProgram+0x268>)
 8006c10:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006c14:	4b64      	ldr	r3, [pc, #400]	@ (8006da8 <RunProgram+0x264>)
 8006c16:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006c1a:	231f      	movs	r3, #31
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	f7fe fb98 	bl	8005352 <lcdDrawCircle>
		  if (tx >= 199 && tx <= 239 && ty >= 25 && ty <= 65){
 8006c22:	4b62      	ldr	r3, [pc, #392]	@ (8006dac <RunProgram+0x268>)
 8006c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c28:	2bc6      	cmp	r3, #198	@ 0xc6
 8006c2a:	dd17      	ble.n	8006c5c <RunProgram+0x118>
 8006c2c:	4b5f      	ldr	r3, [pc, #380]	@ (8006dac <RunProgram+0x268>)
 8006c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c32:	2bef      	cmp	r3, #239	@ 0xef
 8006c34:	dc12      	bgt.n	8006c5c <RunProgram+0x118>
 8006c36:	4b5c      	ldr	r3, [pc, #368]	@ (8006da8 <RunProgram+0x264>)
 8006c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c3c:	2b18      	cmp	r3, #24
 8006c3e:	dd0d      	ble.n	8006c5c <RunProgram+0x118>
 8006c40:	4b59      	ldr	r3, [pc, #356]	@ (8006da8 <RunProgram+0x264>)
 8006c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c46:	2b41      	cmp	r3, #65	@ 0x41
 8006c48:	dc08      	bgt.n	8006c5c <RunProgram+0x118>
			  current = 2;
 8006c4a:	4b48      	ldr	r3, [pc, #288]	@ (8006d6c <RunProgram+0x228>)
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	601a      	str	r2, [r3, #0]
			  updated = true;
 8006c50:	4b4c      	ldr	r3, [pc, #304]	@ (8006d84 <RunProgram+0x240>)
 8006c52:	2201      	movs	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(200);
 8006c56:	20c8      	movs	r0, #200	@ 0xc8
 8006c58:	f001 fa9c 	bl	8008194 <HAL_Delay>
		  }
	  }
	  if (TouchGetCalibratedPoint(&tx, &ty)){
 8006c5c:	4952      	ldr	r1, [pc, #328]	@ (8006da8 <RunProgram+0x264>)
 8006c5e:	4853      	ldr	r0, [pc, #332]	@ (8006dac <RunProgram+0x268>)
 8006c60:	f001 f988 	bl	8007f74 <TouchGetCalibratedPoint>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 854b 	beq.w	8007702 <RunProgram+0xbbe>
		  lcdDrawCircle(tx, ty, 2, COLOR_BLUE);
 8006c6c:	4b4f      	ldr	r3, [pc, #316]	@ (8006dac <RunProgram+0x268>)
 8006c6e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006c72:	4b4d      	ldr	r3, [pc, #308]	@ (8006da8 <RunProgram+0x264>)
 8006c74:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006c78:	231f      	movs	r3, #31
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f7fe fb69 	bl	8005352 <lcdDrawCircle>
		  if (tx >= 158 && tx <= 198 && ty >= 25 && ty <= 65){
 8006c80:	4b4a      	ldr	r3, [pc, #296]	@ (8006dac <RunProgram+0x268>)
 8006c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c86:	2b9d      	cmp	r3, #157	@ 0x9d
 8006c88:	f340 853b 	ble.w	8007702 <RunProgram+0xbbe>
 8006c8c:	4b47      	ldr	r3, [pc, #284]	@ (8006dac <RunProgram+0x268>)
 8006c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c92:	2bc6      	cmp	r3, #198	@ 0xc6
 8006c94:	f300 8535 	bgt.w	8007702 <RunProgram+0xbbe>
 8006c98:	4b43      	ldr	r3, [pc, #268]	@ (8006da8 <RunProgram+0x264>)
 8006c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c9e:	2b18      	cmp	r3, #24
 8006ca0:	f340 852f 	ble.w	8007702 <RunProgram+0xbbe>
 8006ca4:	4b40      	ldr	r3, [pc, #256]	@ (8006da8 <RunProgram+0x264>)
 8006ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006caa:	2b41      	cmp	r3, #65	@ 0x41
 8006cac:	f300 8529 	bgt.w	8007702 <RunProgram+0xbbe>
			  current = 3;
 8006cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8006d6c <RunProgram+0x228>)
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	601a      	str	r2, [r3, #0]
			  updated = true;
 8006cb6:	4b33      	ldr	r3, [pc, #204]	@ (8006d84 <RunProgram+0x240>)
 8006cb8:	2201      	movs	r2, #1
 8006cba:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(200);
 8006cbc:	20c8      	movs	r0, #200	@ 0xc8
 8006cbe:	f001 fa69 	bl	8008194 <HAL_Delay>
 8006cc2:	f000 bd1e 	b.w	8007702 <RunProgram+0xbbe>
		  }
	  }
  }
  else if (current == 2){
 8006cc6:	4b29      	ldr	r3, [pc, #164]	@ (8006d6c <RunProgram+0x228>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d178      	bne.n	8006dc0 <RunProgram+0x27c>
	  if (updated == true){
 8006cce:	4b2d      	ldr	r3, [pc, #180]	@ (8006d84 <RunProgram+0x240>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d01c      	beq.n	8006d10 <RunProgram+0x1cc>
		  Screen2(temp_max, temp_min, day_code, day_name, wind_speed, Date,current_time ,current_date ,choice);
 8006cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8006d88 <RunProgram+0x244>)
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	4b2c      	ldr	r3, [pc, #176]	@ (8006d8c <RunProgram+0x248>)
 8006cdc:	6819      	ldr	r1, [r3, #0]
 8006cde:	4b34      	ldr	r3, [pc, #208]	@ (8006db0 <RunProgram+0x26c>)
 8006ce0:	681c      	ldr	r4, [r3, #0]
 8006ce2:	4b34      	ldr	r3, [pc, #208]	@ (8006db4 <RunProgram+0x270>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a24      	ldr	r2, [pc, #144]	@ (8006d78 <RunProgram+0x234>)
 8006ce8:	6812      	ldr	r2, [r2, #0]
 8006cea:	9204      	str	r2, [sp, #16]
 8006cec:	4a2c      	ldr	r2, [pc, #176]	@ (8006da0 <RunProgram+0x25c>)
 8006cee:	9203      	str	r2, [sp, #12]
 8006cf0:	4a2c      	ldr	r2, [pc, #176]	@ (8006da4 <RunProgram+0x260>)
 8006cf2:	9202      	str	r2, [sp, #8]
 8006cf4:	4a30      	ldr	r2, [pc, #192]	@ (8006db8 <RunProgram+0x274>)
 8006cf6:	9201      	str	r2, [sp, #4]
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	4b30      	ldr	r3, [pc, #192]	@ (8006dbc <RunProgram+0x278>)
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	f7fd fbf7 	bl	80044f0 <Screen2>
		  HAL_Delay(1000);
 8006d02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006d06:	f001 fa45 	bl	8008194 <HAL_Delay>
		  updated = false;
 8006d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006d84 <RunProgram+0x240>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	701a      	strb	r2, [r3, #0]
	  }
	  if (TouchGetCalibratedPoint(&tx, &ty)){
 8006d10:	4925      	ldr	r1, [pc, #148]	@ (8006da8 <RunProgram+0x264>)
 8006d12:	4826      	ldr	r0, [pc, #152]	@ (8006dac <RunProgram+0x268>)
 8006d14:	f001 f92e 	bl	8007f74 <TouchGetCalibratedPoint>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 84f1 	beq.w	8007702 <RunProgram+0xbbe>
		  if (tx >= 180 && tx <= 230 && ty >= 10 && ty <= 100){
 8006d20:	4b22      	ldr	r3, [pc, #136]	@ (8006dac <RunProgram+0x268>)
 8006d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d26:	2bb3      	cmp	r3, #179	@ 0xb3
 8006d28:	f340 84eb 	ble.w	8007702 <RunProgram+0xbbe>
 8006d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006dac <RunProgram+0x268>)
 8006d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d32:	2be6      	cmp	r3, #230	@ 0xe6
 8006d34:	f300 84e5 	bgt.w	8007702 <RunProgram+0xbbe>
 8006d38:	4b1b      	ldr	r3, [pc, #108]	@ (8006da8 <RunProgram+0x264>)
 8006d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d3e:	2b09      	cmp	r3, #9
 8006d40:	f340 84df 	ble.w	8007702 <RunProgram+0xbbe>
 8006d44:	4b18      	ldr	r3, [pc, #96]	@ (8006da8 <RunProgram+0x264>)
 8006d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d4a:	2b64      	cmp	r3, #100	@ 0x64
 8006d4c:	f300 84d9 	bgt.w	8007702 <RunProgram+0xbbe>
			  current = 1;
 8006d50:	4b06      	ldr	r3, [pc, #24]	@ (8006d6c <RunProgram+0x228>)
 8006d52:	2201      	movs	r2, #1
 8006d54:	601a      	str	r2, [r3, #0]
			  updated = true;
 8006d56:	4b0b      	ldr	r3, [pc, #44]	@ (8006d84 <RunProgram+0x240>)
 8006d58:	2201      	movs	r2, #1
 8006d5a:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(100);
 8006d5c:	2064      	movs	r0, #100	@ 0x64
 8006d5e:	f001 fa19 	bl	8008194 <HAL_Delay>
 8006d62:	f000 bcce 	b.w	8007702 <RunProgram+0xbbe>
 8006d66:	bf00      	nop
 8006d68:	20003498 	.word	0x20003498
 8006d6c:	20000054 	.word	0x20000054
 8006d70:	20000048 	.word	0x20000048
 8006d74:	20000044 	.word	0x20000044
 8006d78:	2000004c 	.word	0x2000004c
 8006d7c:	20000050 	.word	0x20000050
 8006d80:	20003499 	.word	0x20003499
 8006d84:	20000058 	.word	0x20000058
 8006d88:	2000349c 	.word	0x2000349c
 8006d8c:	200034a0 	.word	0x200034a0
 8006d90:	2000350c 	.word	0x2000350c
 8006d94:	20003510 	.word	0x20003510
 8006d98:	20003514 	.word	0x20003514
 8006d9c:	20003518 	.word	0x20003518
 8006da0:	20003500 	.word	0x20003500
 8006da4:	200034f8 	.word	0x200034f8
 8006da8:	20003522 	.word	0x20003522
 8006dac:	20003520 	.word	0x20003520
 8006db0:	200034ac 	.word	0x200034ac
 8006db4:	200034a8 	.word	0x200034a8
 8006db8:	200034cc 	.word	0x200034cc
 8006dbc:	200034b0 	.word	0x200034b0
		  }
	  }
  }
  else if (current == 3){
 8006dc0:	4bcb      	ldr	r3, [pc, #812]	@ (80070f0 <RunProgram+0x5ac>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	f040 849c 	bne.w	8007702 <RunProgram+0xbbe>
	  if (updated == true){
 8006dca:	4bca      	ldr	r3, [pc, #808]	@ (80070f4 <RunProgram+0x5b0>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00f      	beq.n	8006df2 <RunProgram+0x2ae>
		  Screen3(choice);
 8006dd2:	4bc9      	ldr	r3, [pc, #804]	@ (80070f8 <RunProgram+0x5b4>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fd fc80 	bl	80046dc <Screen3>
		  HAL_Delay(1000);
 8006ddc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006de0:	f001 f9d8 	bl	8008194 <HAL_Delay>
		  updated = false;
 8006de4:	4bc3      	ldr	r3, [pc, #780]	@ (80070f4 <RunProgram+0x5b0>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]
		  choiceTmp=choice;
 8006dea:	4bc3      	ldr	r3, [pc, #780]	@ (80070f8 <RunProgram+0x5b4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4ac3      	ldr	r2, [pc, #780]	@ (80070fc <RunProgram+0x5b8>)
 8006df0:	6013      	str	r3, [r2, #0]
	  }
	  if (TouchGetCalibratedPoint(&tx, &ty)){
 8006df2:	49c3      	ldr	r1, [pc, #780]	@ (8007100 <RunProgram+0x5bc>)
 8006df4:	48c3      	ldr	r0, [pc, #780]	@ (8007104 <RunProgram+0x5c0>)
 8006df6:	f001 f8bd 	bl	8007f74 <TouchGetCalibratedPoint>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 8480 	beq.w	8007702 <RunProgram+0xbbe>
		  if (tx >= 100 && tx <= 140 && ty >= 275 && ty <= 315){
 8006e02:	4bc0      	ldr	r3, [pc, #768]	@ (8007104 <RunProgram+0x5c0>)
 8006e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e08:	2b63      	cmp	r3, #99	@ 0x63
 8006e0a:	dd19      	ble.n	8006e40 <RunProgram+0x2fc>
 8006e0c:	4bbd      	ldr	r3, [pc, #756]	@ (8007104 <RunProgram+0x5c0>)
 8006e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e12:	2b8c      	cmp	r3, #140	@ 0x8c
 8006e14:	dc14      	bgt.n	8006e40 <RunProgram+0x2fc>
 8006e16:	4bba      	ldr	r3, [pc, #744]	@ (8007100 <RunProgram+0x5bc>)
 8006e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e1c:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8006e20:	dd0e      	ble.n	8006e40 <RunProgram+0x2fc>
 8006e22:	4bb7      	ldr	r3, [pc, #732]	@ (8007100 <RunProgram+0x5bc>)
 8006e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e28:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 8006e2c:	da08      	bge.n	8006e40 <RunProgram+0x2fc>
			  current = 1;
 8006e2e:	4bb0      	ldr	r3, [pc, #704]	@ (80070f0 <RunProgram+0x5ac>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
			  updated = true;
 8006e34:	4baf      	ldr	r3, [pc, #700]	@ (80070f4 <RunProgram+0x5b0>)
 8006e36:	2201      	movs	r2, #1
 8006e38:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(100);
 8006e3a:	2064      	movs	r0, #100	@ 0x64
 8006e3c:	f001 f9aa 	bl	8008194 <HAL_Delay>
		  }
		  if (tx >= 20 && tx <= 220 && ty >= 50 && ty <= 85){
 8006e40:	4bb0      	ldr	r3, [pc, #704]	@ (8007104 <RunProgram+0x5c0>)
 8006e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e46:	2b13      	cmp	r3, #19
 8006e48:	f340 80d1 	ble.w	8006fee <RunProgram+0x4aa>
 8006e4c:	4bad      	ldr	r3, [pc, #692]	@ (8007104 <RunProgram+0x5c0>)
 8006e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e52:	2bdc      	cmp	r3, #220	@ 0xdc
 8006e54:	f300 80cb 	bgt.w	8006fee <RunProgram+0x4aa>
 8006e58:	4ba9      	ldr	r3, [pc, #676]	@ (8007100 <RunProgram+0x5bc>)
 8006e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e5e:	2b31      	cmp	r3, #49	@ 0x31
 8006e60:	f340 80c5 	ble.w	8006fee <RunProgram+0x4aa>
 8006e64:	4ba6      	ldr	r3, [pc, #664]	@ (8007100 <RunProgram+0x5bc>)
 8006e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e6a:	2b55      	cmp	r3, #85	@ 0x55
 8006e6c:	f300 80bf 	bgt.w	8006fee <RunProgram+0x4aa>
			  choice = 1;
 8006e70:	4ba1      	ldr	r3, [pc, #644]	@ (80070f8 <RunProgram+0x5b4>)
 8006e72:	2201      	movs	r2, #1
 8006e74:	601a      	str	r2, [r3, #0]
			  lcdFillRoundRect(20,50, 200, 35, 6, COLOR_GREEN);
 8006e76:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8006e7a:	9301      	str	r3, [sp, #4]
 8006e7c:	2306      	movs	r3, #6
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	2323      	movs	r3, #35	@ 0x23
 8006e82:	22c8      	movs	r2, #200	@ 0xc8
 8006e84:	2132      	movs	r1, #50	@ 0x32
 8006e86:	2014      	movs	r0, #20
 8006e88:	f7fe fc6c 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,50, 200, 36, 6, COLOR_BLACK);
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	9301      	str	r3, [sp, #4]
 8006e90:	2306      	movs	r3, #6
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	2324      	movs	r3, #36	@ 0x24
 8006e96:	22c8      	movs	r2, #200	@ 0xc8
 8006e98:	2132      	movs	r1, #50	@ 0x32
 8006e9a:	2014      	movs	r0, #20
 8006e9c:	f7fe f8e4 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 8006ea0:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8006ea4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006ea8:	f7fe fe5c 	bl	8005b64 <lcdSetTextColor>
			  lcdSetTextFont(&Font20);
 8006eac:	4896      	ldr	r0, [pc, #600]	@ (8007108 <RunProgram+0x5c4>)
 8006eae:	f7fe fe49 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 60);
 8006eb2:	213c      	movs	r1, #60	@ 0x3c
 8006eb4:	2019      	movs	r0, #25
 8006eb6:	f7fe fed5 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("TP.HCM");
 8006eba:	4894      	ldr	r0, [pc, #592]	@ (800710c <RunProgram+0x5c8>)
 8006ebc:	f7fe fdb6 	bl	8005a2c <lcdPrintf>
			  //
			  lcdFillRoundRect(20,95, 200, 35, 6, COLOR_LIGHTGREY);
 8006ec0:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	2306      	movs	r3, #6
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	2323      	movs	r3, #35	@ 0x23
 8006ecc:	22c8      	movs	r2, #200	@ 0xc8
 8006ece:	215f      	movs	r1, #95	@ 0x5f
 8006ed0:	2014      	movs	r0, #20
 8006ed2:	f7fe fc47 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,95, 200, 36, 6, COLOR_BLACK);
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	2306      	movs	r3, #6
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	2324      	movs	r3, #36	@ 0x24
 8006ee0:	22c8      	movs	r2, #200	@ 0xc8
 8006ee2:	215f      	movs	r1, #95	@ 0x5f
 8006ee4:	2014      	movs	r0, #20
 8006ee6:	f7fe f8bf 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8006eea:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006eee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006ef2:	f7fe fe37 	bl	8005b64 <lcdSetTextColor>
			  lcdSetTextFont(&Font20);
 8006ef6:	4884      	ldr	r0, [pc, #528]	@ (8007108 <RunProgram+0x5c4>)
 8006ef8:	f7fe fe24 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 105);
 8006efc:	2169      	movs	r1, #105	@ 0x69
 8006efe:	2019      	movs	r0, #25
 8006f00:	f7fe feb0 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Ha Noi");
 8006f04:	4882      	ldr	r0, [pc, #520]	@ (8007110 <RunProgram+0x5cc>)
 8006f06:	f7fe fd91 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8006f0a:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006f0e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006f12:	f7fe fe27 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,140, 200, 35, 6, COLOR_LIGHTGREY);
 8006f16:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	2306      	movs	r3, #6
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	2323      	movs	r3, #35	@ 0x23
 8006f22:	22c8      	movs	r2, #200	@ 0xc8
 8006f24:	218c      	movs	r1, #140	@ 0x8c
 8006f26:	2014      	movs	r0, #20
 8006f28:	f7fe fc1c 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,140, 200, 36, 6, COLOR_BLACK);
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	2306      	movs	r3, #6
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	2324      	movs	r3, #36	@ 0x24
 8006f36:	22c8      	movs	r2, #200	@ 0xc8
 8006f38:	218c      	movs	r1, #140	@ 0x8c
 8006f3a:	2014      	movs	r0, #20
 8006f3c:	f7fe f894 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 8006f40:	4871      	ldr	r0, [pc, #452]	@ (8007108 <RunProgram+0x5c4>)
 8006f42:	f7fe fdff 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 150);
 8006f46:	2196      	movs	r1, #150	@ 0x96
 8006f48:	2019      	movs	r0, #25
 8006f4a:	f7fe fe8b 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Hai Phong");
 8006f4e:	4871      	ldr	r0, [pc, #452]	@ (8007114 <RunProgram+0x5d0>)
 8006f50:	f7fe fd6c 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8006f54:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006f58:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006f5c:	f7fe fe02 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,185, 200, 35, 6, COLOR_LIGHTGREY);
 8006f60:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	2306      	movs	r3, #6
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	2323      	movs	r3, #35	@ 0x23
 8006f6c:	22c8      	movs	r2, #200	@ 0xc8
 8006f6e:	21b9      	movs	r1, #185	@ 0xb9
 8006f70:	2014      	movs	r0, #20
 8006f72:	f7fe fbf7 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,185, 200, 36, 6, COLOR_BLACK);
 8006f76:	2300      	movs	r3, #0
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	2306      	movs	r3, #6
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	2324      	movs	r3, #36	@ 0x24
 8006f80:	22c8      	movs	r2, #200	@ 0xc8
 8006f82:	21b9      	movs	r1, #185	@ 0xb9
 8006f84:	2014      	movs	r0, #20
 8006f86:	f7fe f86f 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 8006f8a:	485f      	ldr	r0, [pc, #380]	@ (8007108 <RunProgram+0x5c4>)
 8006f8c:	f7fe fdda 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 195);
 8006f90:	21c3      	movs	r1, #195	@ 0xc3
 8006f92:	2019      	movs	r0, #25
 8006f94:	f7fe fe66 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Can Tho");
 8006f98:	485f      	ldr	r0, [pc, #380]	@ (8007118 <RunProgram+0x5d4>)
 8006f9a:	f7fe fd47 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8006f9e:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8006fa2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006fa6:	f7fe fddd 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,230, 200, 35, 6, COLOR_LIGHTGREY);
 8006faa:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	2306      	movs	r3, #6
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	2323      	movs	r3, #35	@ 0x23
 8006fb6:	22c8      	movs	r2, #200	@ 0xc8
 8006fb8:	21e6      	movs	r1, #230	@ 0xe6
 8006fba:	2014      	movs	r0, #20
 8006fbc:	f7fe fbd2 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,230, 200, 36, 6, COLOR_BLACK);
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	2306      	movs	r3, #6
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	2324      	movs	r3, #36	@ 0x24
 8006fca:	22c8      	movs	r2, #200	@ 0xc8
 8006fcc:	21e6      	movs	r1, #230	@ 0xe6
 8006fce:	2014      	movs	r0, #20
 8006fd0:	f7fe f84a 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 8006fd4:	484c      	ldr	r0, [pc, #304]	@ (8007108 <RunProgram+0x5c4>)
 8006fd6:	f7fe fdb5 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 240);
 8006fda:	21f0      	movs	r1, #240	@ 0xf0
 8006fdc:	2019      	movs	r0, #25
 8006fde:	f7fe fe41 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Da Nang");
 8006fe2:	484e      	ldr	r0, [pc, #312]	@ (800711c <RunProgram+0x5d8>)
 8006fe4:	f7fe fd22 	bl	8005a2c <lcdPrintf>
			  HAL_Delay(200);
 8006fe8:	20c8      	movs	r0, #200	@ 0xc8
 8006fea:	f001 f8d3 	bl	8008194 <HAL_Delay>
		  }
		  if (tx >= 20 && tx <= 220 && ty >= 95 && ty <= 130){
 8006fee:	4b45      	ldr	r3, [pc, #276]	@ (8007104 <RunProgram+0x5c0>)
 8006ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ff4:	2b13      	cmp	r3, #19
 8006ff6:	f340 80ea 	ble.w	80071ce <RunProgram+0x68a>
 8006ffa:	4b42      	ldr	r3, [pc, #264]	@ (8007104 <RunProgram+0x5c0>)
 8006ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007000:	2bdc      	cmp	r3, #220	@ 0xdc
 8007002:	f300 80e4 	bgt.w	80071ce <RunProgram+0x68a>
 8007006:	4b3e      	ldr	r3, [pc, #248]	@ (8007100 <RunProgram+0x5bc>)
 8007008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800700c:	2b5e      	cmp	r3, #94	@ 0x5e
 800700e:	f340 80de 	ble.w	80071ce <RunProgram+0x68a>
 8007012:	4b3b      	ldr	r3, [pc, #236]	@ (8007100 <RunProgram+0x5bc>)
 8007014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007018:	2b82      	cmp	r3, #130	@ 0x82
 800701a:	f300 80d8 	bgt.w	80071ce <RunProgram+0x68a>
			  choice = 2;
 800701e:	4b36      	ldr	r3, [pc, #216]	@ (80070f8 <RunProgram+0x5b4>)
 8007020:	2202      	movs	r2, #2
 8007022:	601a      	str	r2, [r3, #0]
			  lcdFillRoundRect(20,50, 200, 35, 6, COLOR_LIGHTGREY);
 8007024:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	2306      	movs	r3, #6
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	2323      	movs	r3, #35	@ 0x23
 8007030:	22c8      	movs	r2, #200	@ 0xc8
 8007032:	2132      	movs	r1, #50	@ 0x32
 8007034:	2014      	movs	r0, #20
 8007036:	f7fe fb95 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,50, 200, 36, 6, COLOR_BLACK);
 800703a:	2300      	movs	r3, #0
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	2306      	movs	r3, #6
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	2324      	movs	r3, #36	@ 0x24
 8007044:	22c8      	movs	r2, #200	@ 0xc8
 8007046:	2132      	movs	r1, #50	@ 0x32
 8007048:	2014      	movs	r0, #20
 800704a:	f7fe f80d 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800704e:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8007052:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007056:	f7fe fd85 	bl	8005b64 <lcdSetTextColor>
			  lcdSetTextFont(&Font20);
 800705a:	482b      	ldr	r0, [pc, #172]	@ (8007108 <RunProgram+0x5c4>)
 800705c:	f7fe fd72 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 60);
 8007060:	213c      	movs	r1, #60	@ 0x3c
 8007062:	2019      	movs	r0, #25
 8007064:	f7fe fdfe 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("TP.HCM");
 8007068:	4828      	ldr	r0, [pc, #160]	@ (800710c <RunProgram+0x5c8>)
 800706a:	f7fe fcdf 	bl	8005a2c <lcdPrintf>
			  //
			  lcdFillRoundRect(20,95, 200, 35, 6, COLOR_GREEN);
 800706e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	2306      	movs	r3, #6
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2323      	movs	r3, #35	@ 0x23
 800707a:	22c8      	movs	r2, #200	@ 0xc8
 800707c:	215f      	movs	r1, #95	@ 0x5f
 800707e:	2014      	movs	r0, #20
 8007080:	f7fe fb70 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,95, 200, 36, 6, COLOR_BLACK);
 8007084:	2300      	movs	r3, #0
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	2306      	movs	r3, #6
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	2324      	movs	r3, #36	@ 0x24
 800708e:	22c8      	movs	r2, #200	@ 0xc8
 8007090:	215f      	movs	r1, #95	@ 0x5f
 8007092:	2014      	movs	r0, #20
 8007094:	f7fd ffe8 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 8007098:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800709c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80070a0:	f7fe fd60 	bl	8005b64 <lcdSetTextColor>
			  lcdSetTextFont(&Font20);
 80070a4:	4818      	ldr	r0, [pc, #96]	@ (8007108 <RunProgram+0x5c4>)
 80070a6:	f7fe fd4d 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 105);
 80070aa:	2169      	movs	r1, #105	@ 0x69
 80070ac:	2019      	movs	r0, #25
 80070ae:	f7fe fdd9 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Ha Noi");
 80070b2:	4817      	ldr	r0, [pc, #92]	@ (8007110 <RunProgram+0x5cc>)
 80070b4:	f7fe fcba 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80070b8:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80070bc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80070c0:	f7fe fd50 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,140, 200, 35, 6, COLOR_LIGHTGREY);
 80070c4:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	2306      	movs	r3, #6
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	2323      	movs	r3, #35	@ 0x23
 80070d0:	22c8      	movs	r2, #200	@ 0xc8
 80070d2:	218c      	movs	r1, #140	@ 0x8c
 80070d4:	2014      	movs	r0, #20
 80070d6:	f7fe fb45 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,140, 200, 36, 6, COLOR_BLACK);
 80070da:	2300      	movs	r3, #0
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	2306      	movs	r3, #6
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	2324      	movs	r3, #36	@ 0x24
 80070e4:	22c8      	movs	r2, #200	@ 0xc8
 80070e6:	218c      	movs	r1, #140	@ 0x8c
 80070e8:	2014      	movs	r0, #20
 80070ea:	f7fd ffbd 	bl	8005068 <lcdDrawRoundRect>
 80070ee:	e017      	b.n	8007120 <RunProgram+0x5dc>
 80070f0:	20000054 	.word	0x20000054
 80070f4:	20000058 	.word	0x20000058
 80070f8:	2000004c 	.word	0x2000004c
 80070fc:	20000050 	.word	0x20000050
 8007100:	20003522 	.word	0x20003522
 8007104:	20003520 	.word	0x20003520
 8007108:	2000001c 	.word	0x2000001c
 800710c:	0800f41c 	.word	0x0800f41c
 8007110:	0800f424 	.word	0x0800f424
 8007114:	0800f42c 	.word	0x0800f42c
 8007118:	0800f438 	.word	0x0800f438
 800711c:	0800f440 	.word	0x0800f440
			  lcdSetTextFont(&Font20);
 8007120:	48d6      	ldr	r0, [pc, #856]	@ (800747c <RunProgram+0x938>)
 8007122:	f7fe fd0f 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 150);
 8007126:	2196      	movs	r1, #150	@ 0x96
 8007128:	2019      	movs	r0, #25
 800712a:	f7fe fd9b 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Hai Phong");
 800712e:	48d4      	ldr	r0, [pc, #848]	@ (8007480 <RunProgram+0x93c>)
 8007130:	f7fe fc7c 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8007134:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8007138:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800713c:	f7fe fd12 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,185, 200, 35, 6, COLOR_LIGHTGREY);
 8007140:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8007144:	9301      	str	r3, [sp, #4]
 8007146:	2306      	movs	r3, #6
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	2323      	movs	r3, #35	@ 0x23
 800714c:	22c8      	movs	r2, #200	@ 0xc8
 800714e:	21b9      	movs	r1, #185	@ 0xb9
 8007150:	2014      	movs	r0, #20
 8007152:	f7fe fb07 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,185, 200, 36, 6, COLOR_BLACK);
 8007156:	2300      	movs	r3, #0
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	2306      	movs	r3, #6
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	2324      	movs	r3, #36	@ 0x24
 8007160:	22c8      	movs	r2, #200	@ 0xc8
 8007162:	21b9      	movs	r1, #185	@ 0xb9
 8007164:	2014      	movs	r0, #20
 8007166:	f7fd ff7f 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 800716a:	48c4      	ldr	r0, [pc, #784]	@ (800747c <RunProgram+0x938>)
 800716c:	f7fe fcea 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 195);
 8007170:	21c3      	movs	r1, #195	@ 0xc3
 8007172:	2019      	movs	r0, #25
 8007174:	f7fe fd76 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Can Tho");
 8007178:	48c2      	ldr	r0, [pc, #776]	@ (8007484 <RunProgram+0x940>)
 800717a:	f7fe fc57 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800717e:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8007182:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007186:	f7fe fced 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,230, 200, 35, 6, COLOR_LIGHTGREY);
 800718a:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	2306      	movs	r3, #6
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	2323      	movs	r3, #35	@ 0x23
 8007196:	22c8      	movs	r2, #200	@ 0xc8
 8007198:	21e6      	movs	r1, #230	@ 0xe6
 800719a:	2014      	movs	r0, #20
 800719c:	f7fe fae2 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,230, 200, 36, 6, COLOR_BLACK);
 80071a0:	2300      	movs	r3, #0
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	2306      	movs	r3, #6
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2324      	movs	r3, #36	@ 0x24
 80071aa:	22c8      	movs	r2, #200	@ 0xc8
 80071ac:	21e6      	movs	r1, #230	@ 0xe6
 80071ae:	2014      	movs	r0, #20
 80071b0:	f7fd ff5a 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 80071b4:	48b1      	ldr	r0, [pc, #708]	@ (800747c <RunProgram+0x938>)
 80071b6:	f7fe fcc5 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 240);
 80071ba:	21f0      	movs	r1, #240	@ 0xf0
 80071bc:	2019      	movs	r0, #25
 80071be:	f7fe fd51 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Da Nang");
 80071c2:	48b1      	ldr	r0, [pc, #708]	@ (8007488 <RunProgram+0x944>)
 80071c4:	f7fe fc32 	bl	8005a2c <lcdPrintf>
			  HAL_Delay(200);
 80071c8:	20c8      	movs	r0, #200	@ 0xc8
 80071ca:	f000 ffe3 	bl	8008194 <HAL_Delay>
		  }
		  if (tx >= 20 && tx <= 220 && ty >= 140 && ty <= 175){
 80071ce:	4baf      	ldr	r3, [pc, #700]	@ (800748c <RunProgram+0x948>)
 80071d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071d4:	2b13      	cmp	r3, #19
 80071d6:	f340 80d1 	ble.w	800737c <RunProgram+0x838>
 80071da:	4bac      	ldr	r3, [pc, #688]	@ (800748c <RunProgram+0x948>)
 80071dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071e0:	2bdc      	cmp	r3, #220	@ 0xdc
 80071e2:	f300 80cb 	bgt.w	800737c <RunProgram+0x838>
 80071e6:	4baa      	ldr	r3, [pc, #680]	@ (8007490 <RunProgram+0x94c>)
 80071e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071ec:	2b8b      	cmp	r3, #139	@ 0x8b
 80071ee:	f340 80c5 	ble.w	800737c <RunProgram+0x838>
 80071f2:	4ba7      	ldr	r3, [pc, #668]	@ (8007490 <RunProgram+0x94c>)
 80071f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071f8:	2baf      	cmp	r3, #175	@ 0xaf
 80071fa:	f300 80bf 	bgt.w	800737c <RunProgram+0x838>
			  choice = 3;
 80071fe:	4ba5      	ldr	r3, [pc, #660]	@ (8007494 <RunProgram+0x950>)
 8007200:	2203      	movs	r2, #3
 8007202:	601a      	str	r2, [r3, #0]
			  lcdFillRoundRect(20,50, 200, 35, 6, COLOR_LIGHTGREY);
 8007204:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	2306      	movs	r3, #6
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	2323      	movs	r3, #35	@ 0x23
 8007210:	22c8      	movs	r2, #200	@ 0xc8
 8007212:	2132      	movs	r1, #50	@ 0x32
 8007214:	2014      	movs	r0, #20
 8007216:	f7fe faa5 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,50, 200, 36, 6, COLOR_BLACK);
 800721a:	2300      	movs	r3, #0
 800721c:	9301      	str	r3, [sp, #4]
 800721e:	2306      	movs	r3, #6
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	2324      	movs	r3, #36	@ 0x24
 8007224:	22c8      	movs	r2, #200	@ 0xc8
 8007226:	2132      	movs	r1, #50	@ 0x32
 8007228:	2014      	movs	r0, #20
 800722a:	f7fd ff1d 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800722e:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8007232:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007236:	f7fe fc95 	bl	8005b64 <lcdSetTextColor>
			  lcdSetTextFont(&Font20);
 800723a:	4890      	ldr	r0, [pc, #576]	@ (800747c <RunProgram+0x938>)
 800723c:	f7fe fc82 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 60);
 8007240:	213c      	movs	r1, #60	@ 0x3c
 8007242:	2019      	movs	r0, #25
 8007244:	f7fe fd0e 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("TP.HCM");
 8007248:	4893      	ldr	r0, [pc, #588]	@ (8007498 <RunProgram+0x954>)
 800724a:	f7fe fbef 	bl	8005a2c <lcdPrintf>
			  //
			  lcdFillRoundRect(20,95, 200, 35, 6, COLOR_LIGHTGREY);
 800724e:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	2306      	movs	r3, #6
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	2323      	movs	r3, #35	@ 0x23
 800725a:	22c8      	movs	r2, #200	@ 0xc8
 800725c:	215f      	movs	r1, #95	@ 0x5f
 800725e:	2014      	movs	r0, #20
 8007260:	f7fe fa80 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,95, 200, 36, 6, COLOR_BLACK);
 8007264:	2300      	movs	r3, #0
 8007266:	9301      	str	r3, [sp, #4]
 8007268:	2306      	movs	r3, #6
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	2324      	movs	r3, #36	@ 0x24
 800726e:	22c8      	movs	r2, #200	@ 0xc8
 8007270:	215f      	movs	r1, #95	@ 0x5f
 8007272:	2014      	movs	r0, #20
 8007274:	f7fd fef8 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8007278:	f24c 6118 	movw	r1, #50712	@ 0xc618
 800727c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007280:	f7fe fc70 	bl	8005b64 <lcdSetTextColor>
			  lcdSetTextFont(&Font20);
 8007284:	487d      	ldr	r0, [pc, #500]	@ (800747c <RunProgram+0x938>)
 8007286:	f7fe fc5d 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 105);
 800728a:	2169      	movs	r1, #105	@ 0x69
 800728c:	2019      	movs	r0, #25
 800728e:	f7fe fce9 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Ha Noi");
 8007292:	4882      	ldr	r0, [pc, #520]	@ (800749c <RunProgram+0x958>)
 8007294:	f7fe fbca 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 8007298:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800729c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80072a0:	f7fe fc60 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,140, 200, 35, 6, COLOR_GREEN);
 80072a4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	2306      	movs	r3, #6
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	2323      	movs	r3, #35	@ 0x23
 80072b0:	22c8      	movs	r2, #200	@ 0xc8
 80072b2:	218c      	movs	r1, #140	@ 0x8c
 80072b4:	2014      	movs	r0, #20
 80072b6:	f7fe fa55 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,140, 200, 36, 6, COLOR_BLACK);
 80072ba:	2300      	movs	r3, #0
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	2306      	movs	r3, #6
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	2324      	movs	r3, #36	@ 0x24
 80072c4:	22c8      	movs	r2, #200	@ 0xc8
 80072c6:	218c      	movs	r1, #140	@ 0x8c
 80072c8:	2014      	movs	r0, #20
 80072ca:	f7fd fecd 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 80072ce:	486b      	ldr	r0, [pc, #428]	@ (800747c <RunProgram+0x938>)
 80072d0:	f7fe fc38 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 150);
 80072d4:	2196      	movs	r1, #150	@ 0x96
 80072d6:	2019      	movs	r0, #25
 80072d8:	f7fe fcc4 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Hai Phong");
 80072dc:	4868      	ldr	r0, [pc, #416]	@ (8007480 <RunProgram+0x93c>)
 80072de:	f7fe fba5 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80072e2:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80072e6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80072ea:	f7fe fc3b 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,185, 200, 35, 6, COLOR_LIGHTGREY);
 80072ee:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80072f2:	9301      	str	r3, [sp, #4]
 80072f4:	2306      	movs	r3, #6
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	2323      	movs	r3, #35	@ 0x23
 80072fa:	22c8      	movs	r2, #200	@ 0xc8
 80072fc:	21b9      	movs	r1, #185	@ 0xb9
 80072fe:	2014      	movs	r0, #20
 8007300:	f7fe fa30 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,185, 200, 36, 6, COLOR_BLACK);
 8007304:	2300      	movs	r3, #0
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	2306      	movs	r3, #6
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	2324      	movs	r3, #36	@ 0x24
 800730e:	22c8      	movs	r2, #200	@ 0xc8
 8007310:	21b9      	movs	r1, #185	@ 0xb9
 8007312:	2014      	movs	r0, #20
 8007314:	f7fd fea8 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 8007318:	4858      	ldr	r0, [pc, #352]	@ (800747c <RunProgram+0x938>)
 800731a:	f7fe fc13 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 195);
 800731e:	21c3      	movs	r1, #195	@ 0xc3
 8007320:	2019      	movs	r0, #25
 8007322:	f7fe fc9f 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Can Tho");
 8007326:	4857      	ldr	r0, [pc, #348]	@ (8007484 <RunProgram+0x940>)
 8007328:	f7fe fb80 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800732c:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8007330:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007334:	f7fe fc16 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,230, 200, 35, 6, COLOR_LIGHTGREY);
 8007338:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800733c:	9301      	str	r3, [sp, #4]
 800733e:	2306      	movs	r3, #6
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	2323      	movs	r3, #35	@ 0x23
 8007344:	22c8      	movs	r2, #200	@ 0xc8
 8007346:	21e6      	movs	r1, #230	@ 0xe6
 8007348:	2014      	movs	r0, #20
 800734a:	f7fe fa0b 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,230, 200, 36, 6, COLOR_BLACK);
 800734e:	2300      	movs	r3, #0
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	2306      	movs	r3, #6
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	2324      	movs	r3, #36	@ 0x24
 8007358:	22c8      	movs	r2, #200	@ 0xc8
 800735a:	21e6      	movs	r1, #230	@ 0xe6
 800735c:	2014      	movs	r0, #20
 800735e:	f7fd fe83 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 8007362:	4846      	ldr	r0, [pc, #280]	@ (800747c <RunProgram+0x938>)
 8007364:	f7fe fbee 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 240);
 8007368:	21f0      	movs	r1, #240	@ 0xf0
 800736a:	2019      	movs	r0, #25
 800736c:	f7fe fc7a 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Da Nang");
 8007370:	4845      	ldr	r0, [pc, #276]	@ (8007488 <RunProgram+0x944>)
 8007372:	f7fe fb5b 	bl	8005a2c <lcdPrintf>
			  HAL_Delay(200);
 8007376:	20c8      	movs	r0, #200	@ 0xc8
 8007378:	f000 ff0c 	bl	8008194 <HAL_Delay>
					  }
		  if (tx >= 20 && tx <= 220 && ty >= 185 && ty <= 220){
 800737c:	4b43      	ldr	r3, [pc, #268]	@ (800748c <RunProgram+0x948>)
 800737e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007382:	2b13      	cmp	r3, #19
 8007384:	f340 80e5 	ble.w	8007552 <RunProgram+0xa0e>
 8007388:	4b40      	ldr	r3, [pc, #256]	@ (800748c <RunProgram+0x948>)
 800738a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800738e:	2bdc      	cmp	r3, #220	@ 0xdc
 8007390:	f300 80df 	bgt.w	8007552 <RunProgram+0xa0e>
 8007394:	4b3e      	ldr	r3, [pc, #248]	@ (8007490 <RunProgram+0x94c>)
 8007396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800739a:	2bb8      	cmp	r3, #184	@ 0xb8
 800739c:	f340 80d9 	ble.w	8007552 <RunProgram+0xa0e>
 80073a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007490 <RunProgram+0x94c>)
 80073a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073a6:	2bdc      	cmp	r3, #220	@ 0xdc
 80073a8:	f300 80d3 	bgt.w	8007552 <RunProgram+0xa0e>
			  choice = 4;
 80073ac:	4b39      	ldr	r3, [pc, #228]	@ (8007494 <RunProgram+0x950>)
 80073ae:	2204      	movs	r2, #4
 80073b0:	601a      	str	r2, [r3, #0]
			  lcdFillRoundRect(20,50, 200, 35, 6, COLOR_LIGHTGREY);
 80073b2:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	2306      	movs	r3, #6
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	2323      	movs	r3, #35	@ 0x23
 80073be:	22c8      	movs	r2, #200	@ 0xc8
 80073c0:	2132      	movs	r1, #50	@ 0x32
 80073c2:	2014      	movs	r0, #20
 80073c4:	f7fe f9ce 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,50, 200, 36, 6, COLOR_BLACK);
 80073c8:	2300      	movs	r3, #0
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	2306      	movs	r3, #6
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	2324      	movs	r3, #36	@ 0x24
 80073d2:	22c8      	movs	r2, #200	@ 0xc8
 80073d4:	2132      	movs	r1, #50	@ 0x32
 80073d6:	2014      	movs	r0, #20
 80073d8:	f7fd fe46 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80073dc:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80073e0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80073e4:	f7fe fbbe 	bl	8005b64 <lcdSetTextColor>
			  lcdSetTextFont(&Font20);
 80073e8:	4824      	ldr	r0, [pc, #144]	@ (800747c <RunProgram+0x938>)
 80073ea:	f7fe fbab 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 60);
 80073ee:	213c      	movs	r1, #60	@ 0x3c
 80073f0:	2019      	movs	r0, #25
 80073f2:	f7fe fc37 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("TP.HCM");
 80073f6:	4828      	ldr	r0, [pc, #160]	@ (8007498 <RunProgram+0x954>)
 80073f8:	f7fe fb18 	bl	8005a2c <lcdPrintf>
			  //
			  lcdFillRoundRect(20,95, 200, 35, 6, COLOR_LIGHTGREY);
 80073fc:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	2306      	movs	r3, #6
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	2323      	movs	r3, #35	@ 0x23
 8007408:	22c8      	movs	r2, #200	@ 0xc8
 800740a:	215f      	movs	r1, #95	@ 0x5f
 800740c:	2014      	movs	r0, #20
 800740e:	f7fe f9a9 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,95, 200, 36, 6, COLOR_BLACK);
 8007412:	2300      	movs	r3, #0
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	2306      	movs	r3, #6
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	2324      	movs	r3, #36	@ 0x24
 800741c:	22c8      	movs	r2, #200	@ 0xc8
 800741e:	215f      	movs	r1, #95	@ 0x5f
 8007420:	2014      	movs	r0, #20
 8007422:	f7fd fe21 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8007426:	f24c 6118 	movw	r1, #50712	@ 0xc618
 800742a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800742e:	f7fe fb99 	bl	8005b64 <lcdSetTextColor>
			  lcdSetTextFont(&Font20);
 8007432:	4812      	ldr	r0, [pc, #72]	@ (800747c <RunProgram+0x938>)
 8007434:	f7fe fb86 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 105);
 8007438:	2169      	movs	r1, #105	@ 0x69
 800743a:	2019      	movs	r0, #25
 800743c:	f7fe fc12 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Ha Noi");
 8007440:	4816      	ldr	r0, [pc, #88]	@ (800749c <RunProgram+0x958>)
 8007442:	f7fe faf3 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8007446:	f24c 6118 	movw	r1, #50712	@ 0xc618
 800744a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800744e:	f7fe fb89 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,140, 200, 35, 6, COLOR_LIGHTGREY);
 8007452:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	2306      	movs	r3, #6
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	2323      	movs	r3, #35	@ 0x23
 800745e:	22c8      	movs	r2, #200	@ 0xc8
 8007460:	218c      	movs	r1, #140	@ 0x8c
 8007462:	2014      	movs	r0, #20
 8007464:	f7fe f97e 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,140, 200, 36, 6, COLOR_BLACK);
 8007468:	2300      	movs	r3, #0
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	2306      	movs	r3, #6
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	2324      	movs	r3, #36	@ 0x24
 8007472:	22c8      	movs	r2, #200	@ 0xc8
 8007474:	218c      	movs	r1, #140	@ 0x8c
 8007476:	2014      	movs	r0, #20
 8007478:	e012      	b.n	80074a0 <RunProgram+0x95c>
 800747a:	bf00      	nop
 800747c:	2000001c 	.word	0x2000001c
 8007480:	0800f42c 	.word	0x0800f42c
 8007484:	0800f438 	.word	0x0800f438
 8007488:	0800f440 	.word	0x0800f440
 800748c:	20003520 	.word	0x20003520
 8007490:	20003522 	.word	0x20003522
 8007494:	2000004c 	.word	0x2000004c
 8007498:	0800f41c 	.word	0x0800f41c
 800749c:	0800f424 	.word	0x0800f424
 80074a0:	f7fd fde2 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 80074a4:	48c1      	ldr	r0, [pc, #772]	@ (80077ac <RunProgram+0xc68>)
 80074a6:	f7fe fb4d 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 150);
 80074aa:	2196      	movs	r1, #150	@ 0x96
 80074ac:	2019      	movs	r0, #25
 80074ae:	f7fe fbd9 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Hai Phong");
 80074b2:	48bf      	ldr	r0, [pc, #764]	@ (80077b0 <RunProgram+0xc6c>)
 80074b4:	f7fe faba 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 80074b8:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80074bc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80074c0:	f7fe fb50 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,185, 200, 35, 6, COLOR_GREEN);
 80074c4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	2306      	movs	r3, #6
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2323      	movs	r3, #35	@ 0x23
 80074d0:	22c8      	movs	r2, #200	@ 0xc8
 80074d2:	21b9      	movs	r1, #185	@ 0xb9
 80074d4:	2014      	movs	r0, #20
 80074d6:	f7fe f945 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,185, 200, 36, 6, COLOR_BLACK);
 80074da:	2300      	movs	r3, #0
 80074dc:	9301      	str	r3, [sp, #4]
 80074de:	2306      	movs	r3, #6
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	2324      	movs	r3, #36	@ 0x24
 80074e4:	22c8      	movs	r2, #200	@ 0xc8
 80074e6:	21b9      	movs	r1, #185	@ 0xb9
 80074e8:	2014      	movs	r0, #20
 80074ea:	f7fd fdbd 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 80074ee:	48af      	ldr	r0, [pc, #700]	@ (80077ac <RunProgram+0xc68>)
 80074f0:	f7fe fb28 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 195);
 80074f4:	21c3      	movs	r1, #195	@ 0xc3
 80074f6:	2019      	movs	r0, #25
 80074f8:	f7fe fbb4 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Can Tho");
 80074fc:	48ad      	ldr	r0, [pc, #692]	@ (80077b4 <RunProgram+0xc70>)
 80074fe:	f7fe fa95 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8007502:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8007506:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800750a:	f7fe fb2b 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,230, 200, 35, 6, COLOR_LIGHTGREY);
 800750e:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	2306      	movs	r3, #6
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	2323      	movs	r3, #35	@ 0x23
 800751a:	22c8      	movs	r2, #200	@ 0xc8
 800751c:	21e6      	movs	r1, #230	@ 0xe6
 800751e:	2014      	movs	r0, #20
 8007520:	f7fe f920 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,230, 200, 36, 6, COLOR_BLACK);
 8007524:	2300      	movs	r3, #0
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	2306      	movs	r3, #6
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	2324      	movs	r3, #36	@ 0x24
 800752e:	22c8      	movs	r2, #200	@ 0xc8
 8007530:	21e6      	movs	r1, #230	@ 0xe6
 8007532:	2014      	movs	r0, #20
 8007534:	f7fd fd98 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 8007538:	489c      	ldr	r0, [pc, #624]	@ (80077ac <RunProgram+0xc68>)
 800753a:	f7fe fb03 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 240);
 800753e:	21f0      	movs	r1, #240	@ 0xf0
 8007540:	2019      	movs	r0, #25
 8007542:	f7fe fb8f 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Da Nang");
 8007546:	489c      	ldr	r0, [pc, #624]	@ (80077b8 <RunProgram+0xc74>)
 8007548:	f7fe fa70 	bl	8005a2c <lcdPrintf>
			  HAL_Delay(200);
 800754c:	20c8      	movs	r0, #200	@ 0xc8
 800754e:	f000 fe21 	bl	8008194 <HAL_Delay>
		  }
		  if (tx >= 20 && tx <= 220 && ty >= 230 && ty <= 265){
 8007552:	4b9a      	ldr	r3, [pc, #616]	@ (80077bc <RunProgram+0xc78>)
 8007554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007558:	2b13      	cmp	r3, #19
 800755a:	f340 80d2 	ble.w	8007702 <RunProgram+0xbbe>
 800755e:	4b97      	ldr	r3, [pc, #604]	@ (80077bc <RunProgram+0xc78>)
 8007560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007564:	2bdc      	cmp	r3, #220	@ 0xdc
 8007566:	f300 80cc 	bgt.w	8007702 <RunProgram+0xbbe>
 800756a:	4b95      	ldr	r3, [pc, #596]	@ (80077c0 <RunProgram+0xc7c>)
 800756c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007570:	2be5      	cmp	r3, #229	@ 0xe5
 8007572:	f340 80c6 	ble.w	8007702 <RunProgram+0xbbe>
 8007576:	4b92      	ldr	r3, [pc, #584]	@ (80077c0 <RunProgram+0xc7c>)
 8007578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800757c:	f5b3 7f85 	cmp.w	r3, #266	@ 0x10a
 8007580:	f280 80bf 	bge.w	8007702 <RunProgram+0xbbe>
			  choice = 5;
 8007584:	4b8f      	ldr	r3, [pc, #572]	@ (80077c4 <RunProgram+0xc80>)
 8007586:	2205      	movs	r2, #5
 8007588:	601a      	str	r2, [r3, #0]
			  lcdFillRoundRect(20,50, 200, 35, 6, COLOR_LIGHTGREY);
 800758a:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800758e:	9301      	str	r3, [sp, #4]
 8007590:	2306      	movs	r3, #6
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	2323      	movs	r3, #35	@ 0x23
 8007596:	22c8      	movs	r2, #200	@ 0xc8
 8007598:	2132      	movs	r1, #50	@ 0x32
 800759a:	2014      	movs	r0, #20
 800759c:	f7fe f8e2 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,50, 200, 36, 6, COLOR_BLACK);
 80075a0:	2300      	movs	r3, #0
 80075a2:	9301      	str	r3, [sp, #4]
 80075a4:	2306      	movs	r3, #6
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	2324      	movs	r3, #36	@ 0x24
 80075aa:	22c8      	movs	r2, #200	@ 0xc8
 80075ac:	2132      	movs	r1, #50	@ 0x32
 80075ae:	2014      	movs	r0, #20
 80075b0:	f7fd fd5a 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80075b4:	f24c 6118 	movw	r1, #50712	@ 0xc618
 80075b8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80075bc:	f7fe fad2 	bl	8005b64 <lcdSetTextColor>
			  lcdSetTextFont(&Font20);
 80075c0:	487a      	ldr	r0, [pc, #488]	@ (80077ac <RunProgram+0xc68>)
 80075c2:	f7fe fabf 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 60);
 80075c6:	213c      	movs	r1, #60	@ 0x3c
 80075c8:	2019      	movs	r0, #25
 80075ca:	f7fe fb4b 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("TP.HCM");
 80075ce:	487e      	ldr	r0, [pc, #504]	@ (80077c8 <RunProgram+0xc84>)
 80075d0:	f7fe fa2c 	bl	8005a2c <lcdPrintf>
			  //
			  lcdFillRoundRect(20,95, 200, 35, 6, COLOR_LIGHTGREY);
 80075d4:	f24c 6318 	movw	r3, #50712	@ 0xc618
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	2306      	movs	r3, #6
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	2323      	movs	r3, #35	@ 0x23
 80075e0:	22c8      	movs	r2, #200	@ 0xc8
 80075e2:	215f      	movs	r1, #95	@ 0x5f
 80075e4:	2014      	movs	r0, #20
 80075e6:	f7fe f8bd 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,95, 200, 36, 6, COLOR_BLACK);
 80075ea:	2300      	movs	r3, #0
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	2306      	movs	r3, #6
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	2324      	movs	r3, #36	@ 0x24
 80075f4:	22c8      	movs	r2, #200	@ 0xc8
 80075f6:	215f      	movs	r1, #95	@ 0x5f
 80075f8:	2014      	movs	r0, #20
 80075fa:	f7fd fd35 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 80075fe:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8007602:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007606:	f7fe faad 	bl	8005b64 <lcdSetTextColor>
			  lcdSetTextFont(&Font20);
 800760a:	4868      	ldr	r0, [pc, #416]	@ (80077ac <RunProgram+0xc68>)
 800760c:	f7fe fa9a 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 105);
 8007610:	2169      	movs	r1, #105	@ 0x69
 8007612:	2019      	movs	r0, #25
 8007614:	f7fe fb26 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Ha Noi");
 8007618:	486c      	ldr	r0, [pc, #432]	@ (80077cc <RunProgram+0xc88>)
 800761a:	f7fe fa07 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 800761e:	f24c 6118 	movw	r1, #50712	@ 0xc618
 8007622:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007626:	f7fe fa9d 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,140, 200, 35, 6, COLOR_LIGHTGREY);
 800762a:	f24c 6318 	movw	r3, #50712	@ 0xc618
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	2306      	movs	r3, #6
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	2323      	movs	r3, #35	@ 0x23
 8007636:	22c8      	movs	r2, #200	@ 0xc8
 8007638:	218c      	movs	r1, #140	@ 0x8c
 800763a:	2014      	movs	r0, #20
 800763c:	f7fe f892 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,140, 200, 36, 6, COLOR_BLACK);
 8007640:	2300      	movs	r3, #0
 8007642:	9301      	str	r3, [sp, #4]
 8007644:	2306      	movs	r3, #6
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	2324      	movs	r3, #36	@ 0x24
 800764a:	22c8      	movs	r2, #200	@ 0xc8
 800764c:	218c      	movs	r1, #140	@ 0x8c
 800764e:	2014      	movs	r0, #20
 8007650:	f7fd fd0a 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 8007654:	4855      	ldr	r0, [pc, #340]	@ (80077ac <RunProgram+0xc68>)
 8007656:	f7fe fa75 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 150);
 800765a:	2196      	movs	r1, #150	@ 0x96
 800765c:	2019      	movs	r0, #25
 800765e:	f7fe fb01 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Hai Phong");
 8007662:	4853      	ldr	r0, [pc, #332]	@ (80077b0 <RunProgram+0xc6c>)
 8007664:	f7fe f9e2 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_LIGHTGREY);
 8007668:	f24c 6118 	movw	r1, #50712	@ 0xc618
 800766c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007670:	f7fe fa78 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,185, 200, 35, 6, COLOR_LIGHTGREY);
 8007674:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	2306      	movs	r3, #6
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	2323      	movs	r3, #35	@ 0x23
 8007680:	22c8      	movs	r2, #200	@ 0xc8
 8007682:	21b9      	movs	r1, #185	@ 0xb9
 8007684:	2014      	movs	r0, #20
 8007686:	f7fe f86d 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,185, 200, 36, 6, COLOR_BLACK);
 800768a:	2300      	movs	r3, #0
 800768c:	9301      	str	r3, [sp, #4]
 800768e:	2306      	movs	r3, #6
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	2324      	movs	r3, #36	@ 0x24
 8007694:	22c8      	movs	r2, #200	@ 0xc8
 8007696:	21b9      	movs	r1, #185	@ 0xb9
 8007698:	2014      	movs	r0, #20
 800769a:	f7fd fce5 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 800769e:	4843      	ldr	r0, [pc, #268]	@ (80077ac <RunProgram+0xc68>)
 80076a0:	f7fe fa50 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 195);
 80076a4:	21c3      	movs	r1, #195	@ 0xc3
 80076a6:	2019      	movs	r0, #25
 80076a8:	f7fe fadc 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Can Tho");
 80076ac:	4841      	ldr	r0, [pc, #260]	@ (80077b4 <RunProgram+0xc70>)
 80076ae:	f7fe f9bd 	bl	8005a2c <lcdPrintf>
			  //
			  lcdSetTextColor(COLOR_WHITE, COLOR_GREEN);
 80076b2:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80076b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80076ba:	f7fe fa53 	bl	8005b64 <lcdSetTextColor>
			  lcdFillRoundRect(20,230, 200, 35, 6, COLOR_GREEN);
 80076be:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	2306      	movs	r3, #6
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	2323      	movs	r3, #35	@ 0x23
 80076ca:	22c8      	movs	r2, #200	@ 0xc8
 80076cc:	21e6      	movs	r1, #230	@ 0xe6
 80076ce:	2014      	movs	r0, #20
 80076d0:	f7fe f848 	bl	8005764 <lcdFillRoundRect>
			  lcdDrawRoundRect(20,230, 200, 36, 6, COLOR_BLACK);
 80076d4:	2300      	movs	r3, #0
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	2306      	movs	r3, #6
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	2324      	movs	r3, #36	@ 0x24
 80076de:	22c8      	movs	r2, #200	@ 0xc8
 80076e0:	21e6      	movs	r1, #230	@ 0xe6
 80076e2:	2014      	movs	r0, #20
 80076e4:	f7fd fcc0 	bl	8005068 <lcdDrawRoundRect>
			  lcdSetTextFont(&Font20);
 80076e8:	4830      	ldr	r0, [pc, #192]	@ (80077ac <RunProgram+0xc68>)
 80076ea:	f7fe fa2b 	bl	8005b44 <lcdSetTextFont>
			  lcdSetCursor(25, 240);
 80076ee:	21f0      	movs	r1, #240	@ 0xf0
 80076f0:	2019      	movs	r0, #25
 80076f2:	f7fe fab7 	bl	8005c64 <lcdSetCursor>
			  lcdPrintf("Da Nang");
 80076f6:	4830      	ldr	r0, [pc, #192]	@ (80077b8 <RunProgram+0xc74>)
 80076f8:	f7fe f998 	bl	8005a2c <lcdPrintf>
			  HAL_Delay(200);
 80076fc:	20c8      	movs	r0, #200	@ 0xc8
 80076fe:	f000 fd49 	bl	8008194 <HAL_Delay>
		  }
	  }
  }
  if(Recall){
 8007702:	4b33      	ldr	r3, [pc, #204]	@ (80077d0 <RunProgram+0xc8c>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d04b      	beq.n	80077a4 <RunProgram+0xc60>
	  Resend_AT_Commands(&huart1);
 800770c:	4831      	ldr	r0, [pc, #196]	@ (80077d4 <RunProgram+0xc90>)
 800770e:	f7fe fef1 	bl	80064f4 <Resend_AT_Commands>
	  processWeather(uart_rx_buffer);
 8007712:	4831      	ldr	r0, [pc, #196]	@ (80077d8 <RunProgram+0xc94>)
 8007714:	f7fe ffa0 	bl	8006658 <processWeather>
	  if (current == 1){
 8007718:	4b30      	ldr	r3, [pc, #192]	@ (80077dc <RunProgram+0xc98>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d11b      	bne.n	8007758 <RunProgram+0xc14>
		  Screen1(temp_max[0] , temp_min[0] , current_temp ,  current_humi , current_code ,current_cloud ,current_time ,current_date , choice);
 8007720:	4b2f      	ldr	r3, [pc, #188]	@ (80077e0 <RunProgram+0xc9c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	4b2f      	ldr	r3, [pc, #188]	@ (80077e4 <RunProgram+0xca0>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681c      	ldr	r4, [r3, #0]
 800772c:	4b2e      	ldr	r3, [pc, #184]	@ (80077e8 <RunProgram+0xca4>)
 800772e:	681d      	ldr	r5, [r3, #0]
 8007730:	4b2e      	ldr	r3, [pc, #184]	@ (80077ec <RunProgram+0xca8>)
 8007732:	681e      	ldr	r6, [r3, #0]
 8007734:	4b2e      	ldr	r3, [pc, #184]	@ (80077f0 <RunProgram+0xcac>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a2e      	ldr	r2, [pc, #184]	@ (80077f4 <RunProgram+0xcb0>)
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	4921      	ldr	r1, [pc, #132]	@ (80077c4 <RunProgram+0xc80>)
 800773e:	6809      	ldr	r1, [r1, #0]
 8007740:	9104      	str	r1, [sp, #16]
 8007742:	492d      	ldr	r1, [pc, #180]	@ (80077f8 <RunProgram+0xcb4>)
 8007744:	9103      	str	r1, [sp, #12]
 8007746:	492d      	ldr	r1, [pc, #180]	@ (80077fc <RunProgram+0xcb8>)
 8007748:	9102      	str	r1, [sp, #8]
 800774a:	9201      	str	r2, [sp, #4]
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	4633      	mov	r3, r6
 8007750:	462a      	mov	r2, r5
 8007752:	4621      	mov	r1, r4
 8007754:	f7fc fdd0 	bl	80042f8 <Screen1>
	  }
	  if (current == 2){
 8007758:	4b20      	ldr	r3, [pc, #128]	@ (80077dc <RunProgram+0xc98>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d115      	bne.n	800778c <RunProgram+0xc48>
		  Screen2(temp_max, temp_min, day_code, day_name, wind_speed, Date,current_time ,current_date ,choice);
 8007760:	4b1f      	ldr	r3, [pc, #124]	@ (80077e0 <RunProgram+0xc9c>)
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	4b1f      	ldr	r3, [pc, #124]	@ (80077e4 <RunProgram+0xca0>)
 8007766:	6819      	ldr	r1, [r3, #0]
 8007768:	4b25      	ldr	r3, [pc, #148]	@ (8007800 <RunProgram+0xcbc>)
 800776a:	681c      	ldr	r4, [r3, #0]
 800776c:	4b25      	ldr	r3, [pc, #148]	@ (8007804 <RunProgram+0xcc0>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a14      	ldr	r2, [pc, #80]	@ (80077c4 <RunProgram+0xc80>)
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	9204      	str	r2, [sp, #16]
 8007776:	4a20      	ldr	r2, [pc, #128]	@ (80077f8 <RunProgram+0xcb4>)
 8007778:	9203      	str	r2, [sp, #12]
 800777a:	4a20      	ldr	r2, [pc, #128]	@ (80077fc <RunProgram+0xcb8>)
 800777c:	9202      	str	r2, [sp, #8]
 800777e:	4a22      	ldr	r2, [pc, #136]	@ (8007808 <RunProgram+0xcc4>)
 8007780:	9201      	str	r2, [sp, #4]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	4b21      	ldr	r3, [pc, #132]	@ (800780c <RunProgram+0xcc8>)
 8007786:	4622      	mov	r2, r4
 8007788:	f7fc feb2 	bl	80044f0 <Screen2>
	  }
	  if (current == 3){
 800778c:	4b13      	ldr	r3, [pc, #76]	@ (80077dc <RunProgram+0xc98>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b03      	cmp	r3, #3
 8007792:	d104      	bne.n	800779e <RunProgram+0xc5a>
		  Screen3(choice);
 8007794:	4b0b      	ldr	r3, [pc, #44]	@ (80077c4 <RunProgram+0xc80>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f7fc ff9f 	bl	80046dc <Screen3>
	  }
	  Recall = false;
 800779e:	4b0c      	ldr	r3, [pc, #48]	@ (80077d0 <RunProgram+0xc8c>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	701a      	strb	r2, [r3, #0]
  }
}
 80077a4:	bf00      	nop
 80077a6:	3704      	adds	r7, #4
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ac:	2000001c 	.word	0x2000001c
 80077b0:	0800f42c 	.word	0x0800f42c
 80077b4:	0800f438 	.word	0x0800f438
 80077b8:	0800f440 	.word	0x0800f440
 80077bc:	20003520 	.word	0x20003520
 80077c0:	20003522 	.word	0x20003522
 80077c4:	2000004c 	.word	0x2000004c
 80077c8:	0800f41c 	.word	0x0800f41c
 80077cc:	0800f424 	.word	0x0800f424
 80077d0:	20003499 	.word	0x20003499
 80077d4:	200033fc 	.word	0x200033fc
 80077d8:	20002b5c 	.word	0x20002b5c
 80077dc:	20000054 	.word	0x20000054
 80077e0:	2000349c 	.word	0x2000349c
 80077e4:	200034a0 	.word	0x200034a0
 80077e8:	2000350c 	.word	0x2000350c
 80077ec:	20003510 	.word	0x20003510
 80077f0:	20003514 	.word	0x20003514
 80077f4:	20003518 	.word	0x20003518
 80077f8:	20003500 	.word	0x20003500
 80077fc:	200034f8 	.word	0x200034f8
 8007800:	200034ac 	.word	0x200034ac
 8007804:	200034a8 	.word	0x200034a8
 8007808:	200034cc 	.word	0x200034cc
 800780c:	200034b0 	.word	0x200034b0

08007810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007810:	b480      	push	{r7}
 8007812:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007814:	b672      	cpsid	i
}
 8007816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007818:	bf00      	nop
 800781a:	e7fd      	b.n	8007818 <Error_Handler+0x8>

0800781c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007822:	2300      	movs	r3, #0
 8007824:	607b      	str	r3, [r7, #4]
 8007826:	4b10      	ldr	r3, [pc, #64]	@ (8007868 <HAL_MspInit+0x4c>)
 8007828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782a:	4a0f      	ldr	r2, [pc, #60]	@ (8007868 <HAL_MspInit+0x4c>)
 800782c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007830:	6453      	str	r3, [r2, #68]	@ 0x44
 8007832:	4b0d      	ldr	r3, [pc, #52]	@ (8007868 <HAL_MspInit+0x4c>)
 8007834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800783a:	607b      	str	r3, [r7, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800783e:	2300      	movs	r3, #0
 8007840:	603b      	str	r3, [r7, #0]
 8007842:	4b09      	ldr	r3, [pc, #36]	@ (8007868 <HAL_MspInit+0x4c>)
 8007844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007846:	4a08      	ldr	r2, [pc, #32]	@ (8007868 <HAL_MspInit+0x4c>)
 8007848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800784c:	6413      	str	r3, [r2, #64]	@ 0x40
 800784e:	4b06      	ldr	r3, [pc, #24]	@ (8007868 <HAL_MspInit+0x4c>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800785a:	bf00      	nop
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	40023800 	.word	0x40023800

0800786c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	@ 0x28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007874:	f107 0314 	add.w	r3, r7, #20
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	605a      	str	r2, [r3, #4]
 800787e:	609a      	str	r2, [r3, #8]
 8007880:	60da      	str	r2, [r3, #12]
 8007882:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a19      	ldr	r2, [pc, #100]	@ (80078f0 <HAL_SPI_MspInit+0x84>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d12c      	bne.n	80078e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800788e:	2300      	movs	r3, #0
 8007890:	613b      	str	r3, [r7, #16]
 8007892:	4b18      	ldr	r3, [pc, #96]	@ (80078f4 <HAL_SPI_MspInit+0x88>)
 8007894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007896:	4a17      	ldr	r2, [pc, #92]	@ (80078f4 <HAL_SPI_MspInit+0x88>)
 8007898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800789c:	6413      	str	r3, [r2, #64]	@ 0x40
 800789e:	4b15      	ldr	r3, [pc, #84]	@ (80078f4 <HAL_SPI_MspInit+0x88>)
 80078a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078a6:	613b      	str	r3, [r7, #16]
 80078a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	4b11      	ldr	r3, [pc, #68]	@ (80078f4 <HAL_SPI_MspInit+0x88>)
 80078b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b2:	4a10      	ldr	r2, [pc, #64]	@ (80078f4 <HAL_SPI_MspInit+0x88>)
 80078b4:	f043 0302 	orr.w	r3, r3, #2
 80078b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80078ba:	4b0e      	ldr	r3, [pc, #56]	@ (80078f4 <HAL_SPI_MspInit+0x88>)
 80078bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80078c6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80078ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078cc:	2302      	movs	r3, #2
 80078ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078d4:	2303      	movs	r3, #3
 80078d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80078d8:	2305      	movs	r3, #5
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078dc:	f107 0314 	add.w	r3, r7, #20
 80078e0:	4619      	mov	r1, r3
 80078e2:	4805      	ldr	r0, [pc, #20]	@ (80078f8 <HAL_SPI_MspInit+0x8c>)
 80078e4:	f000 fe1e 	bl	8008524 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80078e8:	bf00      	nop
 80078ea:	3728      	adds	r7, #40	@ 0x28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	40003800 	.word	0x40003800
 80078f4:	40023800 	.word	0x40023800
 80078f8:	40020400 	.word	0x40020400

080078fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800790c:	d115      	bne.n	800793a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	4b0c      	ldr	r3, [pc, #48]	@ (8007944 <HAL_TIM_Base_MspInit+0x48>)
 8007914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007916:	4a0b      	ldr	r2, [pc, #44]	@ (8007944 <HAL_TIM_Base_MspInit+0x48>)
 8007918:	f043 0301 	orr.w	r3, r3, #1
 800791c:	6413      	str	r3, [r2, #64]	@ 0x40
 800791e:	4b09      	ldr	r3, [pc, #36]	@ (8007944 <HAL_TIM_Base_MspInit+0x48>)
 8007920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800792a:	2200      	movs	r2, #0
 800792c:	2100      	movs	r1, #0
 800792e:	201c      	movs	r0, #28
 8007930:	f000 fd2f 	bl	8008392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007934:	201c      	movs	r0, #28
 8007936:	f000 fd48 	bl	80083ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800793a:	bf00      	nop
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40023800 	.word	0x40023800

08007948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08a      	sub	sp, #40	@ 0x28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007950:	f107 0314 	add.w	r3, r7, #20
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	605a      	str	r2, [r3, #4]
 800795a:	609a      	str	r2, [r3, #8]
 800795c:	60da      	str	r2, [r3, #12]
 800795e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a1d      	ldr	r2, [pc, #116]	@ (80079dc <HAL_UART_MspInit+0x94>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d134      	bne.n	80079d4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800796a:	2300      	movs	r3, #0
 800796c:	613b      	str	r3, [r7, #16]
 800796e:	4b1c      	ldr	r3, [pc, #112]	@ (80079e0 <HAL_UART_MspInit+0x98>)
 8007970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007972:	4a1b      	ldr	r2, [pc, #108]	@ (80079e0 <HAL_UART_MspInit+0x98>)
 8007974:	f043 0310 	orr.w	r3, r3, #16
 8007978:	6453      	str	r3, [r2, #68]	@ 0x44
 800797a:	4b19      	ldr	r3, [pc, #100]	@ (80079e0 <HAL_UART_MspInit+0x98>)
 800797c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	613b      	str	r3, [r7, #16]
 8007984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	4b15      	ldr	r3, [pc, #84]	@ (80079e0 <HAL_UART_MspInit+0x98>)
 800798c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798e:	4a14      	ldr	r2, [pc, #80]	@ (80079e0 <HAL_UART_MspInit+0x98>)
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	6313      	str	r3, [r2, #48]	@ 0x30
 8007996:	4b12      	ldr	r3, [pc, #72]	@ (80079e0 <HAL_UART_MspInit+0x98>)
 8007998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80079a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80079a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079a8:	2302      	movs	r3, #2
 80079aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ac:	2300      	movs	r3, #0
 80079ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079b0:	2303      	movs	r3, #3
 80079b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80079b4:	2307      	movs	r3, #7
 80079b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079b8:	f107 0314 	add.w	r3, r7, #20
 80079bc:	4619      	mov	r1, r3
 80079be:	4809      	ldr	r0, [pc, #36]	@ (80079e4 <HAL_UART_MspInit+0x9c>)
 80079c0:	f000 fdb0 	bl	8008524 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80079c4:	2200      	movs	r2, #0
 80079c6:	2100      	movs	r1, #0
 80079c8:	2025      	movs	r0, #37	@ 0x25
 80079ca:	f000 fce2 	bl	8008392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80079ce:	2025      	movs	r0, #37	@ 0x25
 80079d0:	f000 fcfb 	bl	80083ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80079d4:	bf00      	nop
 80079d6:	3728      	adds	r7, #40	@ 0x28
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	40011000 	.word	0x40011000
 80079e0:	40023800 	.word	0x40023800
 80079e4:	40020000 	.word	0x40020000

080079e8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80079ee:	1d3b      	adds	r3, r7, #4
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	605a      	str	r2, [r3, #4]
 80079f6:	609a      	str	r2, [r3, #8]
 80079f8:	60da      	str	r2, [r3, #12]
 80079fa:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80079fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007a70 <HAL_FSMC_MspInit+0x88>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d131      	bne.n	8007a68 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8007a04:	4b1a      	ldr	r3, [pc, #104]	@ (8007a70 <HAL_FSMC_MspInit+0x88>)
 8007a06:	2201      	movs	r2, #1
 8007a08:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	603b      	str	r3, [r7, #0]
 8007a0e:	4b19      	ldr	r3, [pc, #100]	@ (8007a74 <HAL_FSMC_MspInit+0x8c>)
 8007a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a12:	4a18      	ldr	r2, [pc, #96]	@ (8007a74 <HAL_FSMC_MspInit+0x8c>)
 8007a14:	f043 0301 	orr.w	r3, r3, #1
 8007a18:	6393      	str	r3, [r2, #56]	@ 0x38
 8007a1a:	4b16      	ldr	r3, [pc, #88]	@ (8007a74 <HAL_FSMC_MspInit+0x8c>)
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	603b      	str	r3, [r7, #0]
 8007a24:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8007a26:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8007a2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a34:	2303      	movs	r3, #3
 8007a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8007a38:	230c      	movs	r3, #12
 8007a3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007a3c:	1d3b      	adds	r3, r7, #4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	480d      	ldr	r0, [pc, #52]	@ (8007a78 <HAL_FSMC_MspInit+0x90>)
 8007a42:	f000 fd6f 	bl	8008524 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8007a46:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 8007a4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a54:	2303      	movs	r3, #3
 8007a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8007a58:	230c      	movs	r3, #12
 8007a5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a5c:	1d3b      	adds	r3, r7, #4
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4806      	ldr	r0, [pc, #24]	@ (8007a7c <HAL_FSMC_MspInit+0x94>)
 8007a62:	f000 fd5f 	bl	8008524 <HAL_GPIO_Init>
 8007a66:	e000      	b.n	8007a6a <HAL_FSMC_MspInit+0x82>
    return;
 8007a68:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20003524 	.word	0x20003524
 8007a74:	40023800 	.word	0x40023800
 8007a78:	40021000 	.word	0x40021000
 8007a7c:	40020c00 	.word	0x40020c00

08007a80 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8007a88:	f7ff ffae 	bl	80079e8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007a98:	bf00      	nop
 8007a9a:	e7fd      	b.n	8007a98 <NMI_Handler+0x4>

08007a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007aa0:	bf00      	nop
 8007aa2:	e7fd      	b.n	8007aa0 <HardFault_Handler+0x4>

08007aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007aa8:	bf00      	nop
 8007aaa:	e7fd      	b.n	8007aa8 <MemManage_Handler+0x4>

08007aac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ab0:	bf00      	nop
 8007ab2:	e7fd      	b.n	8007ab0 <BusFault_Handler+0x4>

08007ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007ab8:	bf00      	nop
 8007aba:	e7fd      	b.n	8007ab8 <UsageFault_Handler+0x4>

08007abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ac0:	bf00      	nop
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007aca:	b480      	push	{r7}
 8007acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007ace:	bf00      	nop
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007adc:	bf00      	nop
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007aea:	f000 fb33 	bl	8008154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007aee:	bf00      	nop
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007af8:	4802      	ldr	r0, [pc, #8]	@ (8007b04 <TIM2_IRQHandler+0x10>)
 8007afa:	f001 ff8f 	bl	8009a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007afe:	bf00      	nop
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	200033b4 	.word	0x200033b4

08007b08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007b0c:	4802      	ldr	r0, [pc, #8]	@ (8007b18 <USART1_IRQHandler+0x10>)
 8007b0e:	f002 fcd3 	bl	800a4b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007b12:	bf00      	nop
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200033fc 	.word	0x200033fc

08007b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
  return 1;
 8007b20:	2301      	movs	r3, #1
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <_kill>:

int _kill(int pid, int sig)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007b36:	f004 fe37 	bl	800c7a8 <__errno>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2216      	movs	r2, #22
 8007b3e:	601a      	str	r2, [r3, #0]
  return -1;
 8007b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <_exit>:

void _exit (int status)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007b54:	f04f 31ff 	mov.w	r1, #4294967295
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff ffe7 	bl	8007b2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8007b5e:	bf00      	nop
 8007b60:	e7fd      	b.n	8007b5e <_exit+0x12>

08007b62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b086      	sub	sp, #24
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]
 8007b72:	e00a      	b.n	8007b8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007b74:	f3af 8000 	nop.w
 8007b78:	4601      	mov	r1, r0
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	60ba      	str	r2, [r7, #8]
 8007b80:	b2ca      	uxtb	r2, r1
 8007b82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	3301      	adds	r3, #1
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	dbf0      	blt.n	8007b74 <_read+0x12>
  }

  return len;
 8007b92:	687b      	ldr	r3, [r7, #4]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	e009      	b.n	8007bc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	60ba      	str	r2, [r7, #8]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	dbf1      	blt.n	8007bae <_write+0x12>
  }
  return len;
 8007bca:	687b      	ldr	r3, [r7, #4]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <_close>:

int _close(int file)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007bfc:	605a      	str	r2, [r3, #4]
  return 0;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <_isatty>:

int _isatty(int file)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007c14:	2301      	movs	r3, #1
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	60b9      	str	r1, [r7, #8]
 8007c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007c44:	4a14      	ldr	r2, [pc, #80]	@ (8007c98 <_sbrk+0x5c>)
 8007c46:	4b15      	ldr	r3, [pc, #84]	@ (8007c9c <_sbrk+0x60>)
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007c50:	4b13      	ldr	r3, [pc, #76]	@ (8007ca0 <_sbrk+0x64>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d102      	bne.n	8007c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007c58:	4b11      	ldr	r3, [pc, #68]	@ (8007ca0 <_sbrk+0x64>)
 8007c5a:	4a12      	ldr	r2, [pc, #72]	@ (8007ca4 <_sbrk+0x68>)
 8007c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007c5e:	4b10      	ldr	r3, [pc, #64]	@ (8007ca0 <_sbrk+0x64>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4413      	add	r3, r2
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d207      	bcs.n	8007c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007c6c:	f004 fd9c 	bl	800c7a8 <__errno>
 8007c70:	4603      	mov	r3, r0
 8007c72:	220c      	movs	r2, #12
 8007c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007c76:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7a:	e009      	b.n	8007c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007c7c:	4b08      	ldr	r3, [pc, #32]	@ (8007ca0 <_sbrk+0x64>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007c82:	4b07      	ldr	r3, [pc, #28]	@ (8007ca0 <_sbrk+0x64>)
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4413      	add	r3, r2
 8007c8a:	4a05      	ldr	r2, [pc, #20]	@ (8007ca0 <_sbrk+0x64>)
 8007c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20020000 	.word	0x20020000
 8007c9c:	00000400 	.word	0x00000400
 8007ca0:	20003528 	.word	0x20003528
 8007ca4:	20003698 	.word	0x20003698

08007ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007cac:	4b06      	ldr	r3, [pc, #24]	@ (8007cc8 <SystemInit+0x20>)
 8007cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb2:	4a05      	ldr	r2, [pc, #20]	@ (8007cc8 <SystemInit+0x20>)
 8007cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007cbc:	bf00      	nop
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	e000ed00 	.word	0xe000ed00

08007ccc <SpiTransfer>:
//static void DrawCross(int16_t x, int16_t y, int16_t length);
static uint8_t SpiTransfer(uint8_t byte);
static bool GetPointRaw(uint16_t* x, uint16_t* y);

static uint8_t SpiTransfer(uint8_t byte)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af02      	add	r7, sp, #8
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	(void)HAL_SPI_TransmitReceive(&hspi2, &byte, &result, 1U, 1000U);
 8007cd6:	f107 020f 	add.w	r2, r7, #15
 8007cda:	1df9      	adds	r1, r7, #7
 8007cdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4803      	ldr	r0, [pc, #12]	@ (8007cf4 <SpiTransfer+0x28>)
 8007ce6:	f001 fb0c 	bl	8009302 <HAL_SPI_TransmitReceive>

	return (result);
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	2000335c 	.word	0x2000335c

08007cf8 <GetPointRaw>:
//    lcdSetCursor(50,150);
//	lcdPrintf("Touch centre of cross");
//}

static bool GetPointRaw(uint16_t* x, uint16_t* y)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b090      	sub	sp, #64	@ 0x40
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
	uint16_t x_raw;
	uint16_t y_raw;
	uint16_t databuffer[2][MW_HAL_TOUCH_READ_POINTS_COUNT];
	uint8_t touch_count;

	if (!TouchIsTouched())
 8007d02:	f000 f921 	bl	8007f48 <TouchIsTouched>
 8007d06:	4603      	mov	r3, r0
 8007d08:	f083 0301 	eor.w	r3, r3, #1
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <GetPointRaw+0x1e>
	{
		return false;
 8007d12:	2300      	movs	r3, #0
 8007d14:	e111      	b.n	8007f3a <GetPointRaw+0x242>
	}

	// get set of readings
	CS_ON;
 8007d16:	2200      	movs	r2, #0
 8007d18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007d1c:	4889      	ldr	r0, [pc, #548]	@ (8007f44 <GetPointRaw+0x24c>)
 8007d1e:	f000 fdb5 	bl	800888c <HAL_GPIO_WritePin>
	touch_count = 0U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	do
	{
		SpiTransfer(COMMAND_READ_X);
 8007d28:	20d0      	movs	r0, #208	@ 0xd0
 8007d2a:	f7ff ffcf 	bl	8007ccc <SpiTransfer>
		x_raw = (uint16_t)SpiTransfer(0U) << 8;
 8007d2e:	2000      	movs	r0, #0
 8007d30:	f7ff ffcc 	bl	8007ccc <SpiTransfer>
 8007d34:	4603      	mov	r3, r0
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	877b      	strh	r3, [r7, #58]	@ 0x3a
		x_raw |= (uint16_t)SpiTransfer(0U);
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	f7ff ffc6 	bl	8007ccc <SpiTransfer>
 8007d40:	4603      	mov	r3, r0
 8007d42:	461a      	mov	r2, r3
 8007d44:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007d46:	4313      	orrs	r3, r2
 8007d48:	877b      	strh	r3, [r7, #58]	@ 0x3a
		x_raw >>= 3;
 8007d4a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007d4c:	08db      	lsrs	r3, r3, #3
 8007d4e:	877b      	strh	r3, [r7, #58]	@ 0x3a

		SpiTransfer(COMMAND_READ_Y);
 8007d50:	2090      	movs	r0, #144	@ 0x90
 8007d52:	f7ff ffbb 	bl	8007ccc <SpiTransfer>
		y_raw = (uint16_t)SpiTransfer(0U) << 8;
 8007d56:	2000      	movs	r0, #0
 8007d58:	f7ff ffb8 	bl	8007ccc <SpiTransfer>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	873b      	strh	r3, [r7, #56]	@ 0x38
		y_raw |= (uint16_t)SpiTransfer(0U);
 8007d62:	2000      	movs	r0, #0
 8007d64:	f7ff ffb2 	bl	8007ccc <SpiTransfer>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	873b      	strh	r3, [r7, #56]	@ 0x38
		y_raw >>= 3;
 8007d72:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007d74:	08db      	lsrs	r3, r3, #3
 8007d76:	873b      	strh	r3, [r7, #56]	@ 0x38

		databuffer[0][touch_count] = x_raw;
 8007d78:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007d7c:	005b      	lsls	r3, r3, #1
 8007d7e:	3340      	adds	r3, #64	@ 0x40
 8007d80:	443b      	add	r3, r7
 8007d82:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007d84:	f823 2c34 	strh.w	r2, [r3, #-52]
		databuffer[1][touch_count] = y_raw;
 8007d88:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007d8c:	330a      	adds	r3, #10
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	3340      	adds	r3, #64	@ 0x40
 8007d92:	443b      	add	r3, r7
 8007d94:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8007d96:	f823 2c34 	strh.w	r2, [r3, #-52]
		touch_count++;
 8007d9a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007d9e:	3301      	adds	r3, #1
 8007da0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	}
	while (TouchIsTouched() == true && touch_count < MW_HAL_TOUCH_READ_POINTS_COUNT);
 8007da4:	f000 f8d0 	bl	8007f48 <TouchIsTouched>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <GetPointRaw+0xbe>
 8007dae:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007db2:	2b09      	cmp	r3, #9
 8007db4:	d9b8      	bls.n	8007d28 <GetPointRaw+0x30>
	CS_OFF;
 8007db6:	2201      	movs	r2, #1
 8007db8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007dbc:	4861      	ldr	r0, [pc, #388]	@ (8007f44 <GetPointRaw+0x24c>)
 8007dbe:	f000 fd65 	bl	800888c <HAL_GPIO_WritePin>

	// check that the touch was held down during all the readings
	if (touch_count != MW_HAL_TOUCH_READ_POINTS_COUNT)
 8007dc2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007dc6:	2b0a      	cmp	r3, #10
 8007dc8:	d001      	beq.n	8007dce <GetPointRaw+0xd6>
	{
		return (false);
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e0b5      	b.n	8007f3a <GetPointRaw+0x242>
	}

	// sort the x readings
	do
	{
		sorted = true;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007dda:	e039      	b.n	8007e50 <GetPointRaw+0x158>
		{
			if(databuffer[0][i] > databuffer[0][i + 1U])
 8007ddc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	3340      	adds	r3, #64	@ 0x40
 8007de4:	443b      	add	r3, r7
 8007de6:	f833 2c34 	ldrh.w	r2, [r3, #-52]
 8007dea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007dee:	3301      	adds	r3, #1
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	3340      	adds	r3, #64	@ 0x40
 8007df4:	443b      	add	r3, r7
 8007df6:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d923      	bls.n	8007e46 <GetPointRaw+0x14e>
			{
				swap_value = databuffer[0][i + 1U];
 8007dfe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007e02:	3301      	adds	r3, #1
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	3340      	adds	r3, #64	@ 0x40
 8007e08:	443b      	add	r3, r7
 8007e0a:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8007e0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
				databuffer[0][i + 1U] = databuffer[0][i];
 8007e10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007e14:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007e18:	3201      	adds	r2, #1
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	3340      	adds	r3, #64	@ 0x40
 8007e1e:	443b      	add	r3, r7
 8007e20:	f833 1c34 	ldrh.w	r1, [r3, #-52]
 8007e24:	0053      	lsls	r3, r2, #1
 8007e26:	3340      	adds	r3, #64	@ 0x40
 8007e28:	443b      	add	r3, r7
 8007e2a:	460a      	mov	r2, r1
 8007e2c:	f823 2c34 	strh.w	r2, [r3, #-52]
				databuffer[0][i] = swap_value;
 8007e30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	3340      	adds	r3, #64	@ 0x40
 8007e38:	443b      	add	r3, r7
 8007e3a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007e3c:	f823 2c34 	strh.w	r2, [r3, #-52]
				sorted = false;
 8007e40:	2300      	movs	r3, #0
 8007e42:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8007e46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007e50:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007e54:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d3be      	bcc.n	8007ddc <GetPointRaw+0xe4>
			}
		}
	}
	while (!sorted);
 8007e5e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007e62:	f083 0301 	eor.w	r3, r3, #1
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1b0      	bne.n	8007dce <GetPointRaw+0xd6>

	// sort the y readings
	do
	{
		sorted = true;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8007e72:	2300      	movs	r3, #0
 8007e74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007e78:	e040      	b.n	8007efc <GetPointRaw+0x204>
		{
			if (databuffer[1][i] > databuffer[1][i + 1U])
 8007e7a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007e7e:	330a      	adds	r3, #10
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	3340      	adds	r3, #64	@ 0x40
 8007e84:	443b      	add	r3, r7
 8007e86:	f833 2c34 	ldrh.w	r2, [r3, #-52]
 8007e8a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007e8e:	3301      	adds	r3, #1
 8007e90:	330a      	adds	r3, #10
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	3340      	adds	r3, #64	@ 0x40
 8007e96:	443b      	add	r3, r7
 8007e98:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d928      	bls.n	8007ef2 <GetPointRaw+0x1fa>
			{
				swap_value = databuffer[1][i + 1U];
 8007ea0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	330a      	adds	r3, #10
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	3340      	adds	r3, #64	@ 0x40
 8007eac:	443b      	add	r3, r7
 8007eae:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8007eb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
				databuffer[1][i + 1U] = databuffer[1][i];
 8007eb4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007eb8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007ebc:	3201      	adds	r2, #1
 8007ebe:	330a      	adds	r3, #10
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	3340      	adds	r3, #64	@ 0x40
 8007ec4:	443b      	add	r3, r7
 8007ec6:	f833 1c34 	ldrh.w	r1, [r3, #-52]
 8007eca:	f102 030a 	add.w	r3, r2, #10
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	3340      	adds	r3, #64	@ 0x40
 8007ed2:	443b      	add	r3, r7
 8007ed4:	460a      	mov	r2, r1
 8007ed6:	f823 2c34 	strh.w	r2, [r3, #-52]
				databuffer[1][i] = swap_value;
 8007eda:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007ede:	330a      	adds	r3, #10
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	3340      	adds	r3, #64	@ 0x40
 8007ee4:	443b      	add	r3, r7
 8007ee6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007ee8:	f823 2c34 	strh.w	r2, [r3, #-52]
				sorted = false;
 8007eec:	2300      	movs	r3, #0
 8007eee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		for (i = 0U; i < touch_count - 1U; i++)
 8007ef2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007efc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007f00:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007f04:	3b01      	subs	r3, #1
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d3b7      	bcc.n	8007e7a <GetPointRaw+0x182>
			}
		}
	}
	while (!sorted);
 8007f0a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007f0e:	f083 0301 	eor.w	r3, r3, #1
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1a9      	bne.n	8007e6c <GetPointRaw+0x174>

	// take averaged middle 2 readings
	*x = (databuffer[0][4] + databuffer[0][5]) / 2U;
 8007f18:	8abb      	ldrh	r3, [r7, #20]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	8afb      	ldrh	r3, [r7, #22]
 8007f1e:	4413      	add	r3, r2
 8007f20:	085b      	lsrs	r3, r3, #1
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	801a      	strh	r2, [r3, #0]
	*y = (databuffer[1][4] + databuffer[1][5]) / 2U;
 8007f28:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007f2e:	4413      	add	r3, r2
 8007f30:	085b      	lsrs	r3, r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	801a      	strh	r2, [r3, #0]

	return (true);
 8007f38:	2301      	movs	r3, #1
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3740      	adds	r7, #64	@ 0x40
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	40020400 	.word	0x40020400

08007f48 <TouchIsTouched>:

bool TouchIsTouched(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
	GPIO_PinState pin_state = HAL_GPIO_ReadPin(TOUCH_IRQ_PORT, TOUCH_IRQ_PIN);
 8007f4e:	2120      	movs	r1, #32
 8007f50:	4807      	ldr	r0, [pc, #28]	@ (8007f70 <TouchIsTouched+0x28>)
 8007f52:	f000 fc83 	bl	800885c <HAL_GPIO_ReadPin>
 8007f56:	4603      	mov	r3, r0
 8007f58:	71fb      	strb	r3, [r7, #7]
	return pin_state == GPIO_PIN_RESET;
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	bf0c      	ite	eq
 8007f60:	2301      	moveq	r3, #1
 8007f62:	2300      	movne	r3, #0
 8007f64:	b2db      	uxtb	r3, r3
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	40020800 	.word	0x40020800

08007f74 <TouchGetCalibratedPoint>:

bool TouchGetCalibratedPoint(int16_t* x, int16_t* y)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
	POINT_T display_point;
	uint16_t raw_x;
	uint16_t raw_y;

	// get raw reading
 	if (GetPointRaw(&raw_x, &raw_y) == false)
 8007f7e:	f107 020c 	add.w	r2, r7, #12
 8007f82:	f107 030e 	add.w	r3, r7, #14
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7ff feb5 	bl	8007cf8 <GetPointRaw>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	f083 0301 	eor.w	r3, r3, #1
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <TouchGetCalibratedPoint+0x2a>
	{
		return false;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	e02a      	b.n	8007ff4 <TouchGetCalibratedPoint+0x80>
	}

	raw_point.x = (INT_32)raw_x;
 8007f9e:	89fb      	ldrh	r3, [r7, #14]
 8007fa0:	61bb      	str	r3, [r7, #24]
	raw_point.y = (INT_32)raw_y;
 8007fa2:	89bb      	ldrh	r3, [r7, #12]
 8007fa4:	61fb      	str	r3, [r7, #28]

	// apply calibration matrix
	(void)getDisplayPoint(&display_point, &raw_point, &matrix);
 8007fa6:	f107 0118 	add.w	r1, r7, #24
 8007faa:	f107 0310 	add.w	r3, r7, #16
 8007fae:	4a13      	ldr	r2, [pc, #76]	@ (8007ffc <TouchGetCalibratedPoint+0x88>)
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fa fc14 	bl	80027de <getDisplayPoint>

	// range check results
	if (display_point.x > 239)
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2bef      	cmp	r3, #239	@ 0xef
 8007fba:	dd01      	ble.n	8007fc0 <TouchGetCalibratedPoint+0x4c>
	{
		display_point.x = 239;
 8007fbc:	23ef      	movs	r3, #239	@ 0xef
 8007fbe:	613b      	str	r3, [r7, #16]
	}
	if (display_point.y > 319)
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007fc6:	db02      	blt.n	8007fce <TouchGetCalibratedPoint+0x5a>
	{
		display_point.y = 319;
 8007fc8:	f240 133f 	movw	r3, #319	@ 0x13f
 8007fcc:	617b      	str	r3, [r7, #20]
	}

	if (display_point.x < 0)
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	da01      	bge.n	8007fd8 <TouchGetCalibratedPoint+0x64>
	{
		display_point.x = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	613b      	str	r3, [r7, #16]
	}
	if (display_point.y < 0)
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	da01      	bge.n	8007fe2 <TouchGetCalibratedPoint+0x6e>
	{
		display_point.y = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	617b      	str	r3, [r7, #20]
	}

	*x = (int16_t)display_point.x;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	b21a      	sxth	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)display_point.y;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	b21a      	sxth	r2, r3
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	801a      	strh	r2, [r3, #0]

	return true;
 8007ff2:	2301      	movs	r3, #1
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3720      	adds	r7, #32
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	2000352c 	.word	0x2000352c

08008000 <TouchCalibrate>:

void TouchCalibrate(void)
{
 8008000:	b5b0      	push	{r4, r5, r7, lr}
 8008002:	b08c      	sub	sp, #48	@ 0x30
 8008004:	af00      	add	r7, sp, #0
//	uint16_t x;
//	uint16_t y;
	POINT_T raw_points[3];
	POINT_T display_points[3] = {{40, 40}, {200, 40}, {200, 280}};
 8008006:	4b13      	ldr	r3, [pc, #76]	@ (8008054 <TouchCalibrate+0x54>)
 8008008:	463c      	mov	r4, r7
 800800a:	461d      	mov	r5, r3
 800800c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800800e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008010:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008014:	e884 0003 	stmia.w	r4, {r0, r1}

	raw_points[0].x = 2970;
 8008018:	f640 339a 	movw	r3, #2970	@ 0xb9a
 800801c:	61bb      	str	r3, [r7, #24]
	raw_points[0].y = 670;
 800801e:	f240 239e 	movw	r3, #670	@ 0x29e
 8008022:	61fb      	str	r3, [r7, #28]



    /* second point */

	raw_points[1].x = 865;
 8008024:	f240 3361 	movw	r3, #865	@ 0x361
 8008028:	623b      	str	r3, [r7, #32]
	raw_points[1].y = 711;
 800802a:	f240 23c7 	movw	r3, #711	@ 0x2c7
 800802e:	627b      	str	r3, [r7, #36]	@ 0x24




	raw_points[2].x = 789;
 8008030:	f240 3315 	movw	r3, #789	@ 0x315
 8008034:	62bb      	str	r3, [r7, #40]	@ 0x28
	raw_points[2].y = 3239;
 8008036:	f640 43a7 	movw	r3, #3239	@ 0xca7
 800803a:	62fb      	str	r3, [r7, #44]	@ 0x2c



	(void)setCalibrationMatrix(display_points, raw_points, &matrix);
 800803c:	f107 0118 	add.w	r1, r7, #24
 8008040:	463b      	mov	r3, r7
 8008042:	4a05      	ldr	r2, [pc, #20]	@ (8008058 <TouchCalibrate+0x58>)
 8008044:	4618      	mov	r0, r3
 8008046:	f7fa fa8c 	bl	8002562 <setCalibrationMatrix>
}
 800804a:	bf00      	nop
 800804c:	3730      	adds	r7, #48	@ 0x30
 800804e:	46bd      	mov	sp, r7
 8008050:	bdb0      	pop	{r4, r5, r7, pc}
 8008052:	bf00      	nop
 8008054:	0800f448 	.word	0x0800f448
 8008058:	2000352c 	.word	0x2000352c

0800805c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 800805c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008094 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008060:	f7ff fe22 	bl	8007ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008064:	480c      	ldr	r0, [pc, #48]	@ (8008098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008066:	490d      	ldr	r1, [pc, #52]	@ (800809c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008068:	4a0d      	ldr	r2, [pc, #52]	@ (80080a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800806a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800806c:	e002      	b.n	8008074 <LoopCopyDataInit>

0800806e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800806e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008072:	3304      	adds	r3, #4

08008074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008078:	d3f9      	bcc.n	800806e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800807a:	4a0a      	ldr	r2, [pc, #40]	@ (80080a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800807c:	4c0a      	ldr	r4, [pc, #40]	@ (80080a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800807e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008080:	e001      	b.n	8008086 <LoopFillZerobss>

08008082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008084:	3204      	adds	r2, #4

08008086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008088:	d3fb      	bcc.n	8008082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800808a:	f004 fb93 	bl	800c7b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800808e:	f7fd fee7 	bl	8005e60 <main>
  bx  lr    
 8008092:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8008094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800809c:	20002a30 	.word	0x20002a30
  ldr r2, =_sidata
 80080a0:	0804c32c 	.word	0x0804c32c
  ldr r2, =_sbss
 80080a4:	20002a30 	.word	0x20002a30
  ldr r4, =_ebss
 80080a8:	20003698 	.word	0x20003698

080080ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80080ac:	e7fe      	b.n	80080ac <ADC_IRQHandler>
	...

080080b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80080b4:	4b0e      	ldr	r3, [pc, #56]	@ (80080f0 <HAL_Init+0x40>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a0d      	ldr	r2, [pc, #52]	@ (80080f0 <HAL_Init+0x40>)
 80080ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80080be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80080c0:	4b0b      	ldr	r3, [pc, #44]	@ (80080f0 <HAL_Init+0x40>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a0a      	ldr	r2, [pc, #40]	@ (80080f0 <HAL_Init+0x40>)
 80080c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80080ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80080cc:	4b08      	ldr	r3, [pc, #32]	@ (80080f0 <HAL_Init+0x40>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a07      	ldr	r2, [pc, #28]	@ (80080f0 <HAL_Init+0x40>)
 80080d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80080d8:	2003      	movs	r0, #3
 80080da:	f000 f94f 	bl	800837c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80080de:	200f      	movs	r0, #15
 80080e0:	f000 f808 	bl	80080f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80080e4:	f7ff fb9a 	bl	800781c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	40023c00 	.word	0x40023c00

080080f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80080fc:	4b12      	ldr	r3, [pc, #72]	@ (8008148 <HAL_InitTick+0x54>)
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	4b12      	ldr	r3, [pc, #72]	@ (800814c <HAL_InitTick+0x58>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	4619      	mov	r1, r3
 8008106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800810a:	fbb3 f3f1 	udiv	r3, r3, r1
 800810e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008112:	4618      	mov	r0, r3
 8008114:	f000 f967 	bl	80083e6 <HAL_SYSTICK_Config>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e00e      	b.n	8008140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b0f      	cmp	r3, #15
 8008126:	d80a      	bhi.n	800813e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008128:	2200      	movs	r2, #0
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	f04f 30ff 	mov.w	r0, #4294967295
 8008130:	f000 f92f 	bl	8008392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008134:	4a06      	ldr	r2, [pc, #24]	@ (8008150 <HAL_InitTick+0x5c>)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	e000      	b.n	8008140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
}
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	2000285c 	.word	0x2000285c
 800814c:	20002864 	.word	0x20002864
 8008150:	20002860 	.word	0x20002860

08008154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008154:	b480      	push	{r7}
 8008156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008158:	4b06      	ldr	r3, [pc, #24]	@ (8008174 <HAL_IncTick+0x20>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	4b06      	ldr	r3, [pc, #24]	@ (8008178 <HAL_IncTick+0x24>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4413      	add	r3, r2
 8008164:	4a04      	ldr	r2, [pc, #16]	@ (8008178 <HAL_IncTick+0x24>)
 8008166:	6013      	str	r3, [r2, #0]
}
 8008168:	bf00      	nop
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	20002864 	.word	0x20002864
 8008178:	20003548 	.word	0x20003548

0800817c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
  return uwTick;
 8008180:	4b03      	ldr	r3, [pc, #12]	@ (8008190 <HAL_GetTick+0x14>)
 8008182:	681b      	ldr	r3, [r3, #0]
}
 8008184:	4618      	mov	r0, r3
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	20003548 	.word	0x20003548

08008194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800819c:	f7ff ffee 	bl	800817c <HAL_GetTick>
 80081a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ac:	d005      	beq.n	80081ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80081ae:	4b0a      	ldr	r3, [pc, #40]	@ (80081d8 <HAL_Delay+0x44>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80081ba:	bf00      	nop
 80081bc:	f7ff ffde 	bl	800817c <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d8f7      	bhi.n	80081bc <HAL_Delay+0x28>
  {
  }
}
 80081cc:	bf00      	nop
 80081ce:	bf00      	nop
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20002864 	.word	0x20002864

080081dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80081ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008220 <__NVIC_SetPriorityGrouping+0x44>)
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80081f8:	4013      	ands	r3, r2
 80081fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800820c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800820e:	4a04      	ldr	r2, [pc, #16]	@ (8008220 <__NVIC_SetPriorityGrouping+0x44>)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	60d3      	str	r3, [r2, #12]
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	e000ed00 	.word	0xe000ed00

08008224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008228:	4b04      	ldr	r3, [pc, #16]	@ (800823c <__NVIC_GetPriorityGrouping+0x18>)
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	0a1b      	lsrs	r3, r3, #8
 800822e:	f003 0307 	and.w	r3, r3, #7
}
 8008232:	4618      	mov	r0, r3
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	e000ed00 	.word	0xe000ed00

08008240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800824a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800824e:	2b00      	cmp	r3, #0
 8008250:	db0b      	blt.n	800826a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008252:	79fb      	ldrb	r3, [r7, #7]
 8008254:	f003 021f 	and.w	r2, r3, #31
 8008258:	4907      	ldr	r1, [pc, #28]	@ (8008278 <__NVIC_EnableIRQ+0x38>)
 800825a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800825e:	095b      	lsrs	r3, r3, #5
 8008260:	2001      	movs	r0, #1
 8008262:	fa00 f202 	lsl.w	r2, r0, r2
 8008266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	e000e100 	.word	0xe000e100

0800827c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	6039      	str	r1, [r7, #0]
 8008286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800828c:	2b00      	cmp	r3, #0
 800828e:	db0a      	blt.n	80082a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	b2da      	uxtb	r2, r3
 8008294:	490c      	ldr	r1, [pc, #48]	@ (80082c8 <__NVIC_SetPriority+0x4c>)
 8008296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800829a:	0112      	lsls	r2, r2, #4
 800829c:	b2d2      	uxtb	r2, r2
 800829e:	440b      	add	r3, r1
 80082a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80082a4:	e00a      	b.n	80082bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	4908      	ldr	r1, [pc, #32]	@ (80082cc <__NVIC_SetPriority+0x50>)
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	3b04      	subs	r3, #4
 80082b4:	0112      	lsls	r2, r2, #4
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	440b      	add	r3, r1
 80082ba:	761a      	strb	r2, [r3, #24]
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	e000e100 	.word	0xe000e100
 80082cc:	e000ed00 	.word	0xe000ed00

080082d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b089      	sub	sp, #36	@ 0x24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f003 0307 	and.w	r3, r3, #7
 80082e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f1c3 0307 	rsb	r3, r3, #7
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	bf28      	it	cs
 80082ee:	2304      	movcs	r3, #4
 80082f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	3304      	adds	r3, #4
 80082f6:	2b06      	cmp	r3, #6
 80082f8:	d902      	bls.n	8008300 <NVIC_EncodePriority+0x30>
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	3b03      	subs	r3, #3
 80082fe:	e000      	b.n	8008302 <NVIC_EncodePriority+0x32>
 8008300:	2300      	movs	r3, #0
 8008302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008304:	f04f 32ff 	mov.w	r2, #4294967295
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	fa02 f303 	lsl.w	r3, r2, r3
 800830e:	43da      	mvns	r2, r3
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	401a      	ands	r2, r3
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008318:	f04f 31ff 	mov.w	r1, #4294967295
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	fa01 f303 	lsl.w	r3, r1, r3
 8008322:	43d9      	mvns	r1, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008328:	4313      	orrs	r3, r2
         );
}
 800832a:	4618      	mov	r0, r3
 800832c:	3724      	adds	r7, #36	@ 0x24
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
	...

08008338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3b01      	subs	r3, #1
 8008344:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008348:	d301      	bcc.n	800834e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800834a:	2301      	movs	r3, #1
 800834c:	e00f      	b.n	800836e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800834e:	4a0a      	ldr	r2, [pc, #40]	@ (8008378 <SysTick_Config+0x40>)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3b01      	subs	r3, #1
 8008354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008356:	210f      	movs	r1, #15
 8008358:	f04f 30ff 	mov.w	r0, #4294967295
 800835c:	f7ff ff8e 	bl	800827c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008360:	4b05      	ldr	r3, [pc, #20]	@ (8008378 <SysTick_Config+0x40>)
 8008362:	2200      	movs	r2, #0
 8008364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008366:	4b04      	ldr	r3, [pc, #16]	@ (8008378 <SysTick_Config+0x40>)
 8008368:	2207      	movs	r2, #7
 800836a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	e000e010 	.word	0xe000e010

0800837c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff ff29 	bl	80081dc <__NVIC_SetPriorityGrouping>
}
 800838a:	bf00      	nop
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008392:	b580      	push	{r7, lr}
 8008394:	b086      	sub	sp, #24
 8008396:	af00      	add	r7, sp, #0
 8008398:	4603      	mov	r3, r0
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
 800839e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80083a4:	f7ff ff3e 	bl	8008224 <__NVIC_GetPriorityGrouping>
 80083a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	6978      	ldr	r0, [r7, #20]
 80083b0:	f7ff ff8e 	bl	80082d0 <NVIC_EncodePriority>
 80083b4:	4602      	mov	r2, r0
 80083b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f7ff ff5d 	bl	800827c <__NVIC_SetPriority>
}
 80083c2:	bf00      	nop
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	4603      	mov	r3, r0
 80083d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80083d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff ff31 	bl	8008240 <__NVIC_EnableIRQ>
}
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff ffa2 	bl	8008338 <SysTick_Config>
 80083f4:	4603      	mov	r3, r0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b084      	sub	sp, #16
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800840a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800840c:	f7ff feb6 	bl	800817c <HAL_GetTick>
 8008410:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b02      	cmp	r3, #2
 800841c:	d008      	beq.n	8008430 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2280      	movs	r2, #128	@ 0x80
 8008422:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e052      	b.n	80084d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0216 	bic.w	r2, r2, #22
 800843e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	695a      	ldr	r2, [r3, #20]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800844e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008454:	2b00      	cmp	r3, #0
 8008456:	d103      	bne.n	8008460 <HAL_DMA_Abort+0x62>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800845c:	2b00      	cmp	r3, #0
 800845e:	d007      	beq.n	8008470 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 0208 	bic.w	r2, r2, #8
 800846e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0201 	bic.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008480:	e013      	b.n	80084aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008482:	f7ff fe7b 	bl	800817c <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b05      	cmp	r3, #5
 800848e:	d90c      	bls.n	80084aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2220      	movs	r2, #32
 8008494:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2203      	movs	r2, #3
 800849a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e015      	b.n	80084d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1e4      	bne.n	8008482 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084bc:	223f      	movs	r2, #63	@ 0x3f
 80084be:	409a      	lsls	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d004      	beq.n	80084fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2280      	movs	r2, #128	@ 0x80
 80084f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e00c      	b.n	8008516 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2205      	movs	r2, #5
 8008500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0201 	bic.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
	...

08008524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008524:	b480      	push	{r7}
 8008526:	b089      	sub	sp, #36	@ 0x24
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800852e:	2300      	movs	r3, #0
 8008530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008532:	2300      	movs	r3, #0
 8008534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008536:	2300      	movs	r3, #0
 8008538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800853a:	2300      	movs	r3, #0
 800853c:	61fb      	str	r3, [r7, #28]
 800853e:	e16b      	b.n	8008818 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008540:	2201      	movs	r2, #1
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	fa02 f303 	lsl.w	r3, r2, r3
 8008548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	4013      	ands	r3, r2
 8008552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	429a      	cmp	r2, r3
 800855a:	f040 815a 	bne.w	8008812 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	2b01      	cmp	r3, #1
 8008568:	d005      	beq.n	8008576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008572:	2b02      	cmp	r3, #2
 8008574:	d130      	bne.n	80085d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	2203      	movs	r2, #3
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	43db      	mvns	r3, r3
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	4013      	ands	r3, r2
 800858c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	fa02 f303 	lsl.w	r3, r2, r3
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	4313      	orrs	r3, r2
 800859e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80085ac:	2201      	movs	r2, #1
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	fa02 f303 	lsl.w	r3, r2, r3
 80085b4:	43db      	mvns	r3, r3
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	4013      	ands	r3, r2
 80085ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	091b      	lsrs	r3, r3, #4
 80085c2:	f003 0201 	and.w	r2, r3, #1
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	fa02 f303 	lsl.w	r3, r2, r3
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f003 0303 	and.w	r3, r3, #3
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d017      	beq.n	8008614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	005b      	lsls	r3, r3, #1
 80085ee:	2203      	movs	r2, #3
 80085f0:	fa02 f303 	lsl.w	r3, r2, r3
 80085f4:	43db      	mvns	r3, r3
 80085f6:	69ba      	ldr	r2, [r7, #24]
 80085f8:	4013      	ands	r3, r2
 80085fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	fa02 f303 	lsl.w	r3, r2, r3
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	4313      	orrs	r3, r2
 800860c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f003 0303 	and.w	r3, r3, #3
 800861c:	2b02      	cmp	r3, #2
 800861e:	d123      	bne.n	8008668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	08da      	lsrs	r2, r3, #3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3208      	adds	r2, #8
 8008628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	f003 0307 	and.w	r3, r3, #7
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	220f      	movs	r2, #15
 8008638:	fa02 f303 	lsl.w	r3, r2, r3
 800863c:	43db      	mvns	r3, r3
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	4013      	ands	r3, r2
 8008642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	691a      	ldr	r2, [r3, #16]
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	fa02 f303 	lsl.w	r3, r2, r3
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	4313      	orrs	r3, r2
 8008658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	08da      	lsrs	r2, r3, #3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3208      	adds	r2, #8
 8008662:	69b9      	ldr	r1, [r7, #24]
 8008664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	2203      	movs	r2, #3
 8008674:	fa02 f303 	lsl.w	r3, r2, r3
 8008678:	43db      	mvns	r3, r3
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	4013      	ands	r3, r2
 800867e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f003 0203 	and.w	r2, r3, #3
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	fa02 f303 	lsl.w	r3, r2, r3
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	4313      	orrs	r3, r2
 8008694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 80b4 	beq.w	8008812 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	4b60      	ldr	r3, [pc, #384]	@ (8008830 <HAL_GPIO_Init+0x30c>)
 80086b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086b2:	4a5f      	ldr	r2, [pc, #380]	@ (8008830 <HAL_GPIO_Init+0x30c>)
 80086b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80086ba:	4b5d      	ldr	r3, [pc, #372]	@ (8008830 <HAL_GPIO_Init+0x30c>)
 80086bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80086c6:	4a5b      	ldr	r2, [pc, #364]	@ (8008834 <HAL_GPIO_Init+0x310>)
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	089b      	lsrs	r3, r3, #2
 80086cc:	3302      	adds	r3, #2
 80086ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f003 0303 	and.w	r3, r3, #3
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	220f      	movs	r2, #15
 80086de:	fa02 f303 	lsl.w	r3, r2, r3
 80086e2:	43db      	mvns	r3, r3
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	4013      	ands	r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a52      	ldr	r2, [pc, #328]	@ (8008838 <HAL_GPIO_Init+0x314>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d02b      	beq.n	800874a <HAL_GPIO_Init+0x226>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a51      	ldr	r2, [pc, #324]	@ (800883c <HAL_GPIO_Init+0x318>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d025      	beq.n	8008746 <HAL_GPIO_Init+0x222>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a50      	ldr	r2, [pc, #320]	@ (8008840 <HAL_GPIO_Init+0x31c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d01f      	beq.n	8008742 <HAL_GPIO_Init+0x21e>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a4f      	ldr	r2, [pc, #316]	@ (8008844 <HAL_GPIO_Init+0x320>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d019      	beq.n	800873e <HAL_GPIO_Init+0x21a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a4e      	ldr	r2, [pc, #312]	@ (8008848 <HAL_GPIO_Init+0x324>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d013      	beq.n	800873a <HAL_GPIO_Init+0x216>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a4d      	ldr	r2, [pc, #308]	@ (800884c <HAL_GPIO_Init+0x328>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d00d      	beq.n	8008736 <HAL_GPIO_Init+0x212>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a4c      	ldr	r2, [pc, #304]	@ (8008850 <HAL_GPIO_Init+0x32c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d007      	beq.n	8008732 <HAL_GPIO_Init+0x20e>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a4b      	ldr	r2, [pc, #300]	@ (8008854 <HAL_GPIO_Init+0x330>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d101      	bne.n	800872e <HAL_GPIO_Init+0x20a>
 800872a:	2307      	movs	r3, #7
 800872c:	e00e      	b.n	800874c <HAL_GPIO_Init+0x228>
 800872e:	2308      	movs	r3, #8
 8008730:	e00c      	b.n	800874c <HAL_GPIO_Init+0x228>
 8008732:	2306      	movs	r3, #6
 8008734:	e00a      	b.n	800874c <HAL_GPIO_Init+0x228>
 8008736:	2305      	movs	r3, #5
 8008738:	e008      	b.n	800874c <HAL_GPIO_Init+0x228>
 800873a:	2304      	movs	r3, #4
 800873c:	e006      	b.n	800874c <HAL_GPIO_Init+0x228>
 800873e:	2303      	movs	r3, #3
 8008740:	e004      	b.n	800874c <HAL_GPIO_Init+0x228>
 8008742:	2302      	movs	r3, #2
 8008744:	e002      	b.n	800874c <HAL_GPIO_Init+0x228>
 8008746:	2301      	movs	r3, #1
 8008748:	e000      	b.n	800874c <HAL_GPIO_Init+0x228>
 800874a:	2300      	movs	r3, #0
 800874c:	69fa      	ldr	r2, [r7, #28]
 800874e:	f002 0203 	and.w	r2, r2, #3
 8008752:	0092      	lsls	r2, r2, #2
 8008754:	4093      	lsls	r3, r2
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	4313      	orrs	r3, r2
 800875a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800875c:	4935      	ldr	r1, [pc, #212]	@ (8008834 <HAL_GPIO_Init+0x310>)
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	089b      	lsrs	r3, r3, #2
 8008762:	3302      	adds	r3, #2
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800876a:	4b3b      	ldr	r3, [pc, #236]	@ (8008858 <HAL_GPIO_Init+0x334>)
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	43db      	mvns	r3, r3
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	4013      	ands	r3, r2
 8008778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	4313      	orrs	r3, r2
 800878c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800878e:	4a32      	ldr	r2, [pc, #200]	@ (8008858 <HAL_GPIO_Init+0x334>)
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008794:	4b30      	ldr	r3, [pc, #192]	@ (8008858 <HAL_GPIO_Init+0x334>)
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	43db      	mvns	r3, r3
 800879e:	69ba      	ldr	r2, [r7, #24]
 80087a0:	4013      	ands	r3, r2
 80087a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80087b8:	4a27      	ldr	r2, [pc, #156]	@ (8008858 <HAL_GPIO_Init+0x334>)
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80087be:	4b26      	ldr	r3, [pc, #152]	@ (8008858 <HAL_GPIO_Init+0x334>)
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	43db      	mvns	r3, r3
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	4013      	ands	r3, r2
 80087cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80087da:	69ba      	ldr	r2, [r7, #24]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4313      	orrs	r3, r2
 80087e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80087e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008858 <HAL_GPIO_Init+0x334>)
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80087e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008858 <HAL_GPIO_Init+0x334>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	43db      	mvns	r3, r3
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	4013      	ands	r3, r2
 80087f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d003      	beq.n	800880c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	4313      	orrs	r3, r2
 800880a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800880c:	4a12      	ldr	r2, [pc, #72]	@ (8008858 <HAL_GPIO_Init+0x334>)
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	3301      	adds	r3, #1
 8008816:	61fb      	str	r3, [r7, #28]
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	2b0f      	cmp	r3, #15
 800881c:	f67f ae90 	bls.w	8008540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	3724      	adds	r7, #36	@ 0x24
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	40023800 	.word	0x40023800
 8008834:	40013800 	.word	0x40013800
 8008838:	40020000 	.word	0x40020000
 800883c:	40020400 	.word	0x40020400
 8008840:	40020800 	.word	0x40020800
 8008844:	40020c00 	.word	0x40020c00
 8008848:	40021000 	.word	0x40021000
 800884c:	40021400 	.word	0x40021400
 8008850:	40021800 	.word	0x40021800
 8008854:	40021c00 	.word	0x40021c00
 8008858:	40013c00 	.word	0x40013c00

0800885c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691a      	ldr	r2, [r3, #16]
 800886c:	887b      	ldrh	r3, [r7, #2]
 800886e:	4013      	ands	r3, r2
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008874:	2301      	movs	r3, #1
 8008876:	73fb      	strb	r3, [r7, #15]
 8008878:	e001      	b.n	800887e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800887e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	807b      	strh	r3, [r7, #2]
 8008898:	4613      	mov	r3, r2
 800889a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800889c:	787b      	ldrb	r3, [r7, #1]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80088a2:	887a      	ldrh	r2, [r7, #2]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80088a8:	e003      	b.n	80088b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80088aa:	887b      	ldrh	r3, [r7, #2]
 80088ac:	041a      	lsls	r2, r3, #16
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	619a      	str	r2, [r3, #24]
}
 80088b2:	bf00      	nop
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
	...

080088c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e267      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d075      	beq.n	80089ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80088de:	4b88      	ldr	r3, [pc, #544]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f003 030c 	and.w	r3, r3, #12
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d00c      	beq.n	8008904 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088ea:	4b85      	ldr	r3, [pc, #532]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d112      	bne.n	800891c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088f6:	4b82      	ldr	r3, [pc, #520]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008902:	d10b      	bne.n	800891c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008904:	4b7e      	ldr	r3, [pc, #504]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d05b      	beq.n	80089c8 <HAL_RCC_OscConfig+0x108>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d157      	bne.n	80089c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e242      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008924:	d106      	bne.n	8008934 <HAL_RCC_OscConfig+0x74>
 8008926:	4b76      	ldr	r3, [pc, #472]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a75      	ldr	r2, [pc, #468]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 800892c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	e01d      	b.n	8008970 <HAL_RCC_OscConfig+0xb0>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800893c:	d10c      	bne.n	8008958 <HAL_RCC_OscConfig+0x98>
 800893e:	4b70      	ldr	r3, [pc, #448]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a6f      	ldr	r2, [pc, #444]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008944:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	4b6d      	ldr	r3, [pc, #436]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a6c      	ldr	r2, [pc, #432]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	e00b      	b.n	8008970 <HAL_RCC_OscConfig+0xb0>
 8008958:	4b69      	ldr	r3, [pc, #420]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a68      	ldr	r2, [pc, #416]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 800895e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	4b66      	ldr	r3, [pc, #408]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a65      	ldr	r2, [pc, #404]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 800896a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800896e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d013      	beq.n	80089a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008978:	f7ff fc00 	bl	800817c <HAL_GetTick>
 800897c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800897e:	e008      	b.n	8008992 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008980:	f7ff fbfc 	bl	800817c <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	2b64      	cmp	r3, #100	@ 0x64
 800898c:	d901      	bls.n	8008992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e207      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008992:	4b5b      	ldr	r3, [pc, #364]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0f0      	beq.n	8008980 <HAL_RCC_OscConfig+0xc0>
 800899e:	e014      	b.n	80089ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089a0:	f7ff fbec 	bl	800817c <HAL_GetTick>
 80089a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089a6:	e008      	b.n	80089ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089a8:	f7ff fbe8 	bl	800817c <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	2b64      	cmp	r3, #100	@ 0x64
 80089b4:	d901      	bls.n	80089ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e1f3      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089ba:	4b51      	ldr	r3, [pc, #324]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1f0      	bne.n	80089a8 <HAL_RCC_OscConfig+0xe8>
 80089c6:	e000      	b.n	80089ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d063      	beq.n	8008a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80089d6:	4b4a      	ldr	r3, [pc, #296]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f003 030c 	and.w	r3, r3, #12
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00b      	beq.n	80089fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089e2:	4b47      	ldr	r3, [pc, #284]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80089ea:	2b08      	cmp	r3, #8
 80089ec:	d11c      	bne.n	8008a28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089ee:	4b44      	ldr	r3, [pc, #272]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d116      	bne.n	8008a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089fa:	4b41      	ldr	r3, [pc, #260]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0302 	and.w	r3, r3, #2
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d005      	beq.n	8008a12 <HAL_RCC_OscConfig+0x152>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d001      	beq.n	8008a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e1c7      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a12:	4b3b      	ldr	r3, [pc, #236]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	00db      	lsls	r3, r3, #3
 8008a20:	4937      	ldr	r1, [pc, #220]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a26:	e03a      	b.n	8008a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d020      	beq.n	8008a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a30:	4b34      	ldr	r3, [pc, #208]	@ (8008b04 <HAL_RCC_OscConfig+0x244>)
 8008a32:	2201      	movs	r2, #1
 8008a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a36:	f7ff fba1 	bl	800817c <HAL_GetTick>
 8008a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a3c:	e008      	b.n	8008a50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a3e:	f7ff fb9d 	bl	800817c <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d901      	bls.n	8008a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e1a8      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a50:	4b2b      	ldr	r3, [pc, #172]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0f0      	beq.n	8008a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a5c:	4b28      	ldr	r3, [pc, #160]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	4925      	ldr	r1, [pc, #148]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	600b      	str	r3, [r1, #0]
 8008a70:	e015      	b.n	8008a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a72:	4b24      	ldr	r3, [pc, #144]	@ (8008b04 <HAL_RCC_OscConfig+0x244>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a78:	f7ff fb80 	bl	800817c <HAL_GetTick>
 8008a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a7e:	e008      	b.n	8008a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a80:	f7ff fb7c 	bl	800817c <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e187      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a92:	4b1b      	ldr	r3, [pc, #108]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1f0      	bne.n	8008a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0308 	and.w	r3, r3, #8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d036      	beq.n	8008b18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d016      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ab2:	4b15      	ldr	r3, [pc, #84]	@ (8008b08 <HAL_RCC_OscConfig+0x248>)
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ab8:	f7ff fb60 	bl	800817c <HAL_GetTick>
 8008abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ac0:	f7ff fb5c 	bl	800817c <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e167      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8008b00 <HAL_RCC_OscConfig+0x240>)
 8008ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ad6:	f003 0302 	and.w	r3, r3, #2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0f0      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x200>
 8008ade:	e01b      	b.n	8008b18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ae0:	4b09      	ldr	r3, [pc, #36]	@ (8008b08 <HAL_RCC_OscConfig+0x248>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ae6:	f7ff fb49 	bl	800817c <HAL_GetTick>
 8008aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008aec:	e00e      	b.n	8008b0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aee:	f7ff fb45 	bl	800817c <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d907      	bls.n	8008b0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e150      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
 8008b00:	40023800 	.word	0x40023800
 8008b04:	42470000 	.word	0x42470000
 8008b08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b0c:	4b88      	ldr	r3, [pc, #544]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1ea      	bne.n	8008aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 8097 	beq.w	8008c54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b26:	2300      	movs	r3, #0
 8008b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b2a:	4b81      	ldr	r3, [pc, #516]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10f      	bne.n	8008b56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b36:	2300      	movs	r3, #0
 8008b38:	60bb      	str	r3, [r7, #8]
 8008b3a:	4b7d      	ldr	r3, [pc, #500]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3e:	4a7c      	ldr	r2, [pc, #496]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b46:	4b7a      	ldr	r3, [pc, #488]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b4e:	60bb      	str	r3, [r7, #8]
 8008b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b52:	2301      	movs	r3, #1
 8008b54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b56:	4b77      	ldr	r3, [pc, #476]	@ (8008d34 <HAL_RCC_OscConfig+0x474>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d118      	bne.n	8008b94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b62:	4b74      	ldr	r3, [pc, #464]	@ (8008d34 <HAL_RCC_OscConfig+0x474>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a73      	ldr	r2, [pc, #460]	@ (8008d34 <HAL_RCC_OscConfig+0x474>)
 8008b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b6e:	f7ff fb05 	bl	800817c <HAL_GetTick>
 8008b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b74:	e008      	b.n	8008b88 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b76:	f7ff fb01 	bl	800817c <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d901      	bls.n	8008b88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e10c      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b88:	4b6a      	ldr	r3, [pc, #424]	@ (8008d34 <HAL_RCC_OscConfig+0x474>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0f0      	beq.n	8008b76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d106      	bne.n	8008baa <HAL_RCC_OscConfig+0x2ea>
 8008b9c:	4b64      	ldr	r3, [pc, #400]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ba0:	4a63      	ldr	r2, [pc, #396]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008ba2:	f043 0301 	orr.w	r3, r3, #1
 8008ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ba8:	e01c      	b.n	8008be4 <HAL_RCC_OscConfig+0x324>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	2b05      	cmp	r3, #5
 8008bb0:	d10c      	bne.n	8008bcc <HAL_RCC_OscConfig+0x30c>
 8008bb2:	4b5f      	ldr	r3, [pc, #380]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bb6:	4a5e      	ldr	r2, [pc, #376]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008bb8:	f043 0304 	orr.w	r3, r3, #4
 8008bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bc2:	4a5b      	ldr	r2, [pc, #364]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008bc4:	f043 0301 	orr.w	r3, r3, #1
 8008bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bca:	e00b      	b.n	8008be4 <HAL_RCC_OscConfig+0x324>
 8008bcc:	4b58      	ldr	r3, [pc, #352]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bd0:	4a57      	ldr	r2, [pc, #348]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008bd2:	f023 0301 	bic.w	r3, r3, #1
 8008bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bd8:	4b55      	ldr	r3, [pc, #340]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bdc:	4a54      	ldr	r2, [pc, #336]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008bde:	f023 0304 	bic.w	r3, r3, #4
 8008be2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d015      	beq.n	8008c18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bec:	f7ff fac6 	bl	800817c <HAL_GetTick>
 8008bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bf2:	e00a      	b.n	8008c0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bf4:	f7ff fac2 	bl	800817c <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d901      	bls.n	8008c0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e0cb      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c0a:	4b49      	ldr	r3, [pc, #292]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0ee      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x334>
 8008c16:	e014      	b.n	8008c42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c18:	f7ff fab0 	bl	800817c <HAL_GetTick>
 8008c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c1e:	e00a      	b.n	8008c36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c20:	f7ff faac 	bl	800817c <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e0b5      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c36:	4b3e      	ldr	r3, [pc, #248]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1ee      	bne.n	8008c20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d105      	bne.n	8008c54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c48:	4b39      	ldr	r3, [pc, #228]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c4c:	4a38      	ldr	r2, [pc, #224]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 80a1 	beq.w	8008da0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c5e:	4b34      	ldr	r3, [pc, #208]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f003 030c 	and.w	r3, r3, #12
 8008c66:	2b08      	cmp	r3, #8
 8008c68:	d05c      	beq.n	8008d24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d141      	bne.n	8008cf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c72:	4b31      	ldr	r3, [pc, #196]	@ (8008d38 <HAL_RCC_OscConfig+0x478>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c78:	f7ff fa80 	bl	800817c <HAL_GetTick>
 8008c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c7e:	e008      	b.n	8008c92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c80:	f7ff fa7c 	bl	800817c <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d901      	bls.n	8008c92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e087      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c92:	4b27      	ldr	r3, [pc, #156]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1f0      	bne.n	8008c80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	69da      	ldr	r2, [r3, #28]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cac:	019b      	lsls	r3, r3, #6
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb4:	085b      	lsrs	r3, r3, #1
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	041b      	lsls	r3, r3, #16
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc0:	061b      	lsls	r3, r3, #24
 8008cc2:	491b      	ldr	r1, [pc, #108]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8008d38 <HAL_RCC_OscConfig+0x478>)
 8008cca:	2201      	movs	r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cce:	f7ff fa55 	bl	800817c <HAL_GetTick>
 8008cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cd4:	e008      	b.n	8008ce8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cd6:	f7ff fa51 	bl	800817c <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d901      	bls.n	8008ce8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e05c      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ce8:	4b11      	ldr	r3, [pc, #68]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0f0      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x416>
 8008cf4:	e054      	b.n	8008da0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cf6:	4b10      	ldr	r3, [pc, #64]	@ (8008d38 <HAL_RCC_OscConfig+0x478>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cfc:	f7ff fa3e 	bl	800817c <HAL_GetTick>
 8008d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d02:	e008      	b.n	8008d16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d04:	f7ff fa3a 	bl	800817c <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d901      	bls.n	8008d16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e045      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d16:	4b06      	ldr	r3, [pc, #24]	@ (8008d30 <HAL_RCC_OscConfig+0x470>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1f0      	bne.n	8008d04 <HAL_RCC_OscConfig+0x444>
 8008d22:	e03d      	b.n	8008da0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d107      	bne.n	8008d3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e038      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
 8008d30:	40023800 	.word	0x40023800
 8008d34:	40007000 	.word	0x40007000
 8008d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8008dac <HAL_RCC_OscConfig+0x4ec>)
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d028      	beq.n	8008d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d121      	bne.n	8008d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d11a      	bne.n	8008d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d111      	bne.n	8008d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d82:	085b      	lsrs	r3, r3, #1
 8008d84:	3b01      	subs	r3, #1
 8008d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d107      	bne.n	8008d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d001      	beq.n	8008da0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e000      	b.n	8008da2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	40023800 	.word	0x40023800

08008db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e0cc      	b.n	8008f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008dc4:	4b68      	ldr	r3, [pc, #416]	@ (8008f68 <HAL_RCC_ClockConfig+0x1b8>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d90c      	bls.n	8008dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dd2:	4b65      	ldr	r3, [pc, #404]	@ (8008f68 <HAL_RCC_ClockConfig+0x1b8>)
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dda:	4b63      	ldr	r3, [pc, #396]	@ (8008f68 <HAL_RCC_ClockConfig+0x1b8>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d001      	beq.n	8008dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e0b8      	b.n	8008f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d020      	beq.n	8008e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e04:	4b59      	ldr	r3, [pc, #356]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	4a58      	ldr	r2, [pc, #352]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008e0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008e0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0308 	and.w	r3, r3, #8
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d005      	beq.n	8008e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e1c:	4b53      	ldr	r3, [pc, #332]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	4a52      	ldr	r2, [pc, #328]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008e22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e28:	4b50      	ldr	r3, [pc, #320]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	494d      	ldr	r1, [pc, #308]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d044      	beq.n	8008ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d107      	bne.n	8008e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e4e:	4b47      	ldr	r3, [pc, #284]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d119      	bne.n	8008e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e07f      	b.n	8008f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d003      	beq.n	8008e6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d107      	bne.n	8008e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d109      	bne.n	8008e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e06f      	b.n	8008f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0302 	and.w	r3, r3, #2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e067      	b.n	8008f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e8e:	4b37      	ldr	r3, [pc, #220]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f023 0203 	bic.w	r2, r3, #3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	4934      	ldr	r1, [pc, #208]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ea0:	f7ff f96c 	bl	800817c <HAL_GetTick>
 8008ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ea6:	e00a      	b.n	8008ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ea8:	f7ff f968 	bl	800817c <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e04f      	b.n	8008f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f003 020c 	and.w	r2, r3, #12
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d1eb      	bne.n	8008ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ed0:	4b25      	ldr	r3, [pc, #148]	@ (8008f68 <HAL_RCC_ClockConfig+0x1b8>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0307 	and.w	r3, r3, #7
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d20c      	bcs.n	8008ef8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ede:	4b22      	ldr	r3, [pc, #136]	@ (8008f68 <HAL_RCC_ClockConfig+0x1b8>)
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	b2d2      	uxtb	r2, r2
 8008ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ee6:	4b20      	ldr	r3, [pc, #128]	@ (8008f68 <HAL_RCC_ClockConfig+0x1b8>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0307 	and.w	r3, r3, #7
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d001      	beq.n	8008ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e032      	b.n	8008f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d008      	beq.n	8008f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f04:	4b19      	ldr	r3, [pc, #100]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	4916      	ldr	r1, [pc, #88]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0308 	and.w	r3, r3, #8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d009      	beq.n	8008f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f22:	4b12      	ldr	r3, [pc, #72]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	490e      	ldr	r1, [pc, #56]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f36:	f000 f821 	bl	8008f7c <HAL_RCC_GetSysClockFreq>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f6c <HAL_RCC_ClockConfig+0x1bc>)
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	091b      	lsrs	r3, r3, #4
 8008f42:	f003 030f 	and.w	r3, r3, #15
 8008f46:	490a      	ldr	r1, [pc, #40]	@ (8008f70 <HAL_RCC_ClockConfig+0x1c0>)
 8008f48:	5ccb      	ldrb	r3, [r1, r3]
 8008f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f4e:	4a09      	ldr	r2, [pc, #36]	@ (8008f74 <HAL_RCC_ClockConfig+0x1c4>)
 8008f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008f52:	4b09      	ldr	r3, [pc, #36]	@ (8008f78 <HAL_RCC_ClockConfig+0x1c8>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7ff f8cc 	bl	80080f4 <HAL_InitTick>

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	40023c00 	.word	0x40023c00
 8008f6c:	40023800 	.word	0x40023800
 8008f70:	08049da4 	.word	0x08049da4
 8008f74:	2000285c 	.word	0x2000285c
 8008f78:	20002860 	.word	0x20002860

08008f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f80:	b094      	sub	sp, #80	@ 0x50
 8008f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008f84:	2300      	movs	r3, #0
 8008f86:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008f90:	2300      	movs	r3, #0
 8008f92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f94:	4b79      	ldr	r3, [pc, #484]	@ (800917c <HAL_RCC_GetSysClockFreq+0x200>)
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f003 030c 	and.w	r3, r3, #12
 8008f9c:	2b08      	cmp	r3, #8
 8008f9e:	d00d      	beq.n	8008fbc <HAL_RCC_GetSysClockFreq+0x40>
 8008fa0:	2b08      	cmp	r3, #8
 8008fa2:	f200 80e1 	bhi.w	8009168 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d003      	beq.n	8008fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008fae:	e0db      	b.n	8009168 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fb0:	4b73      	ldr	r3, [pc, #460]	@ (8009180 <HAL_RCC_GetSysClockFreq+0x204>)
 8008fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008fb4:	e0db      	b.n	800916e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008fb6:	4b73      	ldr	r3, [pc, #460]	@ (8009184 <HAL_RCC_GetSysClockFreq+0x208>)
 8008fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008fba:	e0d8      	b.n	800916e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008fbc:	4b6f      	ldr	r3, [pc, #444]	@ (800917c <HAL_RCC_GetSysClockFreq+0x200>)
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fc4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008fc6:	4b6d      	ldr	r3, [pc, #436]	@ (800917c <HAL_RCC_GetSysClockFreq+0x200>)
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d063      	beq.n	800909a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fd2:	4b6a      	ldr	r3, [pc, #424]	@ (800917c <HAL_RCC_GetSysClockFreq+0x200>)
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	099b      	lsrs	r3, r3, #6
 8008fd8:	2200      	movs	r2, #0
 8008fda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008fee:	4622      	mov	r2, r4
 8008ff0:	462b      	mov	r3, r5
 8008ff2:	f04f 0000 	mov.w	r0, #0
 8008ff6:	f04f 0100 	mov.w	r1, #0
 8008ffa:	0159      	lsls	r1, r3, #5
 8008ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009000:	0150      	lsls	r0, r2, #5
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4621      	mov	r1, r4
 8009008:	1a51      	subs	r1, r2, r1
 800900a:	6139      	str	r1, [r7, #16]
 800900c:	4629      	mov	r1, r5
 800900e:	eb63 0301 	sbc.w	r3, r3, r1
 8009012:	617b      	str	r3, [r7, #20]
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	f04f 0300 	mov.w	r3, #0
 800901c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009020:	4659      	mov	r1, fp
 8009022:	018b      	lsls	r3, r1, #6
 8009024:	4651      	mov	r1, sl
 8009026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800902a:	4651      	mov	r1, sl
 800902c:	018a      	lsls	r2, r1, #6
 800902e:	4651      	mov	r1, sl
 8009030:	ebb2 0801 	subs.w	r8, r2, r1
 8009034:	4659      	mov	r1, fp
 8009036:	eb63 0901 	sbc.w	r9, r3, r1
 800903a:	f04f 0200 	mov.w	r2, #0
 800903e:	f04f 0300 	mov.w	r3, #0
 8009042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800904a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800904e:	4690      	mov	r8, r2
 8009050:	4699      	mov	r9, r3
 8009052:	4623      	mov	r3, r4
 8009054:	eb18 0303 	adds.w	r3, r8, r3
 8009058:	60bb      	str	r3, [r7, #8]
 800905a:	462b      	mov	r3, r5
 800905c:	eb49 0303 	adc.w	r3, r9, r3
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	f04f 0200 	mov.w	r2, #0
 8009066:	f04f 0300 	mov.w	r3, #0
 800906a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800906e:	4629      	mov	r1, r5
 8009070:	024b      	lsls	r3, r1, #9
 8009072:	4621      	mov	r1, r4
 8009074:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009078:	4621      	mov	r1, r4
 800907a:	024a      	lsls	r2, r1, #9
 800907c:	4610      	mov	r0, r2
 800907e:	4619      	mov	r1, r3
 8009080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009082:	2200      	movs	r2, #0
 8009084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009086:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009088:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800908c:	f7f7 fda6 	bl	8000bdc <__aeabi_uldivmod>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	4613      	mov	r3, r2
 8009096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009098:	e058      	b.n	800914c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800909a:	4b38      	ldr	r3, [pc, #224]	@ (800917c <HAL_RCC_GetSysClockFreq+0x200>)
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	099b      	lsrs	r3, r3, #6
 80090a0:	2200      	movs	r2, #0
 80090a2:	4618      	mov	r0, r3
 80090a4:	4611      	mov	r1, r2
 80090a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80090aa:	623b      	str	r3, [r7, #32]
 80090ac:	2300      	movs	r3, #0
 80090ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80090b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80090b4:	4642      	mov	r2, r8
 80090b6:	464b      	mov	r3, r9
 80090b8:	f04f 0000 	mov.w	r0, #0
 80090bc:	f04f 0100 	mov.w	r1, #0
 80090c0:	0159      	lsls	r1, r3, #5
 80090c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090c6:	0150      	lsls	r0, r2, #5
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	4641      	mov	r1, r8
 80090ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80090d2:	4649      	mov	r1, r9
 80090d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80090d8:	f04f 0200 	mov.w	r2, #0
 80090dc:	f04f 0300 	mov.w	r3, #0
 80090e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80090e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80090e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80090ec:	ebb2 040a 	subs.w	r4, r2, sl
 80090f0:	eb63 050b 	sbc.w	r5, r3, fp
 80090f4:	f04f 0200 	mov.w	r2, #0
 80090f8:	f04f 0300 	mov.w	r3, #0
 80090fc:	00eb      	lsls	r3, r5, #3
 80090fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009102:	00e2      	lsls	r2, r4, #3
 8009104:	4614      	mov	r4, r2
 8009106:	461d      	mov	r5, r3
 8009108:	4643      	mov	r3, r8
 800910a:	18e3      	adds	r3, r4, r3
 800910c:	603b      	str	r3, [r7, #0]
 800910e:	464b      	mov	r3, r9
 8009110:	eb45 0303 	adc.w	r3, r5, r3
 8009114:	607b      	str	r3, [r7, #4]
 8009116:	f04f 0200 	mov.w	r2, #0
 800911a:	f04f 0300 	mov.w	r3, #0
 800911e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009122:	4629      	mov	r1, r5
 8009124:	028b      	lsls	r3, r1, #10
 8009126:	4621      	mov	r1, r4
 8009128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800912c:	4621      	mov	r1, r4
 800912e:	028a      	lsls	r2, r1, #10
 8009130:	4610      	mov	r0, r2
 8009132:	4619      	mov	r1, r3
 8009134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009136:	2200      	movs	r2, #0
 8009138:	61bb      	str	r3, [r7, #24]
 800913a:	61fa      	str	r2, [r7, #28]
 800913c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009140:	f7f7 fd4c 	bl	8000bdc <__aeabi_uldivmod>
 8009144:	4602      	mov	r2, r0
 8009146:	460b      	mov	r3, r1
 8009148:	4613      	mov	r3, r2
 800914a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800914c:	4b0b      	ldr	r3, [pc, #44]	@ (800917c <HAL_RCC_GetSysClockFreq+0x200>)
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	0c1b      	lsrs	r3, r3, #16
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	3301      	adds	r3, #1
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800915c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800915e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009160:	fbb2 f3f3 	udiv	r3, r2, r3
 8009164:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009166:	e002      	b.n	800916e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009168:	4b05      	ldr	r3, [pc, #20]	@ (8009180 <HAL_RCC_GetSysClockFreq+0x204>)
 800916a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800916c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800916e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009170:	4618      	mov	r0, r3
 8009172:	3750      	adds	r7, #80	@ 0x50
 8009174:	46bd      	mov	sp, r7
 8009176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800917a:	bf00      	nop
 800917c:	40023800 	.word	0x40023800
 8009180:	00f42400 	.word	0x00f42400
 8009184:	007a1200 	.word	0x007a1200

08009188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800918c:	4b03      	ldr	r3, [pc, #12]	@ (800919c <HAL_RCC_GetHCLKFreq+0x14>)
 800918e:	681b      	ldr	r3, [r3, #0]
}
 8009190:	4618      	mov	r0, r3
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	2000285c 	.word	0x2000285c

080091a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80091a4:	f7ff fff0 	bl	8009188 <HAL_RCC_GetHCLKFreq>
 80091a8:	4602      	mov	r2, r0
 80091aa:	4b05      	ldr	r3, [pc, #20]	@ (80091c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	0a9b      	lsrs	r3, r3, #10
 80091b0:	f003 0307 	and.w	r3, r3, #7
 80091b4:	4903      	ldr	r1, [pc, #12]	@ (80091c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091b6:	5ccb      	ldrb	r3, [r1, r3]
 80091b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091bc:	4618      	mov	r0, r3
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	40023800 	.word	0x40023800
 80091c4:	08049db4 	.word	0x08049db4

080091c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80091cc:	f7ff ffdc 	bl	8009188 <HAL_RCC_GetHCLKFreq>
 80091d0:	4602      	mov	r2, r0
 80091d2:	4b05      	ldr	r3, [pc, #20]	@ (80091e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	0b5b      	lsrs	r3, r3, #13
 80091d8:	f003 0307 	and.w	r3, r3, #7
 80091dc:	4903      	ldr	r1, [pc, #12]	@ (80091ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80091de:	5ccb      	ldrb	r3, [r1, r3]
 80091e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	40023800 	.word	0x40023800
 80091ec:	08049db4 	.word	0x08049db4

080091f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e07b      	b.n	80092fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009206:	2b00      	cmp	r3, #0
 8009208:	d108      	bne.n	800921c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009212:	d009      	beq.n	8009228 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	61da      	str	r2, [r3, #28]
 800921a:	e005      	b.n	8009228 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	d106      	bne.n	8009248 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7fe fb12 	bl	800786c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800925e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009270:	431a      	orrs	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800927a:	431a      	orrs	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	f003 0302 	and.w	r3, r3, #2
 8009284:	431a      	orrs	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	431a      	orrs	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009298:	431a      	orrs	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092a2:	431a      	orrs	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ac:	ea42 0103 	orr.w	r1, r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	430a      	orrs	r2, r1
 80092be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	0c1b      	lsrs	r3, r3, #16
 80092c6:	f003 0104 	and.w	r1, r3, #4
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ce:	f003 0210 	and.w	r2, r3, #16
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69da      	ldr	r2, [r3, #28]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b08a      	sub	sp, #40	@ 0x28
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	607a      	str	r2, [r7, #4]
 800930e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009310:	2301      	movs	r3, #1
 8009312:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009314:	f7fe ff32 	bl	800817c <HAL_GetTick>
 8009318:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009320:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009328:	887b      	ldrh	r3, [r7, #2]
 800932a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800932c:	7ffb      	ldrb	r3, [r7, #31]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d00c      	beq.n	800934c <HAL_SPI_TransmitReceive+0x4a>
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009338:	d106      	bne.n	8009348 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d102      	bne.n	8009348 <HAL_SPI_TransmitReceive+0x46>
 8009342:	7ffb      	ldrb	r3, [r7, #31]
 8009344:	2b04      	cmp	r3, #4
 8009346:	d001      	beq.n	800934c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8009348:	2302      	movs	r3, #2
 800934a:	e17f      	b.n	800964c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d005      	beq.n	800935e <HAL_SPI_TransmitReceive+0x5c>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <HAL_SPI_TransmitReceive+0x5c>
 8009358:	887b      	ldrh	r3, [r7, #2]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e174      	b.n	800964c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009368:	2b01      	cmp	r3, #1
 800936a:	d101      	bne.n	8009370 <HAL_SPI_TransmitReceive+0x6e>
 800936c:	2302      	movs	r3, #2
 800936e:	e16d      	b.n	800964c <HAL_SPI_TransmitReceive+0x34a>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b04      	cmp	r3, #4
 8009382:	d003      	beq.n	800938c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2205      	movs	r2, #5
 8009388:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	887a      	ldrh	r2, [r7, #2]
 800939c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	887a      	ldrh	r2, [r7, #2]
 80093a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	887a      	ldrh	r2, [r7, #2]
 80093ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	887a      	ldrh	r2, [r7, #2]
 80093b4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093cc:	2b40      	cmp	r3, #64	@ 0x40
 80093ce:	d007      	beq.n	80093e0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093e8:	d17e      	bne.n	80094e8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d002      	beq.n	80093f8 <HAL_SPI_TransmitReceive+0xf6>
 80093f2:	8afb      	ldrh	r3, [r7, #22]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d16c      	bne.n	80094d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093fc:	881a      	ldrh	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009408:	1c9a      	adds	r2, r3, #2
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009412:	b29b      	uxth	r3, r3
 8009414:	3b01      	subs	r3, #1
 8009416:	b29a      	uxth	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800941c:	e059      	b.n	80094d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 0302 	and.w	r3, r3, #2
 8009428:	2b02      	cmp	r3, #2
 800942a:	d11b      	bne.n	8009464 <HAL_SPI_TransmitReceive+0x162>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009430:	b29b      	uxth	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d016      	beq.n	8009464 <HAL_SPI_TransmitReceive+0x162>
 8009436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009438:	2b01      	cmp	r3, #1
 800943a:	d113      	bne.n	8009464 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009440:	881a      	ldrh	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800944c:	1c9a      	adds	r2, r3, #2
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009456:	b29b      	uxth	r3, r3
 8009458:	3b01      	subs	r3, #1
 800945a:	b29a      	uxth	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009460:	2300      	movs	r3, #0
 8009462:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b01      	cmp	r3, #1
 8009470:	d119      	bne.n	80094a6 <HAL_SPI_TransmitReceive+0x1a4>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009476:	b29b      	uxth	r3, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	d014      	beq.n	80094a6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68da      	ldr	r2, [r3, #12]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009486:	b292      	uxth	r2, r2
 8009488:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800948e:	1c9a      	adds	r2, r3, #2
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009498:	b29b      	uxth	r3, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	b29a      	uxth	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80094a2:	2301      	movs	r3, #1
 80094a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80094a6:	f7fe fe69 	bl	800817c <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d80d      	bhi.n	80094d2 <HAL_SPI_TransmitReceive+0x1d0>
 80094b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094bc:	d009      	beq.n	80094d2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e0bc      	b.n	800964c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1a0      	bne.n	800941e <HAL_SPI_TransmitReceive+0x11c>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d19b      	bne.n	800941e <HAL_SPI_TransmitReceive+0x11c>
 80094e6:	e082      	b.n	80095ee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <HAL_SPI_TransmitReceive+0x1f4>
 80094f0:	8afb      	ldrh	r3, [r7, #22]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d171      	bne.n	80095da <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	330c      	adds	r3, #12
 8009500:	7812      	ldrb	r2, [r2, #0]
 8009502:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009512:	b29b      	uxth	r3, r3
 8009514:	3b01      	subs	r3, #1
 8009516:	b29a      	uxth	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800951c:	e05d      	b.n	80095da <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f003 0302 	and.w	r3, r3, #2
 8009528:	2b02      	cmp	r3, #2
 800952a:	d11c      	bne.n	8009566 <HAL_SPI_TransmitReceive+0x264>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009530:	b29b      	uxth	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	d017      	beq.n	8009566 <HAL_SPI_TransmitReceive+0x264>
 8009536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009538:	2b01      	cmp	r3, #1
 800953a:	d114      	bne.n	8009566 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	330c      	adds	r3, #12
 8009546:	7812      	ldrb	r2, [r2, #0]
 8009548:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009558:	b29b      	uxth	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	b29a      	uxth	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b01      	cmp	r3, #1
 8009572:	d119      	bne.n	80095a8 <HAL_SPI_TransmitReceive+0x2a6>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009578:	b29b      	uxth	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d014      	beq.n	80095a8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68da      	ldr	r2, [r3, #12]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009588:	b2d2      	uxtb	r2, r2
 800958a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800959a:	b29b      	uxth	r3, r3
 800959c:	3b01      	subs	r3, #1
 800959e:	b29a      	uxth	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095a4:	2301      	movs	r3, #1
 80095a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80095a8:	f7fe fde8 	bl	800817c <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d803      	bhi.n	80095c0 <HAL_SPI_TransmitReceive+0x2be>
 80095b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095be:	d102      	bne.n	80095c6 <HAL_SPI_TransmitReceive+0x2c4>
 80095c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e038      	b.n	800964c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095de:	b29b      	uxth	r3, r3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d19c      	bne.n	800951e <HAL_SPI_TransmitReceive+0x21c>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d197      	bne.n	800951e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095ee:	6a3a      	ldr	r2, [r7, #32]
 80095f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f000 f8b6 	bl	8009764 <SPI_EndRxTxTransaction>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d008      	beq.n	8009610 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2220      	movs	r2, #32
 8009602:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e01d      	b.n	800964c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10a      	bne.n	800962e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009618:	2300      	movs	r3, #0
 800961a:	613b      	str	r3, [r7, #16]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	613b      	str	r3, [r7, #16]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	613b      	str	r3, [r7, #16]
 800962c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e000      	b.n	800964c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800964a:	2300      	movs	r3, #0
  }
}
 800964c:	4618      	mov	r0, r3
 800964e:	3728      	adds	r7, #40	@ 0x28
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b088      	sub	sp, #32
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	603b      	str	r3, [r7, #0]
 8009660:	4613      	mov	r3, r2
 8009662:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009664:	f7fe fd8a 	bl	800817c <HAL_GetTick>
 8009668:	4602      	mov	r2, r0
 800966a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966c:	1a9b      	subs	r3, r3, r2
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	4413      	add	r3, r2
 8009672:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009674:	f7fe fd82 	bl	800817c <HAL_GetTick>
 8009678:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800967a:	4b39      	ldr	r3, [pc, #228]	@ (8009760 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	015b      	lsls	r3, r3, #5
 8009680:	0d1b      	lsrs	r3, r3, #20
 8009682:	69fa      	ldr	r2, [r7, #28]
 8009684:	fb02 f303 	mul.w	r3, r2, r3
 8009688:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800968a:	e054      	b.n	8009736 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009692:	d050      	beq.n	8009736 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009694:	f7fe fd72 	bl	800817c <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d902      	bls.n	80096aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d13d      	bne.n	8009726 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80096b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096c2:	d111      	bne.n	80096e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096cc:	d004      	beq.n	80096d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096d6:	d107      	bne.n	80096e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096f0:	d10f      	bne.n	8009712 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009700:	601a      	str	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009710:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e017      	b.n	8009756 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800972c:	2300      	movs	r3, #0
 800972e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	3b01      	subs	r3, #1
 8009734:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	4013      	ands	r3, r2
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	429a      	cmp	r2, r3
 8009744:	bf0c      	ite	eq
 8009746:	2301      	moveq	r3, #1
 8009748:	2300      	movne	r3, #0
 800974a:	b2db      	uxtb	r3, r3
 800974c:	461a      	mov	r2, r3
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	429a      	cmp	r2, r3
 8009752:	d19b      	bne.n	800968c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3720      	adds	r7, #32
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	2000285c 	.word	0x2000285c

08009764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af02      	add	r7, sp, #8
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2201      	movs	r2, #1
 8009778:	2102      	movs	r1, #2
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f7ff ff6a 	bl	8009654 <SPI_WaitFlagStateUntilTimeout>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d007      	beq.n	8009796 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800978a:	f043 0220 	orr.w	r2, r3, #32
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e032      	b.n	80097fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009796:	4b1b      	ldr	r3, [pc, #108]	@ (8009804 <SPI_EndRxTxTransaction+0xa0>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a1b      	ldr	r2, [pc, #108]	@ (8009808 <SPI_EndRxTxTransaction+0xa4>)
 800979c:	fba2 2303 	umull	r2, r3, r2, r3
 80097a0:	0d5b      	lsrs	r3, r3, #21
 80097a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80097a6:	fb02 f303 	mul.w	r3, r2, r3
 80097aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80097b4:	d112      	bne.n	80097dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	2200      	movs	r2, #0
 80097be:	2180      	movs	r1, #128	@ 0x80
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f7ff ff47 	bl	8009654 <SPI_WaitFlagStateUntilTimeout>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d016      	beq.n	80097fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d0:	f043 0220 	orr.w	r2, r3, #32
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e00f      	b.n	80097fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097f2:	2b80      	cmp	r3, #128	@ 0x80
 80097f4:	d0f2      	beq.n	80097dc <SPI_EndRxTxTransaction+0x78>
 80097f6:	e000      	b.n	80097fa <SPI_EndRxTxTransaction+0x96>
        break;
 80097f8:	bf00      	nop
  }

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	2000285c 	.word	0x2000285c
 8009808:	165e9f81 	.word	0x165e9f81

0800980c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e038      	b.n	8009894 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d106      	bne.n	800983c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f7fe f922 	bl	8007a80 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3308      	adds	r3, #8
 8009844:	4619      	mov	r1, r3
 8009846:	4610      	mov	r0, r2
 8009848:	f001 fd8c 	bl	800b364 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	461a      	mov	r2, r3
 8009856:	68b9      	ldr	r1, [r7, #8]
 8009858:	f001 fdee 	bl	800b438 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6858      	ldr	r0, [r3, #4]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	689a      	ldr	r2, [r3, #8]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009868:	6879      	ldr	r1, [r7, #4]
 800986a:	f001 fe1b 	bl	800b4a4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	6892      	ldr	r2, [r2, #8]
 8009876:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	6892      	ldr	r2, [r2, #8]
 8009882:	f041 0101 	orr.w	r1, r1, #1
 8009886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d101      	bne.n	80098ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e041      	b.n	8009932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d106      	bne.n	80098c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7fe f81a 	bl	80078fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2202      	movs	r2, #2
 80098cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3304      	adds	r3, #4
 80098d8:	4619      	mov	r1, r3
 80098da:	4610      	mov	r0, r2
 80098dc:	f000 fa7e 	bl	8009ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
	...

0800993c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b01      	cmp	r3, #1
 800994e:	d001      	beq.n	8009954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e04e      	b.n	80099f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2202      	movs	r2, #2
 8009958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68da      	ldr	r2, [r3, #12]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f042 0201 	orr.w	r2, r2, #1
 800996a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a23      	ldr	r2, [pc, #140]	@ (8009a00 <HAL_TIM_Base_Start_IT+0xc4>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d022      	beq.n	80099bc <HAL_TIM_Base_Start_IT+0x80>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800997e:	d01d      	beq.n	80099bc <HAL_TIM_Base_Start_IT+0x80>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a1f      	ldr	r2, [pc, #124]	@ (8009a04 <HAL_TIM_Base_Start_IT+0xc8>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d018      	beq.n	80099bc <HAL_TIM_Base_Start_IT+0x80>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a1e      	ldr	r2, [pc, #120]	@ (8009a08 <HAL_TIM_Base_Start_IT+0xcc>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d013      	beq.n	80099bc <HAL_TIM_Base_Start_IT+0x80>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a1c      	ldr	r2, [pc, #112]	@ (8009a0c <HAL_TIM_Base_Start_IT+0xd0>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d00e      	beq.n	80099bc <HAL_TIM_Base_Start_IT+0x80>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a1b      	ldr	r2, [pc, #108]	@ (8009a10 <HAL_TIM_Base_Start_IT+0xd4>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d009      	beq.n	80099bc <HAL_TIM_Base_Start_IT+0x80>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a19      	ldr	r2, [pc, #100]	@ (8009a14 <HAL_TIM_Base_Start_IT+0xd8>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d004      	beq.n	80099bc <HAL_TIM_Base_Start_IT+0x80>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a18      	ldr	r2, [pc, #96]	@ (8009a18 <HAL_TIM_Base_Start_IT+0xdc>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d111      	bne.n	80099e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f003 0307 	and.w	r3, r3, #7
 80099c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b06      	cmp	r3, #6
 80099cc:	d010      	beq.n	80099f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f042 0201 	orr.w	r2, r2, #1
 80099dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099de:	e007      	b.n	80099f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f042 0201 	orr.w	r2, r2, #1
 80099ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	40010000 	.word	0x40010000
 8009a04:	40000400 	.word	0x40000400
 8009a08:	40000800 	.word	0x40000800
 8009a0c:	40000c00 	.word	0x40000c00
 8009a10:	40010400 	.word	0x40010400
 8009a14:	40014000 	.word	0x40014000
 8009a18:	40001800 	.word	0x40001800

08009a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d020      	beq.n	8009a80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f003 0302 	and.w	r3, r3, #2
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d01b      	beq.n	8009a80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f06f 0202 	mvn.w	r2, #2
 8009a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	f003 0303 	and.w	r3, r3, #3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d003      	beq.n	8009a6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f999 	bl	8009d9e <HAL_TIM_IC_CaptureCallback>
 8009a6c:	e005      	b.n	8009a7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f98b 	bl	8009d8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f99c 	bl	8009db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f003 0304 	and.w	r3, r3, #4
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d020      	beq.n	8009acc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f003 0304 	and.w	r3, r3, #4
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d01b      	beq.n	8009acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f06f 0204 	mvn.w	r2, #4
 8009a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f973 	bl	8009d9e <HAL_TIM_IC_CaptureCallback>
 8009ab8:	e005      	b.n	8009ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f965 	bl	8009d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f976 	bl	8009db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f003 0308 	and.w	r3, r3, #8
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d020      	beq.n	8009b18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f003 0308 	and.w	r3, r3, #8
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d01b      	beq.n	8009b18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f06f 0208 	mvn.w	r2, #8
 8009ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2204      	movs	r2, #4
 8009aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	f003 0303 	and.w	r3, r3, #3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f94d 	bl	8009d9e <HAL_TIM_IC_CaptureCallback>
 8009b04:	e005      	b.n	8009b12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f93f 	bl	8009d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f950 	bl	8009db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	f003 0310 	and.w	r3, r3, #16
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d020      	beq.n	8009b64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f003 0310 	and.w	r3, r3, #16
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d01b      	beq.n	8009b64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f06f 0210 	mvn.w	r2, #16
 8009b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2208      	movs	r2, #8
 8009b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d003      	beq.n	8009b52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f927 	bl	8009d9e <HAL_TIM_IC_CaptureCallback>
 8009b50:	e005      	b.n	8009b5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f919 	bl	8009d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f92a 	bl	8009db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00c      	beq.n	8009b88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d007      	beq.n	8009b88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f06f 0201 	mvn.w	r2, #1
 8009b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7fc fbae 	bl	80062e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00c      	beq.n	8009bac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d007      	beq.n	8009bac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fae4 	bl	800a174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00c      	beq.n	8009bd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d007      	beq.n	8009bd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f8fb 	bl	8009dc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	f003 0320 	and.w	r3, r3, #32
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00c      	beq.n	8009bf4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f003 0320 	and.w	r3, r3, #32
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d007      	beq.n	8009bf4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f06f 0220 	mvn.w	r2, #32
 8009bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fab6 	bl	800a160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bf4:	bf00      	nop
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d101      	bne.n	8009c18 <HAL_TIM_ConfigClockSource+0x1c>
 8009c14:	2302      	movs	r3, #2
 8009c16:	e0b4      	b.n	8009d82 <HAL_TIM_ConfigClockSource+0x186>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2202      	movs	r2, #2
 8009c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c50:	d03e      	beq.n	8009cd0 <HAL_TIM_ConfigClockSource+0xd4>
 8009c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c56:	f200 8087 	bhi.w	8009d68 <HAL_TIM_ConfigClockSource+0x16c>
 8009c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c5e:	f000 8086 	beq.w	8009d6e <HAL_TIM_ConfigClockSource+0x172>
 8009c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c66:	d87f      	bhi.n	8009d68 <HAL_TIM_ConfigClockSource+0x16c>
 8009c68:	2b70      	cmp	r3, #112	@ 0x70
 8009c6a:	d01a      	beq.n	8009ca2 <HAL_TIM_ConfigClockSource+0xa6>
 8009c6c:	2b70      	cmp	r3, #112	@ 0x70
 8009c6e:	d87b      	bhi.n	8009d68 <HAL_TIM_ConfigClockSource+0x16c>
 8009c70:	2b60      	cmp	r3, #96	@ 0x60
 8009c72:	d050      	beq.n	8009d16 <HAL_TIM_ConfigClockSource+0x11a>
 8009c74:	2b60      	cmp	r3, #96	@ 0x60
 8009c76:	d877      	bhi.n	8009d68 <HAL_TIM_ConfigClockSource+0x16c>
 8009c78:	2b50      	cmp	r3, #80	@ 0x50
 8009c7a:	d03c      	beq.n	8009cf6 <HAL_TIM_ConfigClockSource+0xfa>
 8009c7c:	2b50      	cmp	r3, #80	@ 0x50
 8009c7e:	d873      	bhi.n	8009d68 <HAL_TIM_ConfigClockSource+0x16c>
 8009c80:	2b40      	cmp	r3, #64	@ 0x40
 8009c82:	d058      	beq.n	8009d36 <HAL_TIM_ConfigClockSource+0x13a>
 8009c84:	2b40      	cmp	r3, #64	@ 0x40
 8009c86:	d86f      	bhi.n	8009d68 <HAL_TIM_ConfigClockSource+0x16c>
 8009c88:	2b30      	cmp	r3, #48	@ 0x30
 8009c8a:	d064      	beq.n	8009d56 <HAL_TIM_ConfigClockSource+0x15a>
 8009c8c:	2b30      	cmp	r3, #48	@ 0x30
 8009c8e:	d86b      	bhi.n	8009d68 <HAL_TIM_ConfigClockSource+0x16c>
 8009c90:	2b20      	cmp	r3, #32
 8009c92:	d060      	beq.n	8009d56 <HAL_TIM_ConfigClockSource+0x15a>
 8009c94:	2b20      	cmp	r3, #32
 8009c96:	d867      	bhi.n	8009d68 <HAL_TIM_ConfigClockSource+0x16c>
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d05c      	beq.n	8009d56 <HAL_TIM_ConfigClockSource+0x15a>
 8009c9c:	2b10      	cmp	r3, #16
 8009c9e:	d05a      	beq.n	8009d56 <HAL_TIM_ConfigClockSource+0x15a>
 8009ca0:	e062      	b.n	8009d68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009cb2:	f000 f9b9 	bl	800a028 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009cc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	609a      	str	r2, [r3, #8]
      break;
 8009cce:	e04f      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ce0:	f000 f9a2 	bl	800a028 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009cf2:	609a      	str	r2, [r3, #8]
      break;
 8009cf4:	e03c      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d02:	461a      	mov	r2, r3
 8009d04:	f000 f916 	bl	8009f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2150      	movs	r1, #80	@ 0x50
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f96f 	bl	8009ff2 <TIM_ITRx_SetConfig>
      break;
 8009d14:	e02c      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d22:	461a      	mov	r2, r3
 8009d24:	f000 f935 	bl	8009f92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2160      	movs	r1, #96	@ 0x60
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 f95f 	bl	8009ff2 <TIM_ITRx_SetConfig>
      break;
 8009d34:	e01c      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d42:	461a      	mov	r2, r3
 8009d44:	f000 f8f6 	bl	8009f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2140      	movs	r1, #64	@ 0x40
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 f94f 	bl	8009ff2 <TIM_ITRx_SetConfig>
      break;
 8009d54:	e00c      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	4610      	mov	r0, r2
 8009d62:	f000 f946 	bl	8009ff2 <TIM_ITRx_SetConfig>
      break;
 8009d66:	e003      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d6c:	e000      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b083      	sub	sp, #12
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d92:	bf00      	nop
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b083      	sub	sp, #12
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009da6:	bf00      	nop
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b083      	sub	sp, #12
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009dba:	bf00      	nop
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009dce:	bf00      	nop
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
	...

08009ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a46      	ldr	r2, [pc, #280]	@ (8009f08 <TIM_Base_SetConfig+0x12c>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d013      	beq.n	8009e1c <TIM_Base_SetConfig+0x40>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dfa:	d00f      	beq.n	8009e1c <TIM_Base_SetConfig+0x40>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a43      	ldr	r2, [pc, #268]	@ (8009f0c <TIM_Base_SetConfig+0x130>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d00b      	beq.n	8009e1c <TIM_Base_SetConfig+0x40>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a42      	ldr	r2, [pc, #264]	@ (8009f10 <TIM_Base_SetConfig+0x134>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d007      	beq.n	8009e1c <TIM_Base_SetConfig+0x40>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a41      	ldr	r2, [pc, #260]	@ (8009f14 <TIM_Base_SetConfig+0x138>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d003      	beq.n	8009e1c <TIM_Base_SetConfig+0x40>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a40      	ldr	r2, [pc, #256]	@ (8009f18 <TIM_Base_SetConfig+0x13c>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d108      	bne.n	8009e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a35      	ldr	r2, [pc, #212]	@ (8009f08 <TIM_Base_SetConfig+0x12c>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d02b      	beq.n	8009e8e <TIM_Base_SetConfig+0xb2>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e3c:	d027      	beq.n	8009e8e <TIM_Base_SetConfig+0xb2>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a32      	ldr	r2, [pc, #200]	@ (8009f0c <TIM_Base_SetConfig+0x130>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d023      	beq.n	8009e8e <TIM_Base_SetConfig+0xb2>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a31      	ldr	r2, [pc, #196]	@ (8009f10 <TIM_Base_SetConfig+0x134>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d01f      	beq.n	8009e8e <TIM_Base_SetConfig+0xb2>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a30      	ldr	r2, [pc, #192]	@ (8009f14 <TIM_Base_SetConfig+0x138>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d01b      	beq.n	8009e8e <TIM_Base_SetConfig+0xb2>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a2f      	ldr	r2, [pc, #188]	@ (8009f18 <TIM_Base_SetConfig+0x13c>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d017      	beq.n	8009e8e <TIM_Base_SetConfig+0xb2>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a2e      	ldr	r2, [pc, #184]	@ (8009f1c <TIM_Base_SetConfig+0x140>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d013      	beq.n	8009e8e <TIM_Base_SetConfig+0xb2>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a2d      	ldr	r2, [pc, #180]	@ (8009f20 <TIM_Base_SetConfig+0x144>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d00f      	beq.n	8009e8e <TIM_Base_SetConfig+0xb2>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a2c      	ldr	r2, [pc, #176]	@ (8009f24 <TIM_Base_SetConfig+0x148>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d00b      	beq.n	8009e8e <TIM_Base_SetConfig+0xb2>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a2b      	ldr	r2, [pc, #172]	@ (8009f28 <TIM_Base_SetConfig+0x14c>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d007      	beq.n	8009e8e <TIM_Base_SetConfig+0xb2>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a2a      	ldr	r2, [pc, #168]	@ (8009f2c <TIM_Base_SetConfig+0x150>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d003      	beq.n	8009e8e <TIM_Base_SetConfig+0xb2>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a29      	ldr	r2, [pc, #164]	@ (8009f30 <TIM_Base_SetConfig+0x154>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d108      	bne.n	8009ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	689a      	ldr	r2, [r3, #8]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a10      	ldr	r2, [pc, #64]	@ (8009f08 <TIM_Base_SetConfig+0x12c>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d003      	beq.n	8009ed4 <TIM_Base_SetConfig+0xf8>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a12      	ldr	r2, [pc, #72]	@ (8009f18 <TIM_Base_SetConfig+0x13c>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d103      	bne.n	8009edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	691a      	ldr	r2, [r3, #16]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d105      	bne.n	8009efa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	f023 0201 	bic.w	r2, r3, #1
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	611a      	str	r2, [r3, #16]
  }
}
 8009efa:	bf00      	nop
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	40010000 	.word	0x40010000
 8009f0c:	40000400 	.word	0x40000400
 8009f10:	40000800 	.word	0x40000800
 8009f14:	40000c00 	.word	0x40000c00
 8009f18:	40010400 	.word	0x40010400
 8009f1c:	40014000 	.word	0x40014000
 8009f20:	40014400 	.word	0x40014400
 8009f24:	40014800 	.word	0x40014800
 8009f28:	40001800 	.word	0x40001800
 8009f2c:	40001c00 	.word	0x40001c00
 8009f30:	40002000 	.word	0x40002000

08009f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6a1b      	ldr	r3, [r3, #32]
 8009f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6a1b      	ldr	r3, [r3, #32]
 8009f4a:	f023 0201 	bic.w	r2, r3, #1
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	011b      	lsls	r3, r3, #4
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f023 030a 	bic.w	r3, r3, #10
 8009f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	621a      	str	r2, [r3, #32]
}
 8009f86:	bf00      	nop
 8009f88:	371c      	adds	r7, #28
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b087      	sub	sp, #28
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6a1b      	ldr	r3, [r3, #32]
 8009fa8:	f023 0210 	bic.w	r2, r3, #16
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009fbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	031b      	lsls	r3, r3, #12
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009fce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	011b      	lsls	r3, r3, #4
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	621a      	str	r2, [r3, #32]
}
 8009fe6:	bf00      	nop
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b085      	sub	sp, #20
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4313      	orrs	r3, r2
 800a010:	f043 0307 	orr.w	r3, r3, #7
 800a014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	609a      	str	r2, [r3, #8]
}
 800a01c:	bf00      	nop
 800a01e:	3714      	adds	r7, #20
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
 800a034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	021a      	lsls	r2, r3, #8
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	431a      	orrs	r2, r3
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	4313      	orrs	r3, r2
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	4313      	orrs	r3, r2
 800a054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	609a      	str	r2, [r3, #8]
}
 800a05c:	bf00      	nop
 800a05e:	371c      	adds	r7, #28
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d101      	bne.n	800a080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a07c:	2302      	movs	r3, #2
 800a07e:	e05a      	b.n	800a136 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2202      	movs	r2, #2
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a21      	ldr	r2, [pc, #132]	@ (800a144 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d022      	beq.n	800a10a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0cc:	d01d      	beq.n	800a10a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a1d      	ldr	r2, [pc, #116]	@ (800a148 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d018      	beq.n	800a10a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a1b      	ldr	r2, [pc, #108]	@ (800a14c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d013      	beq.n	800a10a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a1a      	ldr	r2, [pc, #104]	@ (800a150 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d00e      	beq.n	800a10a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a18      	ldr	r2, [pc, #96]	@ (800a154 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d009      	beq.n	800a10a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a17      	ldr	r2, [pc, #92]	@ (800a158 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d004      	beq.n	800a10a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a15      	ldr	r2, [pc, #84]	@ (800a15c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d10c      	bne.n	800a124 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	4313      	orrs	r3, r2
 800a11a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	40010000 	.word	0x40010000
 800a148:	40000400 	.word	0x40000400
 800a14c:	40000800 	.word	0x40000800
 800a150:	40000c00 	.word	0x40000c00
 800a154:	40010400 	.word	0x40010400
 800a158:	40014000 	.word	0x40014000
 800a15c:	40001800 	.word	0x40001800

0800a160 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e042      	b.n	800a220 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d106      	bne.n	800a1b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7fd fbca 	bl	8007948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2224      	movs	r2, #36	@ 0x24
 800a1b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68da      	ldr	r2, [r3, #12]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a1ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fe55 	bl	800ae7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	691a      	ldr	r2, [r3, #16]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a1e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	695a      	ldr	r2, [r3, #20]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a1f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68da      	ldr	r2, [r3, #12]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2220      	movs	r2, #32
 800a20c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2220      	movs	r2, #32
 800a214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08a      	sub	sp, #40	@ 0x28
 800a22c:	af02      	add	r7, sp, #8
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	603b      	str	r3, [r7, #0]
 800a234:	4613      	mov	r3, r2
 800a236:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a238:	2300      	movs	r3, #0
 800a23a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a242:	b2db      	uxtb	r3, r3
 800a244:	2b20      	cmp	r3, #32
 800a246:	d175      	bne.n	800a334 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <HAL_UART_Transmit+0x2c>
 800a24e:	88fb      	ldrh	r3, [r7, #6]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e06e      	b.n	800a336 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2221      	movs	r2, #33	@ 0x21
 800a262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a266:	f7fd ff89 	bl	800817c <HAL_GetTick>
 800a26a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	88fa      	ldrh	r2, [r7, #6]
 800a270:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	88fa      	ldrh	r2, [r7, #6]
 800a276:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a280:	d108      	bne.n	800a294 <HAL_UART_Transmit+0x6c>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d104      	bne.n	800a294 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	e003      	b.n	800a29c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a298:	2300      	movs	r3, #0
 800a29a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a29c:	e02e      	b.n	800a2fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2180      	movs	r1, #128	@ 0x80
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 fbb7 	bl	800aa1c <UART_WaitOnFlagUntilTimeout>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d005      	beq.n	800a2c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e03a      	b.n	800a336 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10b      	bne.n	800a2de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	881b      	ldrh	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	3302      	adds	r3, #2
 800a2da:	61bb      	str	r3, [r7, #24]
 800a2dc:	e007      	b.n	800a2ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a300:	b29b      	uxth	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1cb      	bne.n	800a29e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2200      	movs	r2, #0
 800a30e:	2140      	movs	r1, #64	@ 0x40
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 fb83 	bl	800aa1c <UART_WaitOnFlagUntilTimeout>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d005      	beq.n	800a328 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2220      	movs	r2, #32
 800a320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e006      	b.n	800a336 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2220      	movs	r2, #32
 800a32c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	e000      	b.n	800a336 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a334:	2302      	movs	r3, #2
  }
}
 800a336:	4618      	mov	r0, r3
 800a338:	3720      	adds	r7, #32
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b08a      	sub	sp, #40	@ 0x28
 800a342:	af02      	add	r7, sp, #8
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	603b      	str	r3, [r7, #0]
 800a34a:	4613      	mov	r3, r2
 800a34c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a34e:	2300      	movs	r3, #0
 800a350:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b20      	cmp	r3, #32
 800a35c:	f040 8081 	bne.w	800a462 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d002      	beq.n	800a36c <HAL_UART_Receive+0x2e>
 800a366:	88fb      	ldrh	r3, [r7, #6]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e079      	b.n	800a464 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2222      	movs	r2, #34	@ 0x22
 800a37a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a384:	f7fd fefa 	bl	800817c <HAL_GetTick>
 800a388:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	88fa      	ldrh	r2, [r7, #6]
 800a38e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	88fa      	ldrh	r2, [r7, #6]
 800a394:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a39e:	d108      	bne.n	800a3b2 <HAL_UART_Receive+0x74>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d104      	bne.n	800a3b2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	61bb      	str	r3, [r7, #24]
 800a3b0:	e003      	b.n	800a3ba <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a3ba:	e047      	b.n	800a44c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2120      	movs	r1, #32
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 fb28 	bl	800aa1c <UART_WaitOnFlagUntilTimeout>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d005      	beq.n	800a3de <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2220      	movs	r2, #32
 800a3d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e042      	b.n	800a464 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10c      	bne.n	800a3fe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	3302      	adds	r3, #2
 800a3fa:	61bb      	str	r3, [r7, #24]
 800a3fc:	e01f      	b.n	800a43e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a406:	d007      	beq.n	800a418 <HAL_UART_Receive+0xda>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10a      	bne.n	800a426 <HAL_UART_Receive+0xe8>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d106      	bne.n	800a426 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	b2da      	uxtb	r2, r3
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	701a      	strb	r2, [r3, #0]
 800a424:	e008      	b.n	800a438 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a432:	b2da      	uxtb	r2, r3
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	3301      	adds	r3, #1
 800a43c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a442:	b29b      	uxth	r3, r3
 800a444:	3b01      	subs	r3, #1
 800a446:	b29a      	uxth	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a450:	b29b      	uxth	r3, r3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1b2      	bne.n	800a3bc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2220      	movs	r2, #32
 800a45a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	e000      	b.n	800a464 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a462:	2302      	movs	r3, #2
  }
}
 800a464:	4618      	mov	r0, r3
 800a466:	3720      	adds	r7, #32
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	4613      	mov	r3, r2
 800a478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b20      	cmp	r3, #32
 800a484:	d112      	bne.n	800a4ac <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d002      	beq.n	800a492 <HAL_UART_Receive_IT+0x26>
 800a48c:	88fb      	ldrh	r3, [r7, #6]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e00b      	b.n	800a4ae <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a49c:	88fb      	ldrh	r3, [r7, #6]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 fb13 	bl	800aace <UART_Start_Receive_IT>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	e000      	b.n	800a4ae <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a4ac:	2302      	movs	r3, #2
  }
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b0ba      	sub	sp, #232	@ 0xe8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a4ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a4f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10f      	bne.n	800a51e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a502:	f003 0320 	and.w	r3, r3, #32
 800a506:	2b00      	cmp	r3, #0
 800a508:	d009      	beq.n	800a51e <HAL_UART_IRQHandler+0x66>
 800a50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a50e:	f003 0320 	and.w	r3, r3, #32
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fbf2 	bl	800ad00 <UART_Receive_IT>
      return;
 800a51c:	e25b      	b.n	800a9d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a51e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a522:	2b00      	cmp	r3, #0
 800a524:	f000 80de 	beq.w	800a6e4 <HAL_UART_IRQHandler+0x22c>
 800a528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	2b00      	cmp	r3, #0
 800a532:	d106      	bne.n	800a542 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a538:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 80d1 	beq.w	800a6e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00b      	beq.n	800a566 <HAL_UART_IRQHandler+0xae>
 800a54e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a556:	2b00      	cmp	r3, #0
 800a558:	d005      	beq.n	800a566 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a55e:	f043 0201 	orr.w	r2, r3, #1
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a56a:	f003 0304 	and.w	r3, r3, #4
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <HAL_UART_IRQHandler+0xd2>
 800a572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d005      	beq.n	800a58a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a582:	f043 0202 	orr.w	r2, r3, #2
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a58a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00b      	beq.n	800a5ae <HAL_UART_IRQHandler+0xf6>
 800a596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d005      	beq.n	800a5ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5a6:	f043 0204 	orr.w	r2, r3, #4
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5b2:	f003 0308 	and.w	r3, r3, #8
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d011      	beq.n	800a5de <HAL_UART_IRQHandler+0x126>
 800a5ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d105      	bne.n	800a5d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a5c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5ca:	f003 0301 	and.w	r3, r3, #1
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d005      	beq.n	800a5de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5d6:	f043 0208 	orr.w	r2, r3, #8
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 81f2 	beq.w	800a9cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5ec:	f003 0320 	and.w	r3, r3, #32
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d008      	beq.n	800a606 <HAL_UART_IRQHandler+0x14e>
 800a5f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5f8:	f003 0320 	and.w	r3, r3, #32
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fb7d 	bl	800ad00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a610:	2b40      	cmp	r3, #64	@ 0x40
 800a612:	bf0c      	ite	eq
 800a614:	2301      	moveq	r3, #1
 800a616:	2300      	movne	r3, #0
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a622:	f003 0308 	and.w	r3, r3, #8
 800a626:	2b00      	cmp	r3, #0
 800a628:	d103      	bne.n	800a632 <HAL_UART_IRQHandler+0x17a>
 800a62a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d04f      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fa85 	bl	800ab42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a642:	2b40      	cmp	r3, #64	@ 0x40
 800a644:	d141      	bne.n	800a6ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	3314      	adds	r3, #20
 800a64c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a650:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a654:	e853 3f00 	ldrex	r3, [r3]
 800a658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a65c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3314      	adds	r3, #20
 800a66e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a672:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a67e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a68a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1d9      	bne.n	800a646 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d013      	beq.n	800a6c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a69e:	4a7e      	ldr	r2, [pc, #504]	@ (800a898 <HAL_UART_IRQHandler+0x3e0>)
 800a6a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fd ff19 	bl	80084de <HAL_DMA_Abort_IT>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d016      	beq.n	800a6e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a6bc:	4610      	mov	r0, r2
 800a6be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c0:	e00e      	b.n	800a6e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f994 	bl	800a9f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c8:	e00a      	b.n	800a6e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f990 	bl	800a9f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d0:	e006      	b.n	800a6e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f98c 	bl	800a9f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a6de:	e175      	b.n	800a9cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e0:	bf00      	nop
    return;
 800a6e2:	e173      	b.n	800a9cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	f040 814f 	bne.w	800a98c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6f2:	f003 0310 	and.w	r3, r3, #16
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 8148 	beq.w	800a98c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a700:	f003 0310 	and.w	r3, r3, #16
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 8141 	beq.w	800a98c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a70a:	2300      	movs	r3, #0
 800a70c:	60bb      	str	r3, [r7, #8]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	60bb      	str	r3, [r7, #8]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	60bb      	str	r3, [r7, #8]
 800a71e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a72a:	2b40      	cmp	r3, #64	@ 0x40
 800a72c:	f040 80b6 	bne.w	800a89c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a73c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 8145 	beq.w	800a9d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a74a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a74e:	429a      	cmp	r2, r3
 800a750:	f080 813e 	bcs.w	800a9d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a75a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a766:	f000 8088 	beq.w	800a87a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	330c      	adds	r3, #12
 800a770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a778:	e853 3f00 	ldrex	r3, [r3]
 800a77c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	330c      	adds	r3, #12
 800a792:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a79a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a7a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a7a6:	e841 2300 	strex	r3, r2, [r1]
 800a7aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a7ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1d9      	bne.n	800a76a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3314      	adds	r3, #20
 800a7bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a7c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7c8:	f023 0301 	bic.w	r3, r3, #1
 800a7cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3314      	adds	r3, #20
 800a7d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a7da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a7de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a7e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a7ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e1      	bne.n	800a7b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3314      	adds	r3, #20
 800a7f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	3314      	adds	r3, #20
 800a812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a816:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a818:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a81c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e3      	bne.n	800a7f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2220      	movs	r2, #32
 800a82e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	330c      	adds	r3, #12
 800a83e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a842:	e853 3f00 	ldrex	r3, [r3]
 800a846:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a84a:	f023 0310 	bic.w	r3, r3, #16
 800a84e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	330c      	adds	r3, #12
 800a858:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a85c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a85e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a862:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a86a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e3      	bne.n	800a838 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a874:	4618      	mov	r0, r3
 800a876:	f7fd fdc2 	bl	80083fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2202      	movs	r2, #2
 800a87e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a888:	b29b      	uxth	r3, r3
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f8b7 	bl	800aa04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a896:	e09b      	b.n	800a9d0 <HAL_UART_IRQHandler+0x518>
 800a898:	0800ac09 	.word	0x0800ac09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 808e 	beq.w	800a9d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a8b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f000 8089 	beq.w	800a9d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	330c      	adds	r3, #12
 800a8c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8cc:	e853 3f00 	ldrex	r3, [r3]
 800a8d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	330c      	adds	r3, #12
 800a8e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a8e6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a8e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e3      	bne.n	800a8c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	3314      	adds	r3, #20
 800a900:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a904:	e853 3f00 	ldrex	r3, [r3]
 800a908:	623b      	str	r3, [r7, #32]
   return(result);
 800a90a:	6a3b      	ldr	r3, [r7, #32]
 800a90c:	f023 0301 	bic.w	r3, r3, #1
 800a910:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3314      	adds	r3, #20
 800a91a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a91e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a920:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a926:	e841 2300 	strex	r3, r2, [r1]
 800a92a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1e3      	bne.n	800a8fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2220      	movs	r2, #32
 800a936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	330c      	adds	r3, #12
 800a946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	e853 3f00 	ldrex	r3, [r3]
 800a94e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f023 0310 	bic.w	r3, r3, #16
 800a956:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	330c      	adds	r3, #12
 800a960:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a964:	61fa      	str	r2, [r7, #28]
 800a966:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a968:	69b9      	ldr	r1, [r7, #24]
 800a96a:	69fa      	ldr	r2, [r7, #28]
 800a96c:	e841 2300 	strex	r3, r2, [r1]
 800a970:	617b      	str	r3, [r7, #20]
   return(result);
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e3      	bne.n	800a940 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2202      	movs	r2, #2
 800a97c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a97e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 f83d 	bl	800aa04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a98a:	e023      	b.n	800a9d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a994:	2b00      	cmp	r3, #0
 800a996:	d009      	beq.n	800a9ac <HAL_UART_IRQHandler+0x4f4>
 800a998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a99c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d003      	beq.n	800a9ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f943 	bl	800ac30 <UART_Transmit_IT>
    return;
 800a9aa:	e014      	b.n	800a9d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00e      	beq.n	800a9d6 <HAL_UART_IRQHandler+0x51e>
 800a9b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d008      	beq.n	800a9d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f983 	bl	800acd0 <UART_EndTransmit_IT>
    return;
 800a9ca:	e004      	b.n	800a9d6 <HAL_UART_IRQHandler+0x51e>
    return;
 800a9cc:	bf00      	nop
 800a9ce:	e002      	b.n	800a9d6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a9d0:	bf00      	nop
 800a9d2:	e000      	b.n	800a9d6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a9d4:	bf00      	nop
  }
}
 800a9d6:	37e8      	adds	r7, #232	@ 0xe8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	603b      	str	r3, [r7, #0]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa2c:	e03b      	b.n	800aaa6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa34:	d037      	beq.n	800aaa6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa36:	f7fd fba1 	bl	800817c <HAL_GetTick>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	6a3a      	ldr	r2, [r7, #32]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d302      	bcc.n	800aa4c <UART_WaitOnFlagUntilTimeout+0x30>
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d101      	bne.n	800aa50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e03a      	b.n	800aac6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	f003 0304 	and.w	r3, r3, #4
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d023      	beq.n	800aaa6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2b80      	cmp	r3, #128	@ 0x80
 800aa62:	d020      	beq.n	800aaa6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b40      	cmp	r3, #64	@ 0x40
 800aa68:	d01d      	beq.n	800aaa6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0308 	and.w	r3, r3, #8
 800aa74:	2b08      	cmp	r3, #8
 800aa76:	d116      	bne.n	800aaa6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800aa78:	2300      	movs	r3, #0
 800aa7a:	617b      	str	r3, [r7, #20]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	617b      	str	r3, [r7, #20]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	617b      	str	r3, [r7, #20]
 800aa8c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f000 f857 	bl	800ab42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2208      	movs	r2, #8
 800aa98:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e00f      	b.n	800aac6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	4013      	ands	r3, r2
 800aab0:	68ba      	ldr	r2, [r7, #8]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	bf0c      	ite	eq
 800aab6:	2301      	moveq	r3, #1
 800aab8:	2300      	movne	r3, #0
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	461a      	mov	r2, r3
 800aabe:	79fb      	ldrb	r3, [r7, #7]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d0b4      	beq.n	800aa2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3718      	adds	r7, #24
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aace:	b480      	push	{r7}
 800aad0:	b085      	sub	sp, #20
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	60f8      	str	r0, [r7, #12]
 800aad6:	60b9      	str	r1, [r7, #8]
 800aad8:	4613      	mov	r3, r2
 800aada:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	88fa      	ldrh	r2, [r7, #6]
 800aae6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	88fa      	ldrh	r2, [r7, #6]
 800aaec:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2222      	movs	r2, #34	@ 0x22
 800aaf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d007      	beq.n	800ab14 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68da      	ldr	r2, [r3, #12]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab12:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	695a      	ldr	r2, [r3, #20]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f042 0201 	orr.w	r2, r2, #1
 800ab22:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68da      	ldr	r2, [r3, #12]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f042 0220 	orr.w	r2, r2, #32
 800ab32:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab42:	b480      	push	{r7}
 800ab44:	b095      	sub	sp, #84	@ 0x54
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	330c      	adds	r3, #12
 800ab50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab54:	e853 3f00 	ldrex	r3, [r3]
 800ab58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	330c      	adds	r3, #12
 800ab68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab6a:	643a      	str	r2, [r7, #64]	@ 0x40
 800ab6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab72:	e841 2300 	strex	r3, r2, [r1]
 800ab76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1e5      	bne.n	800ab4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3314      	adds	r3, #20
 800ab84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	e853 3f00 	ldrex	r3, [r3]
 800ab8c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	f023 0301 	bic.w	r3, r3, #1
 800ab94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3314      	adds	r3, #20
 800ab9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aba0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aba6:	e841 2300 	strex	r3, r2, [r1]
 800abaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1e5      	bne.n	800ab7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d119      	bne.n	800abee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	330c      	adds	r3, #12
 800abc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	e853 3f00 	ldrex	r3, [r3]
 800abc8:	60bb      	str	r3, [r7, #8]
   return(result);
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	f023 0310 	bic.w	r3, r3, #16
 800abd0:	647b      	str	r3, [r7, #68]	@ 0x44
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	330c      	adds	r3, #12
 800abd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abda:	61ba      	str	r2, [r7, #24]
 800abdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abde:	6979      	ldr	r1, [r7, #20]
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	e841 2300 	strex	r3, r2, [r1]
 800abe6:	613b      	str	r3, [r7, #16]
   return(result);
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1e5      	bne.n	800abba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2220      	movs	r2, #32
 800abf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800abfc:	bf00      	nop
 800abfe:	3754      	adds	r7, #84	@ 0x54
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f7ff fee4 	bl	800a9f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac28:	bf00      	nop
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	2b21      	cmp	r3, #33	@ 0x21
 800ac42:	d13e      	bne.n	800acc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac4c:	d114      	bne.n	800ac78 <UART_Transmit_IT+0x48>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d110      	bne.n	800ac78 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	461a      	mov	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a1b      	ldr	r3, [r3, #32]
 800ac70:	1c9a      	adds	r2, r3, #2
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	621a      	str	r2, [r3, #32]
 800ac76:	e008      	b.n	800ac8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	1c59      	adds	r1, r3, #1
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	6211      	str	r1, [r2, #32]
 800ac82:	781a      	ldrb	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	3b01      	subs	r3, #1
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	4619      	mov	r1, r3
 800ac98:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10f      	bne.n	800acbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68da      	ldr	r2, [r3, #12]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800acac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68da      	ldr	r2, [r3, #12]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	e000      	b.n	800acc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800acc2:	2302      	movs	r3, #2
  }
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68da      	ldr	r2, [r3, #12]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ace6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2220      	movs	r2, #32
 800acec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff fe73 	bl	800a9dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08c      	sub	sp, #48	@ 0x30
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	2b22      	cmp	r3, #34	@ 0x22
 800ad12:	f040 80ae 	bne.w	800ae72 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad1e:	d117      	bne.n	800ad50 <UART_Receive_IT+0x50>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d113      	bne.n	800ad50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad30:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad48:	1c9a      	adds	r2, r3, #2
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	629a      	str	r2, [r3, #40]	@ 0x28
 800ad4e:	e026      	b.n	800ad9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad62:	d007      	beq.n	800ad74 <UART_Receive_IT+0x74>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10a      	bne.n	800ad82 <UART_Receive_IT+0x82>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d106      	bne.n	800ad82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad7e:	701a      	strb	r2, [r3, #0]
 800ad80:	e008      	b.n	800ad94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad98:	1c5a      	adds	r2, r3, #1
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	3b01      	subs	r3, #1
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	4619      	mov	r1, r3
 800adac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d15d      	bne.n	800ae6e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68da      	ldr	r2, [r3, #12]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f022 0220 	bic.w	r2, r2, #32
 800adc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68da      	ldr	r2, [r3, #12]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800add0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	695a      	ldr	r2, [r3, #20]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f022 0201 	bic.w	r2, r2, #1
 800ade0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2220      	movs	r2, #32
 800ade6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d135      	bne.n	800ae64 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	330c      	adds	r3, #12
 800ae04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	e853 3f00 	ldrex	r3, [r3]
 800ae0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f023 0310 	bic.w	r3, r3, #16
 800ae14:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	330c      	adds	r3, #12
 800ae1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae1e:	623a      	str	r2, [r7, #32]
 800ae20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae22:	69f9      	ldr	r1, [r7, #28]
 800ae24:	6a3a      	ldr	r2, [r7, #32]
 800ae26:	e841 2300 	strex	r3, r2, [r1]
 800ae2a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1e5      	bne.n	800adfe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f003 0310 	and.w	r3, r3, #16
 800ae3c:	2b10      	cmp	r3, #16
 800ae3e:	d10a      	bne.n	800ae56 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae40:	2300      	movs	r3, #0
 800ae42:	60fb      	str	r3, [r7, #12]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	60fb      	str	r3, [r7, #12]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7ff fdd1 	bl	800aa04 <HAL_UARTEx_RxEventCallback>
 800ae62:	e002      	b.n	800ae6a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7fb fb9f 	bl	80065a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e002      	b.n	800ae74 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e000      	b.n	800ae74 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ae72:	2302      	movs	r3, #2
  }
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3730      	adds	r7, #48	@ 0x30
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae80:	b0c0      	sub	sp, #256	@ 0x100
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ae94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae98:	68d9      	ldr	r1, [r3, #12]
 800ae9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	ea40 0301 	orr.w	r3, r0, r1
 800aea4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeaa:	689a      	ldr	r2, [r3, #8]
 800aeac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeb8:	695b      	ldr	r3, [r3, #20]
 800aeba:	431a      	orrs	r2, r3
 800aebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aec0:	69db      	ldr	r3, [r3, #28]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aed4:	f021 010c 	bic.w	r1, r1, #12
 800aed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aee2:	430b      	orrs	r3, r1
 800aee4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	695b      	ldr	r3, [r3, #20]
 800aeee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800aef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aef6:	6999      	ldr	r1, [r3, #24]
 800aef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	ea40 0301 	orr.w	r3, r0, r1
 800af02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	4b8f      	ldr	r3, [pc, #572]	@ (800b148 <UART_SetConfig+0x2cc>)
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d005      	beq.n	800af1c <UART_SetConfig+0xa0>
 800af10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	4b8d      	ldr	r3, [pc, #564]	@ (800b14c <UART_SetConfig+0x2d0>)
 800af18:	429a      	cmp	r2, r3
 800af1a:	d104      	bne.n	800af26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af1c:	f7fe f954 	bl	80091c8 <HAL_RCC_GetPCLK2Freq>
 800af20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800af24:	e003      	b.n	800af2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af26:	f7fe f93b 	bl	80091a0 <HAL_RCC_GetPCLK1Freq>
 800af2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af32:	69db      	ldr	r3, [r3, #28]
 800af34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af38:	f040 810c 	bne.w	800b154 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af40:	2200      	movs	r2, #0
 800af42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800af46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800af4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800af4e:	4622      	mov	r2, r4
 800af50:	462b      	mov	r3, r5
 800af52:	1891      	adds	r1, r2, r2
 800af54:	65b9      	str	r1, [r7, #88]	@ 0x58
 800af56:	415b      	adcs	r3, r3
 800af58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800af5e:	4621      	mov	r1, r4
 800af60:	eb12 0801 	adds.w	r8, r2, r1
 800af64:	4629      	mov	r1, r5
 800af66:	eb43 0901 	adc.w	r9, r3, r1
 800af6a:	f04f 0200 	mov.w	r2, #0
 800af6e:	f04f 0300 	mov.w	r3, #0
 800af72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af7e:	4690      	mov	r8, r2
 800af80:	4699      	mov	r9, r3
 800af82:	4623      	mov	r3, r4
 800af84:	eb18 0303 	adds.w	r3, r8, r3
 800af88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800af8c:	462b      	mov	r3, r5
 800af8e:	eb49 0303 	adc.w	r3, r9, r3
 800af92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800af96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800afa2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800afa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800afaa:	460b      	mov	r3, r1
 800afac:	18db      	adds	r3, r3, r3
 800afae:	653b      	str	r3, [r7, #80]	@ 0x50
 800afb0:	4613      	mov	r3, r2
 800afb2:	eb42 0303 	adc.w	r3, r2, r3
 800afb6:	657b      	str	r3, [r7, #84]	@ 0x54
 800afb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800afbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800afc0:	f7f5 fe0c 	bl	8000bdc <__aeabi_uldivmod>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4b61      	ldr	r3, [pc, #388]	@ (800b150 <UART_SetConfig+0x2d4>)
 800afca:	fba3 2302 	umull	r2, r3, r3, r2
 800afce:	095b      	lsrs	r3, r3, #5
 800afd0:	011c      	lsls	r4, r3, #4
 800afd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800afd6:	2200      	movs	r2, #0
 800afd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800afdc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800afe0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800afe4:	4642      	mov	r2, r8
 800afe6:	464b      	mov	r3, r9
 800afe8:	1891      	adds	r1, r2, r2
 800afea:	64b9      	str	r1, [r7, #72]	@ 0x48
 800afec:	415b      	adcs	r3, r3
 800afee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aff0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800aff4:	4641      	mov	r1, r8
 800aff6:	eb12 0a01 	adds.w	sl, r2, r1
 800affa:	4649      	mov	r1, r9
 800affc:	eb43 0b01 	adc.w	fp, r3, r1
 800b000:	f04f 0200 	mov.w	r2, #0
 800b004:	f04f 0300 	mov.w	r3, #0
 800b008:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b00c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b010:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b014:	4692      	mov	sl, r2
 800b016:	469b      	mov	fp, r3
 800b018:	4643      	mov	r3, r8
 800b01a:	eb1a 0303 	adds.w	r3, sl, r3
 800b01e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b022:	464b      	mov	r3, r9
 800b024:	eb4b 0303 	adc.w	r3, fp, r3
 800b028:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b02c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b038:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b03c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b040:	460b      	mov	r3, r1
 800b042:	18db      	adds	r3, r3, r3
 800b044:	643b      	str	r3, [r7, #64]	@ 0x40
 800b046:	4613      	mov	r3, r2
 800b048:	eb42 0303 	adc.w	r3, r2, r3
 800b04c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b04e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b052:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b056:	f7f5 fdc1 	bl	8000bdc <__aeabi_uldivmod>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	4611      	mov	r1, r2
 800b060:	4b3b      	ldr	r3, [pc, #236]	@ (800b150 <UART_SetConfig+0x2d4>)
 800b062:	fba3 2301 	umull	r2, r3, r3, r1
 800b066:	095b      	lsrs	r3, r3, #5
 800b068:	2264      	movs	r2, #100	@ 0x64
 800b06a:	fb02 f303 	mul.w	r3, r2, r3
 800b06e:	1acb      	subs	r3, r1, r3
 800b070:	00db      	lsls	r3, r3, #3
 800b072:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b076:	4b36      	ldr	r3, [pc, #216]	@ (800b150 <UART_SetConfig+0x2d4>)
 800b078:	fba3 2302 	umull	r2, r3, r3, r2
 800b07c:	095b      	lsrs	r3, r3, #5
 800b07e:	005b      	lsls	r3, r3, #1
 800b080:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b084:	441c      	add	r4, r3
 800b086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b08a:	2200      	movs	r2, #0
 800b08c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b090:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b094:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b098:	4642      	mov	r2, r8
 800b09a:	464b      	mov	r3, r9
 800b09c:	1891      	adds	r1, r2, r2
 800b09e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b0a0:	415b      	adcs	r3, r3
 800b0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b0a8:	4641      	mov	r1, r8
 800b0aa:	1851      	adds	r1, r2, r1
 800b0ac:	6339      	str	r1, [r7, #48]	@ 0x30
 800b0ae:	4649      	mov	r1, r9
 800b0b0:	414b      	adcs	r3, r1
 800b0b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0b4:	f04f 0200 	mov.w	r2, #0
 800b0b8:	f04f 0300 	mov.w	r3, #0
 800b0bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b0c0:	4659      	mov	r1, fp
 800b0c2:	00cb      	lsls	r3, r1, #3
 800b0c4:	4651      	mov	r1, sl
 800b0c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0ca:	4651      	mov	r1, sl
 800b0cc:	00ca      	lsls	r2, r1, #3
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	4642      	mov	r2, r8
 800b0d6:	189b      	adds	r3, r3, r2
 800b0d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b0dc:	464b      	mov	r3, r9
 800b0de:	460a      	mov	r2, r1
 800b0e0:	eb42 0303 	adc.w	r3, r2, r3
 800b0e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b0f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b0f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	18db      	adds	r3, r3, r3
 800b100:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b102:	4613      	mov	r3, r2
 800b104:	eb42 0303 	adc.w	r3, r2, r3
 800b108:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b10a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b10e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b112:	f7f5 fd63 	bl	8000bdc <__aeabi_uldivmod>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4b0d      	ldr	r3, [pc, #52]	@ (800b150 <UART_SetConfig+0x2d4>)
 800b11c:	fba3 1302 	umull	r1, r3, r3, r2
 800b120:	095b      	lsrs	r3, r3, #5
 800b122:	2164      	movs	r1, #100	@ 0x64
 800b124:	fb01 f303 	mul.w	r3, r1, r3
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	00db      	lsls	r3, r3, #3
 800b12c:	3332      	adds	r3, #50	@ 0x32
 800b12e:	4a08      	ldr	r2, [pc, #32]	@ (800b150 <UART_SetConfig+0x2d4>)
 800b130:	fba2 2303 	umull	r2, r3, r2, r3
 800b134:	095b      	lsrs	r3, r3, #5
 800b136:	f003 0207 	and.w	r2, r3, #7
 800b13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4422      	add	r2, r4
 800b142:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b144:	e106      	b.n	800b354 <UART_SetConfig+0x4d8>
 800b146:	bf00      	nop
 800b148:	40011000 	.word	0x40011000
 800b14c:	40011400 	.word	0x40011400
 800b150:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b158:	2200      	movs	r2, #0
 800b15a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b15e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b162:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b166:	4642      	mov	r2, r8
 800b168:	464b      	mov	r3, r9
 800b16a:	1891      	adds	r1, r2, r2
 800b16c:	6239      	str	r1, [r7, #32]
 800b16e:	415b      	adcs	r3, r3
 800b170:	627b      	str	r3, [r7, #36]	@ 0x24
 800b172:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b176:	4641      	mov	r1, r8
 800b178:	1854      	adds	r4, r2, r1
 800b17a:	4649      	mov	r1, r9
 800b17c:	eb43 0501 	adc.w	r5, r3, r1
 800b180:	f04f 0200 	mov.w	r2, #0
 800b184:	f04f 0300 	mov.w	r3, #0
 800b188:	00eb      	lsls	r3, r5, #3
 800b18a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b18e:	00e2      	lsls	r2, r4, #3
 800b190:	4614      	mov	r4, r2
 800b192:	461d      	mov	r5, r3
 800b194:	4643      	mov	r3, r8
 800b196:	18e3      	adds	r3, r4, r3
 800b198:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b19c:	464b      	mov	r3, r9
 800b19e:	eb45 0303 	adc.w	r3, r5, r3
 800b1a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b1a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b1b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b1b6:	f04f 0200 	mov.w	r2, #0
 800b1ba:	f04f 0300 	mov.w	r3, #0
 800b1be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b1c2:	4629      	mov	r1, r5
 800b1c4:	008b      	lsls	r3, r1, #2
 800b1c6:	4621      	mov	r1, r4
 800b1c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	008a      	lsls	r2, r1, #2
 800b1d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b1d4:	f7f5 fd02 	bl	8000bdc <__aeabi_uldivmod>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4b60      	ldr	r3, [pc, #384]	@ (800b360 <UART_SetConfig+0x4e4>)
 800b1de:	fba3 2302 	umull	r2, r3, r3, r2
 800b1e2:	095b      	lsrs	r3, r3, #5
 800b1e4:	011c      	lsls	r4, r3, #4
 800b1e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b1f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b1f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b1f8:	4642      	mov	r2, r8
 800b1fa:	464b      	mov	r3, r9
 800b1fc:	1891      	adds	r1, r2, r2
 800b1fe:	61b9      	str	r1, [r7, #24]
 800b200:	415b      	adcs	r3, r3
 800b202:	61fb      	str	r3, [r7, #28]
 800b204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b208:	4641      	mov	r1, r8
 800b20a:	1851      	adds	r1, r2, r1
 800b20c:	6139      	str	r1, [r7, #16]
 800b20e:	4649      	mov	r1, r9
 800b210:	414b      	adcs	r3, r1
 800b212:	617b      	str	r3, [r7, #20]
 800b214:	f04f 0200 	mov.w	r2, #0
 800b218:	f04f 0300 	mov.w	r3, #0
 800b21c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b220:	4659      	mov	r1, fp
 800b222:	00cb      	lsls	r3, r1, #3
 800b224:	4651      	mov	r1, sl
 800b226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b22a:	4651      	mov	r1, sl
 800b22c:	00ca      	lsls	r2, r1, #3
 800b22e:	4610      	mov	r0, r2
 800b230:	4619      	mov	r1, r3
 800b232:	4603      	mov	r3, r0
 800b234:	4642      	mov	r2, r8
 800b236:	189b      	adds	r3, r3, r2
 800b238:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b23c:	464b      	mov	r3, r9
 800b23e:	460a      	mov	r2, r1
 800b240:	eb42 0303 	adc.w	r3, r2, r3
 800b244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b252:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b254:	f04f 0200 	mov.w	r2, #0
 800b258:	f04f 0300 	mov.w	r3, #0
 800b25c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b260:	4649      	mov	r1, r9
 800b262:	008b      	lsls	r3, r1, #2
 800b264:	4641      	mov	r1, r8
 800b266:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b26a:	4641      	mov	r1, r8
 800b26c:	008a      	lsls	r2, r1, #2
 800b26e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b272:	f7f5 fcb3 	bl	8000bdc <__aeabi_uldivmod>
 800b276:	4602      	mov	r2, r0
 800b278:	460b      	mov	r3, r1
 800b27a:	4611      	mov	r1, r2
 800b27c:	4b38      	ldr	r3, [pc, #224]	@ (800b360 <UART_SetConfig+0x4e4>)
 800b27e:	fba3 2301 	umull	r2, r3, r3, r1
 800b282:	095b      	lsrs	r3, r3, #5
 800b284:	2264      	movs	r2, #100	@ 0x64
 800b286:	fb02 f303 	mul.w	r3, r2, r3
 800b28a:	1acb      	subs	r3, r1, r3
 800b28c:	011b      	lsls	r3, r3, #4
 800b28e:	3332      	adds	r3, #50	@ 0x32
 800b290:	4a33      	ldr	r2, [pc, #204]	@ (800b360 <UART_SetConfig+0x4e4>)
 800b292:	fba2 2303 	umull	r2, r3, r2, r3
 800b296:	095b      	lsrs	r3, r3, #5
 800b298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b29c:	441c      	add	r4, r3
 800b29e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	673b      	str	r3, [r7, #112]	@ 0x70
 800b2a6:	677a      	str	r2, [r7, #116]	@ 0x74
 800b2a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b2ac:	4642      	mov	r2, r8
 800b2ae:	464b      	mov	r3, r9
 800b2b0:	1891      	adds	r1, r2, r2
 800b2b2:	60b9      	str	r1, [r7, #8]
 800b2b4:	415b      	adcs	r3, r3
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2bc:	4641      	mov	r1, r8
 800b2be:	1851      	adds	r1, r2, r1
 800b2c0:	6039      	str	r1, [r7, #0]
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	414b      	adcs	r3, r1
 800b2c6:	607b      	str	r3, [r7, #4]
 800b2c8:	f04f 0200 	mov.w	r2, #0
 800b2cc:	f04f 0300 	mov.w	r3, #0
 800b2d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b2d4:	4659      	mov	r1, fp
 800b2d6:	00cb      	lsls	r3, r1, #3
 800b2d8:	4651      	mov	r1, sl
 800b2da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2de:	4651      	mov	r1, sl
 800b2e0:	00ca      	lsls	r2, r1, #3
 800b2e2:	4610      	mov	r0, r2
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	4642      	mov	r2, r8
 800b2ea:	189b      	adds	r3, r3, r2
 800b2ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b2ee:	464b      	mov	r3, r9
 800b2f0:	460a      	mov	r2, r1
 800b2f2:	eb42 0303 	adc.w	r3, r2, r3
 800b2f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b2f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	663b      	str	r3, [r7, #96]	@ 0x60
 800b302:	667a      	str	r2, [r7, #100]	@ 0x64
 800b304:	f04f 0200 	mov.w	r2, #0
 800b308:	f04f 0300 	mov.w	r3, #0
 800b30c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b310:	4649      	mov	r1, r9
 800b312:	008b      	lsls	r3, r1, #2
 800b314:	4641      	mov	r1, r8
 800b316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b31a:	4641      	mov	r1, r8
 800b31c:	008a      	lsls	r2, r1, #2
 800b31e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b322:	f7f5 fc5b 	bl	8000bdc <__aeabi_uldivmod>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	4b0d      	ldr	r3, [pc, #52]	@ (800b360 <UART_SetConfig+0x4e4>)
 800b32c:	fba3 1302 	umull	r1, r3, r3, r2
 800b330:	095b      	lsrs	r3, r3, #5
 800b332:	2164      	movs	r1, #100	@ 0x64
 800b334:	fb01 f303 	mul.w	r3, r1, r3
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	011b      	lsls	r3, r3, #4
 800b33c:	3332      	adds	r3, #50	@ 0x32
 800b33e:	4a08      	ldr	r2, [pc, #32]	@ (800b360 <UART_SetConfig+0x4e4>)
 800b340:	fba2 2303 	umull	r2, r3, r2, r3
 800b344:	095b      	lsrs	r3, r3, #5
 800b346:	f003 020f 	and.w	r2, r3, #15
 800b34a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4422      	add	r2, r4
 800b352:	609a      	str	r2, [r3, #8]
}
 800b354:	bf00      	nop
 800b356:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b35a:	46bd      	mov	sp, r7
 800b35c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b360:	51eb851f 	.word	0x51eb851f

0800b364 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800b364:	b480      	push	{r7}
 800b366:	b087      	sub	sp, #28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	6812      	ldr	r2, [r2, #0]
 800b37c:	f023 0101 	bic.w	r1, r3, #1
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	2b08      	cmp	r3, #8
 800b38c:	d102      	bne.n	800b394 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b38e:	2340      	movs	r3, #64	@ 0x40
 800b390:	617b      	str	r3, [r7, #20]
 800b392:	e001      	b.n	800b398 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b3a4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b3aa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b3b0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b3b6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800b3bc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800b3c2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800b3c8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800b3ce:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800b3d4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	699b      	ldr	r3, [r3, #24]
 800b3e2:	693a      	ldr	r2, [r7, #16]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ec:	693a      	ldr	r2, [r7, #16]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800b3f2:	4b10      	ldr	r3, [pc, #64]	@ (800b434 <FSMC_NORSRAM_Init+0xd0>)
 800b3f4:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b3fc:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800b404:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	43db      	mvns	r3, r3
 800b414:	ea02 0103 	and.w	r1, r2, r3
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	4319      	orrs	r1, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	371c      	adds	r7, #28
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	0008fb7f 	.word	0x0008fb7f

0800b438 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	1c5a      	adds	r2, r3, #1
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44e:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	011b      	lsls	r3, r3, #4
 800b45c:	431a      	orrs	r2, r3
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	021b      	lsls	r3, r3, #8
 800b464:	431a      	orrs	r2, r3
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	041b      	lsls	r3, r3, #16
 800b46c:	431a      	orrs	r2, r3
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	3b01      	subs	r3, #1
 800b474:	051b      	lsls	r3, r3, #20
 800b476:	431a      	orrs	r2, r3
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	695b      	ldr	r3, [r3, #20]
 800b47c:	3b02      	subs	r3, #2
 800b47e:	061b      	lsls	r3, r3, #24
 800b480:	431a      	orrs	r2, r3
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	4313      	orrs	r3, r2
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	3201      	adds	r2, #1
 800b48c:	4319      	orrs	r1, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
	...

0800b4a4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
 800b4b0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b4b8:	d11d      	bne.n	800b4f6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b4c2:	4b13      	ldr	r3, [pc, #76]	@ (800b510 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	68ba      	ldr	r2, [r7, #8]
 800b4c8:	6811      	ldr	r1, [r2, #0]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	6852      	ldr	r2, [r2, #4]
 800b4ce:	0112      	lsls	r2, r2, #4
 800b4d0:	4311      	orrs	r1, r2
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	6892      	ldr	r2, [r2, #8]
 800b4d6:	0212      	lsls	r2, r2, #8
 800b4d8:	4311      	orrs	r1, r2
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	6992      	ldr	r2, [r2, #24]
 800b4de:	4311      	orrs	r1, r2
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	68d2      	ldr	r2, [r2, #12]
 800b4e4:	0412      	lsls	r2, r2, #16
 800b4e6:	430a      	orrs	r2, r1
 800b4e8:	ea43 0102 	orr.w	r1, r3, r2
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b4f4:	e005      	b.n	800b502 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800b4fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	cff00000 	.word	0xcff00000

0800b514 <malloc>:
 800b514:	4b02      	ldr	r3, [pc, #8]	@ (800b520 <malloc+0xc>)
 800b516:	4601      	mov	r1, r0
 800b518:	6818      	ldr	r0, [r3, #0]
 800b51a:	f000 b82d 	b.w	800b578 <_malloc_r>
 800b51e:	bf00      	nop
 800b520:	200029e0 	.word	0x200029e0

0800b524 <free>:
 800b524:	4b02      	ldr	r3, [pc, #8]	@ (800b530 <free+0xc>)
 800b526:	4601      	mov	r1, r0
 800b528:	6818      	ldr	r0, [r3, #0]
 800b52a:	f001 b981 	b.w	800c830 <_free_r>
 800b52e:	bf00      	nop
 800b530:	200029e0 	.word	0x200029e0

0800b534 <sbrk_aligned>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	4e0f      	ldr	r6, [pc, #60]	@ (800b574 <sbrk_aligned+0x40>)
 800b538:	460c      	mov	r4, r1
 800b53a:	6831      	ldr	r1, [r6, #0]
 800b53c:	4605      	mov	r5, r0
 800b53e:	b911      	cbnz	r1, 800b546 <sbrk_aligned+0x12>
 800b540:	f001 f910 	bl	800c764 <_sbrk_r>
 800b544:	6030      	str	r0, [r6, #0]
 800b546:	4621      	mov	r1, r4
 800b548:	4628      	mov	r0, r5
 800b54a:	f001 f90b 	bl	800c764 <_sbrk_r>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d103      	bne.n	800b55a <sbrk_aligned+0x26>
 800b552:	f04f 34ff 	mov.w	r4, #4294967295
 800b556:	4620      	mov	r0, r4
 800b558:	bd70      	pop	{r4, r5, r6, pc}
 800b55a:	1cc4      	adds	r4, r0, #3
 800b55c:	f024 0403 	bic.w	r4, r4, #3
 800b560:	42a0      	cmp	r0, r4
 800b562:	d0f8      	beq.n	800b556 <sbrk_aligned+0x22>
 800b564:	1a21      	subs	r1, r4, r0
 800b566:	4628      	mov	r0, r5
 800b568:	f001 f8fc 	bl	800c764 <_sbrk_r>
 800b56c:	3001      	adds	r0, #1
 800b56e:	d1f2      	bne.n	800b556 <sbrk_aligned+0x22>
 800b570:	e7ef      	b.n	800b552 <sbrk_aligned+0x1e>
 800b572:	bf00      	nop
 800b574:	2000354c 	.word	0x2000354c

0800b578 <_malloc_r>:
 800b578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b57c:	1ccd      	adds	r5, r1, #3
 800b57e:	f025 0503 	bic.w	r5, r5, #3
 800b582:	3508      	adds	r5, #8
 800b584:	2d0c      	cmp	r5, #12
 800b586:	bf38      	it	cc
 800b588:	250c      	movcc	r5, #12
 800b58a:	2d00      	cmp	r5, #0
 800b58c:	4606      	mov	r6, r0
 800b58e:	db01      	blt.n	800b594 <_malloc_r+0x1c>
 800b590:	42a9      	cmp	r1, r5
 800b592:	d904      	bls.n	800b59e <_malloc_r+0x26>
 800b594:	230c      	movs	r3, #12
 800b596:	6033      	str	r3, [r6, #0]
 800b598:	2000      	movs	r0, #0
 800b59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b59e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b674 <_malloc_r+0xfc>
 800b5a2:	f000 f869 	bl	800b678 <__malloc_lock>
 800b5a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b5aa:	461c      	mov	r4, r3
 800b5ac:	bb44      	cbnz	r4, 800b600 <_malloc_r+0x88>
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f7ff ffbf 	bl	800b534 <sbrk_aligned>
 800b5b6:	1c43      	adds	r3, r0, #1
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	d158      	bne.n	800b66e <_malloc_r+0xf6>
 800b5bc:	f8d8 4000 	ldr.w	r4, [r8]
 800b5c0:	4627      	mov	r7, r4
 800b5c2:	2f00      	cmp	r7, #0
 800b5c4:	d143      	bne.n	800b64e <_malloc_r+0xd6>
 800b5c6:	2c00      	cmp	r4, #0
 800b5c8:	d04b      	beq.n	800b662 <_malloc_r+0xea>
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	eb04 0903 	add.w	r9, r4, r3
 800b5d4:	f001 f8c6 	bl	800c764 <_sbrk_r>
 800b5d8:	4581      	cmp	r9, r0
 800b5da:	d142      	bne.n	800b662 <_malloc_r+0xea>
 800b5dc:	6821      	ldr	r1, [r4, #0]
 800b5de:	1a6d      	subs	r5, r5, r1
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f7ff ffa6 	bl	800b534 <sbrk_aligned>
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d03a      	beq.n	800b662 <_malloc_r+0xea>
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	442b      	add	r3, r5
 800b5f0:	6023      	str	r3, [r4, #0]
 800b5f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b5f6:	685a      	ldr	r2, [r3, #4]
 800b5f8:	bb62      	cbnz	r2, 800b654 <_malloc_r+0xdc>
 800b5fa:	f8c8 7000 	str.w	r7, [r8]
 800b5fe:	e00f      	b.n	800b620 <_malloc_r+0xa8>
 800b600:	6822      	ldr	r2, [r4, #0]
 800b602:	1b52      	subs	r2, r2, r5
 800b604:	d420      	bmi.n	800b648 <_malloc_r+0xd0>
 800b606:	2a0b      	cmp	r2, #11
 800b608:	d917      	bls.n	800b63a <_malloc_r+0xc2>
 800b60a:	1961      	adds	r1, r4, r5
 800b60c:	42a3      	cmp	r3, r4
 800b60e:	6025      	str	r5, [r4, #0]
 800b610:	bf18      	it	ne
 800b612:	6059      	strne	r1, [r3, #4]
 800b614:	6863      	ldr	r3, [r4, #4]
 800b616:	bf08      	it	eq
 800b618:	f8c8 1000 	streq.w	r1, [r8]
 800b61c:	5162      	str	r2, [r4, r5]
 800b61e:	604b      	str	r3, [r1, #4]
 800b620:	4630      	mov	r0, r6
 800b622:	f000 f82f 	bl	800b684 <__malloc_unlock>
 800b626:	f104 000b 	add.w	r0, r4, #11
 800b62a:	1d23      	adds	r3, r4, #4
 800b62c:	f020 0007 	bic.w	r0, r0, #7
 800b630:	1ac2      	subs	r2, r0, r3
 800b632:	bf1c      	itt	ne
 800b634:	1a1b      	subne	r3, r3, r0
 800b636:	50a3      	strne	r3, [r4, r2]
 800b638:	e7af      	b.n	800b59a <_malloc_r+0x22>
 800b63a:	6862      	ldr	r2, [r4, #4]
 800b63c:	42a3      	cmp	r3, r4
 800b63e:	bf0c      	ite	eq
 800b640:	f8c8 2000 	streq.w	r2, [r8]
 800b644:	605a      	strne	r2, [r3, #4]
 800b646:	e7eb      	b.n	800b620 <_malloc_r+0xa8>
 800b648:	4623      	mov	r3, r4
 800b64a:	6864      	ldr	r4, [r4, #4]
 800b64c:	e7ae      	b.n	800b5ac <_malloc_r+0x34>
 800b64e:	463c      	mov	r4, r7
 800b650:	687f      	ldr	r7, [r7, #4]
 800b652:	e7b6      	b.n	800b5c2 <_malloc_r+0x4a>
 800b654:	461a      	mov	r2, r3
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	42a3      	cmp	r3, r4
 800b65a:	d1fb      	bne.n	800b654 <_malloc_r+0xdc>
 800b65c:	2300      	movs	r3, #0
 800b65e:	6053      	str	r3, [r2, #4]
 800b660:	e7de      	b.n	800b620 <_malloc_r+0xa8>
 800b662:	230c      	movs	r3, #12
 800b664:	6033      	str	r3, [r6, #0]
 800b666:	4630      	mov	r0, r6
 800b668:	f000 f80c 	bl	800b684 <__malloc_unlock>
 800b66c:	e794      	b.n	800b598 <_malloc_r+0x20>
 800b66e:	6005      	str	r5, [r0, #0]
 800b670:	e7d6      	b.n	800b620 <_malloc_r+0xa8>
 800b672:	bf00      	nop
 800b674:	20003550 	.word	0x20003550

0800b678 <__malloc_lock>:
 800b678:	4801      	ldr	r0, [pc, #4]	@ (800b680 <__malloc_lock+0x8>)
 800b67a:	f001 b8c0 	b.w	800c7fe <__retarget_lock_acquire_recursive>
 800b67e:	bf00      	nop
 800b680:	20003694 	.word	0x20003694

0800b684 <__malloc_unlock>:
 800b684:	4801      	ldr	r0, [pc, #4]	@ (800b68c <__malloc_unlock+0x8>)
 800b686:	f001 b8bb 	b.w	800c800 <__retarget_lock_release_recursive>
 800b68a:	bf00      	nop
 800b68c:	20003694 	.word	0x20003694

0800b690 <realloc>:
 800b690:	4b02      	ldr	r3, [pc, #8]	@ (800b69c <realloc+0xc>)
 800b692:	460a      	mov	r2, r1
 800b694:	4601      	mov	r1, r0
 800b696:	6818      	ldr	r0, [r3, #0]
 800b698:	f000 b802 	b.w	800b6a0 <_realloc_r>
 800b69c:	200029e0 	.word	0x200029e0

0800b6a0 <_realloc_r>:
 800b6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a4:	4680      	mov	r8, r0
 800b6a6:	4615      	mov	r5, r2
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	b921      	cbnz	r1, 800b6b6 <_realloc_r+0x16>
 800b6ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	f7ff bf61 	b.w	800b578 <_malloc_r>
 800b6b6:	b92a      	cbnz	r2, 800b6c4 <_realloc_r+0x24>
 800b6b8:	f001 f8ba 	bl	800c830 <_free_r>
 800b6bc:	2400      	movs	r4, #0
 800b6be:	4620      	mov	r0, r4
 800b6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c4:	f002 f8fc 	bl	800d8c0 <_malloc_usable_size_r>
 800b6c8:	4285      	cmp	r5, r0
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	d802      	bhi.n	800b6d4 <_realloc_r+0x34>
 800b6ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b6d2:	d8f4      	bhi.n	800b6be <_realloc_r+0x1e>
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	4640      	mov	r0, r8
 800b6d8:	f7ff ff4e 	bl	800b578 <_malloc_r>
 800b6dc:	4607      	mov	r7, r0
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d0ec      	beq.n	800b6bc <_realloc_r+0x1c>
 800b6e2:	42b5      	cmp	r5, r6
 800b6e4:	462a      	mov	r2, r5
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	bf28      	it	cs
 800b6ea:	4632      	movcs	r2, r6
 800b6ec:	f001 f889 	bl	800c802 <memcpy>
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	f001 f89c 	bl	800c830 <_free_r>
 800b6f8:	463c      	mov	r4, r7
 800b6fa:	e7e0      	b.n	800b6be <_realloc_r+0x1e>

0800b6fc <sulp>:
 800b6fc:	b570      	push	{r4, r5, r6, lr}
 800b6fe:	4604      	mov	r4, r0
 800b700:	460d      	mov	r5, r1
 800b702:	ec45 4b10 	vmov	d0, r4, r5
 800b706:	4616      	mov	r6, r2
 800b708:	f001 ff9c 	bl	800d644 <__ulp>
 800b70c:	ec51 0b10 	vmov	r0, r1, d0
 800b710:	b17e      	cbz	r6, 800b732 <sulp+0x36>
 800b712:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b716:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dd09      	ble.n	800b732 <sulp+0x36>
 800b71e:	051b      	lsls	r3, r3, #20
 800b720:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b724:	2400      	movs	r4, #0
 800b726:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b72a:	4622      	mov	r2, r4
 800b72c:	462b      	mov	r3, r5
 800b72e:	f7f4 ff73 	bl	8000618 <__aeabi_dmul>
 800b732:	ec41 0b10 	vmov	d0, r0, r1
 800b736:	bd70      	pop	{r4, r5, r6, pc}

0800b738 <_strtod_l>:
 800b738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73c:	b09f      	sub	sp, #124	@ 0x7c
 800b73e:	460c      	mov	r4, r1
 800b740:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b742:	2200      	movs	r2, #0
 800b744:	921a      	str	r2, [sp, #104]	@ 0x68
 800b746:	9005      	str	r0, [sp, #20]
 800b748:	f04f 0a00 	mov.w	sl, #0
 800b74c:	f04f 0b00 	mov.w	fp, #0
 800b750:	460a      	mov	r2, r1
 800b752:	9219      	str	r2, [sp, #100]	@ 0x64
 800b754:	7811      	ldrb	r1, [r2, #0]
 800b756:	292b      	cmp	r1, #43	@ 0x2b
 800b758:	d04a      	beq.n	800b7f0 <_strtod_l+0xb8>
 800b75a:	d838      	bhi.n	800b7ce <_strtod_l+0x96>
 800b75c:	290d      	cmp	r1, #13
 800b75e:	d832      	bhi.n	800b7c6 <_strtod_l+0x8e>
 800b760:	2908      	cmp	r1, #8
 800b762:	d832      	bhi.n	800b7ca <_strtod_l+0x92>
 800b764:	2900      	cmp	r1, #0
 800b766:	d03b      	beq.n	800b7e0 <_strtod_l+0xa8>
 800b768:	2200      	movs	r2, #0
 800b76a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b76c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b76e:	782a      	ldrb	r2, [r5, #0]
 800b770:	2a30      	cmp	r2, #48	@ 0x30
 800b772:	f040 80b3 	bne.w	800b8dc <_strtod_l+0x1a4>
 800b776:	786a      	ldrb	r2, [r5, #1]
 800b778:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b77c:	2a58      	cmp	r2, #88	@ 0x58
 800b77e:	d16e      	bne.n	800b85e <_strtod_l+0x126>
 800b780:	9302      	str	r3, [sp, #8]
 800b782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b784:	9301      	str	r3, [sp, #4]
 800b786:	ab1a      	add	r3, sp, #104	@ 0x68
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	4a8e      	ldr	r2, [pc, #568]	@ (800b9c4 <_strtod_l+0x28c>)
 800b78c:	9805      	ldr	r0, [sp, #20]
 800b78e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b790:	a919      	add	r1, sp, #100	@ 0x64
 800b792:	f001 f8ff 	bl	800c994 <__gethex>
 800b796:	f010 060f 	ands.w	r6, r0, #15
 800b79a:	4604      	mov	r4, r0
 800b79c:	d005      	beq.n	800b7aa <_strtod_l+0x72>
 800b79e:	2e06      	cmp	r6, #6
 800b7a0:	d128      	bne.n	800b7f4 <_strtod_l+0xbc>
 800b7a2:	3501      	adds	r5, #1
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b7a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f040 858e 	bne.w	800c2ce <_strtod_l+0xb96>
 800b7b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7b4:	b1cb      	cbz	r3, 800b7ea <_strtod_l+0xb2>
 800b7b6:	4652      	mov	r2, sl
 800b7b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b7bc:	ec43 2b10 	vmov	d0, r2, r3
 800b7c0:	b01f      	add	sp, #124	@ 0x7c
 800b7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c6:	2920      	cmp	r1, #32
 800b7c8:	d1ce      	bne.n	800b768 <_strtod_l+0x30>
 800b7ca:	3201      	adds	r2, #1
 800b7cc:	e7c1      	b.n	800b752 <_strtod_l+0x1a>
 800b7ce:	292d      	cmp	r1, #45	@ 0x2d
 800b7d0:	d1ca      	bne.n	800b768 <_strtod_l+0x30>
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b7d6:	1c51      	adds	r1, r2, #1
 800b7d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b7da:	7852      	ldrb	r2, [r2, #1]
 800b7dc:	2a00      	cmp	r2, #0
 800b7de:	d1c5      	bne.n	800b76c <_strtod_l+0x34>
 800b7e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b7e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f040 8570 	bne.w	800c2ca <_strtod_l+0xb92>
 800b7ea:	4652      	mov	r2, sl
 800b7ec:	465b      	mov	r3, fp
 800b7ee:	e7e5      	b.n	800b7bc <_strtod_l+0x84>
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	e7ef      	b.n	800b7d4 <_strtod_l+0x9c>
 800b7f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b7f6:	b13a      	cbz	r2, 800b808 <_strtod_l+0xd0>
 800b7f8:	2135      	movs	r1, #53	@ 0x35
 800b7fa:	a81c      	add	r0, sp, #112	@ 0x70
 800b7fc:	f002 f81c 	bl	800d838 <__copybits>
 800b800:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b802:	9805      	ldr	r0, [sp, #20]
 800b804:	f001 fbea 	bl	800cfdc <_Bfree>
 800b808:	3e01      	subs	r6, #1
 800b80a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b80c:	2e04      	cmp	r6, #4
 800b80e:	d806      	bhi.n	800b81e <_strtod_l+0xe6>
 800b810:	e8df f006 	tbb	[pc, r6]
 800b814:	201d0314 	.word	0x201d0314
 800b818:	14          	.byte	0x14
 800b819:	00          	.byte	0x00
 800b81a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b81e:	05e1      	lsls	r1, r4, #23
 800b820:	bf48      	it	mi
 800b822:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b82a:	0d1b      	lsrs	r3, r3, #20
 800b82c:	051b      	lsls	r3, r3, #20
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d1bb      	bne.n	800b7aa <_strtod_l+0x72>
 800b832:	f000 ffb9 	bl	800c7a8 <__errno>
 800b836:	2322      	movs	r3, #34	@ 0x22
 800b838:	6003      	str	r3, [r0, #0]
 800b83a:	e7b6      	b.n	800b7aa <_strtod_l+0x72>
 800b83c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b840:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b844:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b848:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b84c:	e7e7      	b.n	800b81e <_strtod_l+0xe6>
 800b84e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b9cc <_strtod_l+0x294>
 800b852:	e7e4      	b.n	800b81e <_strtod_l+0xe6>
 800b854:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b858:	f04f 3aff 	mov.w	sl, #4294967295
 800b85c:	e7df      	b.n	800b81e <_strtod_l+0xe6>
 800b85e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b860:	1c5a      	adds	r2, r3, #1
 800b862:	9219      	str	r2, [sp, #100]	@ 0x64
 800b864:	785b      	ldrb	r3, [r3, #1]
 800b866:	2b30      	cmp	r3, #48	@ 0x30
 800b868:	d0f9      	beq.n	800b85e <_strtod_l+0x126>
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d09d      	beq.n	800b7aa <_strtod_l+0x72>
 800b86e:	2301      	movs	r3, #1
 800b870:	9309      	str	r3, [sp, #36]	@ 0x24
 800b872:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b874:	930c      	str	r3, [sp, #48]	@ 0x30
 800b876:	2300      	movs	r3, #0
 800b878:	9308      	str	r3, [sp, #32]
 800b87a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b87c:	461f      	mov	r7, r3
 800b87e:	220a      	movs	r2, #10
 800b880:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b882:	7805      	ldrb	r5, [r0, #0]
 800b884:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b888:	b2d9      	uxtb	r1, r3
 800b88a:	2909      	cmp	r1, #9
 800b88c:	d928      	bls.n	800b8e0 <_strtod_l+0x1a8>
 800b88e:	494e      	ldr	r1, [pc, #312]	@ (800b9c8 <_strtod_l+0x290>)
 800b890:	2201      	movs	r2, #1
 800b892:	f000 fee2 	bl	800c65a <strncmp>
 800b896:	2800      	cmp	r0, #0
 800b898:	d032      	beq.n	800b900 <_strtod_l+0x1c8>
 800b89a:	2000      	movs	r0, #0
 800b89c:	462a      	mov	r2, r5
 800b89e:	4681      	mov	r9, r0
 800b8a0:	463d      	mov	r5, r7
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2a65      	cmp	r2, #101	@ 0x65
 800b8a6:	d001      	beq.n	800b8ac <_strtod_l+0x174>
 800b8a8:	2a45      	cmp	r2, #69	@ 0x45
 800b8aa:	d114      	bne.n	800b8d6 <_strtod_l+0x19e>
 800b8ac:	b91d      	cbnz	r5, 800b8b6 <_strtod_l+0x17e>
 800b8ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8b0:	4302      	orrs	r2, r0
 800b8b2:	d095      	beq.n	800b7e0 <_strtod_l+0xa8>
 800b8b4:	2500      	movs	r5, #0
 800b8b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b8b8:	1c62      	adds	r2, r4, #1
 800b8ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8bc:	7862      	ldrb	r2, [r4, #1]
 800b8be:	2a2b      	cmp	r2, #43	@ 0x2b
 800b8c0:	d077      	beq.n	800b9b2 <_strtod_l+0x27a>
 800b8c2:	2a2d      	cmp	r2, #45	@ 0x2d
 800b8c4:	d07b      	beq.n	800b9be <_strtod_l+0x286>
 800b8c6:	f04f 0c00 	mov.w	ip, #0
 800b8ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b8ce:	2909      	cmp	r1, #9
 800b8d0:	f240 8082 	bls.w	800b9d8 <_strtod_l+0x2a0>
 800b8d4:	9419      	str	r4, [sp, #100]	@ 0x64
 800b8d6:	f04f 0800 	mov.w	r8, #0
 800b8da:	e0a2      	b.n	800ba22 <_strtod_l+0x2ea>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	e7c7      	b.n	800b870 <_strtod_l+0x138>
 800b8e0:	2f08      	cmp	r7, #8
 800b8e2:	bfd5      	itete	le
 800b8e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b8e6:	9908      	ldrgt	r1, [sp, #32]
 800b8e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b8ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b8f0:	f100 0001 	add.w	r0, r0, #1
 800b8f4:	bfd4      	ite	le
 800b8f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b8f8:	9308      	strgt	r3, [sp, #32]
 800b8fa:	3701      	adds	r7, #1
 800b8fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800b8fe:	e7bf      	b.n	800b880 <_strtod_l+0x148>
 800b900:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b902:	1c5a      	adds	r2, r3, #1
 800b904:	9219      	str	r2, [sp, #100]	@ 0x64
 800b906:	785a      	ldrb	r2, [r3, #1]
 800b908:	b37f      	cbz	r7, 800b96a <_strtod_l+0x232>
 800b90a:	4681      	mov	r9, r0
 800b90c:	463d      	mov	r5, r7
 800b90e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b912:	2b09      	cmp	r3, #9
 800b914:	d912      	bls.n	800b93c <_strtod_l+0x204>
 800b916:	2301      	movs	r3, #1
 800b918:	e7c4      	b.n	800b8a4 <_strtod_l+0x16c>
 800b91a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b91c:	1c5a      	adds	r2, r3, #1
 800b91e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b920:	785a      	ldrb	r2, [r3, #1]
 800b922:	3001      	adds	r0, #1
 800b924:	2a30      	cmp	r2, #48	@ 0x30
 800b926:	d0f8      	beq.n	800b91a <_strtod_l+0x1e2>
 800b928:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b92c:	2b08      	cmp	r3, #8
 800b92e:	f200 84d3 	bhi.w	800c2d8 <_strtod_l+0xba0>
 800b932:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b934:	930c      	str	r3, [sp, #48]	@ 0x30
 800b936:	4681      	mov	r9, r0
 800b938:	2000      	movs	r0, #0
 800b93a:	4605      	mov	r5, r0
 800b93c:	3a30      	subs	r2, #48	@ 0x30
 800b93e:	f100 0301 	add.w	r3, r0, #1
 800b942:	d02a      	beq.n	800b99a <_strtod_l+0x262>
 800b944:	4499      	add	r9, r3
 800b946:	eb00 0c05 	add.w	ip, r0, r5
 800b94a:	462b      	mov	r3, r5
 800b94c:	210a      	movs	r1, #10
 800b94e:	4563      	cmp	r3, ip
 800b950:	d10d      	bne.n	800b96e <_strtod_l+0x236>
 800b952:	1c69      	adds	r1, r5, #1
 800b954:	4401      	add	r1, r0
 800b956:	4428      	add	r0, r5
 800b958:	2808      	cmp	r0, #8
 800b95a:	dc16      	bgt.n	800b98a <_strtod_l+0x252>
 800b95c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b95e:	230a      	movs	r3, #10
 800b960:	fb03 2300 	mla	r3, r3, r0, r2
 800b964:	930a      	str	r3, [sp, #40]	@ 0x28
 800b966:	2300      	movs	r3, #0
 800b968:	e018      	b.n	800b99c <_strtod_l+0x264>
 800b96a:	4638      	mov	r0, r7
 800b96c:	e7da      	b.n	800b924 <_strtod_l+0x1ec>
 800b96e:	2b08      	cmp	r3, #8
 800b970:	f103 0301 	add.w	r3, r3, #1
 800b974:	dc03      	bgt.n	800b97e <_strtod_l+0x246>
 800b976:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b978:	434e      	muls	r6, r1
 800b97a:	960a      	str	r6, [sp, #40]	@ 0x28
 800b97c:	e7e7      	b.n	800b94e <_strtod_l+0x216>
 800b97e:	2b10      	cmp	r3, #16
 800b980:	bfde      	ittt	le
 800b982:	9e08      	ldrle	r6, [sp, #32]
 800b984:	434e      	mulle	r6, r1
 800b986:	9608      	strle	r6, [sp, #32]
 800b988:	e7e1      	b.n	800b94e <_strtod_l+0x216>
 800b98a:	280f      	cmp	r0, #15
 800b98c:	dceb      	bgt.n	800b966 <_strtod_l+0x22e>
 800b98e:	9808      	ldr	r0, [sp, #32]
 800b990:	230a      	movs	r3, #10
 800b992:	fb03 2300 	mla	r3, r3, r0, r2
 800b996:	9308      	str	r3, [sp, #32]
 800b998:	e7e5      	b.n	800b966 <_strtod_l+0x22e>
 800b99a:	4629      	mov	r1, r5
 800b99c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b99e:	1c50      	adds	r0, r2, #1
 800b9a0:	9019      	str	r0, [sp, #100]	@ 0x64
 800b9a2:	7852      	ldrb	r2, [r2, #1]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	460d      	mov	r5, r1
 800b9a8:	e7b1      	b.n	800b90e <_strtod_l+0x1d6>
 800b9aa:	f04f 0900 	mov.w	r9, #0
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e77d      	b.n	800b8ae <_strtod_l+0x176>
 800b9b2:	f04f 0c00 	mov.w	ip, #0
 800b9b6:	1ca2      	adds	r2, r4, #2
 800b9b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9ba:	78a2      	ldrb	r2, [r4, #2]
 800b9bc:	e785      	b.n	800b8ca <_strtod_l+0x192>
 800b9be:	f04f 0c01 	mov.w	ip, #1
 800b9c2:	e7f8      	b.n	800b9b6 <_strtod_l+0x27e>
 800b9c4:	0804bf6c 	.word	0x0804bf6c
 800b9c8:	0804bf48 	.word	0x0804bf48
 800b9cc:	7ff00000 	.word	0x7ff00000
 800b9d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9d2:	1c51      	adds	r1, r2, #1
 800b9d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800b9d6:	7852      	ldrb	r2, [r2, #1]
 800b9d8:	2a30      	cmp	r2, #48	@ 0x30
 800b9da:	d0f9      	beq.n	800b9d0 <_strtod_l+0x298>
 800b9dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b9e0:	2908      	cmp	r1, #8
 800b9e2:	f63f af78 	bhi.w	800b8d6 <_strtod_l+0x19e>
 800b9e6:	3a30      	subs	r2, #48	@ 0x30
 800b9e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b9ee:	f04f 080a 	mov.w	r8, #10
 800b9f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9f4:	1c56      	adds	r6, r2, #1
 800b9f6:	9619      	str	r6, [sp, #100]	@ 0x64
 800b9f8:	7852      	ldrb	r2, [r2, #1]
 800b9fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b9fe:	f1be 0f09 	cmp.w	lr, #9
 800ba02:	d939      	bls.n	800ba78 <_strtod_l+0x340>
 800ba04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ba06:	1a76      	subs	r6, r6, r1
 800ba08:	2e08      	cmp	r6, #8
 800ba0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ba0e:	dc03      	bgt.n	800ba18 <_strtod_l+0x2e0>
 800ba10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ba12:	4588      	cmp	r8, r1
 800ba14:	bfa8      	it	ge
 800ba16:	4688      	movge	r8, r1
 800ba18:	f1bc 0f00 	cmp.w	ip, #0
 800ba1c:	d001      	beq.n	800ba22 <_strtod_l+0x2ea>
 800ba1e:	f1c8 0800 	rsb	r8, r8, #0
 800ba22:	2d00      	cmp	r5, #0
 800ba24:	d14e      	bne.n	800bac4 <_strtod_l+0x38c>
 800ba26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba28:	4308      	orrs	r0, r1
 800ba2a:	f47f aebe 	bne.w	800b7aa <_strtod_l+0x72>
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f47f aed6 	bne.w	800b7e0 <_strtod_l+0xa8>
 800ba34:	2a69      	cmp	r2, #105	@ 0x69
 800ba36:	d028      	beq.n	800ba8a <_strtod_l+0x352>
 800ba38:	dc25      	bgt.n	800ba86 <_strtod_l+0x34e>
 800ba3a:	2a49      	cmp	r2, #73	@ 0x49
 800ba3c:	d025      	beq.n	800ba8a <_strtod_l+0x352>
 800ba3e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ba40:	f47f aece 	bne.w	800b7e0 <_strtod_l+0xa8>
 800ba44:	499b      	ldr	r1, [pc, #620]	@ (800bcb4 <_strtod_l+0x57c>)
 800ba46:	a819      	add	r0, sp, #100	@ 0x64
 800ba48:	f001 f9c6 	bl	800cdd8 <__match>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	f43f aec7 	beq.w	800b7e0 <_strtod_l+0xa8>
 800ba52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	2b28      	cmp	r3, #40	@ 0x28
 800ba58:	d12e      	bne.n	800bab8 <_strtod_l+0x380>
 800ba5a:	4997      	ldr	r1, [pc, #604]	@ (800bcb8 <_strtod_l+0x580>)
 800ba5c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ba5e:	a819      	add	r0, sp, #100	@ 0x64
 800ba60:	f001 f9ce 	bl	800ce00 <__hexnan>
 800ba64:	2805      	cmp	r0, #5
 800ba66:	d127      	bne.n	800bab8 <_strtod_l+0x380>
 800ba68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ba6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ba6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ba72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ba76:	e698      	b.n	800b7aa <_strtod_l+0x72>
 800ba78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ba7a:	fb08 2101 	mla	r1, r8, r1, r2
 800ba7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ba82:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba84:	e7b5      	b.n	800b9f2 <_strtod_l+0x2ba>
 800ba86:	2a6e      	cmp	r2, #110	@ 0x6e
 800ba88:	e7da      	b.n	800ba40 <_strtod_l+0x308>
 800ba8a:	498c      	ldr	r1, [pc, #560]	@ (800bcbc <_strtod_l+0x584>)
 800ba8c:	a819      	add	r0, sp, #100	@ 0x64
 800ba8e:	f001 f9a3 	bl	800cdd8 <__match>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	f43f aea4 	beq.w	800b7e0 <_strtod_l+0xa8>
 800ba98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba9a:	4989      	ldr	r1, [pc, #548]	@ (800bcc0 <_strtod_l+0x588>)
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	a819      	add	r0, sp, #100	@ 0x64
 800baa0:	9319      	str	r3, [sp, #100]	@ 0x64
 800baa2:	f001 f999 	bl	800cdd8 <__match>
 800baa6:	b910      	cbnz	r0, 800baae <_strtod_l+0x376>
 800baa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baaa:	3301      	adds	r3, #1
 800baac:	9319      	str	r3, [sp, #100]	@ 0x64
 800baae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bcd0 <_strtod_l+0x598>
 800bab2:	f04f 0a00 	mov.w	sl, #0
 800bab6:	e678      	b.n	800b7aa <_strtod_l+0x72>
 800bab8:	4882      	ldr	r0, [pc, #520]	@ (800bcc4 <_strtod_l+0x58c>)
 800baba:	f000 feb1 	bl	800c820 <nan>
 800babe:	ec5b ab10 	vmov	sl, fp, d0
 800bac2:	e672      	b.n	800b7aa <_strtod_l+0x72>
 800bac4:	eba8 0309 	sub.w	r3, r8, r9
 800bac8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800baca:	9309      	str	r3, [sp, #36]	@ 0x24
 800bacc:	2f00      	cmp	r7, #0
 800bace:	bf08      	it	eq
 800bad0:	462f      	moveq	r7, r5
 800bad2:	2d10      	cmp	r5, #16
 800bad4:	462c      	mov	r4, r5
 800bad6:	bfa8      	it	ge
 800bad8:	2410      	movge	r4, #16
 800bada:	f7f4 fd23 	bl	8000524 <__aeabi_ui2d>
 800bade:	2d09      	cmp	r5, #9
 800bae0:	4682      	mov	sl, r0
 800bae2:	468b      	mov	fp, r1
 800bae4:	dc13      	bgt.n	800bb0e <_strtod_l+0x3d6>
 800bae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f43f ae5e 	beq.w	800b7aa <_strtod_l+0x72>
 800baee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baf0:	dd78      	ble.n	800bbe4 <_strtod_l+0x4ac>
 800baf2:	2b16      	cmp	r3, #22
 800baf4:	dc5f      	bgt.n	800bbb6 <_strtod_l+0x47e>
 800baf6:	4974      	ldr	r1, [pc, #464]	@ (800bcc8 <_strtod_l+0x590>)
 800baf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bafc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb00:	4652      	mov	r2, sl
 800bb02:	465b      	mov	r3, fp
 800bb04:	f7f4 fd88 	bl	8000618 <__aeabi_dmul>
 800bb08:	4682      	mov	sl, r0
 800bb0a:	468b      	mov	fp, r1
 800bb0c:	e64d      	b.n	800b7aa <_strtod_l+0x72>
 800bb0e:	4b6e      	ldr	r3, [pc, #440]	@ (800bcc8 <_strtod_l+0x590>)
 800bb10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bb18:	f7f4 fd7e 	bl	8000618 <__aeabi_dmul>
 800bb1c:	4682      	mov	sl, r0
 800bb1e:	9808      	ldr	r0, [sp, #32]
 800bb20:	468b      	mov	fp, r1
 800bb22:	f7f4 fcff 	bl	8000524 <__aeabi_ui2d>
 800bb26:	4602      	mov	r2, r0
 800bb28:	460b      	mov	r3, r1
 800bb2a:	4650      	mov	r0, sl
 800bb2c:	4659      	mov	r1, fp
 800bb2e:	f7f4 fbbd 	bl	80002ac <__adddf3>
 800bb32:	2d0f      	cmp	r5, #15
 800bb34:	4682      	mov	sl, r0
 800bb36:	468b      	mov	fp, r1
 800bb38:	ddd5      	ble.n	800bae6 <_strtod_l+0x3ae>
 800bb3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb3c:	1b2c      	subs	r4, r5, r4
 800bb3e:	441c      	add	r4, r3
 800bb40:	2c00      	cmp	r4, #0
 800bb42:	f340 8096 	ble.w	800bc72 <_strtod_l+0x53a>
 800bb46:	f014 030f 	ands.w	r3, r4, #15
 800bb4a:	d00a      	beq.n	800bb62 <_strtod_l+0x42a>
 800bb4c:	495e      	ldr	r1, [pc, #376]	@ (800bcc8 <_strtod_l+0x590>)
 800bb4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb52:	4652      	mov	r2, sl
 800bb54:	465b      	mov	r3, fp
 800bb56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb5a:	f7f4 fd5d 	bl	8000618 <__aeabi_dmul>
 800bb5e:	4682      	mov	sl, r0
 800bb60:	468b      	mov	fp, r1
 800bb62:	f034 040f 	bics.w	r4, r4, #15
 800bb66:	d073      	beq.n	800bc50 <_strtod_l+0x518>
 800bb68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bb6c:	dd48      	ble.n	800bc00 <_strtod_l+0x4c8>
 800bb6e:	2400      	movs	r4, #0
 800bb70:	46a0      	mov	r8, r4
 800bb72:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb74:	46a1      	mov	r9, r4
 800bb76:	9a05      	ldr	r2, [sp, #20]
 800bb78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bcd0 <_strtod_l+0x598>
 800bb7c:	2322      	movs	r3, #34	@ 0x22
 800bb7e:	6013      	str	r3, [r2, #0]
 800bb80:	f04f 0a00 	mov.w	sl, #0
 800bb84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f43f ae0f 	beq.w	800b7aa <_strtod_l+0x72>
 800bb8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb8e:	9805      	ldr	r0, [sp, #20]
 800bb90:	f001 fa24 	bl	800cfdc <_Bfree>
 800bb94:	9805      	ldr	r0, [sp, #20]
 800bb96:	4649      	mov	r1, r9
 800bb98:	f001 fa20 	bl	800cfdc <_Bfree>
 800bb9c:	9805      	ldr	r0, [sp, #20]
 800bb9e:	4641      	mov	r1, r8
 800bba0:	f001 fa1c 	bl	800cfdc <_Bfree>
 800bba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bba6:	9805      	ldr	r0, [sp, #20]
 800bba8:	f001 fa18 	bl	800cfdc <_Bfree>
 800bbac:	9805      	ldr	r0, [sp, #20]
 800bbae:	4621      	mov	r1, r4
 800bbb0:	f001 fa14 	bl	800cfdc <_Bfree>
 800bbb4:	e5f9      	b.n	800b7aa <_strtod_l+0x72>
 800bbb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	dbbc      	blt.n	800bb3a <_strtod_l+0x402>
 800bbc0:	4c41      	ldr	r4, [pc, #260]	@ (800bcc8 <_strtod_l+0x590>)
 800bbc2:	f1c5 050f 	rsb	r5, r5, #15
 800bbc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bbca:	4652      	mov	r2, sl
 800bbcc:	465b      	mov	r3, fp
 800bbce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbd2:	f7f4 fd21 	bl	8000618 <__aeabi_dmul>
 800bbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbd8:	1b5d      	subs	r5, r3, r5
 800bbda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bbde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bbe2:	e78f      	b.n	800bb04 <_strtod_l+0x3cc>
 800bbe4:	3316      	adds	r3, #22
 800bbe6:	dba8      	blt.n	800bb3a <_strtod_l+0x402>
 800bbe8:	4b37      	ldr	r3, [pc, #220]	@ (800bcc8 <_strtod_l+0x590>)
 800bbea:	eba9 0808 	sub.w	r8, r9, r8
 800bbee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bbf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bbf6:	4650      	mov	r0, sl
 800bbf8:	4659      	mov	r1, fp
 800bbfa:	f7f4 fe37 	bl	800086c <__aeabi_ddiv>
 800bbfe:	e783      	b.n	800bb08 <_strtod_l+0x3d0>
 800bc00:	4b32      	ldr	r3, [pc, #200]	@ (800bccc <_strtod_l+0x594>)
 800bc02:	9308      	str	r3, [sp, #32]
 800bc04:	2300      	movs	r3, #0
 800bc06:	1124      	asrs	r4, r4, #4
 800bc08:	4650      	mov	r0, sl
 800bc0a:	4659      	mov	r1, fp
 800bc0c:	461e      	mov	r6, r3
 800bc0e:	2c01      	cmp	r4, #1
 800bc10:	dc21      	bgt.n	800bc56 <_strtod_l+0x51e>
 800bc12:	b10b      	cbz	r3, 800bc18 <_strtod_l+0x4e0>
 800bc14:	4682      	mov	sl, r0
 800bc16:	468b      	mov	fp, r1
 800bc18:	492c      	ldr	r1, [pc, #176]	@ (800bccc <_strtod_l+0x594>)
 800bc1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bc1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bc22:	4652      	mov	r2, sl
 800bc24:	465b      	mov	r3, fp
 800bc26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc2a:	f7f4 fcf5 	bl	8000618 <__aeabi_dmul>
 800bc2e:	4b28      	ldr	r3, [pc, #160]	@ (800bcd0 <_strtod_l+0x598>)
 800bc30:	460a      	mov	r2, r1
 800bc32:	400b      	ands	r3, r1
 800bc34:	4927      	ldr	r1, [pc, #156]	@ (800bcd4 <_strtod_l+0x59c>)
 800bc36:	428b      	cmp	r3, r1
 800bc38:	4682      	mov	sl, r0
 800bc3a:	d898      	bhi.n	800bb6e <_strtod_l+0x436>
 800bc3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bc40:	428b      	cmp	r3, r1
 800bc42:	bf86      	itte	hi
 800bc44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bcd8 <_strtod_l+0x5a0>
 800bc48:	f04f 3aff 	movhi.w	sl, #4294967295
 800bc4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bc50:	2300      	movs	r3, #0
 800bc52:	9308      	str	r3, [sp, #32]
 800bc54:	e07a      	b.n	800bd4c <_strtod_l+0x614>
 800bc56:	07e2      	lsls	r2, r4, #31
 800bc58:	d505      	bpl.n	800bc66 <_strtod_l+0x52e>
 800bc5a:	9b08      	ldr	r3, [sp, #32]
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f7f4 fcda 	bl	8000618 <__aeabi_dmul>
 800bc64:	2301      	movs	r3, #1
 800bc66:	9a08      	ldr	r2, [sp, #32]
 800bc68:	3208      	adds	r2, #8
 800bc6a:	3601      	adds	r6, #1
 800bc6c:	1064      	asrs	r4, r4, #1
 800bc6e:	9208      	str	r2, [sp, #32]
 800bc70:	e7cd      	b.n	800bc0e <_strtod_l+0x4d6>
 800bc72:	d0ed      	beq.n	800bc50 <_strtod_l+0x518>
 800bc74:	4264      	negs	r4, r4
 800bc76:	f014 020f 	ands.w	r2, r4, #15
 800bc7a:	d00a      	beq.n	800bc92 <_strtod_l+0x55a>
 800bc7c:	4b12      	ldr	r3, [pc, #72]	@ (800bcc8 <_strtod_l+0x590>)
 800bc7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc82:	4650      	mov	r0, sl
 800bc84:	4659      	mov	r1, fp
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	f7f4 fdef 	bl	800086c <__aeabi_ddiv>
 800bc8e:	4682      	mov	sl, r0
 800bc90:	468b      	mov	fp, r1
 800bc92:	1124      	asrs	r4, r4, #4
 800bc94:	d0dc      	beq.n	800bc50 <_strtod_l+0x518>
 800bc96:	2c1f      	cmp	r4, #31
 800bc98:	dd20      	ble.n	800bcdc <_strtod_l+0x5a4>
 800bc9a:	2400      	movs	r4, #0
 800bc9c:	46a0      	mov	r8, r4
 800bc9e:	940a      	str	r4, [sp, #40]	@ 0x28
 800bca0:	46a1      	mov	r9, r4
 800bca2:	9a05      	ldr	r2, [sp, #20]
 800bca4:	2322      	movs	r3, #34	@ 0x22
 800bca6:	f04f 0a00 	mov.w	sl, #0
 800bcaa:	f04f 0b00 	mov.w	fp, #0
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	e768      	b.n	800bb84 <_strtod_l+0x44c>
 800bcb2:	bf00      	nop
 800bcb4:	0804bf53 	.word	0x0804bf53
 800bcb8:	0804bf58 	.word	0x0804bf58
 800bcbc:	0804bf4a 	.word	0x0804bf4a
 800bcc0:	0804bf4d 	.word	0x0804bf4d
 800bcc4:	0804c319 	.word	0x0804c319
 800bcc8:	0804c1c8 	.word	0x0804c1c8
 800bccc:	0804c1a0 	.word	0x0804c1a0
 800bcd0:	7ff00000 	.word	0x7ff00000
 800bcd4:	7ca00000 	.word	0x7ca00000
 800bcd8:	7fefffff 	.word	0x7fefffff
 800bcdc:	f014 0310 	ands.w	r3, r4, #16
 800bce0:	bf18      	it	ne
 800bce2:	236a      	movne	r3, #106	@ 0x6a
 800bce4:	4ea9      	ldr	r6, [pc, #676]	@ (800bf8c <_strtod_l+0x854>)
 800bce6:	9308      	str	r3, [sp, #32]
 800bce8:	4650      	mov	r0, sl
 800bcea:	4659      	mov	r1, fp
 800bcec:	2300      	movs	r3, #0
 800bcee:	07e2      	lsls	r2, r4, #31
 800bcf0:	d504      	bpl.n	800bcfc <_strtod_l+0x5c4>
 800bcf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcf6:	f7f4 fc8f 	bl	8000618 <__aeabi_dmul>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	1064      	asrs	r4, r4, #1
 800bcfe:	f106 0608 	add.w	r6, r6, #8
 800bd02:	d1f4      	bne.n	800bcee <_strtod_l+0x5b6>
 800bd04:	b10b      	cbz	r3, 800bd0a <_strtod_l+0x5d2>
 800bd06:	4682      	mov	sl, r0
 800bd08:	468b      	mov	fp, r1
 800bd0a:	9b08      	ldr	r3, [sp, #32]
 800bd0c:	b1b3      	cbz	r3, 800bd3c <_strtod_l+0x604>
 800bd0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bd12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	4659      	mov	r1, fp
 800bd1a:	dd0f      	ble.n	800bd3c <_strtod_l+0x604>
 800bd1c:	2b1f      	cmp	r3, #31
 800bd1e:	dd55      	ble.n	800bdcc <_strtod_l+0x694>
 800bd20:	2b34      	cmp	r3, #52	@ 0x34
 800bd22:	bfde      	ittt	le
 800bd24:	f04f 33ff 	movle.w	r3, #4294967295
 800bd28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bd2c:	4093      	lslle	r3, r2
 800bd2e:	f04f 0a00 	mov.w	sl, #0
 800bd32:	bfcc      	ite	gt
 800bd34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bd38:	ea03 0b01 	andle.w	fp, r3, r1
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	2300      	movs	r3, #0
 800bd40:	4650      	mov	r0, sl
 800bd42:	4659      	mov	r1, fp
 800bd44:	f7f4 fed0 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d1a6      	bne.n	800bc9a <_strtod_l+0x562>
 800bd4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bd52:	9805      	ldr	r0, [sp, #20]
 800bd54:	462b      	mov	r3, r5
 800bd56:	463a      	mov	r2, r7
 800bd58:	f001 f9a8 	bl	800d0ac <__s2b>
 800bd5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	f43f af05 	beq.w	800bb6e <_strtod_l+0x436>
 800bd64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd66:	2a00      	cmp	r2, #0
 800bd68:	eba9 0308 	sub.w	r3, r9, r8
 800bd6c:	bfa8      	it	ge
 800bd6e:	2300      	movge	r3, #0
 800bd70:	9312      	str	r3, [sp, #72]	@ 0x48
 800bd72:	2400      	movs	r4, #0
 800bd74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bd78:	9316      	str	r3, [sp, #88]	@ 0x58
 800bd7a:	46a0      	mov	r8, r4
 800bd7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd7e:	9805      	ldr	r0, [sp, #20]
 800bd80:	6859      	ldr	r1, [r3, #4]
 800bd82:	f001 f8eb 	bl	800cf5c <_Balloc>
 800bd86:	4681      	mov	r9, r0
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	f43f aef4 	beq.w	800bb76 <_strtod_l+0x43e>
 800bd8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd90:	691a      	ldr	r2, [r3, #16]
 800bd92:	3202      	adds	r2, #2
 800bd94:	f103 010c 	add.w	r1, r3, #12
 800bd98:	0092      	lsls	r2, r2, #2
 800bd9a:	300c      	adds	r0, #12
 800bd9c:	f000 fd31 	bl	800c802 <memcpy>
 800bda0:	ec4b ab10 	vmov	d0, sl, fp
 800bda4:	9805      	ldr	r0, [sp, #20]
 800bda6:	aa1c      	add	r2, sp, #112	@ 0x70
 800bda8:	a91b      	add	r1, sp, #108	@ 0x6c
 800bdaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bdae:	f001 fcb9 	bl	800d724 <__d2b>
 800bdb2:	901a      	str	r0, [sp, #104]	@ 0x68
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	f43f aede 	beq.w	800bb76 <_strtod_l+0x43e>
 800bdba:	9805      	ldr	r0, [sp, #20]
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	f001 fa0b 	bl	800d1d8 <__i2b>
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	b948      	cbnz	r0, 800bdda <_strtod_l+0x6a2>
 800bdc6:	f04f 0800 	mov.w	r8, #0
 800bdca:	e6d4      	b.n	800bb76 <_strtod_l+0x43e>
 800bdcc:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd4:	ea03 0a0a 	and.w	sl, r3, sl
 800bdd8:	e7b0      	b.n	800bd3c <_strtod_l+0x604>
 800bdda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bddc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bdde:	2d00      	cmp	r5, #0
 800bde0:	bfab      	itete	ge
 800bde2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bde4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bde6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bde8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bdea:	bfac      	ite	ge
 800bdec:	18ef      	addge	r7, r5, r3
 800bdee:	1b5e      	sublt	r6, r3, r5
 800bdf0:	9b08      	ldr	r3, [sp, #32]
 800bdf2:	1aed      	subs	r5, r5, r3
 800bdf4:	4415      	add	r5, r2
 800bdf6:	4b66      	ldr	r3, [pc, #408]	@ (800bf90 <_strtod_l+0x858>)
 800bdf8:	3d01      	subs	r5, #1
 800bdfa:	429d      	cmp	r5, r3
 800bdfc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800be00:	da50      	bge.n	800bea4 <_strtod_l+0x76c>
 800be02:	1b5b      	subs	r3, r3, r5
 800be04:	2b1f      	cmp	r3, #31
 800be06:	eba2 0203 	sub.w	r2, r2, r3
 800be0a:	f04f 0101 	mov.w	r1, #1
 800be0e:	dc3d      	bgt.n	800be8c <_strtod_l+0x754>
 800be10:	fa01 f303 	lsl.w	r3, r1, r3
 800be14:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be16:	2300      	movs	r3, #0
 800be18:	9310      	str	r3, [sp, #64]	@ 0x40
 800be1a:	18bd      	adds	r5, r7, r2
 800be1c:	9b08      	ldr	r3, [sp, #32]
 800be1e:	42af      	cmp	r7, r5
 800be20:	4416      	add	r6, r2
 800be22:	441e      	add	r6, r3
 800be24:	463b      	mov	r3, r7
 800be26:	bfa8      	it	ge
 800be28:	462b      	movge	r3, r5
 800be2a:	42b3      	cmp	r3, r6
 800be2c:	bfa8      	it	ge
 800be2e:	4633      	movge	r3, r6
 800be30:	2b00      	cmp	r3, #0
 800be32:	bfc2      	ittt	gt
 800be34:	1aed      	subgt	r5, r5, r3
 800be36:	1af6      	subgt	r6, r6, r3
 800be38:	1aff      	subgt	r7, r7, r3
 800be3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	dd16      	ble.n	800be6e <_strtod_l+0x736>
 800be40:	4641      	mov	r1, r8
 800be42:	9805      	ldr	r0, [sp, #20]
 800be44:	461a      	mov	r2, r3
 800be46:	f001 fa87 	bl	800d358 <__pow5mult>
 800be4a:	4680      	mov	r8, r0
 800be4c:	2800      	cmp	r0, #0
 800be4e:	d0ba      	beq.n	800bdc6 <_strtod_l+0x68e>
 800be50:	4601      	mov	r1, r0
 800be52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800be54:	9805      	ldr	r0, [sp, #20]
 800be56:	f001 f9d5 	bl	800d204 <__multiply>
 800be5a:	900e      	str	r0, [sp, #56]	@ 0x38
 800be5c:	2800      	cmp	r0, #0
 800be5e:	f43f ae8a 	beq.w	800bb76 <_strtod_l+0x43e>
 800be62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be64:	9805      	ldr	r0, [sp, #20]
 800be66:	f001 f8b9 	bl	800cfdc <_Bfree>
 800be6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800be6e:	2d00      	cmp	r5, #0
 800be70:	dc1d      	bgt.n	800beae <_strtod_l+0x776>
 800be72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be74:	2b00      	cmp	r3, #0
 800be76:	dd23      	ble.n	800bec0 <_strtod_l+0x788>
 800be78:	4649      	mov	r1, r9
 800be7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800be7c:	9805      	ldr	r0, [sp, #20]
 800be7e:	f001 fa6b 	bl	800d358 <__pow5mult>
 800be82:	4681      	mov	r9, r0
 800be84:	b9e0      	cbnz	r0, 800bec0 <_strtod_l+0x788>
 800be86:	f04f 0900 	mov.w	r9, #0
 800be8a:	e674      	b.n	800bb76 <_strtod_l+0x43e>
 800be8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800be90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800be94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800be98:	35e2      	adds	r5, #226	@ 0xe2
 800be9a:	fa01 f305 	lsl.w	r3, r1, r5
 800be9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bea0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bea2:	e7ba      	b.n	800be1a <_strtod_l+0x6e2>
 800bea4:	2300      	movs	r3, #0
 800bea6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bea8:	2301      	movs	r3, #1
 800beaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800beac:	e7b5      	b.n	800be1a <_strtod_l+0x6e2>
 800beae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800beb0:	9805      	ldr	r0, [sp, #20]
 800beb2:	462a      	mov	r2, r5
 800beb4:	f001 faaa 	bl	800d40c <__lshift>
 800beb8:	901a      	str	r0, [sp, #104]	@ 0x68
 800beba:	2800      	cmp	r0, #0
 800bebc:	d1d9      	bne.n	800be72 <_strtod_l+0x73a>
 800bebe:	e65a      	b.n	800bb76 <_strtod_l+0x43e>
 800bec0:	2e00      	cmp	r6, #0
 800bec2:	dd07      	ble.n	800bed4 <_strtod_l+0x79c>
 800bec4:	4649      	mov	r1, r9
 800bec6:	9805      	ldr	r0, [sp, #20]
 800bec8:	4632      	mov	r2, r6
 800beca:	f001 fa9f 	bl	800d40c <__lshift>
 800bece:	4681      	mov	r9, r0
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d0d8      	beq.n	800be86 <_strtod_l+0x74e>
 800bed4:	2f00      	cmp	r7, #0
 800bed6:	dd08      	ble.n	800beea <_strtod_l+0x7b2>
 800bed8:	4641      	mov	r1, r8
 800beda:	9805      	ldr	r0, [sp, #20]
 800bedc:	463a      	mov	r2, r7
 800bede:	f001 fa95 	bl	800d40c <__lshift>
 800bee2:	4680      	mov	r8, r0
 800bee4:	2800      	cmp	r0, #0
 800bee6:	f43f ae46 	beq.w	800bb76 <_strtod_l+0x43e>
 800beea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800beec:	9805      	ldr	r0, [sp, #20]
 800beee:	464a      	mov	r2, r9
 800bef0:	f001 fb14 	bl	800d51c <__mdiff>
 800bef4:	4604      	mov	r4, r0
 800bef6:	2800      	cmp	r0, #0
 800bef8:	f43f ae3d 	beq.w	800bb76 <_strtod_l+0x43e>
 800befc:	68c3      	ldr	r3, [r0, #12]
 800befe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf00:	2300      	movs	r3, #0
 800bf02:	60c3      	str	r3, [r0, #12]
 800bf04:	4641      	mov	r1, r8
 800bf06:	f001 faed 	bl	800d4e4 <__mcmp>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	da46      	bge.n	800bf9c <_strtod_l+0x864>
 800bf0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf10:	ea53 030a 	orrs.w	r3, r3, sl
 800bf14:	d16c      	bne.n	800bff0 <_strtod_l+0x8b8>
 800bf16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d168      	bne.n	800bff0 <_strtod_l+0x8b8>
 800bf1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf22:	0d1b      	lsrs	r3, r3, #20
 800bf24:	051b      	lsls	r3, r3, #20
 800bf26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bf2a:	d961      	bls.n	800bff0 <_strtod_l+0x8b8>
 800bf2c:	6963      	ldr	r3, [r4, #20]
 800bf2e:	b913      	cbnz	r3, 800bf36 <_strtod_l+0x7fe>
 800bf30:	6923      	ldr	r3, [r4, #16]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	dd5c      	ble.n	800bff0 <_strtod_l+0x8b8>
 800bf36:	4621      	mov	r1, r4
 800bf38:	2201      	movs	r2, #1
 800bf3a:	9805      	ldr	r0, [sp, #20]
 800bf3c:	f001 fa66 	bl	800d40c <__lshift>
 800bf40:	4641      	mov	r1, r8
 800bf42:	4604      	mov	r4, r0
 800bf44:	f001 face 	bl	800d4e4 <__mcmp>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	dd51      	ble.n	800bff0 <_strtod_l+0x8b8>
 800bf4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf50:	9a08      	ldr	r2, [sp, #32]
 800bf52:	0d1b      	lsrs	r3, r3, #20
 800bf54:	051b      	lsls	r3, r3, #20
 800bf56:	2a00      	cmp	r2, #0
 800bf58:	d06b      	beq.n	800c032 <_strtod_l+0x8fa>
 800bf5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bf5e:	d868      	bhi.n	800c032 <_strtod_l+0x8fa>
 800bf60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bf64:	f67f ae9d 	bls.w	800bca2 <_strtod_l+0x56a>
 800bf68:	4b0a      	ldr	r3, [pc, #40]	@ (800bf94 <_strtod_l+0x85c>)
 800bf6a:	4650      	mov	r0, sl
 800bf6c:	4659      	mov	r1, fp
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f7f4 fb52 	bl	8000618 <__aeabi_dmul>
 800bf74:	4b08      	ldr	r3, [pc, #32]	@ (800bf98 <_strtod_l+0x860>)
 800bf76:	400b      	ands	r3, r1
 800bf78:	4682      	mov	sl, r0
 800bf7a:	468b      	mov	fp, r1
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f47f ae05 	bne.w	800bb8c <_strtod_l+0x454>
 800bf82:	9a05      	ldr	r2, [sp, #20]
 800bf84:	2322      	movs	r3, #34	@ 0x22
 800bf86:	6013      	str	r3, [r2, #0]
 800bf88:	e600      	b.n	800bb8c <_strtod_l+0x454>
 800bf8a:	bf00      	nop
 800bf8c:	0804bf80 	.word	0x0804bf80
 800bf90:	fffffc02 	.word	0xfffffc02
 800bf94:	39500000 	.word	0x39500000
 800bf98:	7ff00000 	.word	0x7ff00000
 800bf9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bfa0:	d165      	bne.n	800c06e <_strtod_l+0x936>
 800bfa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bfa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bfa8:	b35a      	cbz	r2, 800c002 <_strtod_l+0x8ca>
 800bfaa:	4a9f      	ldr	r2, [pc, #636]	@ (800c228 <_strtod_l+0xaf0>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d12b      	bne.n	800c008 <_strtod_l+0x8d0>
 800bfb0:	9b08      	ldr	r3, [sp, #32]
 800bfb2:	4651      	mov	r1, sl
 800bfb4:	b303      	cbz	r3, 800bff8 <_strtod_l+0x8c0>
 800bfb6:	4b9d      	ldr	r3, [pc, #628]	@ (800c22c <_strtod_l+0xaf4>)
 800bfb8:	465a      	mov	r2, fp
 800bfba:	4013      	ands	r3, r2
 800bfbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bfc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfc4:	d81b      	bhi.n	800bffe <_strtod_l+0x8c6>
 800bfc6:	0d1b      	lsrs	r3, r3, #20
 800bfc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bfcc:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd0:	4299      	cmp	r1, r3
 800bfd2:	d119      	bne.n	800c008 <_strtod_l+0x8d0>
 800bfd4:	4b96      	ldr	r3, [pc, #600]	@ (800c230 <_strtod_l+0xaf8>)
 800bfd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d102      	bne.n	800bfe2 <_strtod_l+0x8aa>
 800bfdc:	3101      	adds	r1, #1
 800bfde:	f43f adca 	beq.w	800bb76 <_strtod_l+0x43e>
 800bfe2:	4b92      	ldr	r3, [pc, #584]	@ (800c22c <_strtod_l+0xaf4>)
 800bfe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfe6:	401a      	ands	r2, r3
 800bfe8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bfec:	f04f 0a00 	mov.w	sl, #0
 800bff0:	9b08      	ldr	r3, [sp, #32]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1b8      	bne.n	800bf68 <_strtod_l+0x830>
 800bff6:	e5c9      	b.n	800bb8c <_strtod_l+0x454>
 800bff8:	f04f 33ff 	mov.w	r3, #4294967295
 800bffc:	e7e8      	b.n	800bfd0 <_strtod_l+0x898>
 800bffe:	4613      	mov	r3, r2
 800c000:	e7e6      	b.n	800bfd0 <_strtod_l+0x898>
 800c002:	ea53 030a 	orrs.w	r3, r3, sl
 800c006:	d0a1      	beq.n	800bf4c <_strtod_l+0x814>
 800c008:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c00a:	b1db      	cbz	r3, 800c044 <_strtod_l+0x90c>
 800c00c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c00e:	4213      	tst	r3, r2
 800c010:	d0ee      	beq.n	800bff0 <_strtod_l+0x8b8>
 800c012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c014:	9a08      	ldr	r2, [sp, #32]
 800c016:	4650      	mov	r0, sl
 800c018:	4659      	mov	r1, fp
 800c01a:	b1bb      	cbz	r3, 800c04c <_strtod_l+0x914>
 800c01c:	f7ff fb6e 	bl	800b6fc <sulp>
 800c020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c024:	ec53 2b10 	vmov	r2, r3, d0
 800c028:	f7f4 f940 	bl	80002ac <__adddf3>
 800c02c:	4682      	mov	sl, r0
 800c02e:	468b      	mov	fp, r1
 800c030:	e7de      	b.n	800bff0 <_strtod_l+0x8b8>
 800c032:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c036:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c03a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c03e:	f04f 3aff 	mov.w	sl, #4294967295
 800c042:	e7d5      	b.n	800bff0 <_strtod_l+0x8b8>
 800c044:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c046:	ea13 0f0a 	tst.w	r3, sl
 800c04a:	e7e1      	b.n	800c010 <_strtod_l+0x8d8>
 800c04c:	f7ff fb56 	bl	800b6fc <sulp>
 800c050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c054:	ec53 2b10 	vmov	r2, r3, d0
 800c058:	f7f4 f926 	bl	80002a8 <__aeabi_dsub>
 800c05c:	2200      	movs	r2, #0
 800c05e:	2300      	movs	r3, #0
 800c060:	4682      	mov	sl, r0
 800c062:	468b      	mov	fp, r1
 800c064:	f7f4 fd40 	bl	8000ae8 <__aeabi_dcmpeq>
 800c068:	2800      	cmp	r0, #0
 800c06a:	d0c1      	beq.n	800bff0 <_strtod_l+0x8b8>
 800c06c:	e619      	b.n	800bca2 <_strtod_l+0x56a>
 800c06e:	4641      	mov	r1, r8
 800c070:	4620      	mov	r0, r4
 800c072:	f001 fbaf 	bl	800d7d4 <__ratio>
 800c076:	ec57 6b10 	vmov	r6, r7, d0
 800c07a:	2200      	movs	r2, #0
 800c07c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c080:	4630      	mov	r0, r6
 800c082:	4639      	mov	r1, r7
 800c084:	f7f4 fd44 	bl	8000b10 <__aeabi_dcmple>
 800c088:	2800      	cmp	r0, #0
 800c08a:	d06f      	beq.n	800c16c <_strtod_l+0xa34>
 800c08c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d17a      	bne.n	800c188 <_strtod_l+0xa50>
 800c092:	f1ba 0f00 	cmp.w	sl, #0
 800c096:	d158      	bne.n	800c14a <_strtod_l+0xa12>
 800c098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c09a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d15a      	bne.n	800c158 <_strtod_l+0xa20>
 800c0a2:	4b64      	ldr	r3, [pc, #400]	@ (800c234 <_strtod_l+0xafc>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	4639      	mov	r1, r7
 800c0aa:	f7f4 fd27 	bl	8000afc <__aeabi_dcmplt>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d159      	bne.n	800c166 <_strtod_l+0xa2e>
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	4639      	mov	r1, r7
 800c0b6:	4b60      	ldr	r3, [pc, #384]	@ (800c238 <_strtod_l+0xb00>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f7f4 faad 	bl	8000618 <__aeabi_dmul>
 800c0be:	4606      	mov	r6, r0
 800c0c0:	460f      	mov	r7, r1
 800c0c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c0c6:	9606      	str	r6, [sp, #24]
 800c0c8:	9307      	str	r3, [sp, #28]
 800c0ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0ce:	4d57      	ldr	r5, [pc, #348]	@ (800c22c <_strtod_l+0xaf4>)
 800c0d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c0d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0d6:	401d      	ands	r5, r3
 800c0d8:	4b58      	ldr	r3, [pc, #352]	@ (800c23c <_strtod_l+0xb04>)
 800c0da:	429d      	cmp	r5, r3
 800c0dc:	f040 80b2 	bne.w	800c244 <_strtod_l+0xb0c>
 800c0e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c0e6:	ec4b ab10 	vmov	d0, sl, fp
 800c0ea:	f001 faab 	bl	800d644 <__ulp>
 800c0ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0f2:	ec51 0b10 	vmov	r0, r1, d0
 800c0f6:	f7f4 fa8f 	bl	8000618 <__aeabi_dmul>
 800c0fa:	4652      	mov	r2, sl
 800c0fc:	465b      	mov	r3, fp
 800c0fe:	f7f4 f8d5 	bl	80002ac <__adddf3>
 800c102:	460b      	mov	r3, r1
 800c104:	4949      	ldr	r1, [pc, #292]	@ (800c22c <_strtod_l+0xaf4>)
 800c106:	4a4e      	ldr	r2, [pc, #312]	@ (800c240 <_strtod_l+0xb08>)
 800c108:	4019      	ands	r1, r3
 800c10a:	4291      	cmp	r1, r2
 800c10c:	4682      	mov	sl, r0
 800c10e:	d942      	bls.n	800c196 <_strtod_l+0xa5e>
 800c110:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c112:	4b47      	ldr	r3, [pc, #284]	@ (800c230 <_strtod_l+0xaf8>)
 800c114:	429a      	cmp	r2, r3
 800c116:	d103      	bne.n	800c120 <_strtod_l+0x9e8>
 800c118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c11a:	3301      	adds	r3, #1
 800c11c:	f43f ad2b 	beq.w	800bb76 <_strtod_l+0x43e>
 800c120:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c230 <_strtod_l+0xaf8>
 800c124:	f04f 3aff 	mov.w	sl, #4294967295
 800c128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c12a:	9805      	ldr	r0, [sp, #20]
 800c12c:	f000 ff56 	bl	800cfdc <_Bfree>
 800c130:	9805      	ldr	r0, [sp, #20]
 800c132:	4649      	mov	r1, r9
 800c134:	f000 ff52 	bl	800cfdc <_Bfree>
 800c138:	9805      	ldr	r0, [sp, #20]
 800c13a:	4641      	mov	r1, r8
 800c13c:	f000 ff4e 	bl	800cfdc <_Bfree>
 800c140:	9805      	ldr	r0, [sp, #20]
 800c142:	4621      	mov	r1, r4
 800c144:	f000 ff4a 	bl	800cfdc <_Bfree>
 800c148:	e618      	b.n	800bd7c <_strtod_l+0x644>
 800c14a:	f1ba 0f01 	cmp.w	sl, #1
 800c14e:	d103      	bne.n	800c158 <_strtod_l+0xa20>
 800c150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c152:	2b00      	cmp	r3, #0
 800c154:	f43f ada5 	beq.w	800bca2 <_strtod_l+0x56a>
 800c158:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c208 <_strtod_l+0xad0>
 800c15c:	4f35      	ldr	r7, [pc, #212]	@ (800c234 <_strtod_l+0xafc>)
 800c15e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c162:	2600      	movs	r6, #0
 800c164:	e7b1      	b.n	800c0ca <_strtod_l+0x992>
 800c166:	4f34      	ldr	r7, [pc, #208]	@ (800c238 <_strtod_l+0xb00>)
 800c168:	2600      	movs	r6, #0
 800c16a:	e7aa      	b.n	800c0c2 <_strtod_l+0x98a>
 800c16c:	4b32      	ldr	r3, [pc, #200]	@ (800c238 <_strtod_l+0xb00>)
 800c16e:	4630      	mov	r0, r6
 800c170:	4639      	mov	r1, r7
 800c172:	2200      	movs	r2, #0
 800c174:	f7f4 fa50 	bl	8000618 <__aeabi_dmul>
 800c178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c17a:	4606      	mov	r6, r0
 800c17c:	460f      	mov	r7, r1
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d09f      	beq.n	800c0c2 <_strtod_l+0x98a>
 800c182:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c186:	e7a0      	b.n	800c0ca <_strtod_l+0x992>
 800c188:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c210 <_strtod_l+0xad8>
 800c18c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c190:	ec57 6b17 	vmov	r6, r7, d7
 800c194:	e799      	b.n	800c0ca <_strtod_l+0x992>
 800c196:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c19a:	9b08      	ldr	r3, [sp, #32]
 800c19c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1c1      	bne.n	800c128 <_strtod_l+0x9f0>
 800c1a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c1a8:	0d1b      	lsrs	r3, r3, #20
 800c1aa:	051b      	lsls	r3, r3, #20
 800c1ac:	429d      	cmp	r5, r3
 800c1ae:	d1bb      	bne.n	800c128 <_strtod_l+0x9f0>
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	4639      	mov	r1, r7
 800c1b4:	f7f4 fd2a 	bl	8000c0c <__aeabi_d2lz>
 800c1b8:	f7f4 fa00 	bl	80005bc <__aeabi_l2d>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	460b      	mov	r3, r1
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	4639      	mov	r1, r7
 800c1c4:	f7f4 f870 	bl	80002a8 <__aeabi_dsub>
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c1d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1d6:	ea46 060a 	orr.w	r6, r6, sl
 800c1da:	431e      	orrs	r6, r3
 800c1dc:	d06f      	beq.n	800c2be <_strtod_l+0xb86>
 800c1de:	a30e      	add	r3, pc, #56	@ (adr r3, 800c218 <_strtod_l+0xae0>)
 800c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e4:	f7f4 fc8a 	bl	8000afc <__aeabi_dcmplt>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	f47f accf 	bne.w	800bb8c <_strtod_l+0x454>
 800c1ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800c220 <_strtod_l+0xae8>)
 800c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1f8:	f7f4 fc9e 	bl	8000b38 <__aeabi_dcmpgt>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d093      	beq.n	800c128 <_strtod_l+0x9f0>
 800c200:	e4c4      	b.n	800bb8c <_strtod_l+0x454>
 800c202:	bf00      	nop
 800c204:	f3af 8000 	nop.w
 800c208:	00000000 	.word	0x00000000
 800c20c:	bff00000 	.word	0xbff00000
 800c210:	00000000 	.word	0x00000000
 800c214:	3ff00000 	.word	0x3ff00000
 800c218:	94a03595 	.word	0x94a03595
 800c21c:	3fdfffff 	.word	0x3fdfffff
 800c220:	35afe535 	.word	0x35afe535
 800c224:	3fe00000 	.word	0x3fe00000
 800c228:	000fffff 	.word	0x000fffff
 800c22c:	7ff00000 	.word	0x7ff00000
 800c230:	7fefffff 	.word	0x7fefffff
 800c234:	3ff00000 	.word	0x3ff00000
 800c238:	3fe00000 	.word	0x3fe00000
 800c23c:	7fe00000 	.word	0x7fe00000
 800c240:	7c9fffff 	.word	0x7c9fffff
 800c244:	9b08      	ldr	r3, [sp, #32]
 800c246:	b323      	cbz	r3, 800c292 <_strtod_l+0xb5a>
 800c248:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c24c:	d821      	bhi.n	800c292 <_strtod_l+0xb5a>
 800c24e:	a328      	add	r3, pc, #160	@ (adr r3, 800c2f0 <_strtod_l+0xbb8>)
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	4630      	mov	r0, r6
 800c256:	4639      	mov	r1, r7
 800c258:	f7f4 fc5a 	bl	8000b10 <__aeabi_dcmple>
 800c25c:	b1a0      	cbz	r0, 800c288 <_strtod_l+0xb50>
 800c25e:	4639      	mov	r1, r7
 800c260:	4630      	mov	r0, r6
 800c262:	f7f4 fc9b 	bl	8000b9c <__aeabi_d2uiz>
 800c266:	2801      	cmp	r0, #1
 800c268:	bf38      	it	cc
 800c26a:	2001      	movcc	r0, #1
 800c26c:	f7f4 f95a 	bl	8000524 <__aeabi_ui2d>
 800c270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c272:	4606      	mov	r6, r0
 800c274:	460f      	mov	r7, r1
 800c276:	b9fb      	cbnz	r3, 800c2b8 <_strtod_l+0xb80>
 800c278:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c27c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c27e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c280:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c284:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c288:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c28a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c28e:	1b5b      	subs	r3, r3, r5
 800c290:	9311      	str	r3, [sp, #68]	@ 0x44
 800c292:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c296:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c29a:	f001 f9d3 	bl	800d644 <__ulp>
 800c29e:	4650      	mov	r0, sl
 800c2a0:	ec53 2b10 	vmov	r2, r3, d0
 800c2a4:	4659      	mov	r1, fp
 800c2a6:	f7f4 f9b7 	bl	8000618 <__aeabi_dmul>
 800c2aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c2ae:	f7f3 fffd 	bl	80002ac <__adddf3>
 800c2b2:	4682      	mov	sl, r0
 800c2b4:	468b      	mov	fp, r1
 800c2b6:	e770      	b.n	800c19a <_strtod_l+0xa62>
 800c2b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c2bc:	e7e0      	b.n	800c280 <_strtod_l+0xb48>
 800c2be:	a30e      	add	r3, pc, #56	@ (adr r3, 800c2f8 <_strtod_l+0xbc0>)
 800c2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c4:	f7f4 fc1a 	bl	8000afc <__aeabi_dcmplt>
 800c2c8:	e798      	b.n	800c1fc <_strtod_l+0xac4>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c2d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2d2:	6013      	str	r3, [r2, #0]
 800c2d4:	f7ff ba6d 	b.w	800b7b2 <_strtod_l+0x7a>
 800c2d8:	2a65      	cmp	r2, #101	@ 0x65
 800c2da:	f43f ab66 	beq.w	800b9aa <_strtod_l+0x272>
 800c2de:	2a45      	cmp	r2, #69	@ 0x45
 800c2e0:	f43f ab63 	beq.w	800b9aa <_strtod_l+0x272>
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	f7ff bb9e 	b.w	800ba26 <_strtod_l+0x2ee>
 800c2ea:	bf00      	nop
 800c2ec:	f3af 8000 	nop.w
 800c2f0:	ffc00000 	.word	0xffc00000
 800c2f4:	41dfffff 	.word	0x41dfffff
 800c2f8:	94a03595 	.word	0x94a03595
 800c2fc:	3fcfffff 	.word	0x3fcfffff

0800c300 <strtod>:
 800c300:	460a      	mov	r2, r1
 800c302:	4601      	mov	r1, r0
 800c304:	4802      	ldr	r0, [pc, #8]	@ (800c310 <strtod+0x10>)
 800c306:	4b03      	ldr	r3, [pc, #12]	@ (800c314 <strtod+0x14>)
 800c308:	6800      	ldr	r0, [r0, #0]
 800c30a:	f7ff ba15 	b.w	800b738 <_strtod_l>
 800c30e:	bf00      	nop
 800c310:	200029e0 	.word	0x200029e0
 800c314:	20002874 	.word	0x20002874

0800c318 <std>:
 800c318:	2300      	movs	r3, #0
 800c31a:	b510      	push	{r4, lr}
 800c31c:	4604      	mov	r4, r0
 800c31e:	e9c0 3300 	strd	r3, r3, [r0]
 800c322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c326:	6083      	str	r3, [r0, #8]
 800c328:	8181      	strh	r1, [r0, #12]
 800c32a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c32c:	81c2      	strh	r2, [r0, #14]
 800c32e:	6183      	str	r3, [r0, #24]
 800c330:	4619      	mov	r1, r3
 800c332:	2208      	movs	r2, #8
 800c334:	305c      	adds	r0, #92	@ 0x5c
 800c336:	f000 f975 	bl	800c624 <memset>
 800c33a:	4b0d      	ldr	r3, [pc, #52]	@ (800c370 <std+0x58>)
 800c33c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c33e:	4b0d      	ldr	r3, [pc, #52]	@ (800c374 <std+0x5c>)
 800c340:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c342:	4b0d      	ldr	r3, [pc, #52]	@ (800c378 <std+0x60>)
 800c344:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c346:	4b0d      	ldr	r3, [pc, #52]	@ (800c37c <std+0x64>)
 800c348:	6323      	str	r3, [r4, #48]	@ 0x30
 800c34a:	4b0d      	ldr	r3, [pc, #52]	@ (800c380 <std+0x68>)
 800c34c:	6224      	str	r4, [r4, #32]
 800c34e:	429c      	cmp	r4, r3
 800c350:	d006      	beq.n	800c360 <std+0x48>
 800c352:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c356:	4294      	cmp	r4, r2
 800c358:	d002      	beq.n	800c360 <std+0x48>
 800c35a:	33d0      	adds	r3, #208	@ 0xd0
 800c35c:	429c      	cmp	r4, r3
 800c35e:	d105      	bne.n	800c36c <std+0x54>
 800c360:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c368:	f000 ba48 	b.w	800c7fc <__retarget_lock_init_recursive>
 800c36c:	bd10      	pop	{r4, pc}
 800c36e:	bf00      	nop
 800c370:	0800c559 	.word	0x0800c559
 800c374:	0800c57f 	.word	0x0800c57f
 800c378:	0800c5b7 	.word	0x0800c5b7
 800c37c:	0800c5db 	.word	0x0800c5db
 800c380:	20003554 	.word	0x20003554

0800c384 <stdio_exit_handler>:
 800c384:	4a02      	ldr	r2, [pc, #8]	@ (800c390 <stdio_exit_handler+0xc>)
 800c386:	4903      	ldr	r1, [pc, #12]	@ (800c394 <stdio_exit_handler+0x10>)
 800c388:	4803      	ldr	r0, [pc, #12]	@ (800c398 <stdio_exit_handler+0x14>)
 800c38a:	f000 b869 	b.w	800c460 <_fwalk_sglue>
 800c38e:	bf00      	nop
 800c390:	20002868 	.word	0x20002868
 800c394:	0800e5f1 	.word	0x0800e5f1
 800c398:	200029e4 	.word	0x200029e4

0800c39c <cleanup_stdio>:
 800c39c:	6841      	ldr	r1, [r0, #4]
 800c39e:	4b0c      	ldr	r3, [pc, #48]	@ (800c3d0 <cleanup_stdio+0x34>)
 800c3a0:	4299      	cmp	r1, r3
 800c3a2:	b510      	push	{r4, lr}
 800c3a4:	4604      	mov	r4, r0
 800c3a6:	d001      	beq.n	800c3ac <cleanup_stdio+0x10>
 800c3a8:	f002 f922 	bl	800e5f0 <_fflush_r>
 800c3ac:	68a1      	ldr	r1, [r4, #8]
 800c3ae:	4b09      	ldr	r3, [pc, #36]	@ (800c3d4 <cleanup_stdio+0x38>)
 800c3b0:	4299      	cmp	r1, r3
 800c3b2:	d002      	beq.n	800c3ba <cleanup_stdio+0x1e>
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f002 f91b 	bl	800e5f0 <_fflush_r>
 800c3ba:	68e1      	ldr	r1, [r4, #12]
 800c3bc:	4b06      	ldr	r3, [pc, #24]	@ (800c3d8 <cleanup_stdio+0x3c>)
 800c3be:	4299      	cmp	r1, r3
 800c3c0:	d004      	beq.n	800c3cc <cleanup_stdio+0x30>
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3c8:	f002 b912 	b.w	800e5f0 <_fflush_r>
 800c3cc:	bd10      	pop	{r4, pc}
 800c3ce:	bf00      	nop
 800c3d0:	20003554 	.word	0x20003554
 800c3d4:	200035bc 	.word	0x200035bc
 800c3d8:	20003624 	.word	0x20003624

0800c3dc <global_stdio_init.part.0>:
 800c3dc:	b510      	push	{r4, lr}
 800c3de:	4b0b      	ldr	r3, [pc, #44]	@ (800c40c <global_stdio_init.part.0+0x30>)
 800c3e0:	4c0b      	ldr	r4, [pc, #44]	@ (800c410 <global_stdio_init.part.0+0x34>)
 800c3e2:	4a0c      	ldr	r2, [pc, #48]	@ (800c414 <global_stdio_init.part.0+0x38>)
 800c3e4:	601a      	str	r2, [r3, #0]
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	2104      	movs	r1, #4
 800c3ec:	f7ff ff94 	bl	800c318 <std>
 800c3f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	2109      	movs	r1, #9
 800c3f8:	f7ff ff8e 	bl	800c318 <std>
 800c3fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c400:	2202      	movs	r2, #2
 800c402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c406:	2112      	movs	r1, #18
 800c408:	f7ff bf86 	b.w	800c318 <std>
 800c40c:	2000368c 	.word	0x2000368c
 800c410:	20003554 	.word	0x20003554
 800c414:	0800c385 	.word	0x0800c385

0800c418 <__sfp_lock_acquire>:
 800c418:	4801      	ldr	r0, [pc, #4]	@ (800c420 <__sfp_lock_acquire+0x8>)
 800c41a:	f000 b9f0 	b.w	800c7fe <__retarget_lock_acquire_recursive>
 800c41e:	bf00      	nop
 800c420:	20003695 	.word	0x20003695

0800c424 <__sfp_lock_release>:
 800c424:	4801      	ldr	r0, [pc, #4]	@ (800c42c <__sfp_lock_release+0x8>)
 800c426:	f000 b9eb 	b.w	800c800 <__retarget_lock_release_recursive>
 800c42a:	bf00      	nop
 800c42c:	20003695 	.word	0x20003695

0800c430 <__sinit>:
 800c430:	b510      	push	{r4, lr}
 800c432:	4604      	mov	r4, r0
 800c434:	f7ff fff0 	bl	800c418 <__sfp_lock_acquire>
 800c438:	6a23      	ldr	r3, [r4, #32]
 800c43a:	b11b      	cbz	r3, 800c444 <__sinit+0x14>
 800c43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c440:	f7ff bff0 	b.w	800c424 <__sfp_lock_release>
 800c444:	4b04      	ldr	r3, [pc, #16]	@ (800c458 <__sinit+0x28>)
 800c446:	6223      	str	r3, [r4, #32]
 800c448:	4b04      	ldr	r3, [pc, #16]	@ (800c45c <__sinit+0x2c>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1f5      	bne.n	800c43c <__sinit+0xc>
 800c450:	f7ff ffc4 	bl	800c3dc <global_stdio_init.part.0>
 800c454:	e7f2      	b.n	800c43c <__sinit+0xc>
 800c456:	bf00      	nop
 800c458:	0800c39d 	.word	0x0800c39d
 800c45c:	2000368c 	.word	0x2000368c

0800c460 <_fwalk_sglue>:
 800c460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c464:	4607      	mov	r7, r0
 800c466:	4688      	mov	r8, r1
 800c468:	4614      	mov	r4, r2
 800c46a:	2600      	movs	r6, #0
 800c46c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c470:	f1b9 0901 	subs.w	r9, r9, #1
 800c474:	d505      	bpl.n	800c482 <_fwalk_sglue+0x22>
 800c476:	6824      	ldr	r4, [r4, #0]
 800c478:	2c00      	cmp	r4, #0
 800c47a:	d1f7      	bne.n	800c46c <_fwalk_sglue+0xc>
 800c47c:	4630      	mov	r0, r6
 800c47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c482:	89ab      	ldrh	r3, [r5, #12]
 800c484:	2b01      	cmp	r3, #1
 800c486:	d907      	bls.n	800c498 <_fwalk_sglue+0x38>
 800c488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c48c:	3301      	adds	r3, #1
 800c48e:	d003      	beq.n	800c498 <_fwalk_sglue+0x38>
 800c490:	4629      	mov	r1, r5
 800c492:	4638      	mov	r0, r7
 800c494:	47c0      	blx	r8
 800c496:	4306      	orrs	r6, r0
 800c498:	3568      	adds	r5, #104	@ 0x68
 800c49a:	e7e9      	b.n	800c470 <_fwalk_sglue+0x10>

0800c49c <sniprintf>:
 800c49c:	b40c      	push	{r2, r3}
 800c49e:	b530      	push	{r4, r5, lr}
 800c4a0:	4b17      	ldr	r3, [pc, #92]	@ (800c500 <sniprintf+0x64>)
 800c4a2:	1e0c      	subs	r4, r1, #0
 800c4a4:	681d      	ldr	r5, [r3, #0]
 800c4a6:	b09d      	sub	sp, #116	@ 0x74
 800c4a8:	da08      	bge.n	800c4bc <sniprintf+0x20>
 800c4aa:	238b      	movs	r3, #139	@ 0x8b
 800c4ac:	602b      	str	r3, [r5, #0]
 800c4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b2:	b01d      	add	sp, #116	@ 0x74
 800c4b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4b8:	b002      	add	sp, #8
 800c4ba:	4770      	bx	lr
 800c4bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c4c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c4c4:	bf14      	ite	ne
 800c4c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c4ca:	4623      	moveq	r3, r4
 800c4cc:	9304      	str	r3, [sp, #16]
 800c4ce:	9307      	str	r3, [sp, #28]
 800c4d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c4d4:	9002      	str	r0, [sp, #8]
 800c4d6:	9006      	str	r0, [sp, #24]
 800c4d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c4dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c4de:	ab21      	add	r3, sp, #132	@ 0x84
 800c4e0:	a902      	add	r1, sp, #8
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	9301      	str	r3, [sp, #4]
 800c4e6:	f001 fa5b 	bl	800d9a0 <_svfiprintf_r>
 800c4ea:	1c43      	adds	r3, r0, #1
 800c4ec:	bfbc      	itt	lt
 800c4ee:	238b      	movlt	r3, #139	@ 0x8b
 800c4f0:	602b      	strlt	r3, [r5, #0]
 800c4f2:	2c00      	cmp	r4, #0
 800c4f4:	d0dd      	beq.n	800c4b2 <sniprintf+0x16>
 800c4f6:	9b02      	ldr	r3, [sp, #8]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	701a      	strb	r2, [r3, #0]
 800c4fc:	e7d9      	b.n	800c4b2 <sniprintf+0x16>
 800c4fe:	bf00      	nop
 800c500:	200029e0 	.word	0x200029e0

0800c504 <siscanf>:
 800c504:	b40e      	push	{r1, r2, r3}
 800c506:	b530      	push	{r4, r5, lr}
 800c508:	b09c      	sub	sp, #112	@ 0x70
 800c50a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c50c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c510:	f854 5b04 	ldr.w	r5, [r4], #4
 800c514:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c518:	9002      	str	r0, [sp, #8]
 800c51a:	9006      	str	r0, [sp, #24]
 800c51c:	f7f3 fe62 	bl	80001e4 <strlen>
 800c520:	4b0b      	ldr	r3, [pc, #44]	@ (800c550 <siscanf+0x4c>)
 800c522:	9003      	str	r0, [sp, #12]
 800c524:	9007      	str	r0, [sp, #28]
 800c526:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c528:	480a      	ldr	r0, [pc, #40]	@ (800c554 <siscanf+0x50>)
 800c52a:	9401      	str	r4, [sp, #4]
 800c52c:	2300      	movs	r3, #0
 800c52e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c530:	9314      	str	r3, [sp, #80]	@ 0x50
 800c532:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c536:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c53a:	462a      	mov	r2, r5
 800c53c:	4623      	mov	r3, r4
 800c53e:	a902      	add	r1, sp, #8
 800c540:	6800      	ldr	r0, [r0, #0]
 800c542:	f001 fb81 	bl	800dc48 <__ssvfiscanf_r>
 800c546:	b01c      	add	sp, #112	@ 0x70
 800c548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c54c:	b003      	add	sp, #12
 800c54e:	4770      	bx	lr
 800c550:	0800c57b 	.word	0x0800c57b
 800c554:	200029e0 	.word	0x200029e0

0800c558 <__sread>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	460c      	mov	r4, r1
 800c55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c560:	f000 f8ee 	bl	800c740 <_read_r>
 800c564:	2800      	cmp	r0, #0
 800c566:	bfab      	itete	ge
 800c568:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c56a:	89a3      	ldrhlt	r3, [r4, #12]
 800c56c:	181b      	addge	r3, r3, r0
 800c56e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c572:	bfac      	ite	ge
 800c574:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c576:	81a3      	strhlt	r3, [r4, #12]
 800c578:	bd10      	pop	{r4, pc}

0800c57a <__seofread>:
 800c57a:	2000      	movs	r0, #0
 800c57c:	4770      	bx	lr

0800c57e <__swrite>:
 800c57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c582:	461f      	mov	r7, r3
 800c584:	898b      	ldrh	r3, [r1, #12]
 800c586:	05db      	lsls	r3, r3, #23
 800c588:	4605      	mov	r5, r0
 800c58a:	460c      	mov	r4, r1
 800c58c:	4616      	mov	r6, r2
 800c58e:	d505      	bpl.n	800c59c <__swrite+0x1e>
 800c590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c594:	2302      	movs	r3, #2
 800c596:	2200      	movs	r2, #0
 800c598:	f000 f8c0 	bl	800c71c <_lseek_r>
 800c59c:	89a3      	ldrh	r3, [r4, #12]
 800c59e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c5a6:	81a3      	strh	r3, [r4, #12]
 800c5a8:	4632      	mov	r2, r6
 800c5aa:	463b      	mov	r3, r7
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5b2:	f000 b8e7 	b.w	800c784 <_write_r>

0800c5b6 <__sseek>:
 800c5b6:	b510      	push	{r4, lr}
 800c5b8:	460c      	mov	r4, r1
 800c5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5be:	f000 f8ad 	bl	800c71c <_lseek_r>
 800c5c2:	1c43      	adds	r3, r0, #1
 800c5c4:	89a3      	ldrh	r3, [r4, #12]
 800c5c6:	bf15      	itete	ne
 800c5c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c5ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c5ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c5d2:	81a3      	strheq	r3, [r4, #12]
 800c5d4:	bf18      	it	ne
 800c5d6:	81a3      	strhne	r3, [r4, #12]
 800c5d8:	bd10      	pop	{r4, pc}

0800c5da <__sclose>:
 800c5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5de:	f000 b88d 	b.w	800c6fc <_close_r>
	...

0800c5e4 <_vsiprintf_r>:
 800c5e4:	b500      	push	{lr}
 800c5e6:	b09b      	sub	sp, #108	@ 0x6c
 800c5e8:	9100      	str	r1, [sp, #0]
 800c5ea:	9104      	str	r1, [sp, #16]
 800c5ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c5f0:	9105      	str	r1, [sp, #20]
 800c5f2:	9102      	str	r1, [sp, #8]
 800c5f4:	4905      	ldr	r1, [pc, #20]	@ (800c60c <_vsiprintf_r+0x28>)
 800c5f6:	9103      	str	r1, [sp, #12]
 800c5f8:	4669      	mov	r1, sp
 800c5fa:	f001 f9d1 	bl	800d9a0 <_svfiprintf_r>
 800c5fe:	9b00      	ldr	r3, [sp, #0]
 800c600:	2200      	movs	r2, #0
 800c602:	701a      	strb	r2, [r3, #0]
 800c604:	b01b      	add	sp, #108	@ 0x6c
 800c606:	f85d fb04 	ldr.w	pc, [sp], #4
 800c60a:	bf00      	nop
 800c60c:	ffff0208 	.word	0xffff0208

0800c610 <vsiprintf>:
 800c610:	4613      	mov	r3, r2
 800c612:	460a      	mov	r2, r1
 800c614:	4601      	mov	r1, r0
 800c616:	4802      	ldr	r0, [pc, #8]	@ (800c620 <vsiprintf+0x10>)
 800c618:	6800      	ldr	r0, [r0, #0]
 800c61a:	f7ff bfe3 	b.w	800c5e4 <_vsiprintf_r>
 800c61e:	bf00      	nop
 800c620:	200029e0 	.word	0x200029e0

0800c624 <memset>:
 800c624:	4402      	add	r2, r0
 800c626:	4603      	mov	r3, r0
 800c628:	4293      	cmp	r3, r2
 800c62a:	d100      	bne.n	800c62e <memset+0xa>
 800c62c:	4770      	bx	lr
 800c62e:	f803 1b01 	strb.w	r1, [r3], #1
 800c632:	e7f9      	b.n	800c628 <memset+0x4>

0800c634 <strncat>:
 800c634:	b530      	push	{r4, r5, lr}
 800c636:	4604      	mov	r4, r0
 800c638:	7825      	ldrb	r5, [r4, #0]
 800c63a:	4623      	mov	r3, r4
 800c63c:	3401      	adds	r4, #1
 800c63e:	2d00      	cmp	r5, #0
 800c640:	d1fa      	bne.n	800c638 <strncat+0x4>
 800c642:	3a01      	subs	r2, #1
 800c644:	d304      	bcc.n	800c650 <strncat+0x1c>
 800c646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c64a:	f803 4b01 	strb.w	r4, [r3], #1
 800c64e:	b904      	cbnz	r4, 800c652 <strncat+0x1e>
 800c650:	bd30      	pop	{r4, r5, pc}
 800c652:	2a00      	cmp	r2, #0
 800c654:	d1f5      	bne.n	800c642 <strncat+0xe>
 800c656:	701a      	strb	r2, [r3, #0]
 800c658:	e7f3      	b.n	800c642 <strncat+0xe>

0800c65a <strncmp>:
 800c65a:	b510      	push	{r4, lr}
 800c65c:	b16a      	cbz	r2, 800c67a <strncmp+0x20>
 800c65e:	3901      	subs	r1, #1
 800c660:	1884      	adds	r4, r0, r2
 800c662:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c666:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d103      	bne.n	800c676 <strncmp+0x1c>
 800c66e:	42a0      	cmp	r0, r4
 800c670:	d001      	beq.n	800c676 <strncmp+0x1c>
 800c672:	2a00      	cmp	r2, #0
 800c674:	d1f5      	bne.n	800c662 <strncmp+0x8>
 800c676:	1ad0      	subs	r0, r2, r3
 800c678:	bd10      	pop	{r4, pc}
 800c67a:	4610      	mov	r0, r2
 800c67c:	e7fc      	b.n	800c678 <strncmp+0x1e>

0800c67e <strncpy>:
 800c67e:	b510      	push	{r4, lr}
 800c680:	3901      	subs	r1, #1
 800c682:	4603      	mov	r3, r0
 800c684:	b132      	cbz	r2, 800c694 <strncpy+0x16>
 800c686:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c68a:	f803 4b01 	strb.w	r4, [r3], #1
 800c68e:	3a01      	subs	r2, #1
 800c690:	2c00      	cmp	r4, #0
 800c692:	d1f7      	bne.n	800c684 <strncpy+0x6>
 800c694:	441a      	add	r2, r3
 800c696:	2100      	movs	r1, #0
 800c698:	4293      	cmp	r3, r2
 800c69a:	d100      	bne.n	800c69e <strncpy+0x20>
 800c69c:	bd10      	pop	{r4, pc}
 800c69e:	f803 1b01 	strb.w	r1, [r3], #1
 800c6a2:	e7f9      	b.n	800c698 <strncpy+0x1a>

0800c6a4 <strrchr>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	d10e      	bne.n	800c6cc <strrchr+0x28>
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6b4:	f002 b851 	b.w	800e75a <strchr>
 800c6b8:	1c43      	adds	r3, r0, #1
 800c6ba:	4605      	mov	r5, r0
 800c6bc:	4621      	mov	r1, r4
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f002 f84b 	bl	800e75a <strchr>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d1f7      	bne.n	800c6b8 <strrchr+0x14>
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	bd38      	pop	{r3, r4, r5, pc}
 800c6cc:	2500      	movs	r5, #0
 800c6ce:	e7f5      	b.n	800c6bc <strrchr+0x18>

0800c6d0 <strstr>:
 800c6d0:	780a      	ldrb	r2, [r1, #0]
 800c6d2:	b570      	push	{r4, r5, r6, lr}
 800c6d4:	b96a      	cbnz	r2, 800c6f2 <strstr+0x22>
 800c6d6:	bd70      	pop	{r4, r5, r6, pc}
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d109      	bne.n	800c6f0 <strstr+0x20>
 800c6dc:	460c      	mov	r4, r1
 800c6de:	4605      	mov	r5, r0
 800c6e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d0f6      	beq.n	800c6d6 <strstr+0x6>
 800c6e8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c6ec:	429e      	cmp	r6, r3
 800c6ee:	d0f7      	beq.n	800c6e0 <strstr+0x10>
 800c6f0:	3001      	adds	r0, #1
 800c6f2:	7803      	ldrb	r3, [r0, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1ef      	bne.n	800c6d8 <strstr+0x8>
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	e7ec      	b.n	800c6d6 <strstr+0x6>

0800c6fc <_close_r>:
 800c6fc:	b538      	push	{r3, r4, r5, lr}
 800c6fe:	4d06      	ldr	r5, [pc, #24]	@ (800c718 <_close_r+0x1c>)
 800c700:	2300      	movs	r3, #0
 800c702:	4604      	mov	r4, r0
 800c704:	4608      	mov	r0, r1
 800c706:	602b      	str	r3, [r5, #0]
 800c708:	f7fb fa64 	bl	8007bd4 <_close>
 800c70c:	1c43      	adds	r3, r0, #1
 800c70e:	d102      	bne.n	800c716 <_close_r+0x1a>
 800c710:	682b      	ldr	r3, [r5, #0]
 800c712:	b103      	cbz	r3, 800c716 <_close_r+0x1a>
 800c714:	6023      	str	r3, [r4, #0]
 800c716:	bd38      	pop	{r3, r4, r5, pc}
 800c718:	20003690 	.word	0x20003690

0800c71c <_lseek_r>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4d07      	ldr	r5, [pc, #28]	@ (800c73c <_lseek_r+0x20>)
 800c720:	4604      	mov	r4, r0
 800c722:	4608      	mov	r0, r1
 800c724:	4611      	mov	r1, r2
 800c726:	2200      	movs	r2, #0
 800c728:	602a      	str	r2, [r5, #0]
 800c72a:	461a      	mov	r2, r3
 800c72c:	f7fb fa79 	bl	8007c22 <_lseek>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d102      	bne.n	800c73a <_lseek_r+0x1e>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	b103      	cbz	r3, 800c73a <_lseek_r+0x1e>
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	20003690 	.word	0x20003690

0800c740 <_read_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4d07      	ldr	r5, [pc, #28]	@ (800c760 <_read_r+0x20>)
 800c744:	4604      	mov	r4, r0
 800c746:	4608      	mov	r0, r1
 800c748:	4611      	mov	r1, r2
 800c74a:	2200      	movs	r2, #0
 800c74c:	602a      	str	r2, [r5, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	f7fb fa07 	bl	8007b62 <_read>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_read_r+0x1e>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_read_r+0x1e>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20003690 	.word	0x20003690

0800c764 <_sbrk_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	4d06      	ldr	r5, [pc, #24]	@ (800c780 <_sbrk_r+0x1c>)
 800c768:	2300      	movs	r3, #0
 800c76a:	4604      	mov	r4, r0
 800c76c:	4608      	mov	r0, r1
 800c76e:	602b      	str	r3, [r5, #0]
 800c770:	f7fb fa64 	bl	8007c3c <_sbrk>
 800c774:	1c43      	adds	r3, r0, #1
 800c776:	d102      	bne.n	800c77e <_sbrk_r+0x1a>
 800c778:	682b      	ldr	r3, [r5, #0]
 800c77a:	b103      	cbz	r3, 800c77e <_sbrk_r+0x1a>
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	bd38      	pop	{r3, r4, r5, pc}
 800c780:	20003690 	.word	0x20003690

0800c784 <_write_r>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	4d07      	ldr	r5, [pc, #28]	@ (800c7a4 <_write_r+0x20>)
 800c788:	4604      	mov	r4, r0
 800c78a:	4608      	mov	r0, r1
 800c78c:	4611      	mov	r1, r2
 800c78e:	2200      	movs	r2, #0
 800c790:	602a      	str	r2, [r5, #0]
 800c792:	461a      	mov	r2, r3
 800c794:	f7fb fa02 	bl	8007b9c <_write>
 800c798:	1c43      	adds	r3, r0, #1
 800c79a:	d102      	bne.n	800c7a2 <_write_r+0x1e>
 800c79c:	682b      	ldr	r3, [r5, #0]
 800c79e:	b103      	cbz	r3, 800c7a2 <_write_r+0x1e>
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	bd38      	pop	{r3, r4, r5, pc}
 800c7a4:	20003690 	.word	0x20003690

0800c7a8 <__errno>:
 800c7a8:	4b01      	ldr	r3, [pc, #4]	@ (800c7b0 <__errno+0x8>)
 800c7aa:	6818      	ldr	r0, [r3, #0]
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	200029e0 	.word	0x200029e0

0800c7b4 <__libc_init_array>:
 800c7b4:	b570      	push	{r4, r5, r6, lr}
 800c7b6:	4d0d      	ldr	r5, [pc, #52]	@ (800c7ec <__libc_init_array+0x38>)
 800c7b8:	4c0d      	ldr	r4, [pc, #52]	@ (800c7f0 <__libc_init_array+0x3c>)
 800c7ba:	1b64      	subs	r4, r4, r5
 800c7bc:	10a4      	asrs	r4, r4, #2
 800c7be:	2600      	movs	r6, #0
 800c7c0:	42a6      	cmp	r6, r4
 800c7c2:	d109      	bne.n	800c7d8 <__libc_init_array+0x24>
 800c7c4:	4d0b      	ldr	r5, [pc, #44]	@ (800c7f4 <__libc_init_array+0x40>)
 800c7c6:	4c0c      	ldr	r4, [pc, #48]	@ (800c7f8 <__libc_init_array+0x44>)
 800c7c8:	f002 fba8 	bl	800ef1c <_init>
 800c7cc:	1b64      	subs	r4, r4, r5
 800c7ce:	10a4      	asrs	r4, r4, #2
 800c7d0:	2600      	movs	r6, #0
 800c7d2:	42a6      	cmp	r6, r4
 800c7d4:	d105      	bne.n	800c7e2 <__libc_init_array+0x2e>
 800c7d6:	bd70      	pop	{r4, r5, r6, pc}
 800c7d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7dc:	4798      	blx	r3
 800c7de:	3601      	adds	r6, #1
 800c7e0:	e7ee      	b.n	800c7c0 <__libc_init_array+0xc>
 800c7e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7e6:	4798      	blx	r3
 800c7e8:	3601      	adds	r6, #1
 800c7ea:	e7f2      	b.n	800c7d2 <__libc_init_array+0x1e>
 800c7ec:	0804c324 	.word	0x0804c324
 800c7f0:	0804c324 	.word	0x0804c324
 800c7f4:	0804c324 	.word	0x0804c324
 800c7f8:	0804c328 	.word	0x0804c328

0800c7fc <__retarget_lock_init_recursive>:
 800c7fc:	4770      	bx	lr

0800c7fe <__retarget_lock_acquire_recursive>:
 800c7fe:	4770      	bx	lr

0800c800 <__retarget_lock_release_recursive>:
 800c800:	4770      	bx	lr

0800c802 <memcpy>:
 800c802:	440a      	add	r2, r1
 800c804:	4291      	cmp	r1, r2
 800c806:	f100 33ff 	add.w	r3, r0, #4294967295
 800c80a:	d100      	bne.n	800c80e <memcpy+0xc>
 800c80c:	4770      	bx	lr
 800c80e:	b510      	push	{r4, lr}
 800c810:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c814:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c818:	4291      	cmp	r1, r2
 800c81a:	d1f9      	bne.n	800c810 <memcpy+0xe>
 800c81c:	bd10      	pop	{r4, pc}
	...

0800c820 <nan>:
 800c820:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c828 <nan+0x8>
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	00000000 	.word	0x00000000
 800c82c:	7ff80000 	.word	0x7ff80000

0800c830 <_free_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4605      	mov	r5, r0
 800c834:	2900      	cmp	r1, #0
 800c836:	d041      	beq.n	800c8bc <_free_r+0x8c>
 800c838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c83c:	1f0c      	subs	r4, r1, #4
 800c83e:	2b00      	cmp	r3, #0
 800c840:	bfb8      	it	lt
 800c842:	18e4      	addlt	r4, r4, r3
 800c844:	f7fe ff18 	bl	800b678 <__malloc_lock>
 800c848:	4a1d      	ldr	r2, [pc, #116]	@ (800c8c0 <_free_r+0x90>)
 800c84a:	6813      	ldr	r3, [r2, #0]
 800c84c:	b933      	cbnz	r3, 800c85c <_free_r+0x2c>
 800c84e:	6063      	str	r3, [r4, #4]
 800c850:	6014      	str	r4, [r2, #0]
 800c852:	4628      	mov	r0, r5
 800c854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c858:	f7fe bf14 	b.w	800b684 <__malloc_unlock>
 800c85c:	42a3      	cmp	r3, r4
 800c85e:	d908      	bls.n	800c872 <_free_r+0x42>
 800c860:	6820      	ldr	r0, [r4, #0]
 800c862:	1821      	adds	r1, r4, r0
 800c864:	428b      	cmp	r3, r1
 800c866:	bf01      	itttt	eq
 800c868:	6819      	ldreq	r1, [r3, #0]
 800c86a:	685b      	ldreq	r3, [r3, #4]
 800c86c:	1809      	addeq	r1, r1, r0
 800c86e:	6021      	streq	r1, [r4, #0]
 800c870:	e7ed      	b.n	800c84e <_free_r+0x1e>
 800c872:	461a      	mov	r2, r3
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	b10b      	cbz	r3, 800c87c <_free_r+0x4c>
 800c878:	42a3      	cmp	r3, r4
 800c87a:	d9fa      	bls.n	800c872 <_free_r+0x42>
 800c87c:	6811      	ldr	r1, [r2, #0]
 800c87e:	1850      	adds	r0, r2, r1
 800c880:	42a0      	cmp	r0, r4
 800c882:	d10b      	bne.n	800c89c <_free_r+0x6c>
 800c884:	6820      	ldr	r0, [r4, #0]
 800c886:	4401      	add	r1, r0
 800c888:	1850      	adds	r0, r2, r1
 800c88a:	4283      	cmp	r3, r0
 800c88c:	6011      	str	r1, [r2, #0]
 800c88e:	d1e0      	bne.n	800c852 <_free_r+0x22>
 800c890:	6818      	ldr	r0, [r3, #0]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	6053      	str	r3, [r2, #4]
 800c896:	4408      	add	r0, r1
 800c898:	6010      	str	r0, [r2, #0]
 800c89a:	e7da      	b.n	800c852 <_free_r+0x22>
 800c89c:	d902      	bls.n	800c8a4 <_free_r+0x74>
 800c89e:	230c      	movs	r3, #12
 800c8a0:	602b      	str	r3, [r5, #0]
 800c8a2:	e7d6      	b.n	800c852 <_free_r+0x22>
 800c8a4:	6820      	ldr	r0, [r4, #0]
 800c8a6:	1821      	adds	r1, r4, r0
 800c8a8:	428b      	cmp	r3, r1
 800c8aa:	bf04      	itt	eq
 800c8ac:	6819      	ldreq	r1, [r3, #0]
 800c8ae:	685b      	ldreq	r3, [r3, #4]
 800c8b0:	6063      	str	r3, [r4, #4]
 800c8b2:	bf04      	itt	eq
 800c8b4:	1809      	addeq	r1, r1, r0
 800c8b6:	6021      	streq	r1, [r4, #0]
 800c8b8:	6054      	str	r4, [r2, #4]
 800c8ba:	e7ca      	b.n	800c852 <_free_r+0x22>
 800c8bc:	bd38      	pop	{r3, r4, r5, pc}
 800c8be:	bf00      	nop
 800c8c0:	20003550 	.word	0x20003550

0800c8c4 <rshift>:
 800c8c4:	6903      	ldr	r3, [r0, #16]
 800c8c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c8ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c8d2:	f100 0414 	add.w	r4, r0, #20
 800c8d6:	dd45      	ble.n	800c964 <rshift+0xa0>
 800c8d8:	f011 011f 	ands.w	r1, r1, #31
 800c8dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c8e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c8e4:	d10c      	bne.n	800c900 <rshift+0x3c>
 800c8e6:	f100 0710 	add.w	r7, r0, #16
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	42b1      	cmp	r1, r6
 800c8ee:	d334      	bcc.n	800c95a <rshift+0x96>
 800c8f0:	1a9b      	subs	r3, r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	1eea      	subs	r2, r5, #3
 800c8f6:	4296      	cmp	r6, r2
 800c8f8:	bf38      	it	cc
 800c8fa:	2300      	movcc	r3, #0
 800c8fc:	4423      	add	r3, r4
 800c8fe:	e015      	b.n	800c92c <rshift+0x68>
 800c900:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c904:	f1c1 0820 	rsb	r8, r1, #32
 800c908:	40cf      	lsrs	r7, r1
 800c90a:	f105 0e04 	add.w	lr, r5, #4
 800c90e:	46a1      	mov	r9, r4
 800c910:	4576      	cmp	r6, lr
 800c912:	46f4      	mov	ip, lr
 800c914:	d815      	bhi.n	800c942 <rshift+0x7e>
 800c916:	1a9a      	subs	r2, r3, r2
 800c918:	0092      	lsls	r2, r2, #2
 800c91a:	3a04      	subs	r2, #4
 800c91c:	3501      	adds	r5, #1
 800c91e:	42ae      	cmp	r6, r5
 800c920:	bf38      	it	cc
 800c922:	2200      	movcc	r2, #0
 800c924:	18a3      	adds	r3, r4, r2
 800c926:	50a7      	str	r7, [r4, r2]
 800c928:	b107      	cbz	r7, 800c92c <rshift+0x68>
 800c92a:	3304      	adds	r3, #4
 800c92c:	1b1a      	subs	r2, r3, r4
 800c92e:	42a3      	cmp	r3, r4
 800c930:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c934:	bf08      	it	eq
 800c936:	2300      	moveq	r3, #0
 800c938:	6102      	str	r2, [r0, #16]
 800c93a:	bf08      	it	eq
 800c93c:	6143      	streq	r3, [r0, #20]
 800c93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c942:	f8dc c000 	ldr.w	ip, [ip]
 800c946:	fa0c fc08 	lsl.w	ip, ip, r8
 800c94a:	ea4c 0707 	orr.w	r7, ip, r7
 800c94e:	f849 7b04 	str.w	r7, [r9], #4
 800c952:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c956:	40cf      	lsrs	r7, r1
 800c958:	e7da      	b.n	800c910 <rshift+0x4c>
 800c95a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c95e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c962:	e7c3      	b.n	800c8ec <rshift+0x28>
 800c964:	4623      	mov	r3, r4
 800c966:	e7e1      	b.n	800c92c <rshift+0x68>

0800c968 <__hexdig_fun>:
 800c968:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c96c:	2b09      	cmp	r3, #9
 800c96e:	d802      	bhi.n	800c976 <__hexdig_fun+0xe>
 800c970:	3820      	subs	r0, #32
 800c972:	b2c0      	uxtb	r0, r0
 800c974:	4770      	bx	lr
 800c976:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c97a:	2b05      	cmp	r3, #5
 800c97c:	d801      	bhi.n	800c982 <__hexdig_fun+0x1a>
 800c97e:	3847      	subs	r0, #71	@ 0x47
 800c980:	e7f7      	b.n	800c972 <__hexdig_fun+0xa>
 800c982:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c986:	2b05      	cmp	r3, #5
 800c988:	d801      	bhi.n	800c98e <__hexdig_fun+0x26>
 800c98a:	3827      	subs	r0, #39	@ 0x27
 800c98c:	e7f1      	b.n	800c972 <__hexdig_fun+0xa>
 800c98e:	2000      	movs	r0, #0
 800c990:	4770      	bx	lr
	...

0800c994 <__gethex>:
 800c994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c998:	b085      	sub	sp, #20
 800c99a:	468a      	mov	sl, r1
 800c99c:	9302      	str	r3, [sp, #8]
 800c99e:	680b      	ldr	r3, [r1, #0]
 800c9a0:	9001      	str	r0, [sp, #4]
 800c9a2:	4690      	mov	r8, r2
 800c9a4:	1c9c      	adds	r4, r3, #2
 800c9a6:	46a1      	mov	r9, r4
 800c9a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c9ac:	2830      	cmp	r0, #48	@ 0x30
 800c9ae:	d0fa      	beq.n	800c9a6 <__gethex+0x12>
 800c9b0:	eba9 0303 	sub.w	r3, r9, r3
 800c9b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c9b8:	f7ff ffd6 	bl	800c968 <__hexdig_fun>
 800c9bc:	4605      	mov	r5, r0
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d168      	bne.n	800ca94 <__gethex+0x100>
 800c9c2:	49a0      	ldr	r1, [pc, #640]	@ (800cc44 <__gethex+0x2b0>)
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	4648      	mov	r0, r9
 800c9c8:	f7ff fe47 	bl	800c65a <strncmp>
 800c9cc:	4607      	mov	r7, r0
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d167      	bne.n	800caa2 <__gethex+0x10e>
 800c9d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c9d6:	4626      	mov	r6, r4
 800c9d8:	f7ff ffc6 	bl	800c968 <__hexdig_fun>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d062      	beq.n	800caa6 <__gethex+0x112>
 800c9e0:	4623      	mov	r3, r4
 800c9e2:	7818      	ldrb	r0, [r3, #0]
 800c9e4:	2830      	cmp	r0, #48	@ 0x30
 800c9e6:	4699      	mov	r9, r3
 800c9e8:	f103 0301 	add.w	r3, r3, #1
 800c9ec:	d0f9      	beq.n	800c9e2 <__gethex+0x4e>
 800c9ee:	f7ff ffbb 	bl	800c968 <__hexdig_fun>
 800c9f2:	fab0 f580 	clz	r5, r0
 800c9f6:	096d      	lsrs	r5, r5, #5
 800c9f8:	f04f 0b01 	mov.w	fp, #1
 800c9fc:	464a      	mov	r2, r9
 800c9fe:	4616      	mov	r6, r2
 800ca00:	3201      	adds	r2, #1
 800ca02:	7830      	ldrb	r0, [r6, #0]
 800ca04:	f7ff ffb0 	bl	800c968 <__hexdig_fun>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d1f8      	bne.n	800c9fe <__gethex+0x6a>
 800ca0c:	498d      	ldr	r1, [pc, #564]	@ (800cc44 <__gethex+0x2b0>)
 800ca0e:	2201      	movs	r2, #1
 800ca10:	4630      	mov	r0, r6
 800ca12:	f7ff fe22 	bl	800c65a <strncmp>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d13f      	bne.n	800ca9a <__gethex+0x106>
 800ca1a:	b944      	cbnz	r4, 800ca2e <__gethex+0x9a>
 800ca1c:	1c74      	adds	r4, r6, #1
 800ca1e:	4622      	mov	r2, r4
 800ca20:	4616      	mov	r6, r2
 800ca22:	3201      	adds	r2, #1
 800ca24:	7830      	ldrb	r0, [r6, #0]
 800ca26:	f7ff ff9f 	bl	800c968 <__hexdig_fun>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d1f8      	bne.n	800ca20 <__gethex+0x8c>
 800ca2e:	1ba4      	subs	r4, r4, r6
 800ca30:	00a7      	lsls	r7, r4, #2
 800ca32:	7833      	ldrb	r3, [r6, #0]
 800ca34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ca38:	2b50      	cmp	r3, #80	@ 0x50
 800ca3a:	d13e      	bne.n	800caba <__gethex+0x126>
 800ca3c:	7873      	ldrb	r3, [r6, #1]
 800ca3e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ca40:	d033      	beq.n	800caaa <__gethex+0x116>
 800ca42:	2b2d      	cmp	r3, #45	@ 0x2d
 800ca44:	d034      	beq.n	800cab0 <__gethex+0x11c>
 800ca46:	1c71      	adds	r1, r6, #1
 800ca48:	2400      	movs	r4, #0
 800ca4a:	7808      	ldrb	r0, [r1, #0]
 800ca4c:	f7ff ff8c 	bl	800c968 <__hexdig_fun>
 800ca50:	1e43      	subs	r3, r0, #1
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	2b18      	cmp	r3, #24
 800ca56:	d830      	bhi.n	800caba <__gethex+0x126>
 800ca58:	f1a0 0210 	sub.w	r2, r0, #16
 800ca5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca60:	f7ff ff82 	bl	800c968 <__hexdig_fun>
 800ca64:	f100 3cff 	add.w	ip, r0, #4294967295
 800ca68:	fa5f fc8c 	uxtb.w	ip, ip
 800ca6c:	f1bc 0f18 	cmp.w	ip, #24
 800ca70:	f04f 030a 	mov.w	r3, #10
 800ca74:	d91e      	bls.n	800cab4 <__gethex+0x120>
 800ca76:	b104      	cbz	r4, 800ca7a <__gethex+0xe6>
 800ca78:	4252      	negs	r2, r2
 800ca7a:	4417      	add	r7, r2
 800ca7c:	f8ca 1000 	str.w	r1, [sl]
 800ca80:	b1ed      	cbz	r5, 800cabe <__gethex+0x12a>
 800ca82:	f1bb 0f00 	cmp.w	fp, #0
 800ca86:	bf0c      	ite	eq
 800ca88:	2506      	moveq	r5, #6
 800ca8a:	2500      	movne	r5, #0
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	b005      	add	sp, #20
 800ca90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca94:	2500      	movs	r5, #0
 800ca96:	462c      	mov	r4, r5
 800ca98:	e7b0      	b.n	800c9fc <__gethex+0x68>
 800ca9a:	2c00      	cmp	r4, #0
 800ca9c:	d1c7      	bne.n	800ca2e <__gethex+0x9a>
 800ca9e:	4627      	mov	r7, r4
 800caa0:	e7c7      	b.n	800ca32 <__gethex+0x9e>
 800caa2:	464e      	mov	r6, r9
 800caa4:	462f      	mov	r7, r5
 800caa6:	2501      	movs	r5, #1
 800caa8:	e7c3      	b.n	800ca32 <__gethex+0x9e>
 800caaa:	2400      	movs	r4, #0
 800caac:	1cb1      	adds	r1, r6, #2
 800caae:	e7cc      	b.n	800ca4a <__gethex+0xb6>
 800cab0:	2401      	movs	r4, #1
 800cab2:	e7fb      	b.n	800caac <__gethex+0x118>
 800cab4:	fb03 0002 	mla	r0, r3, r2, r0
 800cab8:	e7ce      	b.n	800ca58 <__gethex+0xc4>
 800caba:	4631      	mov	r1, r6
 800cabc:	e7de      	b.n	800ca7c <__gethex+0xe8>
 800cabe:	eba6 0309 	sub.w	r3, r6, r9
 800cac2:	3b01      	subs	r3, #1
 800cac4:	4629      	mov	r1, r5
 800cac6:	2b07      	cmp	r3, #7
 800cac8:	dc0a      	bgt.n	800cae0 <__gethex+0x14c>
 800caca:	9801      	ldr	r0, [sp, #4]
 800cacc:	f000 fa46 	bl	800cf5c <_Balloc>
 800cad0:	4604      	mov	r4, r0
 800cad2:	b940      	cbnz	r0, 800cae6 <__gethex+0x152>
 800cad4:	4b5c      	ldr	r3, [pc, #368]	@ (800cc48 <__gethex+0x2b4>)
 800cad6:	4602      	mov	r2, r0
 800cad8:	21e4      	movs	r1, #228	@ 0xe4
 800cada:	485c      	ldr	r0, [pc, #368]	@ (800cc4c <__gethex+0x2b8>)
 800cadc:	f001 fe4a 	bl	800e774 <__assert_func>
 800cae0:	3101      	adds	r1, #1
 800cae2:	105b      	asrs	r3, r3, #1
 800cae4:	e7ef      	b.n	800cac6 <__gethex+0x132>
 800cae6:	f100 0a14 	add.w	sl, r0, #20
 800caea:	2300      	movs	r3, #0
 800caec:	4655      	mov	r5, sl
 800caee:	469b      	mov	fp, r3
 800caf0:	45b1      	cmp	r9, r6
 800caf2:	d337      	bcc.n	800cb64 <__gethex+0x1d0>
 800caf4:	f845 bb04 	str.w	fp, [r5], #4
 800caf8:	eba5 050a 	sub.w	r5, r5, sl
 800cafc:	10ad      	asrs	r5, r5, #2
 800cafe:	6125      	str	r5, [r4, #16]
 800cb00:	4658      	mov	r0, fp
 800cb02:	f000 fb1d 	bl	800d140 <__hi0bits>
 800cb06:	016d      	lsls	r5, r5, #5
 800cb08:	f8d8 6000 	ldr.w	r6, [r8]
 800cb0c:	1a2d      	subs	r5, r5, r0
 800cb0e:	42b5      	cmp	r5, r6
 800cb10:	dd54      	ble.n	800cbbc <__gethex+0x228>
 800cb12:	1bad      	subs	r5, r5, r6
 800cb14:	4629      	mov	r1, r5
 800cb16:	4620      	mov	r0, r4
 800cb18:	f000 feb1 	bl	800d87e <__any_on>
 800cb1c:	4681      	mov	r9, r0
 800cb1e:	b178      	cbz	r0, 800cb40 <__gethex+0x1ac>
 800cb20:	1e6b      	subs	r3, r5, #1
 800cb22:	1159      	asrs	r1, r3, #5
 800cb24:	f003 021f 	and.w	r2, r3, #31
 800cb28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cb2c:	f04f 0901 	mov.w	r9, #1
 800cb30:	fa09 f202 	lsl.w	r2, r9, r2
 800cb34:	420a      	tst	r2, r1
 800cb36:	d003      	beq.n	800cb40 <__gethex+0x1ac>
 800cb38:	454b      	cmp	r3, r9
 800cb3a:	dc36      	bgt.n	800cbaa <__gethex+0x216>
 800cb3c:	f04f 0902 	mov.w	r9, #2
 800cb40:	4629      	mov	r1, r5
 800cb42:	4620      	mov	r0, r4
 800cb44:	f7ff febe 	bl	800c8c4 <rshift>
 800cb48:	442f      	add	r7, r5
 800cb4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb4e:	42bb      	cmp	r3, r7
 800cb50:	da42      	bge.n	800cbd8 <__gethex+0x244>
 800cb52:	9801      	ldr	r0, [sp, #4]
 800cb54:	4621      	mov	r1, r4
 800cb56:	f000 fa41 	bl	800cfdc <_Bfree>
 800cb5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	6013      	str	r3, [r2, #0]
 800cb60:	25a3      	movs	r5, #163	@ 0xa3
 800cb62:	e793      	b.n	800ca8c <__gethex+0xf8>
 800cb64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cb68:	2a2e      	cmp	r2, #46	@ 0x2e
 800cb6a:	d012      	beq.n	800cb92 <__gethex+0x1fe>
 800cb6c:	2b20      	cmp	r3, #32
 800cb6e:	d104      	bne.n	800cb7a <__gethex+0x1e6>
 800cb70:	f845 bb04 	str.w	fp, [r5], #4
 800cb74:	f04f 0b00 	mov.w	fp, #0
 800cb78:	465b      	mov	r3, fp
 800cb7a:	7830      	ldrb	r0, [r6, #0]
 800cb7c:	9303      	str	r3, [sp, #12]
 800cb7e:	f7ff fef3 	bl	800c968 <__hexdig_fun>
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	f000 000f 	and.w	r0, r0, #15
 800cb88:	4098      	lsls	r0, r3
 800cb8a:	ea4b 0b00 	orr.w	fp, fp, r0
 800cb8e:	3304      	adds	r3, #4
 800cb90:	e7ae      	b.n	800caf0 <__gethex+0x15c>
 800cb92:	45b1      	cmp	r9, r6
 800cb94:	d8ea      	bhi.n	800cb6c <__gethex+0x1d8>
 800cb96:	492b      	ldr	r1, [pc, #172]	@ (800cc44 <__gethex+0x2b0>)
 800cb98:	9303      	str	r3, [sp, #12]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	f7ff fd5c 	bl	800c65a <strncmp>
 800cba2:	9b03      	ldr	r3, [sp, #12]
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d1e1      	bne.n	800cb6c <__gethex+0x1d8>
 800cba8:	e7a2      	b.n	800caf0 <__gethex+0x15c>
 800cbaa:	1ea9      	subs	r1, r5, #2
 800cbac:	4620      	mov	r0, r4
 800cbae:	f000 fe66 	bl	800d87e <__any_on>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d0c2      	beq.n	800cb3c <__gethex+0x1a8>
 800cbb6:	f04f 0903 	mov.w	r9, #3
 800cbba:	e7c1      	b.n	800cb40 <__gethex+0x1ac>
 800cbbc:	da09      	bge.n	800cbd2 <__gethex+0x23e>
 800cbbe:	1b75      	subs	r5, r6, r5
 800cbc0:	4621      	mov	r1, r4
 800cbc2:	9801      	ldr	r0, [sp, #4]
 800cbc4:	462a      	mov	r2, r5
 800cbc6:	f000 fc21 	bl	800d40c <__lshift>
 800cbca:	1b7f      	subs	r7, r7, r5
 800cbcc:	4604      	mov	r4, r0
 800cbce:	f100 0a14 	add.w	sl, r0, #20
 800cbd2:	f04f 0900 	mov.w	r9, #0
 800cbd6:	e7b8      	b.n	800cb4a <__gethex+0x1b6>
 800cbd8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cbdc:	42bd      	cmp	r5, r7
 800cbde:	dd6f      	ble.n	800ccc0 <__gethex+0x32c>
 800cbe0:	1bed      	subs	r5, r5, r7
 800cbe2:	42ae      	cmp	r6, r5
 800cbe4:	dc34      	bgt.n	800cc50 <__gethex+0x2bc>
 800cbe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d022      	beq.n	800cc34 <__gethex+0x2a0>
 800cbee:	2b03      	cmp	r3, #3
 800cbf0:	d024      	beq.n	800cc3c <__gethex+0x2a8>
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d115      	bne.n	800cc22 <__gethex+0x28e>
 800cbf6:	42ae      	cmp	r6, r5
 800cbf8:	d113      	bne.n	800cc22 <__gethex+0x28e>
 800cbfa:	2e01      	cmp	r6, #1
 800cbfc:	d10b      	bne.n	800cc16 <__gethex+0x282>
 800cbfe:	9a02      	ldr	r2, [sp, #8]
 800cc00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc04:	6013      	str	r3, [r2, #0]
 800cc06:	2301      	movs	r3, #1
 800cc08:	6123      	str	r3, [r4, #16]
 800cc0a:	f8ca 3000 	str.w	r3, [sl]
 800cc0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc10:	2562      	movs	r5, #98	@ 0x62
 800cc12:	601c      	str	r4, [r3, #0]
 800cc14:	e73a      	b.n	800ca8c <__gethex+0xf8>
 800cc16:	1e71      	subs	r1, r6, #1
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f000 fe30 	bl	800d87e <__any_on>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d1ed      	bne.n	800cbfe <__gethex+0x26a>
 800cc22:	9801      	ldr	r0, [sp, #4]
 800cc24:	4621      	mov	r1, r4
 800cc26:	f000 f9d9 	bl	800cfdc <_Bfree>
 800cc2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	6013      	str	r3, [r2, #0]
 800cc30:	2550      	movs	r5, #80	@ 0x50
 800cc32:	e72b      	b.n	800ca8c <__gethex+0xf8>
 800cc34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1f3      	bne.n	800cc22 <__gethex+0x28e>
 800cc3a:	e7e0      	b.n	800cbfe <__gethex+0x26a>
 800cc3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1dd      	bne.n	800cbfe <__gethex+0x26a>
 800cc42:	e7ee      	b.n	800cc22 <__gethex+0x28e>
 800cc44:	0804bf48 	.word	0x0804bf48
 800cc48:	0804c0b1 	.word	0x0804c0b1
 800cc4c:	0804c0c2 	.word	0x0804c0c2
 800cc50:	1e6f      	subs	r7, r5, #1
 800cc52:	f1b9 0f00 	cmp.w	r9, #0
 800cc56:	d130      	bne.n	800ccba <__gethex+0x326>
 800cc58:	b127      	cbz	r7, 800cc64 <__gethex+0x2d0>
 800cc5a:	4639      	mov	r1, r7
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f000 fe0e 	bl	800d87e <__any_on>
 800cc62:	4681      	mov	r9, r0
 800cc64:	117a      	asrs	r2, r7, #5
 800cc66:	2301      	movs	r3, #1
 800cc68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cc6c:	f007 071f 	and.w	r7, r7, #31
 800cc70:	40bb      	lsls	r3, r7
 800cc72:	4213      	tst	r3, r2
 800cc74:	4629      	mov	r1, r5
 800cc76:	4620      	mov	r0, r4
 800cc78:	bf18      	it	ne
 800cc7a:	f049 0902 	orrne.w	r9, r9, #2
 800cc7e:	f7ff fe21 	bl	800c8c4 <rshift>
 800cc82:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cc86:	1b76      	subs	r6, r6, r5
 800cc88:	2502      	movs	r5, #2
 800cc8a:	f1b9 0f00 	cmp.w	r9, #0
 800cc8e:	d047      	beq.n	800cd20 <__gethex+0x38c>
 800cc90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d015      	beq.n	800ccc4 <__gethex+0x330>
 800cc98:	2b03      	cmp	r3, #3
 800cc9a:	d017      	beq.n	800cccc <__gethex+0x338>
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d109      	bne.n	800ccb4 <__gethex+0x320>
 800cca0:	f019 0f02 	tst.w	r9, #2
 800cca4:	d006      	beq.n	800ccb4 <__gethex+0x320>
 800cca6:	f8da 3000 	ldr.w	r3, [sl]
 800ccaa:	ea49 0903 	orr.w	r9, r9, r3
 800ccae:	f019 0f01 	tst.w	r9, #1
 800ccb2:	d10e      	bne.n	800ccd2 <__gethex+0x33e>
 800ccb4:	f045 0510 	orr.w	r5, r5, #16
 800ccb8:	e032      	b.n	800cd20 <__gethex+0x38c>
 800ccba:	f04f 0901 	mov.w	r9, #1
 800ccbe:	e7d1      	b.n	800cc64 <__gethex+0x2d0>
 800ccc0:	2501      	movs	r5, #1
 800ccc2:	e7e2      	b.n	800cc8a <__gethex+0x2f6>
 800ccc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccc6:	f1c3 0301 	rsb	r3, r3, #1
 800ccca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0f0      	beq.n	800ccb4 <__gethex+0x320>
 800ccd2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ccd6:	f104 0314 	add.w	r3, r4, #20
 800ccda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ccde:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cce2:	f04f 0c00 	mov.w	ip, #0
 800cce6:	4618      	mov	r0, r3
 800cce8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ccf0:	d01b      	beq.n	800cd2a <__gethex+0x396>
 800ccf2:	3201      	adds	r2, #1
 800ccf4:	6002      	str	r2, [r0, #0]
 800ccf6:	2d02      	cmp	r5, #2
 800ccf8:	f104 0314 	add.w	r3, r4, #20
 800ccfc:	d13c      	bne.n	800cd78 <__gethex+0x3e4>
 800ccfe:	f8d8 2000 	ldr.w	r2, [r8]
 800cd02:	3a01      	subs	r2, #1
 800cd04:	42b2      	cmp	r2, r6
 800cd06:	d109      	bne.n	800cd1c <__gethex+0x388>
 800cd08:	1171      	asrs	r1, r6, #5
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd10:	f006 061f 	and.w	r6, r6, #31
 800cd14:	fa02 f606 	lsl.w	r6, r2, r6
 800cd18:	421e      	tst	r6, r3
 800cd1a:	d13a      	bne.n	800cd92 <__gethex+0x3fe>
 800cd1c:	f045 0520 	orr.w	r5, r5, #32
 800cd20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd22:	601c      	str	r4, [r3, #0]
 800cd24:	9b02      	ldr	r3, [sp, #8]
 800cd26:	601f      	str	r7, [r3, #0]
 800cd28:	e6b0      	b.n	800ca8c <__gethex+0xf8>
 800cd2a:	4299      	cmp	r1, r3
 800cd2c:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd30:	d8d9      	bhi.n	800cce6 <__gethex+0x352>
 800cd32:	68a3      	ldr	r3, [r4, #8]
 800cd34:	459b      	cmp	fp, r3
 800cd36:	db17      	blt.n	800cd68 <__gethex+0x3d4>
 800cd38:	6861      	ldr	r1, [r4, #4]
 800cd3a:	9801      	ldr	r0, [sp, #4]
 800cd3c:	3101      	adds	r1, #1
 800cd3e:	f000 f90d 	bl	800cf5c <_Balloc>
 800cd42:	4681      	mov	r9, r0
 800cd44:	b918      	cbnz	r0, 800cd4e <__gethex+0x3ba>
 800cd46:	4b1a      	ldr	r3, [pc, #104]	@ (800cdb0 <__gethex+0x41c>)
 800cd48:	4602      	mov	r2, r0
 800cd4a:	2184      	movs	r1, #132	@ 0x84
 800cd4c:	e6c5      	b.n	800cada <__gethex+0x146>
 800cd4e:	6922      	ldr	r2, [r4, #16]
 800cd50:	3202      	adds	r2, #2
 800cd52:	f104 010c 	add.w	r1, r4, #12
 800cd56:	0092      	lsls	r2, r2, #2
 800cd58:	300c      	adds	r0, #12
 800cd5a:	f7ff fd52 	bl	800c802 <memcpy>
 800cd5e:	4621      	mov	r1, r4
 800cd60:	9801      	ldr	r0, [sp, #4]
 800cd62:	f000 f93b 	bl	800cfdc <_Bfree>
 800cd66:	464c      	mov	r4, r9
 800cd68:	6923      	ldr	r3, [r4, #16]
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd70:	6122      	str	r2, [r4, #16]
 800cd72:	2201      	movs	r2, #1
 800cd74:	615a      	str	r2, [r3, #20]
 800cd76:	e7be      	b.n	800ccf6 <__gethex+0x362>
 800cd78:	6922      	ldr	r2, [r4, #16]
 800cd7a:	455a      	cmp	r2, fp
 800cd7c:	dd0b      	ble.n	800cd96 <__gethex+0x402>
 800cd7e:	2101      	movs	r1, #1
 800cd80:	4620      	mov	r0, r4
 800cd82:	f7ff fd9f 	bl	800c8c4 <rshift>
 800cd86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd8a:	3701      	adds	r7, #1
 800cd8c:	42bb      	cmp	r3, r7
 800cd8e:	f6ff aee0 	blt.w	800cb52 <__gethex+0x1be>
 800cd92:	2501      	movs	r5, #1
 800cd94:	e7c2      	b.n	800cd1c <__gethex+0x388>
 800cd96:	f016 061f 	ands.w	r6, r6, #31
 800cd9a:	d0fa      	beq.n	800cd92 <__gethex+0x3fe>
 800cd9c:	4453      	add	r3, sl
 800cd9e:	f1c6 0620 	rsb	r6, r6, #32
 800cda2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cda6:	f000 f9cb 	bl	800d140 <__hi0bits>
 800cdaa:	42b0      	cmp	r0, r6
 800cdac:	dbe7      	blt.n	800cd7e <__gethex+0x3ea>
 800cdae:	e7f0      	b.n	800cd92 <__gethex+0x3fe>
 800cdb0:	0804c0b1 	.word	0x0804c0b1

0800cdb4 <L_shift>:
 800cdb4:	f1c2 0208 	rsb	r2, r2, #8
 800cdb8:	0092      	lsls	r2, r2, #2
 800cdba:	b570      	push	{r4, r5, r6, lr}
 800cdbc:	f1c2 0620 	rsb	r6, r2, #32
 800cdc0:	6843      	ldr	r3, [r0, #4]
 800cdc2:	6804      	ldr	r4, [r0, #0]
 800cdc4:	fa03 f506 	lsl.w	r5, r3, r6
 800cdc8:	432c      	orrs	r4, r5
 800cdca:	40d3      	lsrs	r3, r2
 800cdcc:	6004      	str	r4, [r0, #0]
 800cdce:	f840 3f04 	str.w	r3, [r0, #4]!
 800cdd2:	4288      	cmp	r0, r1
 800cdd4:	d3f4      	bcc.n	800cdc0 <L_shift+0xc>
 800cdd6:	bd70      	pop	{r4, r5, r6, pc}

0800cdd8 <__match>:
 800cdd8:	b530      	push	{r4, r5, lr}
 800cdda:	6803      	ldr	r3, [r0, #0]
 800cddc:	3301      	adds	r3, #1
 800cdde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cde2:	b914      	cbnz	r4, 800cdea <__match+0x12>
 800cde4:	6003      	str	r3, [r0, #0]
 800cde6:	2001      	movs	r0, #1
 800cde8:	bd30      	pop	{r4, r5, pc}
 800cdea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cdf2:	2d19      	cmp	r5, #25
 800cdf4:	bf98      	it	ls
 800cdf6:	3220      	addls	r2, #32
 800cdf8:	42a2      	cmp	r2, r4
 800cdfa:	d0f0      	beq.n	800cdde <__match+0x6>
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	e7f3      	b.n	800cde8 <__match+0x10>

0800ce00 <__hexnan>:
 800ce00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce04:	680b      	ldr	r3, [r1, #0]
 800ce06:	6801      	ldr	r1, [r0, #0]
 800ce08:	115e      	asrs	r6, r3, #5
 800ce0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce0e:	f013 031f 	ands.w	r3, r3, #31
 800ce12:	b087      	sub	sp, #28
 800ce14:	bf18      	it	ne
 800ce16:	3604      	addne	r6, #4
 800ce18:	2500      	movs	r5, #0
 800ce1a:	1f37      	subs	r7, r6, #4
 800ce1c:	4682      	mov	sl, r0
 800ce1e:	4690      	mov	r8, r2
 800ce20:	9301      	str	r3, [sp, #4]
 800ce22:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce26:	46b9      	mov	r9, r7
 800ce28:	463c      	mov	r4, r7
 800ce2a:	9502      	str	r5, [sp, #8]
 800ce2c:	46ab      	mov	fp, r5
 800ce2e:	784a      	ldrb	r2, [r1, #1]
 800ce30:	1c4b      	adds	r3, r1, #1
 800ce32:	9303      	str	r3, [sp, #12]
 800ce34:	b342      	cbz	r2, 800ce88 <__hexnan+0x88>
 800ce36:	4610      	mov	r0, r2
 800ce38:	9105      	str	r1, [sp, #20]
 800ce3a:	9204      	str	r2, [sp, #16]
 800ce3c:	f7ff fd94 	bl	800c968 <__hexdig_fun>
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d151      	bne.n	800cee8 <__hexnan+0xe8>
 800ce44:	9a04      	ldr	r2, [sp, #16]
 800ce46:	9905      	ldr	r1, [sp, #20]
 800ce48:	2a20      	cmp	r2, #32
 800ce4a:	d818      	bhi.n	800ce7e <__hexnan+0x7e>
 800ce4c:	9b02      	ldr	r3, [sp, #8]
 800ce4e:	459b      	cmp	fp, r3
 800ce50:	dd13      	ble.n	800ce7a <__hexnan+0x7a>
 800ce52:	454c      	cmp	r4, r9
 800ce54:	d206      	bcs.n	800ce64 <__hexnan+0x64>
 800ce56:	2d07      	cmp	r5, #7
 800ce58:	dc04      	bgt.n	800ce64 <__hexnan+0x64>
 800ce5a:	462a      	mov	r2, r5
 800ce5c:	4649      	mov	r1, r9
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f7ff ffa8 	bl	800cdb4 <L_shift>
 800ce64:	4544      	cmp	r4, r8
 800ce66:	d952      	bls.n	800cf0e <__hexnan+0x10e>
 800ce68:	2300      	movs	r3, #0
 800ce6a:	f1a4 0904 	sub.w	r9, r4, #4
 800ce6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce72:	f8cd b008 	str.w	fp, [sp, #8]
 800ce76:	464c      	mov	r4, r9
 800ce78:	461d      	mov	r5, r3
 800ce7a:	9903      	ldr	r1, [sp, #12]
 800ce7c:	e7d7      	b.n	800ce2e <__hexnan+0x2e>
 800ce7e:	2a29      	cmp	r2, #41	@ 0x29
 800ce80:	d157      	bne.n	800cf32 <__hexnan+0x132>
 800ce82:	3102      	adds	r1, #2
 800ce84:	f8ca 1000 	str.w	r1, [sl]
 800ce88:	f1bb 0f00 	cmp.w	fp, #0
 800ce8c:	d051      	beq.n	800cf32 <__hexnan+0x132>
 800ce8e:	454c      	cmp	r4, r9
 800ce90:	d206      	bcs.n	800cea0 <__hexnan+0xa0>
 800ce92:	2d07      	cmp	r5, #7
 800ce94:	dc04      	bgt.n	800cea0 <__hexnan+0xa0>
 800ce96:	462a      	mov	r2, r5
 800ce98:	4649      	mov	r1, r9
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f7ff ff8a 	bl	800cdb4 <L_shift>
 800cea0:	4544      	cmp	r4, r8
 800cea2:	d936      	bls.n	800cf12 <__hexnan+0x112>
 800cea4:	f1a8 0204 	sub.w	r2, r8, #4
 800cea8:	4623      	mov	r3, r4
 800ceaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800ceae:	f842 1f04 	str.w	r1, [r2, #4]!
 800ceb2:	429f      	cmp	r7, r3
 800ceb4:	d2f9      	bcs.n	800ceaa <__hexnan+0xaa>
 800ceb6:	1b3b      	subs	r3, r7, r4
 800ceb8:	f023 0303 	bic.w	r3, r3, #3
 800cebc:	3304      	adds	r3, #4
 800cebe:	3401      	adds	r4, #1
 800cec0:	3e03      	subs	r6, #3
 800cec2:	42b4      	cmp	r4, r6
 800cec4:	bf88      	it	hi
 800cec6:	2304      	movhi	r3, #4
 800cec8:	4443      	add	r3, r8
 800ceca:	2200      	movs	r2, #0
 800cecc:	f843 2b04 	str.w	r2, [r3], #4
 800ced0:	429f      	cmp	r7, r3
 800ced2:	d2fb      	bcs.n	800cecc <__hexnan+0xcc>
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	b91b      	cbnz	r3, 800cee0 <__hexnan+0xe0>
 800ced8:	4547      	cmp	r7, r8
 800ceda:	d128      	bne.n	800cf2e <__hexnan+0x12e>
 800cedc:	2301      	movs	r3, #1
 800cede:	603b      	str	r3, [r7, #0]
 800cee0:	2005      	movs	r0, #5
 800cee2:	b007      	add	sp, #28
 800cee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee8:	3501      	adds	r5, #1
 800ceea:	2d08      	cmp	r5, #8
 800ceec:	f10b 0b01 	add.w	fp, fp, #1
 800cef0:	dd06      	ble.n	800cf00 <__hexnan+0x100>
 800cef2:	4544      	cmp	r4, r8
 800cef4:	d9c1      	bls.n	800ce7a <__hexnan+0x7a>
 800cef6:	2300      	movs	r3, #0
 800cef8:	f844 3c04 	str.w	r3, [r4, #-4]
 800cefc:	2501      	movs	r5, #1
 800cefe:	3c04      	subs	r4, #4
 800cf00:	6822      	ldr	r2, [r4, #0]
 800cf02:	f000 000f 	and.w	r0, r0, #15
 800cf06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cf0a:	6020      	str	r0, [r4, #0]
 800cf0c:	e7b5      	b.n	800ce7a <__hexnan+0x7a>
 800cf0e:	2508      	movs	r5, #8
 800cf10:	e7b3      	b.n	800ce7a <__hexnan+0x7a>
 800cf12:	9b01      	ldr	r3, [sp, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d0dd      	beq.n	800ced4 <__hexnan+0xd4>
 800cf18:	f1c3 0320 	rsb	r3, r3, #32
 800cf1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf20:	40da      	lsrs	r2, r3
 800cf22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cf26:	4013      	ands	r3, r2
 800cf28:	f846 3c04 	str.w	r3, [r6, #-4]
 800cf2c:	e7d2      	b.n	800ced4 <__hexnan+0xd4>
 800cf2e:	3f04      	subs	r7, #4
 800cf30:	e7d0      	b.n	800ced4 <__hexnan+0xd4>
 800cf32:	2004      	movs	r0, #4
 800cf34:	e7d5      	b.n	800cee2 <__hexnan+0xe2>

0800cf36 <__ascii_mbtowc>:
 800cf36:	b082      	sub	sp, #8
 800cf38:	b901      	cbnz	r1, 800cf3c <__ascii_mbtowc+0x6>
 800cf3a:	a901      	add	r1, sp, #4
 800cf3c:	b142      	cbz	r2, 800cf50 <__ascii_mbtowc+0x1a>
 800cf3e:	b14b      	cbz	r3, 800cf54 <__ascii_mbtowc+0x1e>
 800cf40:	7813      	ldrb	r3, [r2, #0]
 800cf42:	600b      	str	r3, [r1, #0]
 800cf44:	7812      	ldrb	r2, [r2, #0]
 800cf46:	1e10      	subs	r0, r2, #0
 800cf48:	bf18      	it	ne
 800cf4a:	2001      	movne	r0, #1
 800cf4c:	b002      	add	sp, #8
 800cf4e:	4770      	bx	lr
 800cf50:	4610      	mov	r0, r2
 800cf52:	e7fb      	b.n	800cf4c <__ascii_mbtowc+0x16>
 800cf54:	f06f 0001 	mvn.w	r0, #1
 800cf58:	e7f8      	b.n	800cf4c <__ascii_mbtowc+0x16>
	...

0800cf5c <_Balloc>:
 800cf5c:	b570      	push	{r4, r5, r6, lr}
 800cf5e:	69c6      	ldr	r6, [r0, #28]
 800cf60:	4604      	mov	r4, r0
 800cf62:	460d      	mov	r5, r1
 800cf64:	b976      	cbnz	r6, 800cf84 <_Balloc+0x28>
 800cf66:	2010      	movs	r0, #16
 800cf68:	f7fe fad4 	bl	800b514 <malloc>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	61e0      	str	r0, [r4, #28]
 800cf70:	b920      	cbnz	r0, 800cf7c <_Balloc+0x20>
 800cf72:	4b18      	ldr	r3, [pc, #96]	@ (800cfd4 <_Balloc+0x78>)
 800cf74:	4818      	ldr	r0, [pc, #96]	@ (800cfd8 <_Balloc+0x7c>)
 800cf76:	216b      	movs	r1, #107	@ 0x6b
 800cf78:	f001 fbfc 	bl	800e774 <__assert_func>
 800cf7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf80:	6006      	str	r6, [r0, #0]
 800cf82:	60c6      	str	r6, [r0, #12]
 800cf84:	69e6      	ldr	r6, [r4, #28]
 800cf86:	68f3      	ldr	r3, [r6, #12]
 800cf88:	b183      	cbz	r3, 800cfac <_Balloc+0x50>
 800cf8a:	69e3      	ldr	r3, [r4, #28]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf92:	b9b8      	cbnz	r0, 800cfc4 <_Balloc+0x68>
 800cf94:	2101      	movs	r1, #1
 800cf96:	fa01 f605 	lsl.w	r6, r1, r5
 800cf9a:	1d72      	adds	r2, r6, #5
 800cf9c:	0092      	lsls	r2, r2, #2
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	f001 fc06 	bl	800e7b0 <_calloc_r>
 800cfa4:	b160      	cbz	r0, 800cfc0 <_Balloc+0x64>
 800cfa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cfaa:	e00e      	b.n	800cfca <_Balloc+0x6e>
 800cfac:	2221      	movs	r2, #33	@ 0x21
 800cfae:	2104      	movs	r1, #4
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f001 fbfd 	bl	800e7b0 <_calloc_r>
 800cfb6:	69e3      	ldr	r3, [r4, #28]
 800cfb8:	60f0      	str	r0, [r6, #12]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d1e4      	bne.n	800cf8a <_Balloc+0x2e>
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	bd70      	pop	{r4, r5, r6, pc}
 800cfc4:	6802      	ldr	r2, [r0, #0]
 800cfc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cfca:	2300      	movs	r3, #0
 800cfcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfd0:	e7f7      	b.n	800cfc2 <_Balloc+0x66>
 800cfd2:	bf00      	nop
 800cfd4:	0804c122 	.word	0x0804c122
 800cfd8:	0804c139 	.word	0x0804c139

0800cfdc <_Bfree>:
 800cfdc:	b570      	push	{r4, r5, r6, lr}
 800cfde:	69c6      	ldr	r6, [r0, #28]
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	b976      	cbnz	r6, 800d004 <_Bfree+0x28>
 800cfe6:	2010      	movs	r0, #16
 800cfe8:	f7fe fa94 	bl	800b514 <malloc>
 800cfec:	4602      	mov	r2, r0
 800cfee:	61e8      	str	r0, [r5, #28]
 800cff0:	b920      	cbnz	r0, 800cffc <_Bfree+0x20>
 800cff2:	4b09      	ldr	r3, [pc, #36]	@ (800d018 <_Bfree+0x3c>)
 800cff4:	4809      	ldr	r0, [pc, #36]	@ (800d01c <_Bfree+0x40>)
 800cff6:	218f      	movs	r1, #143	@ 0x8f
 800cff8:	f001 fbbc 	bl	800e774 <__assert_func>
 800cffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d000:	6006      	str	r6, [r0, #0]
 800d002:	60c6      	str	r6, [r0, #12]
 800d004:	b13c      	cbz	r4, 800d016 <_Bfree+0x3a>
 800d006:	69eb      	ldr	r3, [r5, #28]
 800d008:	6862      	ldr	r2, [r4, #4]
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d010:	6021      	str	r1, [r4, #0]
 800d012:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d016:	bd70      	pop	{r4, r5, r6, pc}
 800d018:	0804c122 	.word	0x0804c122
 800d01c:	0804c139 	.word	0x0804c139

0800d020 <__multadd>:
 800d020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d024:	690d      	ldr	r5, [r1, #16]
 800d026:	4607      	mov	r7, r0
 800d028:	460c      	mov	r4, r1
 800d02a:	461e      	mov	r6, r3
 800d02c:	f101 0c14 	add.w	ip, r1, #20
 800d030:	2000      	movs	r0, #0
 800d032:	f8dc 3000 	ldr.w	r3, [ip]
 800d036:	b299      	uxth	r1, r3
 800d038:	fb02 6101 	mla	r1, r2, r1, r6
 800d03c:	0c1e      	lsrs	r6, r3, #16
 800d03e:	0c0b      	lsrs	r3, r1, #16
 800d040:	fb02 3306 	mla	r3, r2, r6, r3
 800d044:	b289      	uxth	r1, r1
 800d046:	3001      	adds	r0, #1
 800d048:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d04c:	4285      	cmp	r5, r0
 800d04e:	f84c 1b04 	str.w	r1, [ip], #4
 800d052:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d056:	dcec      	bgt.n	800d032 <__multadd+0x12>
 800d058:	b30e      	cbz	r6, 800d09e <__multadd+0x7e>
 800d05a:	68a3      	ldr	r3, [r4, #8]
 800d05c:	42ab      	cmp	r3, r5
 800d05e:	dc19      	bgt.n	800d094 <__multadd+0x74>
 800d060:	6861      	ldr	r1, [r4, #4]
 800d062:	4638      	mov	r0, r7
 800d064:	3101      	adds	r1, #1
 800d066:	f7ff ff79 	bl	800cf5c <_Balloc>
 800d06a:	4680      	mov	r8, r0
 800d06c:	b928      	cbnz	r0, 800d07a <__multadd+0x5a>
 800d06e:	4602      	mov	r2, r0
 800d070:	4b0c      	ldr	r3, [pc, #48]	@ (800d0a4 <__multadd+0x84>)
 800d072:	480d      	ldr	r0, [pc, #52]	@ (800d0a8 <__multadd+0x88>)
 800d074:	21ba      	movs	r1, #186	@ 0xba
 800d076:	f001 fb7d 	bl	800e774 <__assert_func>
 800d07a:	6922      	ldr	r2, [r4, #16]
 800d07c:	3202      	adds	r2, #2
 800d07e:	f104 010c 	add.w	r1, r4, #12
 800d082:	0092      	lsls	r2, r2, #2
 800d084:	300c      	adds	r0, #12
 800d086:	f7ff fbbc 	bl	800c802 <memcpy>
 800d08a:	4621      	mov	r1, r4
 800d08c:	4638      	mov	r0, r7
 800d08e:	f7ff ffa5 	bl	800cfdc <_Bfree>
 800d092:	4644      	mov	r4, r8
 800d094:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d098:	3501      	adds	r5, #1
 800d09a:	615e      	str	r6, [r3, #20]
 800d09c:	6125      	str	r5, [r4, #16]
 800d09e:	4620      	mov	r0, r4
 800d0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a4:	0804c0b1 	.word	0x0804c0b1
 800d0a8:	0804c139 	.word	0x0804c139

0800d0ac <__s2b>:
 800d0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b0:	460c      	mov	r4, r1
 800d0b2:	4615      	mov	r5, r2
 800d0b4:	461f      	mov	r7, r3
 800d0b6:	2209      	movs	r2, #9
 800d0b8:	3308      	adds	r3, #8
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	db09      	blt.n	800d0dc <__s2b+0x30>
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	f7ff ff47 	bl	800cf5c <_Balloc>
 800d0ce:	b940      	cbnz	r0, 800d0e2 <__s2b+0x36>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	4b19      	ldr	r3, [pc, #100]	@ (800d138 <__s2b+0x8c>)
 800d0d4:	4819      	ldr	r0, [pc, #100]	@ (800d13c <__s2b+0x90>)
 800d0d6:	21d3      	movs	r1, #211	@ 0xd3
 800d0d8:	f001 fb4c 	bl	800e774 <__assert_func>
 800d0dc:	0052      	lsls	r2, r2, #1
 800d0de:	3101      	adds	r1, #1
 800d0e0:	e7f0      	b.n	800d0c4 <__s2b+0x18>
 800d0e2:	9b08      	ldr	r3, [sp, #32]
 800d0e4:	6143      	str	r3, [r0, #20]
 800d0e6:	2d09      	cmp	r5, #9
 800d0e8:	f04f 0301 	mov.w	r3, #1
 800d0ec:	6103      	str	r3, [r0, #16]
 800d0ee:	dd16      	ble.n	800d11e <__s2b+0x72>
 800d0f0:	f104 0909 	add.w	r9, r4, #9
 800d0f4:	46c8      	mov	r8, r9
 800d0f6:	442c      	add	r4, r5
 800d0f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d0fc:	4601      	mov	r1, r0
 800d0fe:	3b30      	subs	r3, #48	@ 0x30
 800d100:	220a      	movs	r2, #10
 800d102:	4630      	mov	r0, r6
 800d104:	f7ff ff8c 	bl	800d020 <__multadd>
 800d108:	45a0      	cmp	r8, r4
 800d10a:	d1f5      	bne.n	800d0f8 <__s2b+0x4c>
 800d10c:	f1a5 0408 	sub.w	r4, r5, #8
 800d110:	444c      	add	r4, r9
 800d112:	1b2d      	subs	r5, r5, r4
 800d114:	1963      	adds	r3, r4, r5
 800d116:	42bb      	cmp	r3, r7
 800d118:	db04      	blt.n	800d124 <__s2b+0x78>
 800d11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d11e:	340a      	adds	r4, #10
 800d120:	2509      	movs	r5, #9
 800d122:	e7f6      	b.n	800d112 <__s2b+0x66>
 800d124:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d128:	4601      	mov	r1, r0
 800d12a:	3b30      	subs	r3, #48	@ 0x30
 800d12c:	220a      	movs	r2, #10
 800d12e:	4630      	mov	r0, r6
 800d130:	f7ff ff76 	bl	800d020 <__multadd>
 800d134:	e7ee      	b.n	800d114 <__s2b+0x68>
 800d136:	bf00      	nop
 800d138:	0804c0b1 	.word	0x0804c0b1
 800d13c:	0804c139 	.word	0x0804c139

0800d140 <__hi0bits>:
 800d140:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d144:	4603      	mov	r3, r0
 800d146:	bf36      	itet	cc
 800d148:	0403      	lslcc	r3, r0, #16
 800d14a:	2000      	movcs	r0, #0
 800d14c:	2010      	movcc	r0, #16
 800d14e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d152:	bf3c      	itt	cc
 800d154:	021b      	lslcc	r3, r3, #8
 800d156:	3008      	addcc	r0, #8
 800d158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d15c:	bf3c      	itt	cc
 800d15e:	011b      	lslcc	r3, r3, #4
 800d160:	3004      	addcc	r0, #4
 800d162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d166:	bf3c      	itt	cc
 800d168:	009b      	lslcc	r3, r3, #2
 800d16a:	3002      	addcc	r0, #2
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	db05      	blt.n	800d17c <__hi0bits+0x3c>
 800d170:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d174:	f100 0001 	add.w	r0, r0, #1
 800d178:	bf08      	it	eq
 800d17a:	2020      	moveq	r0, #32
 800d17c:	4770      	bx	lr

0800d17e <__lo0bits>:
 800d17e:	6803      	ldr	r3, [r0, #0]
 800d180:	4602      	mov	r2, r0
 800d182:	f013 0007 	ands.w	r0, r3, #7
 800d186:	d00b      	beq.n	800d1a0 <__lo0bits+0x22>
 800d188:	07d9      	lsls	r1, r3, #31
 800d18a:	d421      	bmi.n	800d1d0 <__lo0bits+0x52>
 800d18c:	0798      	lsls	r0, r3, #30
 800d18e:	bf49      	itett	mi
 800d190:	085b      	lsrmi	r3, r3, #1
 800d192:	089b      	lsrpl	r3, r3, #2
 800d194:	2001      	movmi	r0, #1
 800d196:	6013      	strmi	r3, [r2, #0]
 800d198:	bf5c      	itt	pl
 800d19a:	6013      	strpl	r3, [r2, #0]
 800d19c:	2002      	movpl	r0, #2
 800d19e:	4770      	bx	lr
 800d1a0:	b299      	uxth	r1, r3
 800d1a2:	b909      	cbnz	r1, 800d1a8 <__lo0bits+0x2a>
 800d1a4:	0c1b      	lsrs	r3, r3, #16
 800d1a6:	2010      	movs	r0, #16
 800d1a8:	b2d9      	uxtb	r1, r3
 800d1aa:	b909      	cbnz	r1, 800d1b0 <__lo0bits+0x32>
 800d1ac:	3008      	adds	r0, #8
 800d1ae:	0a1b      	lsrs	r3, r3, #8
 800d1b0:	0719      	lsls	r1, r3, #28
 800d1b2:	bf04      	itt	eq
 800d1b4:	091b      	lsreq	r3, r3, #4
 800d1b6:	3004      	addeq	r0, #4
 800d1b8:	0799      	lsls	r1, r3, #30
 800d1ba:	bf04      	itt	eq
 800d1bc:	089b      	lsreq	r3, r3, #2
 800d1be:	3002      	addeq	r0, #2
 800d1c0:	07d9      	lsls	r1, r3, #31
 800d1c2:	d403      	bmi.n	800d1cc <__lo0bits+0x4e>
 800d1c4:	085b      	lsrs	r3, r3, #1
 800d1c6:	f100 0001 	add.w	r0, r0, #1
 800d1ca:	d003      	beq.n	800d1d4 <__lo0bits+0x56>
 800d1cc:	6013      	str	r3, [r2, #0]
 800d1ce:	4770      	bx	lr
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	4770      	bx	lr
 800d1d4:	2020      	movs	r0, #32
 800d1d6:	4770      	bx	lr

0800d1d8 <__i2b>:
 800d1d8:	b510      	push	{r4, lr}
 800d1da:	460c      	mov	r4, r1
 800d1dc:	2101      	movs	r1, #1
 800d1de:	f7ff febd 	bl	800cf5c <_Balloc>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	b928      	cbnz	r0, 800d1f2 <__i2b+0x1a>
 800d1e6:	4b05      	ldr	r3, [pc, #20]	@ (800d1fc <__i2b+0x24>)
 800d1e8:	4805      	ldr	r0, [pc, #20]	@ (800d200 <__i2b+0x28>)
 800d1ea:	f240 1145 	movw	r1, #325	@ 0x145
 800d1ee:	f001 fac1 	bl	800e774 <__assert_func>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	6144      	str	r4, [r0, #20]
 800d1f6:	6103      	str	r3, [r0, #16]
 800d1f8:	bd10      	pop	{r4, pc}
 800d1fa:	bf00      	nop
 800d1fc:	0804c0b1 	.word	0x0804c0b1
 800d200:	0804c139 	.word	0x0804c139

0800d204 <__multiply>:
 800d204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d208:	4614      	mov	r4, r2
 800d20a:	690a      	ldr	r2, [r1, #16]
 800d20c:	6923      	ldr	r3, [r4, #16]
 800d20e:	429a      	cmp	r2, r3
 800d210:	bfa8      	it	ge
 800d212:	4623      	movge	r3, r4
 800d214:	460f      	mov	r7, r1
 800d216:	bfa4      	itt	ge
 800d218:	460c      	movge	r4, r1
 800d21a:	461f      	movge	r7, r3
 800d21c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d220:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d224:	68a3      	ldr	r3, [r4, #8]
 800d226:	6861      	ldr	r1, [r4, #4]
 800d228:	eb0a 0609 	add.w	r6, sl, r9
 800d22c:	42b3      	cmp	r3, r6
 800d22e:	b085      	sub	sp, #20
 800d230:	bfb8      	it	lt
 800d232:	3101      	addlt	r1, #1
 800d234:	f7ff fe92 	bl	800cf5c <_Balloc>
 800d238:	b930      	cbnz	r0, 800d248 <__multiply+0x44>
 800d23a:	4602      	mov	r2, r0
 800d23c:	4b44      	ldr	r3, [pc, #272]	@ (800d350 <__multiply+0x14c>)
 800d23e:	4845      	ldr	r0, [pc, #276]	@ (800d354 <__multiply+0x150>)
 800d240:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d244:	f001 fa96 	bl	800e774 <__assert_func>
 800d248:	f100 0514 	add.w	r5, r0, #20
 800d24c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d250:	462b      	mov	r3, r5
 800d252:	2200      	movs	r2, #0
 800d254:	4543      	cmp	r3, r8
 800d256:	d321      	bcc.n	800d29c <__multiply+0x98>
 800d258:	f107 0114 	add.w	r1, r7, #20
 800d25c:	f104 0214 	add.w	r2, r4, #20
 800d260:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d264:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d268:	9302      	str	r3, [sp, #8]
 800d26a:	1b13      	subs	r3, r2, r4
 800d26c:	3b15      	subs	r3, #21
 800d26e:	f023 0303 	bic.w	r3, r3, #3
 800d272:	3304      	adds	r3, #4
 800d274:	f104 0715 	add.w	r7, r4, #21
 800d278:	42ba      	cmp	r2, r7
 800d27a:	bf38      	it	cc
 800d27c:	2304      	movcc	r3, #4
 800d27e:	9301      	str	r3, [sp, #4]
 800d280:	9b02      	ldr	r3, [sp, #8]
 800d282:	9103      	str	r1, [sp, #12]
 800d284:	428b      	cmp	r3, r1
 800d286:	d80c      	bhi.n	800d2a2 <__multiply+0x9e>
 800d288:	2e00      	cmp	r6, #0
 800d28a:	dd03      	ble.n	800d294 <__multiply+0x90>
 800d28c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d290:	2b00      	cmp	r3, #0
 800d292:	d05b      	beq.n	800d34c <__multiply+0x148>
 800d294:	6106      	str	r6, [r0, #16]
 800d296:	b005      	add	sp, #20
 800d298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d29c:	f843 2b04 	str.w	r2, [r3], #4
 800d2a0:	e7d8      	b.n	800d254 <__multiply+0x50>
 800d2a2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d2a6:	f1ba 0f00 	cmp.w	sl, #0
 800d2aa:	d024      	beq.n	800d2f6 <__multiply+0xf2>
 800d2ac:	f104 0e14 	add.w	lr, r4, #20
 800d2b0:	46a9      	mov	r9, r5
 800d2b2:	f04f 0c00 	mov.w	ip, #0
 800d2b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2ba:	f8d9 3000 	ldr.w	r3, [r9]
 800d2be:	fa1f fb87 	uxth.w	fp, r7
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d2c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d2cc:	f8d9 7000 	ldr.w	r7, [r9]
 800d2d0:	4463      	add	r3, ip
 800d2d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d2d6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d2da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d2e4:	4572      	cmp	r2, lr
 800d2e6:	f849 3b04 	str.w	r3, [r9], #4
 800d2ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d2ee:	d8e2      	bhi.n	800d2b6 <__multiply+0xb2>
 800d2f0:	9b01      	ldr	r3, [sp, #4]
 800d2f2:	f845 c003 	str.w	ip, [r5, r3]
 800d2f6:	9b03      	ldr	r3, [sp, #12]
 800d2f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d2fc:	3104      	adds	r1, #4
 800d2fe:	f1b9 0f00 	cmp.w	r9, #0
 800d302:	d021      	beq.n	800d348 <__multiply+0x144>
 800d304:	682b      	ldr	r3, [r5, #0]
 800d306:	f104 0c14 	add.w	ip, r4, #20
 800d30a:	46ae      	mov	lr, r5
 800d30c:	f04f 0a00 	mov.w	sl, #0
 800d310:	f8bc b000 	ldrh.w	fp, [ip]
 800d314:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d318:	fb09 770b 	mla	r7, r9, fp, r7
 800d31c:	4457      	add	r7, sl
 800d31e:	b29b      	uxth	r3, r3
 800d320:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d324:	f84e 3b04 	str.w	r3, [lr], #4
 800d328:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d32c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d330:	f8be 3000 	ldrh.w	r3, [lr]
 800d334:	fb09 330a 	mla	r3, r9, sl, r3
 800d338:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d33c:	4562      	cmp	r2, ip
 800d33e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d342:	d8e5      	bhi.n	800d310 <__multiply+0x10c>
 800d344:	9f01      	ldr	r7, [sp, #4]
 800d346:	51eb      	str	r3, [r5, r7]
 800d348:	3504      	adds	r5, #4
 800d34a:	e799      	b.n	800d280 <__multiply+0x7c>
 800d34c:	3e01      	subs	r6, #1
 800d34e:	e79b      	b.n	800d288 <__multiply+0x84>
 800d350:	0804c0b1 	.word	0x0804c0b1
 800d354:	0804c139 	.word	0x0804c139

0800d358 <__pow5mult>:
 800d358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d35c:	4615      	mov	r5, r2
 800d35e:	f012 0203 	ands.w	r2, r2, #3
 800d362:	4607      	mov	r7, r0
 800d364:	460e      	mov	r6, r1
 800d366:	d007      	beq.n	800d378 <__pow5mult+0x20>
 800d368:	4c25      	ldr	r4, [pc, #148]	@ (800d400 <__pow5mult+0xa8>)
 800d36a:	3a01      	subs	r2, #1
 800d36c:	2300      	movs	r3, #0
 800d36e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d372:	f7ff fe55 	bl	800d020 <__multadd>
 800d376:	4606      	mov	r6, r0
 800d378:	10ad      	asrs	r5, r5, #2
 800d37a:	d03d      	beq.n	800d3f8 <__pow5mult+0xa0>
 800d37c:	69fc      	ldr	r4, [r7, #28]
 800d37e:	b97c      	cbnz	r4, 800d3a0 <__pow5mult+0x48>
 800d380:	2010      	movs	r0, #16
 800d382:	f7fe f8c7 	bl	800b514 <malloc>
 800d386:	4602      	mov	r2, r0
 800d388:	61f8      	str	r0, [r7, #28]
 800d38a:	b928      	cbnz	r0, 800d398 <__pow5mult+0x40>
 800d38c:	4b1d      	ldr	r3, [pc, #116]	@ (800d404 <__pow5mult+0xac>)
 800d38e:	481e      	ldr	r0, [pc, #120]	@ (800d408 <__pow5mult+0xb0>)
 800d390:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d394:	f001 f9ee 	bl	800e774 <__assert_func>
 800d398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d39c:	6004      	str	r4, [r0, #0]
 800d39e:	60c4      	str	r4, [r0, #12]
 800d3a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d3a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3a8:	b94c      	cbnz	r4, 800d3be <__pow5mult+0x66>
 800d3aa:	f240 2171 	movw	r1, #625	@ 0x271
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	f7ff ff12 	bl	800d1d8 <__i2b>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	6003      	str	r3, [r0, #0]
 800d3be:	f04f 0900 	mov.w	r9, #0
 800d3c2:	07eb      	lsls	r3, r5, #31
 800d3c4:	d50a      	bpl.n	800d3dc <__pow5mult+0x84>
 800d3c6:	4631      	mov	r1, r6
 800d3c8:	4622      	mov	r2, r4
 800d3ca:	4638      	mov	r0, r7
 800d3cc:	f7ff ff1a 	bl	800d204 <__multiply>
 800d3d0:	4631      	mov	r1, r6
 800d3d2:	4680      	mov	r8, r0
 800d3d4:	4638      	mov	r0, r7
 800d3d6:	f7ff fe01 	bl	800cfdc <_Bfree>
 800d3da:	4646      	mov	r6, r8
 800d3dc:	106d      	asrs	r5, r5, #1
 800d3de:	d00b      	beq.n	800d3f8 <__pow5mult+0xa0>
 800d3e0:	6820      	ldr	r0, [r4, #0]
 800d3e2:	b938      	cbnz	r0, 800d3f4 <__pow5mult+0x9c>
 800d3e4:	4622      	mov	r2, r4
 800d3e6:	4621      	mov	r1, r4
 800d3e8:	4638      	mov	r0, r7
 800d3ea:	f7ff ff0b 	bl	800d204 <__multiply>
 800d3ee:	6020      	str	r0, [r4, #0]
 800d3f0:	f8c0 9000 	str.w	r9, [r0]
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	e7e4      	b.n	800d3c2 <__pow5mult+0x6a>
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3fe:	bf00      	nop
 800d400:	0804c194 	.word	0x0804c194
 800d404:	0804c122 	.word	0x0804c122
 800d408:	0804c139 	.word	0x0804c139

0800d40c <__lshift>:
 800d40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d410:	460c      	mov	r4, r1
 800d412:	6849      	ldr	r1, [r1, #4]
 800d414:	6923      	ldr	r3, [r4, #16]
 800d416:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d41a:	68a3      	ldr	r3, [r4, #8]
 800d41c:	4607      	mov	r7, r0
 800d41e:	4691      	mov	r9, r2
 800d420:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d424:	f108 0601 	add.w	r6, r8, #1
 800d428:	42b3      	cmp	r3, r6
 800d42a:	db0b      	blt.n	800d444 <__lshift+0x38>
 800d42c:	4638      	mov	r0, r7
 800d42e:	f7ff fd95 	bl	800cf5c <_Balloc>
 800d432:	4605      	mov	r5, r0
 800d434:	b948      	cbnz	r0, 800d44a <__lshift+0x3e>
 800d436:	4602      	mov	r2, r0
 800d438:	4b28      	ldr	r3, [pc, #160]	@ (800d4dc <__lshift+0xd0>)
 800d43a:	4829      	ldr	r0, [pc, #164]	@ (800d4e0 <__lshift+0xd4>)
 800d43c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d440:	f001 f998 	bl	800e774 <__assert_func>
 800d444:	3101      	adds	r1, #1
 800d446:	005b      	lsls	r3, r3, #1
 800d448:	e7ee      	b.n	800d428 <__lshift+0x1c>
 800d44a:	2300      	movs	r3, #0
 800d44c:	f100 0114 	add.w	r1, r0, #20
 800d450:	f100 0210 	add.w	r2, r0, #16
 800d454:	4618      	mov	r0, r3
 800d456:	4553      	cmp	r3, sl
 800d458:	db33      	blt.n	800d4c2 <__lshift+0xb6>
 800d45a:	6920      	ldr	r0, [r4, #16]
 800d45c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d460:	f104 0314 	add.w	r3, r4, #20
 800d464:	f019 091f 	ands.w	r9, r9, #31
 800d468:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d46c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d470:	d02b      	beq.n	800d4ca <__lshift+0xbe>
 800d472:	f1c9 0e20 	rsb	lr, r9, #32
 800d476:	468a      	mov	sl, r1
 800d478:	2200      	movs	r2, #0
 800d47a:	6818      	ldr	r0, [r3, #0]
 800d47c:	fa00 f009 	lsl.w	r0, r0, r9
 800d480:	4310      	orrs	r0, r2
 800d482:	f84a 0b04 	str.w	r0, [sl], #4
 800d486:	f853 2b04 	ldr.w	r2, [r3], #4
 800d48a:	459c      	cmp	ip, r3
 800d48c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d490:	d8f3      	bhi.n	800d47a <__lshift+0x6e>
 800d492:	ebac 0304 	sub.w	r3, ip, r4
 800d496:	3b15      	subs	r3, #21
 800d498:	f023 0303 	bic.w	r3, r3, #3
 800d49c:	3304      	adds	r3, #4
 800d49e:	f104 0015 	add.w	r0, r4, #21
 800d4a2:	4584      	cmp	ip, r0
 800d4a4:	bf38      	it	cc
 800d4a6:	2304      	movcc	r3, #4
 800d4a8:	50ca      	str	r2, [r1, r3]
 800d4aa:	b10a      	cbz	r2, 800d4b0 <__lshift+0xa4>
 800d4ac:	f108 0602 	add.w	r6, r8, #2
 800d4b0:	3e01      	subs	r6, #1
 800d4b2:	4638      	mov	r0, r7
 800d4b4:	612e      	str	r6, [r5, #16]
 800d4b6:	4621      	mov	r1, r4
 800d4b8:	f7ff fd90 	bl	800cfdc <_Bfree>
 800d4bc:	4628      	mov	r0, r5
 800d4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	e7c5      	b.n	800d456 <__lshift+0x4a>
 800d4ca:	3904      	subs	r1, #4
 800d4cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4d4:	459c      	cmp	ip, r3
 800d4d6:	d8f9      	bhi.n	800d4cc <__lshift+0xc0>
 800d4d8:	e7ea      	b.n	800d4b0 <__lshift+0xa4>
 800d4da:	bf00      	nop
 800d4dc:	0804c0b1 	.word	0x0804c0b1
 800d4e0:	0804c139 	.word	0x0804c139

0800d4e4 <__mcmp>:
 800d4e4:	690a      	ldr	r2, [r1, #16]
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	6900      	ldr	r0, [r0, #16]
 800d4ea:	1a80      	subs	r0, r0, r2
 800d4ec:	b530      	push	{r4, r5, lr}
 800d4ee:	d10e      	bne.n	800d50e <__mcmp+0x2a>
 800d4f0:	3314      	adds	r3, #20
 800d4f2:	3114      	adds	r1, #20
 800d4f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d4f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d4fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d504:	4295      	cmp	r5, r2
 800d506:	d003      	beq.n	800d510 <__mcmp+0x2c>
 800d508:	d205      	bcs.n	800d516 <__mcmp+0x32>
 800d50a:	f04f 30ff 	mov.w	r0, #4294967295
 800d50e:	bd30      	pop	{r4, r5, pc}
 800d510:	42a3      	cmp	r3, r4
 800d512:	d3f3      	bcc.n	800d4fc <__mcmp+0x18>
 800d514:	e7fb      	b.n	800d50e <__mcmp+0x2a>
 800d516:	2001      	movs	r0, #1
 800d518:	e7f9      	b.n	800d50e <__mcmp+0x2a>
	...

0800d51c <__mdiff>:
 800d51c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d520:	4689      	mov	r9, r1
 800d522:	4606      	mov	r6, r0
 800d524:	4611      	mov	r1, r2
 800d526:	4648      	mov	r0, r9
 800d528:	4614      	mov	r4, r2
 800d52a:	f7ff ffdb 	bl	800d4e4 <__mcmp>
 800d52e:	1e05      	subs	r5, r0, #0
 800d530:	d112      	bne.n	800d558 <__mdiff+0x3c>
 800d532:	4629      	mov	r1, r5
 800d534:	4630      	mov	r0, r6
 800d536:	f7ff fd11 	bl	800cf5c <_Balloc>
 800d53a:	4602      	mov	r2, r0
 800d53c:	b928      	cbnz	r0, 800d54a <__mdiff+0x2e>
 800d53e:	4b3f      	ldr	r3, [pc, #252]	@ (800d63c <__mdiff+0x120>)
 800d540:	f240 2137 	movw	r1, #567	@ 0x237
 800d544:	483e      	ldr	r0, [pc, #248]	@ (800d640 <__mdiff+0x124>)
 800d546:	f001 f915 	bl	800e774 <__assert_func>
 800d54a:	2301      	movs	r3, #1
 800d54c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d550:	4610      	mov	r0, r2
 800d552:	b003      	add	sp, #12
 800d554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d558:	bfbc      	itt	lt
 800d55a:	464b      	movlt	r3, r9
 800d55c:	46a1      	movlt	r9, r4
 800d55e:	4630      	mov	r0, r6
 800d560:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d564:	bfba      	itte	lt
 800d566:	461c      	movlt	r4, r3
 800d568:	2501      	movlt	r5, #1
 800d56a:	2500      	movge	r5, #0
 800d56c:	f7ff fcf6 	bl	800cf5c <_Balloc>
 800d570:	4602      	mov	r2, r0
 800d572:	b918      	cbnz	r0, 800d57c <__mdiff+0x60>
 800d574:	4b31      	ldr	r3, [pc, #196]	@ (800d63c <__mdiff+0x120>)
 800d576:	f240 2145 	movw	r1, #581	@ 0x245
 800d57a:	e7e3      	b.n	800d544 <__mdiff+0x28>
 800d57c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d580:	6926      	ldr	r6, [r4, #16]
 800d582:	60c5      	str	r5, [r0, #12]
 800d584:	f109 0310 	add.w	r3, r9, #16
 800d588:	f109 0514 	add.w	r5, r9, #20
 800d58c:	f104 0e14 	add.w	lr, r4, #20
 800d590:	f100 0b14 	add.w	fp, r0, #20
 800d594:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d598:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d59c:	9301      	str	r3, [sp, #4]
 800d59e:	46d9      	mov	r9, fp
 800d5a0:	f04f 0c00 	mov.w	ip, #0
 800d5a4:	9b01      	ldr	r3, [sp, #4]
 800d5a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d5aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d5ae:	9301      	str	r3, [sp, #4]
 800d5b0:	fa1f f38a 	uxth.w	r3, sl
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	b283      	uxth	r3, r0
 800d5b8:	1acb      	subs	r3, r1, r3
 800d5ba:	0c00      	lsrs	r0, r0, #16
 800d5bc:	4463      	add	r3, ip
 800d5be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d5c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d5cc:	4576      	cmp	r6, lr
 800d5ce:	f849 3b04 	str.w	r3, [r9], #4
 800d5d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d5d6:	d8e5      	bhi.n	800d5a4 <__mdiff+0x88>
 800d5d8:	1b33      	subs	r3, r6, r4
 800d5da:	3b15      	subs	r3, #21
 800d5dc:	f023 0303 	bic.w	r3, r3, #3
 800d5e0:	3415      	adds	r4, #21
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	42a6      	cmp	r6, r4
 800d5e6:	bf38      	it	cc
 800d5e8:	2304      	movcc	r3, #4
 800d5ea:	441d      	add	r5, r3
 800d5ec:	445b      	add	r3, fp
 800d5ee:	461e      	mov	r6, r3
 800d5f0:	462c      	mov	r4, r5
 800d5f2:	4544      	cmp	r4, r8
 800d5f4:	d30e      	bcc.n	800d614 <__mdiff+0xf8>
 800d5f6:	f108 0103 	add.w	r1, r8, #3
 800d5fa:	1b49      	subs	r1, r1, r5
 800d5fc:	f021 0103 	bic.w	r1, r1, #3
 800d600:	3d03      	subs	r5, #3
 800d602:	45a8      	cmp	r8, r5
 800d604:	bf38      	it	cc
 800d606:	2100      	movcc	r1, #0
 800d608:	440b      	add	r3, r1
 800d60a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d60e:	b191      	cbz	r1, 800d636 <__mdiff+0x11a>
 800d610:	6117      	str	r7, [r2, #16]
 800d612:	e79d      	b.n	800d550 <__mdiff+0x34>
 800d614:	f854 1b04 	ldr.w	r1, [r4], #4
 800d618:	46e6      	mov	lr, ip
 800d61a:	0c08      	lsrs	r0, r1, #16
 800d61c:	fa1c fc81 	uxtah	ip, ip, r1
 800d620:	4471      	add	r1, lr
 800d622:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d626:	b289      	uxth	r1, r1
 800d628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d62c:	f846 1b04 	str.w	r1, [r6], #4
 800d630:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d634:	e7dd      	b.n	800d5f2 <__mdiff+0xd6>
 800d636:	3f01      	subs	r7, #1
 800d638:	e7e7      	b.n	800d60a <__mdiff+0xee>
 800d63a:	bf00      	nop
 800d63c:	0804c0b1 	.word	0x0804c0b1
 800d640:	0804c139 	.word	0x0804c139

0800d644 <__ulp>:
 800d644:	b082      	sub	sp, #8
 800d646:	ed8d 0b00 	vstr	d0, [sp]
 800d64a:	9a01      	ldr	r2, [sp, #4]
 800d64c:	4b0f      	ldr	r3, [pc, #60]	@ (800d68c <__ulp+0x48>)
 800d64e:	4013      	ands	r3, r2
 800d650:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d654:	2b00      	cmp	r3, #0
 800d656:	dc08      	bgt.n	800d66a <__ulp+0x26>
 800d658:	425b      	negs	r3, r3
 800d65a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d65e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d662:	da04      	bge.n	800d66e <__ulp+0x2a>
 800d664:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d668:	4113      	asrs	r3, r2
 800d66a:	2200      	movs	r2, #0
 800d66c:	e008      	b.n	800d680 <__ulp+0x3c>
 800d66e:	f1a2 0314 	sub.w	r3, r2, #20
 800d672:	2b1e      	cmp	r3, #30
 800d674:	bfda      	itte	le
 800d676:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d67a:	40da      	lsrle	r2, r3
 800d67c:	2201      	movgt	r2, #1
 800d67e:	2300      	movs	r3, #0
 800d680:	4619      	mov	r1, r3
 800d682:	4610      	mov	r0, r2
 800d684:	ec41 0b10 	vmov	d0, r0, r1
 800d688:	b002      	add	sp, #8
 800d68a:	4770      	bx	lr
 800d68c:	7ff00000 	.word	0x7ff00000

0800d690 <__b2d>:
 800d690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d694:	6906      	ldr	r6, [r0, #16]
 800d696:	f100 0814 	add.w	r8, r0, #20
 800d69a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d69e:	1f37      	subs	r7, r6, #4
 800d6a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	f7ff fd4b 	bl	800d140 <__hi0bits>
 800d6aa:	f1c0 0320 	rsb	r3, r0, #32
 800d6ae:	280a      	cmp	r0, #10
 800d6b0:	600b      	str	r3, [r1, #0]
 800d6b2:	491b      	ldr	r1, [pc, #108]	@ (800d720 <__b2d+0x90>)
 800d6b4:	dc15      	bgt.n	800d6e2 <__b2d+0x52>
 800d6b6:	f1c0 0c0b 	rsb	ip, r0, #11
 800d6ba:	fa22 f30c 	lsr.w	r3, r2, ip
 800d6be:	45b8      	cmp	r8, r7
 800d6c0:	ea43 0501 	orr.w	r5, r3, r1
 800d6c4:	bf34      	ite	cc
 800d6c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d6ca:	2300      	movcs	r3, #0
 800d6cc:	3015      	adds	r0, #21
 800d6ce:	fa02 f000 	lsl.w	r0, r2, r0
 800d6d2:	fa23 f30c 	lsr.w	r3, r3, ip
 800d6d6:	4303      	orrs	r3, r0
 800d6d8:	461c      	mov	r4, r3
 800d6da:	ec45 4b10 	vmov	d0, r4, r5
 800d6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e2:	45b8      	cmp	r8, r7
 800d6e4:	bf3a      	itte	cc
 800d6e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d6ea:	f1a6 0708 	subcc.w	r7, r6, #8
 800d6ee:	2300      	movcs	r3, #0
 800d6f0:	380b      	subs	r0, #11
 800d6f2:	d012      	beq.n	800d71a <__b2d+0x8a>
 800d6f4:	f1c0 0120 	rsb	r1, r0, #32
 800d6f8:	fa23 f401 	lsr.w	r4, r3, r1
 800d6fc:	4082      	lsls	r2, r0
 800d6fe:	4322      	orrs	r2, r4
 800d700:	4547      	cmp	r7, r8
 800d702:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d706:	bf8c      	ite	hi
 800d708:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d70c:	2200      	movls	r2, #0
 800d70e:	4083      	lsls	r3, r0
 800d710:	40ca      	lsrs	r2, r1
 800d712:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d716:	4313      	orrs	r3, r2
 800d718:	e7de      	b.n	800d6d8 <__b2d+0x48>
 800d71a:	ea42 0501 	orr.w	r5, r2, r1
 800d71e:	e7db      	b.n	800d6d8 <__b2d+0x48>
 800d720:	3ff00000 	.word	0x3ff00000

0800d724 <__d2b>:
 800d724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d728:	460f      	mov	r7, r1
 800d72a:	2101      	movs	r1, #1
 800d72c:	ec59 8b10 	vmov	r8, r9, d0
 800d730:	4616      	mov	r6, r2
 800d732:	f7ff fc13 	bl	800cf5c <_Balloc>
 800d736:	4604      	mov	r4, r0
 800d738:	b930      	cbnz	r0, 800d748 <__d2b+0x24>
 800d73a:	4602      	mov	r2, r0
 800d73c:	4b23      	ldr	r3, [pc, #140]	@ (800d7cc <__d2b+0xa8>)
 800d73e:	4824      	ldr	r0, [pc, #144]	@ (800d7d0 <__d2b+0xac>)
 800d740:	f240 310f 	movw	r1, #783	@ 0x30f
 800d744:	f001 f816 	bl	800e774 <__assert_func>
 800d748:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d74c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d750:	b10d      	cbz	r5, 800d756 <__d2b+0x32>
 800d752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	f1b8 0300 	subs.w	r3, r8, #0
 800d75c:	d023      	beq.n	800d7a6 <__d2b+0x82>
 800d75e:	4668      	mov	r0, sp
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	f7ff fd0c 	bl	800d17e <__lo0bits>
 800d766:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d76a:	b1d0      	cbz	r0, 800d7a2 <__d2b+0x7e>
 800d76c:	f1c0 0320 	rsb	r3, r0, #32
 800d770:	fa02 f303 	lsl.w	r3, r2, r3
 800d774:	430b      	orrs	r3, r1
 800d776:	40c2      	lsrs	r2, r0
 800d778:	6163      	str	r3, [r4, #20]
 800d77a:	9201      	str	r2, [sp, #4]
 800d77c:	9b01      	ldr	r3, [sp, #4]
 800d77e:	61a3      	str	r3, [r4, #24]
 800d780:	2b00      	cmp	r3, #0
 800d782:	bf0c      	ite	eq
 800d784:	2201      	moveq	r2, #1
 800d786:	2202      	movne	r2, #2
 800d788:	6122      	str	r2, [r4, #16]
 800d78a:	b1a5      	cbz	r5, 800d7b6 <__d2b+0x92>
 800d78c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d790:	4405      	add	r5, r0
 800d792:	603d      	str	r5, [r7, #0]
 800d794:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d798:	6030      	str	r0, [r6, #0]
 800d79a:	4620      	mov	r0, r4
 800d79c:	b003      	add	sp, #12
 800d79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7a2:	6161      	str	r1, [r4, #20]
 800d7a4:	e7ea      	b.n	800d77c <__d2b+0x58>
 800d7a6:	a801      	add	r0, sp, #4
 800d7a8:	f7ff fce9 	bl	800d17e <__lo0bits>
 800d7ac:	9b01      	ldr	r3, [sp, #4]
 800d7ae:	6163      	str	r3, [r4, #20]
 800d7b0:	3020      	adds	r0, #32
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	e7e8      	b.n	800d788 <__d2b+0x64>
 800d7b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d7be:	6038      	str	r0, [r7, #0]
 800d7c0:	6918      	ldr	r0, [r3, #16]
 800d7c2:	f7ff fcbd 	bl	800d140 <__hi0bits>
 800d7c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7ca:	e7e5      	b.n	800d798 <__d2b+0x74>
 800d7cc:	0804c0b1 	.word	0x0804c0b1
 800d7d0:	0804c139 	.word	0x0804c139

0800d7d4 <__ratio>:
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	b085      	sub	sp, #20
 800d7da:	e9cd 1000 	strd	r1, r0, [sp]
 800d7de:	a902      	add	r1, sp, #8
 800d7e0:	f7ff ff56 	bl	800d690 <__b2d>
 800d7e4:	9800      	ldr	r0, [sp, #0]
 800d7e6:	a903      	add	r1, sp, #12
 800d7e8:	ec55 4b10 	vmov	r4, r5, d0
 800d7ec:	f7ff ff50 	bl	800d690 <__b2d>
 800d7f0:	9b01      	ldr	r3, [sp, #4]
 800d7f2:	6919      	ldr	r1, [r3, #16]
 800d7f4:	9b00      	ldr	r3, [sp, #0]
 800d7f6:	691b      	ldr	r3, [r3, #16]
 800d7f8:	1ac9      	subs	r1, r1, r3
 800d7fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d7fe:	1a9b      	subs	r3, r3, r2
 800d800:	ec5b ab10 	vmov	sl, fp, d0
 800d804:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d808:	2b00      	cmp	r3, #0
 800d80a:	bfce      	itee	gt
 800d80c:	462a      	movgt	r2, r5
 800d80e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d812:	465a      	movle	r2, fp
 800d814:	462f      	mov	r7, r5
 800d816:	46d9      	mov	r9, fp
 800d818:	bfcc      	ite	gt
 800d81a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d81e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d822:	464b      	mov	r3, r9
 800d824:	4652      	mov	r2, sl
 800d826:	4620      	mov	r0, r4
 800d828:	4639      	mov	r1, r7
 800d82a:	f7f3 f81f 	bl	800086c <__aeabi_ddiv>
 800d82e:	ec41 0b10 	vmov	d0, r0, r1
 800d832:	b005      	add	sp, #20
 800d834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d838 <__copybits>:
 800d838:	3901      	subs	r1, #1
 800d83a:	b570      	push	{r4, r5, r6, lr}
 800d83c:	1149      	asrs	r1, r1, #5
 800d83e:	6914      	ldr	r4, [r2, #16]
 800d840:	3101      	adds	r1, #1
 800d842:	f102 0314 	add.w	r3, r2, #20
 800d846:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d84a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d84e:	1f05      	subs	r5, r0, #4
 800d850:	42a3      	cmp	r3, r4
 800d852:	d30c      	bcc.n	800d86e <__copybits+0x36>
 800d854:	1aa3      	subs	r3, r4, r2
 800d856:	3b11      	subs	r3, #17
 800d858:	f023 0303 	bic.w	r3, r3, #3
 800d85c:	3211      	adds	r2, #17
 800d85e:	42a2      	cmp	r2, r4
 800d860:	bf88      	it	hi
 800d862:	2300      	movhi	r3, #0
 800d864:	4418      	add	r0, r3
 800d866:	2300      	movs	r3, #0
 800d868:	4288      	cmp	r0, r1
 800d86a:	d305      	bcc.n	800d878 <__copybits+0x40>
 800d86c:	bd70      	pop	{r4, r5, r6, pc}
 800d86e:	f853 6b04 	ldr.w	r6, [r3], #4
 800d872:	f845 6f04 	str.w	r6, [r5, #4]!
 800d876:	e7eb      	b.n	800d850 <__copybits+0x18>
 800d878:	f840 3b04 	str.w	r3, [r0], #4
 800d87c:	e7f4      	b.n	800d868 <__copybits+0x30>

0800d87e <__any_on>:
 800d87e:	f100 0214 	add.w	r2, r0, #20
 800d882:	6900      	ldr	r0, [r0, #16]
 800d884:	114b      	asrs	r3, r1, #5
 800d886:	4298      	cmp	r0, r3
 800d888:	b510      	push	{r4, lr}
 800d88a:	db11      	blt.n	800d8b0 <__any_on+0x32>
 800d88c:	dd0a      	ble.n	800d8a4 <__any_on+0x26>
 800d88e:	f011 011f 	ands.w	r1, r1, #31
 800d892:	d007      	beq.n	800d8a4 <__any_on+0x26>
 800d894:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d898:	fa24 f001 	lsr.w	r0, r4, r1
 800d89c:	fa00 f101 	lsl.w	r1, r0, r1
 800d8a0:	428c      	cmp	r4, r1
 800d8a2:	d10b      	bne.n	800d8bc <__any_on+0x3e>
 800d8a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d803      	bhi.n	800d8b4 <__any_on+0x36>
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	bd10      	pop	{r4, pc}
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	e7f7      	b.n	800d8a4 <__any_on+0x26>
 800d8b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d8b8:	2900      	cmp	r1, #0
 800d8ba:	d0f5      	beq.n	800d8a8 <__any_on+0x2a>
 800d8bc:	2001      	movs	r0, #1
 800d8be:	e7f6      	b.n	800d8ae <__any_on+0x30>

0800d8c0 <_malloc_usable_size_r>:
 800d8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8c4:	1f18      	subs	r0, r3, #4
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	bfbc      	itt	lt
 800d8ca:	580b      	ldrlt	r3, [r1, r0]
 800d8cc:	18c0      	addlt	r0, r0, r3
 800d8ce:	4770      	bx	lr

0800d8d0 <__ascii_wctomb>:
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	4608      	mov	r0, r1
 800d8d4:	b141      	cbz	r1, 800d8e8 <__ascii_wctomb+0x18>
 800d8d6:	2aff      	cmp	r2, #255	@ 0xff
 800d8d8:	d904      	bls.n	800d8e4 <__ascii_wctomb+0x14>
 800d8da:	228a      	movs	r2, #138	@ 0x8a
 800d8dc:	601a      	str	r2, [r3, #0]
 800d8de:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e2:	4770      	bx	lr
 800d8e4:	700a      	strb	r2, [r1, #0]
 800d8e6:	2001      	movs	r0, #1
 800d8e8:	4770      	bx	lr

0800d8ea <__ssputs_r>:
 800d8ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ee:	688e      	ldr	r6, [r1, #8]
 800d8f0:	461f      	mov	r7, r3
 800d8f2:	42be      	cmp	r6, r7
 800d8f4:	680b      	ldr	r3, [r1, #0]
 800d8f6:	4682      	mov	sl, r0
 800d8f8:	460c      	mov	r4, r1
 800d8fa:	4690      	mov	r8, r2
 800d8fc:	d82d      	bhi.n	800d95a <__ssputs_r+0x70>
 800d8fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d902:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d906:	d026      	beq.n	800d956 <__ssputs_r+0x6c>
 800d908:	6965      	ldr	r5, [r4, #20]
 800d90a:	6909      	ldr	r1, [r1, #16]
 800d90c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d910:	eba3 0901 	sub.w	r9, r3, r1
 800d914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d918:	1c7b      	adds	r3, r7, #1
 800d91a:	444b      	add	r3, r9
 800d91c:	106d      	asrs	r5, r5, #1
 800d91e:	429d      	cmp	r5, r3
 800d920:	bf38      	it	cc
 800d922:	461d      	movcc	r5, r3
 800d924:	0553      	lsls	r3, r2, #21
 800d926:	d527      	bpl.n	800d978 <__ssputs_r+0x8e>
 800d928:	4629      	mov	r1, r5
 800d92a:	f7fd fe25 	bl	800b578 <_malloc_r>
 800d92e:	4606      	mov	r6, r0
 800d930:	b360      	cbz	r0, 800d98c <__ssputs_r+0xa2>
 800d932:	6921      	ldr	r1, [r4, #16]
 800d934:	464a      	mov	r2, r9
 800d936:	f7fe ff64 	bl	800c802 <memcpy>
 800d93a:	89a3      	ldrh	r3, [r4, #12]
 800d93c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d944:	81a3      	strh	r3, [r4, #12]
 800d946:	6126      	str	r6, [r4, #16]
 800d948:	6165      	str	r5, [r4, #20]
 800d94a:	444e      	add	r6, r9
 800d94c:	eba5 0509 	sub.w	r5, r5, r9
 800d950:	6026      	str	r6, [r4, #0]
 800d952:	60a5      	str	r5, [r4, #8]
 800d954:	463e      	mov	r6, r7
 800d956:	42be      	cmp	r6, r7
 800d958:	d900      	bls.n	800d95c <__ssputs_r+0x72>
 800d95a:	463e      	mov	r6, r7
 800d95c:	6820      	ldr	r0, [r4, #0]
 800d95e:	4632      	mov	r2, r6
 800d960:	4641      	mov	r1, r8
 800d962:	f000 fee0 	bl	800e726 <memmove>
 800d966:	68a3      	ldr	r3, [r4, #8]
 800d968:	1b9b      	subs	r3, r3, r6
 800d96a:	60a3      	str	r3, [r4, #8]
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	4433      	add	r3, r6
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	2000      	movs	r0, #0
 800d974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d978:	462a      	mov	r2, r5
 800d97a:	f7fd fe91 	bl	800b6a0 <_realloc_r>
 800d97e:	4606      	mov	r6, r0
 800d980:	2800      	cmp	r0, #0
 800d982:	d1e0      	bne.n	800d946 <__ssputs_r+0x5c>
 800d984:	6921      	ldr	r1, [r4, #16]
 800d986:	4650      	mov	r0, sl
 800d988:	f7fe ff52 	bl	800c830 <_free_r>
 800d98c:	230c      	movs	r3, #12
 800d98e:	f8ca 3000 	str.w	r3, [sl]
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d998:	81a3      	strh	r3, [r4, #12]
 800d99a:	f04f 30ff 	mov.w	r0, #4294967295
 800d99e:	e7e9      	b.n	800d974 <__ssputs_r+0x8a>

0800d9a0 <_svfiprintf_r>:
 800d9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a4:	4698      	mov	r8, r3
 800d9a6:	898b      	ldrh	r3, [r1, #12]
 800d9a8:	061b      	lsls	r3, r3, #24
 800d9aa:	b09d      	sub	sp, #116	@ 0x74
 800d9ac:	4607      	mov	r7, r0
 800d9ae:	460d      	mov	r5, r1
 800d9b0:	4614      	mov	r4, r2
 800d9b2:	d510      	bpl.n	800d9d6 <_svfiprintf_r+0x36>
 800d9b4:	690b      	ldr	r3, [r1, #16]
 800d9b6:	b973      	cbnz	r3, 800d9d6 <_svfiprintf_r+0x36>
 800d9b8:	2140      	movs	r1, #64	@ 0x40
 800d9ba:	f7fd fddd 	bl	800b578 <_malloc_r>
 800d9be:	6028      	str	r0, [r5, #0]
 800d9c0:	6128      	str	r0, [r5, #16]
 800d9c2:	b930      	cbnz	r0, 800d9d2 <_svfiprintf_r+0x32>
 800d9c4:	230c      	movs	r3, #12
 800d9c6:	603b      	str	r3, [r7, #0]
 800d9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9cc:	b01d      	add	sp, #116	@ 0x74
 800d9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9d2:	2340      	movs	r3, #64	@ 0x40
 800d9d4:	616b      	str	r3, [r5, #20]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9da:	2320      	movs	r3, #32
 800d9dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d9e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9e4:	2330      	movs	r3, #48	@ 0x30
 800d9e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800db84 <_svfiprintf_r+0x1e4>
 800d9ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9ee:	f04f 0901 	mov.w	r9, #1
 800d9f2:	4623      	mov	r3, r4
 800d9f4:	469a      	mov	sl, r3
 800d9f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9fa:	b10a      	cbz	r2, 800da00 <_svfiprintf_r+0x60>
 800d9fc:	2a25      	cmp	r2, #37	@ 0x25
 800d9fe:	d1f9      	bne.n	800d9f4 <_svfiprintf_r+0x54>
 800da00:	ebba 0b04 	subs.w	fp, sl, r4
 800da04:	d00b      	beq.n	800da1e <_svfiprintf_r+0x7e>
 800da06:	465b      	mov	r3, fp
 800da08:	4622      	mov	r2, r4
 800da0a:	4629      	mov	r1, r5
 800da0c:	4638      	mov	r0, r7
 800da0e:	f7ff ff6c 	bl	800d8ea <__ssputs_r>
 800da12:	3001      	adds	r0, #1
 800da14:	f000 80a7 	beq.w	800db66 <_svfiprintf_r+0x1c6>
 800da18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da1a:	445a      	add	r2, fp
 800da1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800da1e:	f89a 3000 	ldrb.w	r3, [sl]
 800da22:	2b00      	cmp	r3, #0
 800da24:	f000 809f 	beq.w	800db66 <_svfiprintf_r+0x1c6>
 800da28:	2300      	movs	r3, #0
 800da2a:	f04f 32ff 	mov.w	r2, #4294967295
 800da2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da32:	f10a 0a01 	add.w	sl, sl, #1
 800da36:	9304      	str	r3, [sp, #16]
 800da38:	9307      	str	r3, [sp, #28]
 800da3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800da40:	4654      	mov	r4, sl
 800da42:	2205      	movs	r2, #5
 800da44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da48:	484e      	ldr	r0, [pc, #312]	@ (800db84 <_svfiprintf_r+0x1e4>)
 800da4a:	f7f2 fbd9 	bl	8000200 <memchr>
 800da4e:	9a04      	ldr	r2, [sp, #16]
 800da50:	b9d8      	cbnz	r0, 800da8a <_svfiprintf_r+0xea>
 800da52:	06d0      	lsls	r0, r2, #27
 800da54:	bf44      	itt	mi
 800da56:	2320      	movmi	r3, #32
 800da58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da5c:	0711      	lsls	r1, r2, #28
 800da5e:	bf44      	itt	mi
 800da60:	232b      	movmi	r3, #43	@ 0x2b
 800da62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da66:	f89a 3000 	ldrb.w	r3, [sl]
 800da6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800da6c:	d015      	beq.n	800da9a <_svfiprintf_r+0xfa>
 800da6e:	9a07      	ldr	r2, [sp, #28]
 800da70:	4654      	mov	r4, sl
 800da72:	2000      	movs	r0, #0
 800da74:	f04f 0c0a 	mov.w	ip, #10
 800da78:	4621      	mov	r1, r4
 800da7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da7e:	3b30      	subs	r3, #48	@ 0x30
 800da80:	2b09      	cmp	r3, #9
 800da82:	d94b      	bls.n	800db1c <_svfiprintf_r+0x17c>
 800da84:	b1b0      	cbz	r0, 800dab4 <_svfiprintf_r+0x114>
 800da86:	9207      	str	r2, [sp, #28]
 800da88:	e014      	b.n	800dab4 <_svfiprintf_r+0x114>
 800da8a:	eba0 0308 	sub.w	r3, r0, r8
 800da8e:	fa09 f303 	lsl.w	r3, r9, r3
 800da92:	4313      	orrs	r3, r2
 800da94:	9304      	str	r3, [sp, #16]
 800da96:	46a2      	mov	sl, r4
 800da98:	e7d2      	b.n	800da40 <_svfiprintf_r+0xa0>
 800da9a:	9b03      	ldr	r3, [sp, #12]
 800da9c:	1d19      	adds	r1, r3, #4
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	9103      	str	r1, [sp, #12]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	bfbb      	ittet	lt
 800daa6:	425b      	neglt	r3, r3
 800daa8:	f042 0202 	orrlt.w	r2, r2, #2
 800daac:	9307      	strge	r3, [sp, #28]
 800daae:	9307      	strlt	r3, [sp, #28]
 800dab0:	bfb8      	it	lt
 800dab2:	9204      	strlt	r2, [sp, #16]
 800dab4:	7823      	ldrb	r3, [r4, #0]
 800dab6:	2b2e      	cmp	r3, #46	@ 0x2e
 800dab8:	d10a      	bne.n	800dad0 <_svfiprintf_r+0x130>
 800daba:	7863      	ldrb	r3, [r4, #1]
 800dabc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dabe:	d132      	bne.n	800db26 <_svfiprintf_r+0x186>
 800dac0:	9b03      	ldr	r3, [sp, #12]
 800dac2:	1d1a      	adds	r2, r3, #4
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	9203      	str	r2, [sp, #12]
 800dac8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dacc:	3402      	adds	r4, #2
 800dace:	9305      	str	r3, [sp, #20]
 800dad0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800db94 <_svfiprintf_r+0x1f4>
 800dad4:	7821      	ldrb	r1, [r4, #0]
 800dad6:	2203      	movs	r2, #3
 800dad8:	4650      	mov	r0, sl
 800dada:	f7f2 fb91 	bl	8000200 <memchr>
 800dade:	b138      	cbz	r0, 800daf0 <_svfiprintf_r+0x150>
 800dae0:	9b04      	ldr	r3, [sp, #16]
 800dae2:	eba0 000a 	sub.w	r0, r0, sl
 800dae6:	2240      	movs	r2, #64	@ 0x40
 800dae8:	4082      	lsls	r2, r0
 800daea:	4313      	orrs	r3, r2
 800daec:	3401      	adds	r4, #1
 800daee:	9304      	str	r3, [sp, #16]
 800daf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daf4:	4824      	ldr	r0, [pc, #144]	@ (800db88 <_svfiprintf_r+0x1e8>)
 800daf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dafa:	2206      	movs	r2, #6
 800dafc:	f7f2 fb80 	bl	8000200 <memchr>
 800db00:	2800      	cmp	r0, #0
 800db02:	d036      	beq.n	800db72 <_svfiprintf_r+0x1d2>
 800db04:	4b21      	ldr	r3, [pc, #132]	@ (800db8c <_svfiprintf_r+0x1ec>)
 800db06:	bb1b      	cbnz	r3, 800db50 <_svfiprintf_r+0x1b0>
 800db08:	9b03      	ldr	r3, [sp, #12]
 800db0a:	3307      	adds	r3, #7
 800db0c:	f023 0307 	bic.w	r3, r3, #7
 800db10:	3308      	adds	r3, #8
 800db12:	9303      	str	r3, [sp, #12]
 800db14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db16:	4433      	add	r3, r6
 800db18:	9309      	str	r3, [sp, #36]	@ 0x24
 800db1a:	e76a      	b.n	800d9f2 <_svfiprintf_r+0x52>
 800db1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800db20:	460c      	mov	r4, r1
 800db22:	2001      	movs	r0, #1
 800db24:	e7a8      	b.n	800da78 <_svfiprintf_r+0xd8>
 800db26:	2300      	movs	r3, #0
 800db28:	3401      	adds	r4, #1
 800db2a:	9305      	str	r3, [sp, #20]
 800db2c:	4619      	mov	r1, r3
 800db2e:	f04f 0c0a 	mov.w	ip, #10
 800db32:	4620      	mov	r0, r4
 800db34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db38:	3a30      	subs	r2, #48	@ 0x30
 800db3a:	2a09      	cmp	r2, #9
 800db3c:	d903      	bls.n	800db46 <_svfiprintf_r+0x1a6>
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d0c6      	beq.n	800dad0 <_svfiprintf_r+0x130>
 800db42:	9105      	str	r1, [sp, #20]
 800db44:	e7c4      	b.n	800dad0 <_svfiprintf_r+0x130>
 800db46:	fb0c 2101 	mla	r1, ip, r1, r2
 800db4a:	4604      	mov	r4, r0
 800db4c:	2301      	movs	r3, #1
 800db4e:	e7f0      	b.n	800db32 <_svfiprintf_r+0x192>
 800db50:	ab03      	add	r3, sp, #12
 800db52:	9300      	str	r3, [sp, #0]
 800db54:	462a      	mov	r2, r5
 800db56:	4b0e      	ldr	r3, [pc, #56]	@ (800db90 <_svfiprintf_r+0x1f0>)
 800db58:	a904      	add	r1, sp, #16
 800db5a:	4638      	mov	r0, r7
 800db5c:	f3af 8000 	nop.w
 800db60:	1c42      	adds	r2, r0, #1
 800db62:	4606      	mov	r6, r0
 800db64:	d1d6      	bne.n	800db14 <_svfiprintf_r+0x174>
 800db66:	89ab      	ldrh	r3, [r5, #12]
 800db68:	065b      	lsls	r3, r3, #25
 800db6a:	f53f af2d 	bmi.w	800d9c8 <_svfiprintf_r+0x28>
 800db6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db70:	e72c      	b.n	800d9cc <_svfiprintf_r+0x2c>
 800db72:	ab03      	add	r3, sp, #12
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	462a      	mov	r2, r5
 800db78:	4b05      	ldr	r3, [pc, #20]	@ (800db90 <_svfiprintf_r+0x1f0>)
 800db7a:	a904      	add	r1, sp, #16
 800db7c:	4638      	mov	r0, r7
 800db7e:	f000 fa45 	bl	800e00c <_printf_i>
 800db82:	e7ed      	b.n	800db60 <_svfiprintf_r+0x1c0>
 800db84:	0804c290 	.word	0x0804c290
 800db88:	0804c29a 	.word	0x0804c29a
 800db8c:	00000000 	.word	0x00000000
 800db90:	0800d8eb 	.word	0x0800d8eb
 800db94:	0804c296 	.word	0x0804c296

0800db98 <_sungetc_r>:
 800db98:	b538      	push	{r3, r4, r5, lr}
 800db9a:	1c4b      	adds	r3, r1, #1
 800db9c:	4614      	mov	r4, r2
 800db9e:	d103      	bne.n	800dba8 <_sungetc_r+0x10>
 800dba0:	f04f 35ff 	mov.w	r5, #4294967295
 800dba4:	4628      	mov	r0, r5
 800dba6:	bd38      	pop	{r3, r4, r5, pc}
 800dba8:	8993      	ldrh	r3, [r2, #12]
 800dbaa:	f023 0320 	bic.w	r3, r3, #32
 800dbae:	8193      	strh	r3, [r2, #12]
 800dbb0:	6853      	ldr	r3, [r2, #4]
 800dbb2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800dbb4:	b2cd      	uxtb	r5, r1
 800dbb6:	b18a      	cbz	r2, 800dbdc <_sungetc_r+0x44>
 800dbb8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	dd08      	ble.n	800dbd0 <_sungetc_r+0x38>
 800dbbe:	6823      	ldr	r3, [r4, #0]
 800dbc0:	1e5a      	subs	r2, r3, #1
 800dbc2:	6022      	str	r2, [r4, #0]
 800dbc4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dbc8:	6863      	ldr	r3, [r4, #4]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	6063      	str	r3, [r4, #4]
 800dbce:	e7e9      	b.n	800dba4 <_sungetc_r+0xc>
 800dbd0:	4621      	mov	r1, r4
 800dbd2:	f000 fd6e 	bl	800e6b2 <__submore>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d0f1      	beq.n	800dbbe <_sungetc_r+0x26>
 800dbda:	e7e1      	b.n	800dba0 <_sungetc_r+0x8>
 800dbdc:	6921      	ldr	r1, [r4, #16]
 800dbde:	6822      	ldr	r2, [r4, #0]
 800dbe0:	b141      	cbz	r1, 800dbf4 <_sungetc_r+0x5c>
 800dbe2:	4291      	cmp	r1, r2
 800dbe4:	d206      	bcs.n	800dbf4 <_sungetc_r+0x5c>
 800dbe6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800dbea:	42a9      	cmp	r1, r5
 800dbec:	d102      	bne.n	800dbf4 <_sungetc_r+0x5c>
 800dbee:	3a01      	subs	r2, #1
 800dbf0:	6022      	str	r2, [r4, #0]
 800dbf2:	e7ea      	b.n	800dbca <_sungetc_r+0x32>
 800dbf4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800dbf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbfe:	2303      	movs	r3, #3
 800dc00:	63a3      	str	r3, [r4, #56]	@ 0x38
 800dc02:	4623      	mov	r3, r4
 800dc04:	f803 5f46 	strb.w	r5, [r3, #70]!
 800dc08:	6023      	str	r3, [r4, #0]
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	e7de      	b.n	800dbcc <_sungetc_r+0x34>

0800dc0e <__ssrefill_r>:
 800dc0e:	b510      	push	{r4, lr}
 800dc10:	460c      	mov	r4, r1
 800dc12:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800dc14:	b169      	cbz	r1, 800dc32 <__ssrefill_r+0x24>
 800dc16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc1a:	4299      	cmp	r1, r3
 800dc1c:	d001      	beq.n	800dc22 <__ssrefill_r+0x14>
 800dc1e:	f7fe fe07 	bl	800c830 <_free_r>
 800dc22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc24:	6063      	str	r3, [r4, #4]
 800dc26:	2000      	movs	r0, #0
 800dc28:	6360      	str	r0, [r4, #52]	@ 0x34
 800dc2a:	b113      	cbz	r3, 800dc32 <__ssrefill_r+0x24>
 800dc2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dc2e:	6023      	str	r3, [r4, #0]
 800dc30:	bd10      	pop	{r4, pc}
 800dc32:	6923      	ldr	r3, [r4, #16]
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	2300      	movs	r3, #0
 800dc38:	6063      	str	r3, [r4, #4]
 800dc3a:	89a3      	ldrh	r3, [r4, #12]
 800dc3c:	f043 0320 	orr.w	r3, r3, #32
 800dc40:	81a3      	strh	r3, [r4, #12]
 800dc42:	f04f 30ff 	mov.w	r0, #4294967295
 800dc46:	e7f3      	b.n	800dc30 <__ssrefill_r+0x22>

0800dc48 <__ssvfiscanf_r>:
 800dc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc4c:	460c      	mov	r4, r1
 800dc4e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800dc52:	2100      	movs	r1, #0
 800dc54:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800dc58:	49a5      	ldr	r1, [pc, #660]	@ (800def0 <__ssvfiscanf_r+0x2a8>)
 800dc5a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800dc5c:	f10d 0804 	add.w	r8, sp, #4
 800dc60:	49a4      	ldr	r1, [pc, #656]	@ (800def4 <__ssvfiscanf_r+0x2ac>)
 800dc62:	4fa5      	ldr	r7, [pc, #660]	@ (800def8 <__ssvfiscanf_r+0x2b0>)
 800dc64:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800dc68:	4606      	mov	r6, r0
 800dc6a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800dc6c:	9300      	str	r3, [sp, #0]
 800dc6e:	7813      	ldrb	r3, [r2, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f000 8158 	beq.w	800df26 <__ssvfiscanf_r+0x2de>
 800dc76:	5cf9      	ldrb	r1, [r7, r3]
 800dc78:	f011 0108 	ands.w	r1, r1, #8
 800dc7c:	f102 0501 	add.w	r5, r2, #1
 800dc80:	d019      	beq.n	800dcb6 <__ssvfiscanf_r+0x6e>
 800dc82:	6863      	ldr	r3, [r4, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	dd0f      	ble.n	800dca8 <__ssvfiscanf_r+0x60>
 800dc88:	6823      	ldr	r3, [r4, #0]
 800dc8a:	781a      	ldrb	r2, [r3, #0]
 800dc8c:	5cba      	ldrb	r2, [r7, r2]
 800dc8e:	0712      	lsls	r2, r2, #28
 800dc90:	d401      	bmi.n	800dc96 <__ssvfiscanf_r+0x4e>
 800dc92:	462a      	mov	r2, r5
 800dc94:	e7eb      	b.n	800dc6e <__ssvfiscanf_r+0x26>
 800dc96:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dc98:	3201      	adds	r2, #1
 800dc9a:	9245      	str	r2, [sp, #276]	@ 0x114
 800dc9c:	6862      	ldr	r2, [r4, #4]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	3a01      	subs	r2, #1
 800dca2:	6062      	str	r2, [r4, #4]
 800dca4:	6023      	str	r3, [r4, #0]
 800dca6:	e7ec      	b.n	800dc82 <__ssvfiscanf_r+0x3a>
 800dca8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dcaa:	4621      	mov	r1, r4
 800dcac:	4630      	mov	r0, r6
 800dcae:	4798      	blx	r3
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	d0e9      	beq.n	800dc88 <__ssvfiscanf_r+0x40>
 800dcb4:	e7ed      	b.n	800dc92 <__ssvfiscanf_r+0x4a>
 800dcb6:	2b25      	cmp	r3, #37	@ 0x25
 800dcb8:	d012      	beq.n	800dce0 <__ssvfiscanf_r+0x98>
 800dcba:	4699      	mov	r9, r3
 800dcbc:	6863      	ldr	r3, [r4, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f340 8093 	ble.w	800ddea <__ssvfiscanf_r+0x1a2>
 800dcc4:	6822      	ldr	r2, [r4, #0]
 800dcc6:	7813      	ldrb	r3, [r2, #0]
 800dcc8:	454b      	cmp	r3, r9
 800dcca:	f040 812c 	bne.w	800df26 <__ssvfiscanf_r+0x2de>
 800dcce:	6863      	ldr	r3, [r4, #4]
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	6063      	str	r3, [r4, #4]
 800dcd4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800dcd6:	3201      	adds	r2, #1
 800dcd8:	3301      	adds	r3, #1
 800dcda:	6022      	str	r2, [r4, #0]
 800dcdc:	9345      	str	r3, [sp, #276]	@ 0x114
 800dcde:	e7d8      	b.n	800dc92 <__ssvfiscanf_r+0x4a>
 800dce0:	9141      	str	r1, [sp, #260]	@ 0x104
 800dce2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800dce4:	7853      	ldrb	r3, [r2, #1]
 800dce6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dce8:	bf02      	ittt	eq
 800dcea:	2310      	moveq	r3, #16
 800dcec:	1c95      	addeq	r5, r2, #2
 800dcee:	9341      	streq	r3, [sp, #260]	@ 0x104
 800dcf0:	220a      	movs	r2, #10
 800dcf2:	46a9      	mov	r9, r5
 800dcf4:	f819 1b01 	ldrb.w	r1, [r9], #1
 800dcf8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800dcfc:	2b09      	cmp	r3, #9
 800dcfe:	d91e      	bls.n	800dd3e <__ssvfiscanf_r+0xf6>
 800dd00:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800defc <__ssvfiscanf_r+0x2b4>
 800dd04:	2203      	movs	r2, #3
 800dd06:	4650      	mov	r0, sl
 800dd08:	f7f2 fa7a 	bl	8000200 <memchr>
 800dd0c:	b138      	cbz	r0, 800dd1e <__ssvfiscanf_r+0xd6>
 800dd0e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dd10:	eba0 000a 	sub.w	r0, r0, sl
 800dd14:	2301      	movs	r3, #1
 800dd16:	4083      	lsls	r3, r0
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	9341      	str	r3, [sp, #260]	@ 0x104
 800dd1c:	464d      	mov	r5, r9
 800dd1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dd22:	2b78      	cmp	r3, #120	@ 0x78
 800dd24:	d806      	bhi.n	800dd34 <__ssvfiscanf_r+0xec>
 800dd26:	2b57      	cmp	r3, #87	@ 0x57
 800dd28:	d810      	bhi.n	800dd4c <__ssvfiscanf_r+0x104>
 800dd2a:	2b25      	cmp	r3, #37	@ 0x25
 800dd2c:	d0c5      	beq.n	800dcba <__ssvfiscanf_r+0x72>
 800dd2e:	d857      	bhi.n	800dde0 <__ssvfiscanf_r+0x198>
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d065      	beq.n	800de00 <__ssvfiscanf_r+0x1b8>
 800dd34:	2303      	movs	r3, #3
 800dd36:	9347      	str	r3, [sp, #284]	@ 0x11c
 800dd38:	230a      	movs	r3, #10
 800dd3a:	9342      	str	r3, [sp, #264]	@ 0x108
 800dd3c:	e078      	b.n	800de30 <__ssvfiscanf_r+0x1e8>
 800dd3e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800dd40:	fb02 1103 	mla	r1, r2, r3, r1
 800dd44:	3930      	subs	r1, #48	@ 0x30
 800dd46:	9143      	str	r1, [sp, #268]	@ 0x10c
 800dd48:	464d      	mov	r5, r9
 800dd4a:	e7d2      	b.n	800dcf2 <__ssvfiscanf_r+0xaa>
 800dd4c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800dd50:	2a20      	cmp	r2, #32
 800dd52:	d8ef      	bhi.n	800dd34 <__ssvfiscanf_r+0xec>
 800dd54:	a101      	add	r1, pc, #4	@ (adr r1, 800dd5c <__ssvfiscanf_r+0x114>)
 800dd56:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dd5a:	bf00      	nop
 800dd5c:	0800de0f 	.word	0x0800de0f
 800dd60:	0800dd35 	.word	0x0800dd35
 800dd64:	0800dd35 	.word	0x0800dd35
 800dd68:	0800de69 	.word	0x0800de69
 800dd6c:	0800dd35 	.word	0x0800dd35
 800dd70:	0800dd35 	.word	0x0800dd35
 800dd74:	0800dd35 	.word	0x0800dd35
 800dd78:	0800dd35 	.word	0x0800dd35
 800dd7c:	0800dd35 	.word	0x0800dd35
 800dd80:	0800dd35 	.word	0x0800dd35
 800dd84:	0800dd35 	.word	0x0800dd35
 800dd88:	0800de7f 	.word	0x0800de7f
 800dd8c:	0800de65 	.word	0x0800de65
 800dd90:	0800dde7 	.word	0x0800dde7
 800dd94:	0800dde7 	.word	0x0800dde7
 800dd98:	0800dde7 	.word	0x0800dde7
 800dd9c:	0800dd35 	.word	0x0800dd35
 800dda0:	0800de21 	.word	0x0800de21
 800dda4:	0800dd35 	.word	0x0800dd35
 800dda8:	0800dd35 	.word	0x0800dd35
 800ddac:	0800dd35 	.word	0x0800dd35
 800ddb0:	0800dd35 	.word	0x0800dd35
 800ddb4:	0800de8f 	.word	0x0800de8f
 800ddb8:	0800de29 	.word	0x0800de29
 800ddbc:	0800de07 	.word	0x0800de07
 800ddc0:	0800dd35 	.word	0x0800dd35
 800ddc4:	0800dd35 	.word	0x0800dd35
 800ddc8:	0800de8b 	.word	0x0800de8b
 800ddcc:	0800dd35 	.word	0x0800dd35
 800ddd0:	0800de65 	.word	0x0800de65
 800ddd4:	0800dd35 	.word	0x0800dd35
 800ddd8:	0800dd35 	.word	0x0800dd35
 800dddc:	0800de0f 	.word	0x0800de0f
 800dde0:	3b45      	subs	r3, #69	@ 0x45
 800dde2:	2b02      	cmp	r3, #2
 800dde4:	d8a6      	bhi.n	800dd34 <__ssvfiscanf_r+0xec>
 800dde6:	2305      	movs	r3, #5
 800dde8:	e021      	b.n	800de2e <__ssvfiscanf_r+0x1e6>
 800ddea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ddec:	4621      	mov	r1, r4
 800ddee:	4630      	mov	r0, r6
 800ddf0:	4798      	blx	r3
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	f43f af66 	beq.w	800dcc4 <__ssvfiscanf_r+0x7c>
 800ddf8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	f040 808b 	bne.w	800df16 <__ssvfiscanf_r+0x2ce>
 800de00:	f04f 30ff 	mov.w	r0, #4294967295
 800de04:	e08b      	b.n	800df1e <__ssvfiscanf_r+0x2d6>
 800de06:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800de08:	f042 0220 	orr.w	r2, r2, #32
 800de0c:	9241      	str	r2, [sp, #260]	@ 0x104
 800de0e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800de10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800de14:	9241      	str	r2, [sp, #260]	@ 0x104
 800de16:	2210      	movs	r2, #16
 800de18:	2b6e      	cmp	r3, #110	@ 0x6e
 800de1a:	9242      	str	r2, [sp, #264]	@ 0x108
 800de1c:	d902      	bls.n	800de24 <__ssvfiscanf_r+0x1dc>
 800de1e:	e005      	b.n	800de2c <__ssvfiscanf_r+0x1e4>
 800de20:	2300      	movs	r3, #0
 800de22:	9342      	str	r3, [sp, #264]	@ 0x108
 800de24:	2303      	movs	r3, #3
 800de26:	e002      	b.n	800de2e <__ssvfiscanf_r+0x1e6>
 800de28:	2308      	movs	r3, #8
 800de2a:	9342      	str	r3, [sp, #264]	@ 0x108
 800de2c:	2304      	movs	r3, #4
 800de2e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800de30:	6863      	ldr	r3, [r4, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	dd39      	ble.n	800deaa <__ssvfiscanf_r+0x262>
 800de36:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800de38:	0659      	lsls	r1, r3, #25
 800de3a:	d404      	bmi.n	800de46 <__ssvfiscanf_r+0x1fe>
 800de3c:	6823      	ldr	r3, [r4, #0]
 800de3e:	781a      	ldrb	r2, [r3, #0]
 800de40:	5cba      	ldrb	r2, [r7, r2]
 800de42:	0712      	lsls	r2, r2, #28
 800de44:	d438      	bmi.n	800deb8 <__ssvfiscanf_r+0x270>
 800de46:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800de48:	2b02      	cmp	r3, #2
 800de4a:	dc47      	bgt.n	800dedc <__ssvfiscanf_r+0x294>
 800de4c:	466b      	mov	r3, sp
 800de4e:	4622      	mov	r2, r4
 800de50:	a941      	add	r1, sp, #260	@ 0x104
 800de52:	4630      	mov	r0, r6
 800de54:	f000 f9fa 	bl	800e24c <_scanf_chars>
 800de58:	2801      	cmp	r0, #1
 800de5a:	d064      	beq.n	800df26 <__ssvfiscanf_r+0x2de>
 800de5c:	2802      	cmp	r0, #2
 800de5e:	f47f af18 	bne.w	800dc92 <__ssvfiscanf_r+0x4a>
 800de62:	e7c9      	b.n	800ddf8 <__ssvfiscanf_r+0x1b0>
 800de64:	220a      	movs	r2, #10
 800de66:	e7d7      	b.n	800de18 <__ssvfiscanf_r+0x1d0>
 800de68:	4629      	mov	r1, r5
 800de6a:	4640      	mov	r0, r8
 800de6c:	f000 fbe8 	bl	800e640 <__sccl>
 800de70:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800de72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de76:	9341      	str	r3, [sp, #260]	@ 0x104
 800de78:	4605      	mov	r5, r0
 800de7a:	2301      	movs	r3, #1
 800de7c:	e7d7      	b.n	800de2e <__ssvfiscanf_r+0x1e6>
 800de7e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800de80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de84:	9341      	str	r3, [sp, #260]	@ 0x104
 800de86:	2300      	movs	r3, #0
 800de88:	e7d1      	b.n	800de2e <__ssvfiscanf_r+0x1e6>
 800de8a:	2302      	movs	r3, #2
 800de8c:	e7cf      	b.n	800de2e <__ssvfiscanf_r+0x1e6>
 800de8e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800de90:	06c3      	lsls	r3, r0, #27
 800de92:	f53f aefe 	bmi.w	800dc92 <__ssvfiscanf_r+0x4a>
 800de96:	9b00      	ldr	r3, [sp, #0]
 800de98:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800de9a:	1d19      	adds	r1, r3, #4
 800de9c:	9100      	str	r1, [sp, #0]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	07c0      	lsls	r0, r0, #31
 800dea2:	bf4c      	ite	mi
 800dea4:	801a      	strhmi	r2, [r3, #0]
 800dea6:	601a      	strpl	r2, [r3, #0]
 800dea8:	e6f3      	b.n	800dc92 <__ssvfiscanf_r+0x4a>
 800deaa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800deac:	4621      	mov	r1, r4
 800deae:	4630      	mov	r0, r6
 800deb0:	4798      	blx	r3
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d0bf      	beq.n	800de36 <__ssvfiscanf_r+0x1ee>
 800deb6:	e79f      	b.n	800ddf8 <__ssvfiscanf_r+0x1b0>
 800deb8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800deba:	3201      	adds	r2, #1
 800debc:	9245      	str	r2, [sp, #276]	@ 0x114
 800debe:	6862      	ldr	r2, [r4, #4]
 800dec0:	3a01      	subs	r2, #1
 800dec2:	2a00      	cmp	r2, #0
 800dec4:	6062      	str	r2, [r4, #4]
 800dec6:	dd02      	ble.n	800dece <__ssvfiscanf_r+0x286>
 800dec8:	3301      	adds	r3, #1
 800deca:	6023      	str	r3, [r4, #0]
 800decc:	e7b6      	b.n	800de3c <__ssvfiscanf_r+0x1f4>
 800dece:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ded0:	4621      	mov	r1, r4
 800ded2:	4630      	mov	r0, r6
 800ded4:	4798      	blx	r3
 800ded6:	2800      	cmp	r0, #0
 800ded8:	d0b0      	beq.n	800de3c <__ssvfiscanf_r+0x1f4>
 800deda:	e78d      	b.n	800ddf8 <__ssvfiscanf_r+0x1b0>
 800dedc:	2b04      	cmp	r3, #4
 800dede:	dc0f      	bgt.n	800df00 <__ssvfiscanf_r+0x2b8>
 800dee0:	466b      	mov	r3, sp
 800dee2:	4622      	mov	r2, r4
 800dee4:	a941      	add	r1, sp, #260	@ 0x104
 800dee6:	4630      	mov	r0, r6
 800dee8:	f000 fa0a 	bl	800e300 <_scanf_i>
 800deec:	e7b4      	b.n	800de58 <__ssvfiscanf_r+0x210>
 800deee:	bf00      	nop
 800def0:	0800db99 	.word	0x0800db99
 800def4:	0800dc0f 	.word	0x0800dc0f
 800def8:	0804bfa9 	.word	0x0804bfa9
 800defc:	0804c296 	.word	0x0804c296
 800df00:	4b0a      	ldr	r3, [pc, #40]	@ (800df2c <__ssvfiscanf_r+0x2e4>)
 800df02:	2b00      	cmp	r3, #0
 800df04:	f43f aec5 	beq.w	800dc92 <__ssvfiscanf_r+0x4a>
 800df08:	466b      	mov	r3, sp
 800df0a:	4622      	mov	r2, r4
 800df0c:	a941      	add	r1, sp, #260	@ 0x104
 800df0e:	4630      	mov	r0, r6
 800df10:	f3af 8000 	nop.w
 800df14:	e7a0      	b.n	800de58 <__ssvfiscanf_r+0x210>
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	065b      	lsls	r3, r3, #25
 800df1a:	f53f af71 	bmi.w	800de00 <__ssvfiscanf_r+0x1b8>
 800df1e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800df22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df26:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800df28:	e7f9      	b.n	800df1e <__ssvfiscanf_r+0x2d6>
 800df2a:	bf00      	nop
 800df2c:	00000000 	.word	0x00000000

0800df30 <_printf_common>:
 800df30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df34:	4616      	mov	r6, r2
 800df36:	4698      	mov	r8, r3
 800df38:	688a      	ldr	r2, [r1, #8]
 800df3a:	690b      	ldr	r3, [r1, #16]
 800df3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800df40:	4293      	cmp	r3, r2
 800df42:	bfb8      	it	lt
 800df44:	4613      	movlt	r3, r2
 800df46:	6033      	str	r3, [r6, #0]
 800df48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800df4c:	4607      	mov	r7, r0
 800df4e:	460c      	mov	r4, r1
 800df50:	b10a      	cbz	r2, 800df56 <_printf_common+0x26>
 800df52:	3301      	adds	r3, #1
 800df54:	6033      	str	r3, [r6, #0]
 800df56:	6823      	ldr	r3, [r4, #0]
 800df58:	0699      	lsls	r1, r3, #26
 800df5a:	bf42      	ittt	mi
 800df5c:	6833      	ldrmi	r3, [r6, #0]
 800df5e:	3302      	addmi	r3, #2
 800df60:	6033      	strmi	r3, [r6, #0]
 800df62:	6825      	ldr	r5, [r4, #0]
 800df64:	f015 0506 	ands.w	r5, r5, #6
 800df68:	d106      	bne.n	800df78 <_printf_common+0x48>
 800df6a:	f104 0a19 	add.w	sl, r4, #25
 800df6e:	68e3      	ldr	r3, [r4, #12]
 800df70:	6832      	ldr	r2, [r6, #0]
 800df72:	1a9b      	subs	r3, r3, r2
 800df74:	42ab      	cmp	r3, r5
 800df76:	dc26      	bgt.n	800dfc6 <_printf_common+0x96>
 800df78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df7c:	6822      	ldr	r2, [r4, #0]
 800df7e:	3b00      	subs	r3, #0
 800df80:	bf18      	it	ne
 800df82:	2301      	movne	r3, #1
 800df84:	0692      	lsls	r2, r2, #26
 800df86:	d42b      	bmi.n	800dfe0 <_printf_common+0xb0>
 800df88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df8c:	4641      	mov	r1, r8
 800df8e:	4638      	mov	r0, r7
 800df90:	47c8      	blx	r9
 800df92:	3001      	adds	r0, #1
 800df94:	d01e      	beq.n	800dfd4 <_printf_common+0xa4>
 800df96:	6823      	ldr	r3, [r4, #0]
 800df98:	6922      	ldr	r2, [r4, #16]
 800df9a:	f003 0306 	and.w	r3, r3, #6
 800df9e:	2b04      	cmp	r3, #4
 800dfa0:	bf02      	ittt	eq
 800dfa2:	68e5      	ldreq	r5, [r4, #12]
 800dfa4:	6833      	ldreq	r3, [r6, #0]
 800dfa6:	1aed      	subeq	r5, r5, r3
 800dfa8:	68a3      	ldr	r3, [r4, #8]
 800dfaa:	bf0c      	ite	eq
 800dfac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dfb0:	2500      	movne	r5, #0
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	bfc4      	itt	gt
 800dfb6:	1a9b      	subgt	r3, r3, r2
 800dfb8:	18ed      	addgt	r5, r5, r3
 800dfba:	2600      	movs	r6, #0
 800dfbc:	341a      	adds	r4, #26
 800dfbe:	42b5      	cmp	r5, r6
 800dfc0:	d11a      	bne.n	800dff8 <_printf_common+0xc8>
 800dfc2:	2000      	movs	r0, #0
 800dfc4:	e008      	b.n	800dfd8 <_printf_common+0xa8>
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	4652      	mov	r2, sl
 800dfca:	4641      	mov	r1, r8
 800dfcc:	4638      	mov	r0, r7
 800dfce:	47c8      	blx	r9
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d103      	bne.n	800dfdc <_printf_common+0xac>
 800dfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfdc:	3501      	adds	r5, #1
 800dfde:	e7c6      	b.n	800df6e <_printf_common+0x3e>
 800dfe0:	18e1      	adds	r1, r4, r3
 800dfe2:	1c5a      	adds	r2, r3, #1
 800dfe4:	2030      	movs	r0, #48	@ 0x30
 800dfe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dfea:	4422      	add	r2, r4
 800dfec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dff0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dff4:	3302      	adds	r3, #2
 800dff6:	e7c7      	b.n	800df88 <_printf_common+0x58>
 800dff8:	2301      	movs	r3, #1
 800dffa:	4622      	mov	r2, r4
 800dffc:	4641      	mov	r1, r8
 800dffe:	4638      	mov	r0, r7
 800e000:	47c8      	blx	r9
 800e002:	3001      	adds	r0, #1
 800e004:	d0e6      	beq.n	800dfd4 <_printf_common+0xa4>
 800e006:	3601      	adds	r6, #1
 800e008:	e7d9      	b.n	800dfbe <_printf_common+0x8e>
	...

0800e00c <_printf_i>:
 800e00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e010:	7e0f      	ldrb	r7, [r1, #24]
 800e012:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e014:	2f78      	cmp	r7, #120	@ 0x78
 800e016:	4691      	mov	r9, r2
 800e018:	4680      	mov	r8, r0
 800e01a:	460c      	mov	r4, r1
 800e01c:	469a      	mov	sl, r3
 800e01e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e022:	d807      	bhi.n	800e034 <_printf_i+0x28>
 800e024:	2f62      	cmp	r7, #98	@ 0x62
 800e026:	d80a      	bhi.n	800e03e <_printf_i+0x32>
 800e028:	2f00      	cmp	r7, #0
 800e02a:	f000 80d2 	beq.w	800e1d2 <_printf_i+0x1c6>
 800e02e:	2f58      	cmp	r7, #88	@ 0x58
 800e030:	f000 80b9 	beq.w	800e1a6 <_printf_i+0x19a>
 800e034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e03c:	e03a      	b.n	800e0b4 <_printf_i+0xa8>
 800e03e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e042:	2b15      	cmp	r3, #21
 800e044:	d8f6      	bhi.n	800e034 <_printf_i+0x28>
 800e046:	a101      	add	r1, pc, #4	@ (adr r1, 800e04c <_printf_i+0x40>)
 800e048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e04c:	0800e0a5 	.word	0x0800e0a5
 800e050:	0800e0b9 	.word	0x0800e0b9
 800e054:	0800e035 	.word	0x0800e035
 800e058:	0800e035 	.word	0x0800e035
 800e05c:	0800e035 	.word	0x0800e035
 800e060:	0800e035 	.word	0x0800e035
 800e064:	0800e0b9 	.word	0x0800e0b9
 800e068:	0800e035 	.word	0x0800e035
 800e06c:	0800e035 	.word	0x0800e035
 800e070:	0800e035 	.word	0x0800e035
 800e074:	0800e035 	.word	0x0800e035
 800e078:	0800e1b9 	.word	0x0800e1b9
 800e07c:	0800e0e3 	.word	0x0800e0e3
 800e080:	0800e173 	.word	0x0800e173
 800e084:	0800e035 	.word	0x0800e035
 800e088:	0800e035 	.word	0x0800e035
 800e08c:	0800e1db 	.word	0x0800e1db
 800e090:	0800e035 	.word	0x0800e035
 800e094:	0800e0e3 	.word	0x0800e0e3
 800e098:	0800e035 	.word	0x0800e035
 800e09c:	0800e035 	.word	0x0800e035
 800e0a0:	0800e17b 	.word	0x0800e17b
 800e0a4:	6833      	ldr	r3, [r6, #0]
 800e0a6:	1d1a      	adds	r2, r3, #4
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	6032      	str	r2, [r6, #0]
 800e0ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e0b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e09d      	b.n	800e1f4 <_printf_i+0x1e8>
 800e0b8:	6833      	ldr	r3, [r6, #0]
 800e0ba:	6820      	ldr	r0, [r4, #0]
 800e0bc:	1d19      	adds	r1, r3, #4
 800e0be:	6031      	str	r1, [r6, #0]
 800e0c0:	0606      	lsls	r6, r0, #24
 800e0c2:	d501      	bpl.n	800e0c8 <_printf_i+0xbc>
 800e0c4:	681d      	ldr	r5, [r3, #0]
 800e0c6:	e003      	b.n	800e0d0 <_printf_i+0xc4>
 800e0c8:	0645      	lsls	r5, r0, #25
 800e0ca:	d5fb      	bpl.n	800e0c4 <_printf_i+0xb8>
 800e0cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e0d0:	2d00      	cmp	r5, #0
 800e0d2:	da03      	bge.n	800e0dc <_printf_i+0xd0>
 800e0d4:	232d      	movs	r3, #45	@ 0x2d
 800e0d6:	426d      	negs	r5, r5
 800e0d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0dc:	4859      	ldr	r0, [pc, #356]	@ (800e244 <_printf_i+0x238>)
 800e0de:	230a      	movs	r3, #10
 800e0e0:	e011      	b.n	800e106 <_printf_i+0xfa>
 800e0e2:	6821      	ldr	r1, [r4, #0]
 800e0e4:	6833      	ldr	r3, [r6, #0]
 800e0e6:	0608      	lsls	r0, r1, #24
 800e0e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e0ec:	d402      	bmi.n	800e0f4 <_printf_i+0xe8>
 800e0ee:	0649      	lsls	r1, r1, #25
 800e0f0:	bf48      	it	mi
 800e0f2:	b2ad      	uxthmi	r5, r5
 800e0f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e0f6:	4853      	ldr	r0, [pc, #332]	@ (800e244 <_printf_i+0x238>)
 800e0f8:	6033      	str	r3, [r6, #0]
 800e0fa:	bf14      	ite	ne
 800e0fc:	230a      	movne	r3, #10
 800e0fe:	2308      	moveq	r3, #8
 800e100:	2100      	movs	r1, #0
 800e102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e106:	6866      	ldr	r6, [r4, #4]
 800e108:	60a6      	str	r6, [r4, #8]
 800e10a:	2e00      	cmp	r6, #0
 800e10c:	bfa2      	ittt	ge
 800e10e:	6821      	ldrge	r1, [r4, #0]
 800e110:	f021 0104 	bicge.w	r1, r1, #4
 800e114:	6021      	strge	r1, [r4, #0]
 800e116:	b90d      	cbnz	r5, 800e11c <_printf_i+0x110>
 800e118:	2e00      	cmp	r6, #0
 800e11a:	d04b      	beq.n	800e1b4 <_printf_i+0x1a8>
 800e11c:	4616      	mov	r6, r2
 800e11e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e122:	fb03 5711 	mls	r7, r3, r1, r5
 800e126:	5dc7      	ldrb	r7, [r0, r7]
 800e128:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e12c:	462f      	mov	r7, r5
 800e12e:	42bb      	cmp	r3, r7
 800e130:	460d      	mov	r5, r1
 800e132:	d9f4      	bls.n	800e11e <_printf_i+0x112>
 800e134:	2b08      	cmp	r3, #8
 800e136:	d10b      	bne.n	800e150 <_printf_i+0x144>
 800e138:	6823      	ldr	r3, [r4, #0]
 800e13a:	07df      	lsls	r7, r3, #31
 800e13c:	d508      	bpl.n	800e150 <_printf_i+0x144>
 800e13e:	6923      	ldr	r3, [r4, #16]
 800e140:	6861      	ldr	r1, [r4, #4]
 800e142:	4299      	cmp	r1, r3
 800e144:	bfde      	ittt	le
 800e146:	2330      	movle	r3, #48	@ 0x30
 800e148:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e14c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e150:	1b92      	subs	r2, r2, r6
 800e152:	6122      	str	r2, [r4, #16]
 800e154:	f8cd a000 	str.w	sl, [sp]
 800e158:	464b      	mov	r3, r9
 800e15a:	aa03      	add	r2, sp, #12
 800e15c:	4621      	mov	r1, r4
 800e15e:	4640      	mov	r0, r8
 800e160:	f7ff fee6 	bl	800df30 <_printf_common>
 800e164:	3001      	adds	r0, #1
 800e166:	d14a      	bne.n	800e1fe <_printf_i+0x1f2>
 800e168:	f04f 30ff 	mov.w	r0, #4294967295
 800e16c:	b004      	add	sp, #16
 800e16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e172:	6823      	ldr	r3, [r4, #0]
 800e174:	f043 0320 	orr.w	r3, r3, #32
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	4833      	ldr	r0, [pc, #204]	@ (800e248 <_printf_i+0x23c>)
 800e17c:	2778      	movs	r7, #120	@ 0x78
 800e17e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e182:	6823      	ldr	r3, [r4, #0]
 800e184:	6831      	ldr	r1, [r6, #0]
 800e186:	061f      	lsls	r7, r3, #24
 800e188:	f851 5b04 	ldr.w	r5, [r1], #4
 800e18c:	d402      	bmi.n	800e194 <_printf_i+0x188>
 800e18e:	065f      	lsls	r7, r3, #25
 800e190:	bf48      	it	mi
 800e192:	b2ad      	uxthmi	r5, r5
 800e194:	6031      	str	r1, [r6, #0]
 800e196:	07d9      	lsls	r1, r3, #31
 800e198:	bf44      	itt	mi
 800e19a:	f043 0320 	orrmi.w	r3, r3, #32
 800e19e:	6023      	strmi	r3, [r4, #0]
 800e1a0:	b11d      	cbz	r5, 800e1aa <_printf_i+0x19e>
 800e1a2:	2310      	movs	r3, #16
 800e1a4:	e7ac      	b.n	800e100 <_printf_i+0xf4>
 800e1a6:	4827      	ldr	r0, [pc, #156]	@ (800e244 <_printf_i+0x238>)
 800e1a8:	e7e9      	b.n	800e17e <_printf_i+0x172>
 800e1aa:	6823      	ldr	r3, [r4, #0]
 800e1ac:	f023 0320 	bic.w	r3, r3, #32
 800e1b0:	6023      	str	r3, [r4, #0]
 800e1b2:	e7f6      	b.n	800e1a2 <_printf_i+0x196>
 800e1b4:	4616      	mov	r6, r2
 800e1b6:	e7bd      	b.n	800e134 <_printf_i+0x128>
 800e1b8:	6833      	ldr	r3, [r6, #0]
 800e1ba:	6825      	ldr	r5, [r4, #0]
 800e1bc:	6961      	ldr	r1, [r4, #20]
 800e1be:	1d18      	adds	r0, r3, #4
 800e1c0:	6030      	str	r0, [r6, #0]
 800e1c2:	062e      	lsls	r6, r5, #24
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	d501      	bpl.n	800e1cc <_printf_i+0x1c0>
 800e1c8:	6019      	str	r1, [r3, #0]
 800e1ca:	e002      	b.n	800e1d2 <_printf_i+0x1c6>
 800e1cc:	0668      	lsls	r0, r5, #25
 800e1ce:	d5fb      	bpl.n	800e1c8 <_printf_i+0x1bc>
 800e1d0:	8019      	strh	r1, [r3, #0]
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	6123      	str	r3, [r4, #16]
 800e1d6:	4616      	mov	r6, r2
 800e1d8:	e7bc      	b.n	800e154 <_printf_i+0x148>
 800e1da:	6833      	ldr	r3, [r6, #0]
 800e1dc:	1d1a      	adds	r2, r3, #4
 800e1de:	6032      	str	r2, [r6, #0]
 800e1e0:	681e      	ldr	r6, [r3, #0]
 800e1e2:	6862      	ldr	r2, [r4, #4]
 800e1e4:	2100      	movs	r1, #0
 800e1e6:	4630      	mov	r0, r6
 800e1e8:	f7f2 f80a 	bl	8000200 <memchr>
 800e1ec:	b108      	cbz	r0, 800e1f2 <_printf_i+0x1e6>
 800e1ee:	1b80      	subs	r0, r0, r6
 800e1f0:	6060      	str	r0, [r4, #4]
 800e1f2:	6863      	ldr	r3, [r4, #4]
 800e1f4:	6123      	str	r3, [r4, #16]
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1fc:	e7aa      	b.n	800e154 <_printf_i+0x148>
 800e1fe:	6923      	ldr	r3, [r4, #16]
 800e200:	4632      	mov	r2, r6
 800e202:	4649      	mov	r1, r9
 800e204:	4640      	mov	r0, r8
 800e206:	47d0      	blx	sl
 800e208:	3001      	adds	r0, #1
 800e20a:	d0ad      	beq.n	800e168 <_printf_i+0x15c>
 800e20c:	6823      	ldr	r3, [r4, #0]
 800e20e:	079b      	lsls	r3, r3, #30
 800e210:	d413      	bmi.n	800e23a <_printf_i+0x22e>
 800e212:	68e0      	ldr	r0, [r4, #12]
 800e214:	9b03      	ldr	r3, [sp, #12]
 800e216:	4298      	cmp	r0, r3
 800e218:	bfb8      	it	lt
 800e21a:	4618      	movlt	r0, r3
 800e21c:	e7a6      	b.n	800e16c <_printf_i+0x160>
 800e21e:	2301      	movs	r3, #1
 800e220:	4632      	mov	r2, r6
 800e222:	4649      	mov	r1, r9
 800e224:	4640      	mov	r0, r8
 800e226:	47d0      	blx	sl
 800e228:	3001      	adds	r0, #1
 800e22a:	d09d      	beq.n	800e168 <_printf_i+0x15c>
 800e22c:	3501      	adds	r5, #1
 800e22e:	68e3      	ldr	r3, [r4, #12]
 800e230:	9903      	ldr	r1, [sp, #12]
 800e232:	1a5b      	subs	r3, r3, r1
 800e234:	42ab      	cmp	r3, r5
 800e236:	dcf2      	bgt.n	800e21e <_printf_i+0x212>
 800e238:	e7eb      	b.n	800e212 <_printf_i+0x206>
 800e23a:	2500      	movs	r5, #0
 800e23c:	f104 0619 	add.w	r6, r4, #25
 800e240:	e7f5      	b.n	800e22e <_printf_i+0x222>
 800e242:	bf00      	nop
 800e244:	0804c2a1 	.word	0x0804c2a1
 800e248:	0804c2b2 	.word	0x0804c2b2

0800e24c <_scanf_chars>:
 800e24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e250:	4615      	mov	r5, r2
 800e252:	688a      	ldr	r2, [r1, #8]
 800e254:	4680      	mov	r8, r0
 800e256:	460c      	mov	r4, r1
 800e258:	b932      	cbnz	r2, 800e268 <_scanf_chars+0x1c>
 800e25a:	698a      	ldr	r2, [r1, #24]
 800e25c:	2a00      	cmp	r2, #0
 800e25e:	bf14      	ite	ne
 800e260:	f04f 32ff 	movne.w	r2, #4294967295
 800e264:	2201      	moveq	r2, #1
 800e266:	608a      	str	r2, [r1, #8]
 800e268:	6822      	ldr	r2, [r4, #0]
 800e26a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e2fc <_scanf_chars+0xb0>
 800e26e:	06d1      	lsls	r1, r2, #27
 800e270:	bf5f      	itttt	pl
 800e272:	681a      	ldrpl	r2, [r3, #0]
 800e274:	1d11      	addpl	r1, r2, #4
 800e276:	6019      	strpl	r1, [r3, #0]
 800e278:	6816      	ldrpl	r6, [r2, #0]
 800e27a:	2700      	movs	r7, #0
 800e27c:	69a0      	ldr	r0, [r4, #24]
 800e27e:	b188      	cbz	r0, 800e2a4 <_scanf_chars+0x58>
 800e280:	2801      	cmp	r0, #1
 800e282:	d107      	bne.n	800e294 <_scanf_chars+0x48>
 800e284:	682b      	ldr	r3, [r5, #0]
 800e286:	781a      	ldrb	r2, [r3, #0]
 800e288:	6963      	ldr	r3, [r4, #20]
 800e28a:	5c9b      	ldrb	r3, [r3, r2]
 800e28c:	b953      	cbnz	r3, 800e2a4 <_scanf_chars+0x58>
 800e28e:	2f00      	cmp	r7, #0
 800e290:	d031      	beq.n	800e2f6 <_scanf_chars+0xaa>
 800e292:	e022      	b.n	800e2da <_scanf_chars+0x8e>
 800e294:	2802      	cmp	r0, #2
 800e296:	d120      	bne.n	800e2da <_scanf_chars+0x8e>
 800e298:	682b      	ldr	r3, [r5, #0]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e2a0:	071b      	lsls	r3, r3, #28
 800e2a2:	d41a      	bmi.n	800e2da <_scanf_chars+0x8e>
 800e2a4:	6823      	ldr	r3, [r4, #0]
 800e2a6:	06da      	lsls	r2, r3, #27
 800e2a8:	bf5e      	ittt	pl
 800e2aa:	682b      	ldrpl	r3, [r5, #0]
 800e2ac:	781b      	ldrbpl	r3, [r3, #0]
 800e2ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e2b2:	682a      	ldr	r2, [r5, #0]
 800e2b4:	686b      	ldr	r3, [r5, #4]
 800e2b6:	3201      	adds	r2, #1
 800e2b8:	602a      	str	r2, [r5, #0]
 800e2ba:	68a2      	ldr	r2, [r4, #8]
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	3a01      	subs	r2, #1
 800e2c0:	606b      	str	r3, [r5, #4]
 800e2c2:	3701      	adds	r7, #1
 800e2c4:	60a2      	str	r2, [r4, #8]
 800e2c6:	b142      	cbz	r2, 800e2da <_scanf_chars+0x8e>
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	dcd7      	bgt.n	800e27c <_scanf_chars+0x30>
 800e2cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e2d0:	4629      	mov	r1, r5
 800e2d2:	4640      	mov	r0, r8
 800e2d4:	4798      	blx	r3
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d0d0      	beq.n	800e27c <_scanf_chars+0x30>
 800e2da:	6823      	ldr	r3, [r4, #0]
 800e2dc:	f013 0310 	ands.w	r3, r3, #16
 800e2e0:	d105      	bne.n	800e2ee <_scanf_chars+0xa2>
 800e2e2:	68e2      	ldr	r2, [r4, #12]
 800e2e4:	3201      	adds	r2, #1
 800e2e6:	60e2      	str	r2, [r4, #12]
 800e2e8:	69a2      	ldr	r2, [r4, #24]
 800e2ea:	b102      	cbz	r2, 800e2ee <_scanf_chars+0xa2>
 800e2ec:	7033      	strb	r3, [r6, #0]
 800e2ee:	6923      	ldr	r3, [r4, #16]
 800e2f0:	443b      	add	r3, r7
 800e2f2:	6123      	str	r3, [r4, #16]
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2fa:	bf00      	nop
 800e2fc:	0804bfa9 	.word	0x0804bfa9

0800e300 <_scanf_i>:
 800e300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e304:	4698      	mov	r8, r3
 800e306:	4b74      	ldr	r3, [pc, #464]	@ (800e4d8 <_scanf_i+0x1d8>)
 800e308:	460c      	mov	r4, r1
 800e30a:	4682      	mov	sl, r0
 800e30c:	4616      	mov	r6, r2
 800e30e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e312:	b087      	sub	sp, #28
 800e314:	ab03      	add	r3, sp, #12
 800e316:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e31a:	4b70      	ldr	r3, [pc, #448]	@ (800e4dc <_scanf_i+0x1dc>)
 800e31c:	69a1      	ldr	r1, [r4, #24]
 800e31e:	4a70      	ldr	r2, [pc, #448]	@ (800e4e0 <_scanf_i+0x1e0>)
 800e320:	2903      	cmp	r1, #3
 800e322:	bf08      	it	eq
 800e324:	461a      	moveq	r2, r3
 800e326:	68a3      	ldr	r3, [r4, #8]
 800e328:	9201      	str	r2, [sp, #4]
 800e32a:	1e5a      	subs	r2, r3, #1
 800e32c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e330:	bf88      	it	hi
 800e332:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e336:	4627      	mov	r7, r4
 800e338:	bf82      	ittt	hi
 800e33a:	eb03 0905 	addhi.w	r9, r3, r5
 800e33e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e342:	60a3      	strhi	r3, [r4, #8]
 800e344:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e348:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e34c:	bf98      	it	ls
 800e34e:	f04f 0900 	movls.w	r9, #0
 800e352:	6023      	str	r3, [r4, #0]
 800e354:	463d      	mov	r5, r7
 800e356:	f04f 0b00 	mov.w	fp, #0
 800e35a:	6831      	ldr	r1, [r6, #0]
 800e35c:	ab03      	add	r3, sp, #12
 800e35e:	7809      	ldrb	r1, [r1, #0]
 800e360:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e364:	2202      	movs	r2, #2
 800e366:	f7f1 ff4b 	bl	8000200 <memchr>
 800e36a:	b328      	cbz	r0, 800e3b8 <_scanf_i+0xb8>
 800e36c:	f1bb 0f01 	cmp.w	fp, #1
 800e370:	d159      	bne.n	800e426 <_scanf_i+0x126>
 800e372:	6862      	ldr	r2, [r4, #4]
 800e374:	b92a      	cbnz	r2, 800e382 <_scanf_i+0x82>
 800e376:	6822      	ldr	r2, [r4, #0]
 800e378:	2108      	movs	r1, #8
 800e37a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e37e:	6061      	str	r1, [r4, #4]
 800e380:	6022      	str	r2, [r4, #0]
 800e382:	6822      	ldr	r2, [r4, #0]
 800e384:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e388:	6022      	str	r2, [r4, #0]
 800e38a:	68a2      	ldr	r2, [r4, #8]
 800e38c:	1e51      	subs	r1, r2, #1
 800e38e:	60a1      	str	r1, [r4, #8]
 800e390:	b192      	cbz	r2, 800e3b8 <_scanf_i+0xb8>
 800e392:	6832      	ldr	r2, [r6, #0]
 800e394:	1c51      	adds	r1, r2, #1
 800e396:	6031      	str	r1, [r6, #0]
 800e398:	7812      	ldrb	r2, [r2, #0]
 800e39a:	f805 2b01 	strb.w	r2, [r5], #1
 800e39e:	6872      	ldr	r2, [r6, #4]
 800e3a0:	3a01      	subs	r2, #1
 800e3a2:	2a00      	cmp	r2, #0
 800e3a4:	6072      	str	r2, [r6, #4]
 800e3a6:	dc07      	bgt.n	800e3b8 <_scanf_i+0xb8>
 800e3a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e3ac:	4631      	mov	r1, r6
 800e3ae:	4650      	mov	r0, sl
 800e3b0:	4790      	blx	r2
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	f040 8085 	bne.w	800e4c2 <_scanf_i+0x1c2>
 800e3b8:	f10b 0b01 	add.w	fp, fp, #1
 800e3bc:	f1bb 0f03 	cmp.w	fp, #3
 800e3c0:	d1cb      	bne.n	800e35a <_scanf_i+0x5a>
 800e3c2:	6863      	ldr	r3, [r4, #4]
 800e3c4:	b90b      	cbnz	r3, 800e3ca <_scanf_i+0xca>
 800e3c6:	230a      	movs	r3, #10
 800e3c8:	6063      	str	r3, [r4, #4]
 800e3ca:	6863      	ldr	r3, [r4, #4]
 800e3cc:	4945      	ldr	r1, [pc, #276]	@ (800e4e4 <_scanf_i+0x1e4>)
 800e3ce:	6960      	ldr	r0, [r4, #20]
 800e3d0:	1ac9      	subs	r1, r1, r3
 800e3d2:	f000 f935 	bl	800e640 <__sccl>
 800e3d6:	f04f 0b00 	mov.w	fp, #0
 800e3da:	68a3      	ldr	r3, [r4, #8]
 800e3dc:	6822      	ldr	r2, [r4, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d03d      	beq.n	800e45e <_scanf_i+0x15e>
 800e3e2:	6831      	ldr	r1, [r6, #0]
 800e3e4:	6960      	ldr	r0, [r4, #20]
 800e3e6:	f891 c000 	ldrb.w	ip, [r1]
 800e3ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	d035      	beq.n	800e45e <_scanf_i+0x15e>
 800e3f2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e3f6:	d124      	bne.n	800e442 <_scanf_i+0x142>
 800e3f8:	0510      	lsls	r0, r2, #20
 800e3fa:	d522      	bpl.n	800e442 <_scanf_i+0x142>
 800e3fc:	f10b 0b01 	add.w	fp, fp, #1
 800e400:	f1b9 0f00 	cmp.w	r9, #0
 800e404:	d003      	beq.n	800e40e <_scanf_i+0x10e>
 800e406:	3301      	adds	r3, #1
 800e408:	f109 39ff 	add.w	r9, r9, #4294967295
 800e40c:	60a3      	str	r3, [r4, #8]
 800e40e:	6873      	ldr	r3, [r6, #4]
 800e410:	3b01      	subs	r3, #1
 800e412:	2b00      	cmp	r3, #0
 800e414:	6073      	str	r3, [r6, #4]
 800e416:	dd1b      	ble.n	800e450 <_scanf_i+0x150>
 800e418:	6833      	ldr	r3, [r6, #0]
 800e41a:	3301      	adds	r3, #1
 800e41c:	6033      	str	r3, [r6, #0]
 800e41e:	68a3      	ldr	r3, [r4, #8]
 800e420:	3b01      	subs	r3, #1
 800e422:	60a3      	str	r3, [r4, #8]
 800e424:	e7d9      	b.n	800e3da <_scanf_i+0xda>
 800e426:	f1bb 0f02 	cmp.w	fp, #2
 800e42a:	d1ae      	bne.n	800e38a <_scanf_i+0x8a>
 800e42c:	6822      	ldr	r2, [r4, #0]
 800e42e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e432:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e436:	d1bf      	bne.n	800e3b8 <_scanf_i+0xb8>
 800e438:	2110      	movs	r1, #16
 800e43a:	6061      	str	r1, [r4, #4]
 800e43c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e440:	e7a2      	b.n	800e388 <_scanf_i+0x88>
 800e442:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e446:	6022      	str	r2, [r4, #0]
 800e448:	780b      	ldrb	r3, [r1, #0]
 800e44a:	f805 3b01 	strb.w	r3, [r5], #1
 800e44e:	e7de      	b.n	800e40e <_scanf_i+0x10e>
 800e450:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e454:	4631      	mov	r1, r6
 800e456:	4650      	mov	r0, sl
 800e458:	4798      	blx	r3
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d0df      	beq.n	800e41e <_scanf_i+0x11e>
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	05d9      	lsls	r1, r3, #23
 800e462:	d50d      	bpl.n	800e480 <_scanf_i+0x180>
 800e464:	42bd      	cmp	r5, r7
 800e466:	d909      	bls.n	800e47c <_scanf_i+0x17c>
 800e468:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e46c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e470:	4632      	mov	r2, r6
 800e472:	4650      	mov	r0, sl
 800e474:	4798      	blx	r3
 800e476:	f105 39ff 	add.w	r9, r5, #4294967295
 800e47a:	464d      	mov	r5, r9
 800e47c:	42bd      	cmp	r5, r7
 800e47e:	d028      	beq.n	800e4d2 <_scanf_i+0x1d2>
 800e480:	6822      	ldr	r2, [r4, #0]
 800e482:	f012 0210 	ands.w	r2, r2, #16
 800e486:	d113      	bne.n	800e4b0 <_scanf_i+0x1b0>
 800e488:	702a      	strb	r2, [r5, #0]
 800e48a:	6863      	ldr	r3, [r4, #4]
 800e48c:	9e01      	ldr	r6, [sp, #4]
 800e48e:	4639      	mov	r1, r7
 800e490:	4650      	mov	r0, sl
 800e492:	47b0      	blx	r6
 800e494:	f8d8 3000 	ldr.w	r3, [r8]
 800e498:	6821      	ldr	r1, [r4, #0]
 800e49a:	1d1a      	adds	r2, r3, #4
 800e49c:	f8c8 2000 	str.w	r2, [r8]
 800e4a0:	f011 0f20 	tst.w	r1, #32
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	d00f      	beq.n	800e4c8 <_scanf_i+0x1c8>
 800e4a8:	6018      	str	r0, [r3, #0]
 800e4aa:	68e3      	ldr	r3, [r4, #12]
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	60e3      	str	r3, [r4, #12]
 800e4b0:	6923      	ldr	r3, [r4, #16]
 800e4b2:	1bed      	subs	r5, r5, r7
 800e4b4:	445d      	add	r5, fp
 800e4b6:	442b      	add	r3, r5
 800e4b8:	6123      	str	r3, [r4, #16]
 800e4ba:	2000      	movs	r0, #0
 800e4bc:	b007      	add	sp, #28
 800e4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c2:	f04f 0b00 	mov.w	fp, #0
 800e4c6:	e7ca      	b.n	800e45e <_scanf_i+0x15e>
 800e4c8:	07ca      	lsls	r2, r1, #31
 800e4ca:	bf4c      	ite	mi
 800e4cc:	8018      	strhmi	r0, [r3, #0]
 800e4ce:	6018      	strpl	r0, [r3, #0]
 800e4d0:	e7eb      	b.n	800e4aa <_scanf_i+0x1aa>
 800e4d2:	2001      	movs	r0, #1
 800e4d4:	e7f2      	b.n	800e4bc <_scanf_i+0x1bc>
 800e4d6:	bf00      	nop
 800e4d8:	0800f460 	.word	0x0800f460
 800e4dc:	0800e8cd 	.word	0x0800e8cd
 800e4e0:	0800e9ad 	.word	0x0800e9ad
 800e4e4:	0804c2d3 	.word	0x0804c2d3

0800e4e8 <__sflush_r>:
 800e4e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f0:	0716      	lsls	r6, r2, #28
 800e4f2:	4605      	mov	r5, r0
 800e4f4:	460c      	mov	r4, r1
 800e4f6:	d454      	bmi.n	800e5a2 <__sflush_r+0xba>
 800e4f8:	684b      	ldr	r3, [r1, #4]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	dc02      	bgt.n	800e504 <__sflush_r+0x1c>
 800e4fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e500:	2b00      	cmp	r3, #0
 800e502:	dd48      	ble.n	800e596 <__sflush_r+0xae>
 800e504:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e506:	2e00      	cmp	r6, #0
 800e508:	d045      	beq.n	800e596 <__sflush_r+0xae>
 800e50a:	2300      	movs	r3, #0
 800e50c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e510:	682f      	ldr	r7, [r5, #0]
 800e512:	6a21      	ldr	r1, [r4, #32]
 800e514:	602b      	str	r3, [r5, #0]
 800e516:	d030      	beq.n	800e57a <__sflush_r+0x92>
 800e518:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e51a:	89a3      	ldrh	r3, [r4, #12]
 800e51c:	0759      	lsls	r1, r3, #29
 800e51e:	d505      	bpl.n	800e52c <__sflush_r+0x44>
 800e520:	6863      	ldr	r3, [r4, #4]
 800e522:	1ad2      	subs	r2, r2, r3
 800e524:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e526:	b10b      	cbz	r3, 800e52c <__sflush_r+0x44>
 800e528:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e52a:	1ad2      	subs	r2, r2, r3
 800e52c:	2300      	movs	r3, #0
 800e52e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e530:	6a21      	ldr	r1, [r4, #32]
 800e532:	4628      	mov	r0, r5
 800e534:	47b0      	blx	r6
 800e536:	1c43      	adds	r3, r0, #1
 800e538:	89a3      	ldrh	r3, [r4, #12]
 800e53a:	d106      	bne.n	800e54a <__sflush_r+0x62>
 800e53c:	6829      	ldr	r1, [r5, #0]
 800e53e:	291d      	cmp	r1, #29
 800e540:	d82b      	bhi.n	800e59a <__sflush_r+0xb2>
 800e542:	4a2a      	ldr	r2, [pc, #168]	@ (800e5ec <__sflush_r+0x104>)
 800e544:	410a      	asrs	r2, r1
 800e546:	07d6      	lsls	r6, r2, #31
 800e548:	d427      	bmi.n	800e59a <__sflush_r+0xb2>
 800e54a:	2200      	movs	r2, #0
 800e54c:	6062      	str	r2, [r4, #4]
 800e54e:	04d9      	lsls	r1, r3, #19
 800e550:	6922      	ldr	r2, [r4, #16]
 800e552:	6022      	str	r2, [r4, #0]
 800e554:	d504      	bpl.n	800e560 <__sflush_r+0x78>
 800e556:	1c42      	adds	r2, r0, #1
 800e558:	d101      	bne.n	800e55e <__sflush_r+0x76>
 800e55a:	682b      	ldr	r3, [r5, #0]
 800e55c:	b903      	cbnz	r3, 800e560 <__sflush_r+0x78>
 800e55e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e562:	602f      	str	r7, [r5, #0]
 800e564:	b1b9      	cbz	r1, 800e596 <__sflush_r+0xae>
 800e566:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e56a:	4299      	cmp	r1, r3
 800e56c:	d002      	beq.n	800e574 <__sflush_r+0x8c>
 800e56e:	4628      	mov	r0, r5
 800e570:	f7fe f95e 	bl	800c830 <_free_r>
 800e574:	2300      	movs	r3, #0
 800e576:	6363      	str	r3, [r4, #52]	@ 0x34
 800e578:	e00d      	b.n	800e596 <__sflush_r+0xae>
 800e57a:	2301      	movs	r3, #1
 800e57c:	4628      	mov	r0, r5
 800e57e:	47b0      	blx	r6
 800e580:	4602      	mov	r2, r0
 800e582:	1c50      	adds	r0, r2, #1
 800e584:	d1c9      	bne.n	800e51a <__sflush_r+0x32>
 800e586:	682b      	ldr	r3, [r5, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d0c6      	beq.n	800e51a <__sflush_r+0x32>
 800e58c:	2b1d      	cmp	r3, #29
 800e58e:	d001      	beq.n	800e594 <__sflush_r+0xac>
 800e590:	2b16      	cmp	r3, #22
 800e592:	d11e      	bne.n	800e5d2 <__sflush_r+0xea>
 800e594:	602f      	str	r7, [r5, #0]
 800e596:	2000      	movs	r0, #0
 800e598:	e022      	b.n	800e5e0 <__sflush_r+0xf8>
 800e59a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e59e:	b21b      	sxth	r3, r3
 800e5a0:	e01b      	b.n	800e5da <__sflush_r+0xf2>
 800e5a2:	690f      	ldr	r7, [r1, #16]
 800e5a4:	2f00      	cmp	r7, #0
 800e5a6:	d0f6      	beq.n	800e596 <__sflush_r+0xae>
 800e5a8:	0793      	lsls	r3, r2, #30
 800e5aa:	680e      	ldr	r6, [r1, #0]
 800e5ac:	bf08      	it	eq
 800e5ae:	694b      	ldreq	r3, [r1, #20]
 800e5b0:	600f      	str	r7, [r1, #0]
 800e5b2:	bf18      	it	ne
 800e5b4:	2300      	movne	r3, #0
 800e5b6:	eba6 0807 	sub.w	r8, r6, r7
 800e5ba:	608b      	str	r3, [r1, #8]
 800e5bc:	f1b8 0f00 	cmp.w	r8, #0
 800e5c0:	dde9      	ble.n	800e596 <__sflush_r+0xae>
 800e5c2:	6a21      	ldr	r1, [r4, #32]
 800e5c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e5c6:	4643      	mov	r3, r8
 800e5c8:	463a      	mov	r2, r7
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	47b0      	blx	r6
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	dc08      	bgt.n	800e5e4 <__sflush_r+0xfc>
 800e5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5da:	81a3      	strh	r3, [r4, #12]
 800e5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e4:	4407      	add	r7, r0
 800e5e6:	eba8 0800 	sub.w	r8, r8, r0
 800e5ea:	e7e7      	b.n	800e5bc <__sflush_r+0xd4>
 800e5ec:	dfbffffe 	.word	0xdfbffffe

0800e5f0 <_fflush_r>:
 800e5f0:	b538      	push	{r3, r4, r5, lr}
 800e5f2:	690b      	ldr	r3, [r1, #16]
 800e5f4:	4605      	mov	r5, r0
 800e5f6:	460c      	mov	r4, r1
 800e5f8:	b913      	cbnz	r3, 800e600 <_fflush_r+0x10>
 800e5fa:	2500      	movs	r5, #0
 800e5fc:	4628      	mov	r0, r5
 800e5fe:	bd38      	pop	{r3, r4, r5, pc}
 800e600:	b118      	cbz	r0, 800e60a <_fflush_r+0x1a>
 800e602:	6a03      	ldr	r3, [r0, #32]
 800e604:	b90b      	cbnz	r3, 800e60a <_fflush_r+0x1a>
 800e606:	f7fd ff13 	bl	800c430 <__sinit>
 800e60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d0f3      	beq.n	800e5fa <_fflush_r+0xa>
 800e612:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e614:	07d0      	lsls	r0, r2, #31
 800e616:	d404      	bmi.n	800e622 <_fflush_r+0x32>
 800e618:	0599      	lsls	r1, r3, #22
 800e61a:	d402      	bmi.n	800e622 <_fflush_r+0x32>
 800e61c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e61e:	f7fe f8ee 	bl	800c7fe <__retarget_lock_acquire_recursive>
 800e622:	4628      	mov	r0, r5
 800e624:	4621      	mov	r1, r4
 800e626:	f7ff ff5f 	bl	800e4e8 <__sflush_r>
 800e62a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e62c:	07da      	lsls	r2, r3, #31
 800e62e:	4605      	mov	r5, r0
 800e630:	d4e4      	bmi.n	800e5fc <_fflush_r+0xc>
 800e632:	89a3      	ldrh	r3, [r4, #12]
 800e634:	059b      	lsls	r3, r3, #22
 800e636:	d4e1      	bmi.n	800e5fc <_fflush_r+0xc>
 800e638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e63a:	f7fe f8e1 	bl	800c800 <__retarget_lock_release_recursive>
 800e63e:	e7dd      	b.n	800e5fc <_fflush_r+0xc>

0800e640 <__sccl>:
 800e640:	b570      	push	{r4, r5, r6, lr}
 800e642:	780b      	ldrb	r3, [r1, #0]
 800e644:	4604      	mov	r4, r0
 800e646:	2b5e      	cmp	r3, #94	@ 0x5e
 800e648:	bf0b      	itete	eq
 800e64a:	784b      	ldrbeq	r3, [r1, #1]
 800e64c:	1c4a      	addne	r2, r1, #1
 800e64e:	1c8a      	addeq	r2, r1, #2
 800e650:	2100      	movne	r1, #0
 800e652:	bf08      	it	eq
 800e654:	2101      	moveq	r1, #1
 800e656:	3801      	subs	r0, #1
 800e658:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e65c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e660:	42a8      	cmp	r0, r5
 800e662:	d1fb      	bne.n	800e65c <__sccl+0x1c>
 800e664:	b90b      	cbnz	r3, 800e66a <__sccl+0x2a>
 800e666:	1e50      	subs	r0, r2, #1
 800e668:	bd70      	pop	{r4, r5, r6, pc}
 800e66a:	f081 0101 	eor.w	r1, r1, #1
 800e66e:	54e1      	strb	r1, [r4, r3]
 800e670:	4610      	mov	r0, r2
 800e672:	4602      	mov	r2, r0
 800e674:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e678:	2d2d      	cmp	r5, #45	@ 0x2d
 800e67a:	d005      	beq.n	800e688 <__sccl+0x48>
 800e67c:	2d5d      	cmp	r5, #93	@ 0x5d
 800e67e:	d016      	beq.n	800e6ae <__sccl+0x6e>
 800e680:	2d00      	cmp	r5, #0
 800e682:	d0f1      	beq.n	800e668 <__sccl+0x28>
 800e684:	462b      	mov	r3, r5
 800e686:	e7f2      	b.n	800e66e <__sccl+0x2e>
 800e688:	7846      	ldrb	r6, [r0, #1]
 800e68a:	2e5d      	cmp	r6, #93	@ 0x5d
 800e68c:	d0fa      	beq.n	800e684 <__sccl+0x44>
 800e68e:	42b3      	cmp	r3, r6
 800e690:	dcf8      	bgt.n	800e684 <__sccl+0x44>
 800e692:	3002      	adds	r0, #2
 800e694:	461a      	mov	r2, r3
 800e696:	3201      	adds	r2, #1
 800e698:	4296      	cmp	r6, r2
 800e69a:	54a1      	strb	r1, [r4, r2]
 800e69c:	dcfb      	bgt.n	800e696 <__sccl+0x56>
 800e69e:	1af2      	subs	r2, r6, r3
 800e6a0:	3a01      	subs	r2, #1
 800e6a2:	1c5d      	adds	r5, r3, #1
 800e6a4:	42b3      	cmp	r3, r6
 800e6a6:	bfa8      	it	ge
 800e6a8:	2200      	movge	r2, #0
 800e6aa:	18ab      	adds	r3, r5, r2
 800e6ac:	e7e1      	b.n	800e672 <__sccl+0x32>
 800e6ae:	4610      	mov	r0, r2
 800e6b0:	e7da      	b.n	800e668 <__sccl+0x28>

0800e6b2 <__submore>:
 800e6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b6:	460c      	mov	r4, r1
 800e6b8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e6ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6be:	4299      	cmp	r1, r3
 800e6c0:	d11d      	bne.n	800e6fe <__submore+0x4c>
 800e6c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e6c6:	f7fc ff57 	bl	800b578 <_malloc_r>
 800e6ca:	b918      	cbnz	r0, 800e6d4 <__submore+0x22>
 800e6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e6d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e6da:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e6de:	6360      	str	r0, [r4, #52]	@ 0x34
 800e6e0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e6e4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e6e8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e6ec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e6f0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e6f4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e6f8:	6020      	str	r0, [r4, #0]
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	e7e8      	b.n	800e6d0 <__submore+0x1e>
 800e6fe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e700:	0077      	lsls	r7, r6, #1
 800e702:	463a      	mov	r2, r7
 800e704:	f7fc ffcc 	bl	800b6a0 <_realloc_r>
 800e708:	4605      	mov	r5, r0
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d0de      	beq.n	800e6cc <__submore+0x1a>
 800e70e:	eb00 0806 	add.w	r8, r0, r6
 800e712:	4601      	mov	r1, r0
 800e714:	4632      	mov	r2, r6
 800e716:	4640      	mov	r0, r8
 800e718:	f7fe f873 	bl	800c802 <memcpy>
 800e71c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e720:	f8c4 8000 	str.w	r8, [r4]
 800e724:	e7e9      	b.n	800e6fa <__submore+0x48>

0800e726 <memmove>:
 800e726:	4288      	cmp	r0, r1
 800e728:	b510      	push	{r4, lr}
 800e72a:	eb01 0402 	add.w	r4, r1, r2
 800e72e:	d902      	bls.n	800e736 <memmove+0x10>
 800e730:	4284      	cmp	r4, r0
 800e732:	4623      	mov	r3, r4
 800e734:	d807      	bhi.n	800e746 <memmove+0x20>
 800e736:	1e43      	subs	r3, r0, #1
 800e738:	42a1      	cmp	r1, r4
 800e73a:	d008      	beq.n	800e74e <memmove+0x28>
 800e73c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e740:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e744:	e7f8      	b.n	800e738 <memmove+0x12>
 800e746:	4402      	add	r2, r0
 800e748:	4601      	mov	r1, r0
 800e74a:	428a      	cmp	r2, r1
 800e74c:	d100      	bne.n	800e750 <memmove+0x2a>
 800e74e:	bd10      	pop	{r4, pc}
 800e750:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e754:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e758:	e7f7      	b.n	800e74a <memmove+0x24>

0800e75a <strchr>:
 800e75a:	b2c9      	uxtb	r1, r1
 800e75c:	4603      	mov	r3, r0
 800e75e:	4618      	mov	r0, r3
 800e760:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e764:	b112      	cbz	r2, 800e76c <strchr+0x12>
 800e766:	428a      	cmp	r2, r1
 800e768:	d1f9      	bne.n	800e75e <strchr+0x4>
 800e76a:	4770      	bx	lr
 800e76c:	2900      	cmp	r1, #0
 800e76e:	bf18      	it	ne
 800e770:	2000      	movne	r0, #0
 800e772:	4770      	bx	lr

0800e774 <__assert_func>:
 800e774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e776:	4614      	mov	r4, r2
 800e778:	461a      	mov	r2, r3
 800e77a:	4b09      	ldr	r3, [pc, #36]	@ (800e7a0 <__assert_func+0x2c>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4605      	mov	r5, r0
 800e780:	68d8      	ldr	r0, [r3, #12]
 800e782:	b954      	cbnz	r4, 800e79a <__assert_func+0x26>
 800e784:	4b07      	ldr	r3, [pc, #28]	@ (800e7a4 <__assert_func+0x30>)
 800e786:	461c      	mov	r4, r3
 800e788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e78c:	9100      	str	r1, [sp, #0]
 800e78e:	462b      	mov	r3, r5
 800e790:	4905      	ldr	r1, [pc, #20]	@ (800e7a8 <__assert_func+0x34>)
 800e792:	f000 f90d 	bl	800e9b0 <fiprintf>
 800e796:	f000 f91d 	bl	800e9d4 <abort>
 800e79a:	4b04      	ldr	r3, [pc, #16]	@ (800e7ac <__assert_func+0x38>)
 800e79c:	e7f4      	b.n	800e788 <__assert_func+0x14>
 800e79e:	bf00      	nop
 800e7a0:	200029e0 	.word	0x200029e0
 800e7a4:	0804c319 	.word	0x0804c319
 800e7a8:	0804c2eb 	.word	0x0804c2eb
 800e7ac:	0804c2de 	.word	0x0804c2de

0800e7b0 <_calloc_r>:
 800e7b0:	b570      	push	{r4, r5, r6, lr}
 800e7b2:	fba1 5402 	umull	r5, r4, r1, r2
 800e7b6:	b93c      	cbnz	r4, 800e7c8 <_calloc_r+0x18>
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	f7fc fedd 	bl	800b578 <_malloc_r>
 800e7be:	4606      	mov	r6, r0
 800e7c0:	b928      	cbnz	r0, 800e7ce <_calloc_r+0x1e>
 800e7c2:	2600      	movs	r6, #0
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	bd70      	pop	{r4, r5, r6, pc}
 800e7c8:	220c      	movs	r2, #12
 800e7ca:	6002      	str	r2, [r0, #0]
 800e7cc:	e7f9      	b.n	800e7c2 <_calloc_r+0x12>
 800e7ce:	462a      	mov	r2, r5
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	f7fd ff27 	bl	800c624 <memset>
 800e7d6:	e7f5      	b.n	800e7c4 <_calloc_r+0x14>

0800e7d8 <_strtol_l.constprop.0>:
 800e7d8:	2b24      	cmp	r3, #36	@ 0x24
 800e7da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7de:	4686      	mov	lr, r0
 800e7e0:	4690      	mov	r8, r2
 800e7e2:	d801      	bhi.n	800e7e8 <_strtol_l.constprop.0+0x10>
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d106      	bne.n	800e7f6 <_strtol_l.constprop.0+0x1e>
 800e7e8:	f7fd ffde 	bl	800c7a8 <__errno>
 800e7ec:	2316      	movs	r3, #22
 800e7ee:	6003      	str	r3, [r0, #0]
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7f6:	4834      	ldr	r0, [pc, #208]	@ (800e8c8 <_strtol_l.constprop.0+0xf0>)
 800e7f8:	460d      	mov	r5, r1
 800e7fa:	462a      	mov	r2, r5
 800e7fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e800:	5d06      	ldrb	r6, [r0, r4]
 800e802:	f016 0608 	ands.w	r6, r6, #8
 800e806:	d1f8      	bne.n	800e7fa <_strtol_l.constprop.0+0x22>
 800e808:	2c2d      	cmp	r4, #45	@ 0x2d
 800e80a:	d12d      	bne.n	800e868 <_strtol_l.constprop.0+0x90>
 800e80c:	782c      	ldrb	r4, [r5, #0]
 800e80e:	2601      	movs	r6, #1
 800e810:	1c95      	adds	r5, r2, #2
 800e812:	f033 0210 	bics.w	r2, r3, #16
 800e816:	d109      	bne.n	800e82c <_strtol_l.constprop.0+0x54>
 800e818:	2c30      	cmp	r4, #48	@ 0x30
 800e81a:	d12a      	bne.n	800e872 <_strtol_l.constprop.0+0x9a>
 800e81c:	782a      	ldrb	r2, [r5, #0]
 800e81e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e822:	2a58      	cmp	r2, #88	@ 0x58
 800e824:	d125      	bne.n	800e872 <_strtol_l.constprop.0+0x9a>
 800e826:	786c      	ldrb	r4, [r5, #1]
 800e828:	2310      	movs	r3, #16
 800e82a:	3502      	adds	r5, #2
 800e82c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e830:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e834:	2200      	movs	r2, #0
 800e836:	fbbc f9f3 	udiv	r9, ip, r3
 800e83a:	4610      	mov	r0, r2
 800e83c:	fb03 ca19 	mls	sl, r3, r9, ip
 800e840:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e844:	2f09      	cmp	r7, #9
 800e846:	d81b      	bhi.n	800e880 <_strtol_l.constprop.0+0xa8>
 800e848:	463c      	mov	r4, r7
 800e84a:	42a3      	cmp	r3, r4
 800e84c:	dd27      	ble.n	800e89e <_strtol_l.constprop.0+0xc6>
 800e84e:	1c57      	adds	r7, r2, #1
 800e850:	d007      	beq.n	800e862 <_strtol_l.constprop.0+0x8a>
 800e852:	4581      	cmp	r9, r0
 800e854:	d320      	bcc.n	800e898 <_strtol_l.constprop.0+0xc0>
 800e856:	d101      	bne.n	800e85c <_strtol_l.constprop.0+0x84>
 800e858:	45a2      	cmp	sl, r4
 800e85a:	db1d      	blt.n	800e898 <_strtol_l.constprop.0+0xc0>
 800e85c:	fb00 4003 	mla	r0, r0, r3, r4
 800e860:	2201      	movs	r2, #1
 800e862:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e866:	e7eb      	b.n	800e840 <_strtol_l.constprop.0+0x68>
 800e868:	2c2b      	cmp	r4, #43	@ 0x2b
 800e86a:	bf04      	itt	eq
 800e86c:	782c      	ldrbeq	r4, [r5, #0]
 800e86e:	1c95      	addeq	r5, r2, #2
 800e870:	e7cf      	b.n	800e812 <_strtol_l.constprop.0+0x3a>
 800e872:	2b00      	cmp	r3, #0
 800e874:	d1da      	bne.n	800e82c <_strtol_l.constprop.0+0x54>
 800e876:	2c30      	cmp	r4, #48	@ 0x30
 800e878:	bf0c      	ite	eq
 800e87a:	2308      	moveq	r3, #8
 800e87c:	230a      	movne	r3, #10
 800e87e:	e7d5      	b.n	800e82c <_strtol_l.constprop.0+0x54>
 800e880:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e884:	2f19      	cmp	r7, #25
 800e886:	d801      	bhi.n	800e88c <_strtol_l.constprop.0+0xb4>
 800e888:	3c37      	subs	r4, #55	@ 0x37
 800e88a:	e7de      	b.n	800e84a <_strtol_l.constprop.0+0x72>
 800e88c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e890:	2f19      	cmp	r7, #25
 800e892:	d804      	bhi.n	800e89e <_strtol_l.constprop.0+0xc6>
 800e894:	3c57      	subs	r4, #87	@ 0x57
 800e896:	e7d8      	b.n	800e84a <_strtol_l.constprop.0+0x72>
 800e898:	f04f 32ff 	mov.w	r2, #4294967295
 800e89c:	e7e1      	b.n	800e862 <_strtol_l.constprop.0+0x8a>
 800e89e:	1c53      	adds	r3, r2, #1
 800e8a0:	d108      	bne.n	800e8b4 <_strtol_l.constprop.0+0xdc>
 800e8a2:	2322      	movs	r3, #34	@ 0x22
 800e8a4:	f8ce 3000 	str.w	r3, [lr]
 800e8a8:	4660      	mov	r0, ip
 800e8aa:	f1b8 0f00 	cmp.w	r8, #0
 800e8ae:	d0a0      	beq.n	800e7f2 <_strtol_l.constprop.0+0x1a>
 800e8b0:	1e69      	subs	r1, r5, #1
 800e8b2:	e006      	b.n	800e8c2 <_strtol_l.constprop.0+0xea>
 800e8b4:	b106      	cbz	r6, 800e8b8 <_strtol_l.constprop.0+0xe0>
 800e8b6:	4240      	negs	r0, r0
 800e8b8:	f1b8 0f00 	cmp.w	r8, #0
 800e8bc:	d099      	beq.n	800e7f2 <_strtol_l.constprop.0+0x1a>
 800e8be:	2a00      	cmp	r2, #0
 800e8c0:	d1f6      	bne.n	800e8b0 <_strtol_l.constprop.0+0xd8>
 800e8c2:	f8c8 1000 	str.w	r1, [r8]
 800e8c6:	e794      	b.n	800e7f2 <_strtol_l.constprop.0+0x1a>
 800e8c8:	0804bfa9 	.word	0x0804bfa9

0800e8cc <_strtol_r>:
 800e8cc:	f7ff bf84 	b.w	800e7d8 <_strtol_l.constprop.0>

0800e8d0 <_strtoul_l.constprop.0>:
 800e8d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8d4:	4e34      	ldr	r6, [pc, #208]	@ (800e9a8 <_strtoul_l.constprop.0+0xd8>)
 800e8d6:	4686      	mov	lr, r0
 800e8d8:	460d      	mov	r5, r1
 800e8da:	4628      	mov	r0, r5
 800e8dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e8e0:	5d37      	ldrb	r7, [r6, r4]
 800e8e2:	f017 0708 	ands.w	r7, r7, #8
 800e8e6:	d1f8      	bne.n	800e8da <_strtoul_l.constprop.0+0xa>
 800e8e8:	2c2d      	cmp	r4, #45	@ 0x2d
 800e8ea:	d12f      	bne.n	800e94c <_strtoul_l.constprop.0+0x7c>
 800e8ec:	782c      	ldrb	r4, [r5, #0]
 800e8ee:	2701      	movs	r7, #1
 800e8f0:	1c85      	adds	r5, r0, #2
 800e8f2:	f033 0010 	bics.w	r0, r3, #16
 800e8f6:	d109      	bne.n	800e90c <_strtoul_l.constprop.0+0x3c>
 800e8f8:	2c30      	cmp	r4, #48	@ 0x30
 800e8fa:	d12c      	bne.n	800e956 <_strtoul_l.constprop.0+0x86>
 800e8fc:	7828      	ldrb	r0, [r5, #0]
 800e8fe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e902:	2858      	cmp	r0, #88	@ 0x58
 800e904:	d127      	bne.n	800e956 <_strtoul_l.constprop.0+0x86>
 800e906:	786c      	ldrb	r4, [r5, #1]
 800e908:	2310      	movs	r3, #16
 800e90a:	3502      	adds	r5, #2
 800e90c:	f04f 38ff 	mov.w	r8, #4294967295
 800e910:	2600      	movs	r6, #0
 800e912:	fbb8 f8f3 	udiv	r8, r8, r3
 800e916:	fb03 f908 	mul.w	r9, r3, r8
 800e91a:	ea6f 0909 	mvn.w	r9, r9
 800e91e:	4630      	mov	r0, r6
 800e920:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e924:	f1bc 0f09 	cmp.w	ip, #9
 800e928:	d81c      	bhi.n	800e964 <_strtoul_l.constprop.0+0x94>
 800e92a:	4664      	mov	r4, ip
 800e92c:	42a3      	cmp	r3, r4
 800e92e:	dd2a      	ble.n	800e986 <_strtoul_l.constprop.0+0xb6>
 800e930:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e934:	d007      	beq.n	800e946 <_strtoul_l.constprop.0+0x76>
 800e936:	4580      	cmp	r8, r0
 800e938:	d322      	bcc.n	800e980 <_strtoul_l.constprop.0+0xb0>
 800e93a:	d101      	bne.n	800e940 <_strtoul_l.constprop.0+0x70>
 800e93c:	45a1      	cmp	r9, r4
 800e93e:	db1f      	blt.n	800e980 <_strtoul_l.constprop.0+0xb0>
 800e940:	fb00 4003 	mla	r0, r0, r3, r4
 800e944:	2601      	movs	r6, #1
 800e946:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e94a:	e7e9      	b.n	800e920 <_strtoul_l.constprop.0+0x50>
 800e94c:	2c2b      	cmp	r4, #43	@ 0x2b
 800e94e:	bf04      	itt	eq
 800e950:	782c      	ldrbeq	r4, [r5, #0]
 800e952:	1c85      	addeq	r5, r0, #2
 800e954:	e7cd      	b.n	800e8f2 <_strtoul_l.constprop.0+0x22>
 800e956:	2b00      	cmp	r3, #0
 800e958:	d1d8      	bne.n	800e90c <_strtoul_l.constprop.0+0x3c>
 800e95a:	2c30      	cmp	r4, #48	@ 0x30
 800e95c:	bf0c      	ite	eq
 800e95e:	2308      	moveq	r3, #8
 800e960:	230a      	movne	r3, #10
 800e962:	e7d3      	b.n	800e90c <_strtoul_l.constprop.0+0x3c>
 800e964:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e968:	f1bc 0f19 	cmp.w	ip, #25
 800e96c:	d801      	bhi.n	800e972 <_strtoul_l.constprop.0+0xa2>
 800e96e:	3c37      	subs	r4, #55	@ 0x37
 800e970:	e7dc      	b.n	800e92c <_strtoul_l.constprop.0+0x5c>
 800e972:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e976:	f1bc 0f19 	cmp.w	ip, #25
 800e97a:	d804      	bhi.n	800e986 <_strtoul_l.constprop.0+0xb6>
 800e97c:	3c57      	subs	r4, #87	@ 0x57
 800e97e:	e7d5      	b.n	800e92c <_strtoul_l.constprop.0+0x5c>
 800e980:	f04f 36ff 	mov.w	r6, #4294967295
 800e984:	e7df      	b.n	800e946 <_strtoul_l.constprop.0+0x76>
 800e986:	1c73      	adds	r3, r6, #1
 800e988:	d106      	bne.n	800e998 <_strtoul_l.constprop.0+0xc8>
 800e98a:	2322      	movs	r3, #34	@ 0x22
 800e98c:	f8ce 3000 	str.w	r3, [lr]
 800e990:	4630      	mov	r0, r6
 800e992:	b932      	cbnz	r2, 800e9a2 <_strtoul_l.constprop.0+0xd2>
 800e994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e998:	b107      	cbz	r7, 800e99c <_strtoul_l.constprop.0+0xcc>
 800e99a:	4240      	negs	r0, r0
 800e99c:	2a00      	cmp	r2, #0
 800e99e:	d0f9      	beq.n	800e994 <_strtoul_l.constprop.0+0xc4>
 800e9a0:	b106      	cbz	r6, 800e9a4 <_strtoul_l.constprop.0+0xd4>
 800e9a2:	1e69      	subs	r1, r5, #1
 800e9a4:	6011      	str	r1, [r2, #0]
 800e9a6:	e7f5      	b.n	800e994 <_strtoul_l.constprop.0+0xc4>
 800e9a8:	0804bfa9 	.word	0x0804bfa9

0800e9ac <_strtoul_r>:
 800e9ac:	f7ff bf90 	b.w	800e8d0 <_strtoul_l.constprop.0>

0800e9b0 <fiprintf>:
 800e9b0:	b40e      	push	{r1, r2, r3}
 800e9b2:	b503      	push	{r0, r1, lr}
 800e9b4:	4601      	mov	r1, r0
 800e9b6:	ab03      	add	r3, sp, #12
 800e9b8:	4805      	ldr	r0, [pc, #20]	@ (800e9d0 <fiprintf+0x20>)
 800e9ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9be:	6800      	ldr	r0, [r0, #0]
 800e9c0:	9301      	str	r3, [sp, #4]
 800e9c2:	f000 f837 	bl	800ea34 <_vfiprintf_r>
 800e9c6:	b002      	add	sp, #8
 800e9c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9cc:	b003      	add	sp, #12
 800e9ce:	4770      	bx	lr
 800e9d0:	200029e0 	.word	0x200029e0

0800e9d4 <abort>:
 800e9d4:	b508      	push	{r3, lr}
 800e9d6:	2006      	movs	r0, #6
 800e9d8:	f000 fa00 	bl	800eddc <raise>
 800e9dc:	2001      	movs	r0, #1
 800e9de:	f7f9 f8b5 	bl	8007b4c <_exit>

0800e9e2 <__sfputc_r>:
 800e9e2:	6893      	ldr	r3, [r2, #8]
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	b410      	push	{r4}
 800e9ea:	6093      	str	r3, [r2, #8]
 800e9ec:	da08      	bge.n	800ea00 <__sfputc_r+0x1e>
 800e9ee:	6994      	ldr	r4, [r2, #24]
 800e9f0:	42a3      	cmp	r3, r4
 800e9f2:	db01      	blt.n	800e9f8 <__sfputc_r+0x16>
 800e9f4:	290a      	cmp	r1, #10
 800e9f6:	d103      	bne.n	800ea00 <__sfputc_r+0x1e>
 800e9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9fc:	f000 b932 	b.w	800ec64 <__swbuf_r>
 800ea00:	6813      	ldr	r3, [r2, #0]
 800ea02:	1c58      	adds	r0, r3, #1
 800ea04:	6010      	str	r0, [r2, #0]
 800ea06:	7019      	strb	r1, [r3, #0]
 800ea08:	4608      	mov	r0, r1
 800ea0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <__sfputs_r>:
 800ea10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea12:	4606      	mov	r6, r0
 800ea14:	460f      	mov	r7, r1
 800ea16:	4614      	mov	r4, r2
 800ea18:	18d5      	adds	r5, r2, r3
 800ea1a:	42ac      	cmp	r4, r5
 800ea1c:	d101      	bne.n	800ea22 <__sfputs_r+0x12>
 800ea1e:	2000      	movs	r0, #0
 800ea20:	e007      	b.n	800ea32 <__sfputs_r+0x22>
 800ea22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea26:	463a      	mov	r2, r7
 800ea28:	4630      	mov	r0, r6
 800ea2a:	f7ff ffda 	bl	800e9e2 <__sfputc_r>
 800ea2e:	1c43      	adds	r3, r0, #1
 800ea30:	d1f3      	bne.n	800ea1a <__sfputs_r+0xa>
 800ea32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ea34 <_vfiprintf_r>:
 800ea34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea38:	460d      	mov	r5, r1
 800ea3a:	b09d      	sub	sp, #116	@ 0x74
 800ea3c:	4614      	mov	r4, r2
 800ea3e:	4698      	mov	r8, r3
 800ea40:	4606      	mov	r6, r0
 800ea42:	b118      	cbz	r0, 800ea4c <_vfiprintf_r+0x18>
 800ea44:	6a03      	ldr	r3, [r0, #32]
 800ea46:	b90b      	cbnz	r3, 800ea4c <_vfiprintf_r+0x18>
 800ea48:	f7fd fcf2 	bl	800c430 <__sinit>
 800ea4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea4e:	07d9      	lsls	r1, r3, #31
 800ea50:	d405      	bmi.n	800ea5e <_vfiprintf_r+0x2a>
 800ea52:	89ab      	ldrh	r3, [r5, #12]
 800ea54:	059a      	lsls	r2, r3, #22
 800ea56:	d402      	bmi.n	800ea5e <_vfiprintf_r+0x2a>
 800ea58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea5a:	f7fd fed0 	bl	800c7fe <__retarget_lock_acquire_recursive>
 800ea5e:	89ab      	ldrh	r3, [r5, #12]
 800ea60:	071b      	lsls	r3, r3, #28
 800ea62:	d501      	bpl.n	800ea68 <_vfiprintf_r+0x34>
 800ea64:	692b      	ldr	r3, [r5, #16]
 800ea66:	b99b      	cbnz	r3, 800ea90 <_vfiprintf_r+0x5c>
 800ea68:	4629      	mov	r1, r5
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f000 f938 	bl	800ece0 <__swsetup_r>
 800ea70:	b170      	cbz	r0, 800ea90 <_vfiprintf_r+0x5c>
 800ea72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea74:	07dc      	lsls	r4, r3, #31
 800ea76:	d504      	bpl.n	800ea82 <_vfiprintf_r+0x4e>
 800ea78:	f04f 30ff 	mov.w	r0, #4294967295
 800ea7c:	b01d      	add	sp, #116	@ 0x74
 800ea7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea82:	89ab      	ldrh	r3, [r5, #12]
 800ea84:	0598      	lsls	r0, r3, #22
 800ea86:	d4f7      	bmi.n	800ea78 <_vfiprintf_r+0x44>
 800ea88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea8a:	f7fd feb9 	bl	800c800 <__retarget_lock_release_recursive>
 800ea8e:	e7f3      	b.n	800ea78 <_vfiprintf_r+0x44>
 800ea90:	2300      	movs	r3, #0
 800ea92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea94:	2320      	movs	r3, #32
 800ea96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea9e:	2330      	movs	r3, #48	@ 0x30
 800eaa0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ec50 <_vfiprintf_r+0x21c>
 800eaa4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eaa8:	f04f 0901 	mov.w	r9, #1
 800eaac:	4623      	mov	r3, r4
 800eaae:	469a      	mov	sl, r3
 800eab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eab4:	b10a      	cbz	r2, 800eaba <_vfiprintf_r+0x86>
 800eab6:	2a25      	cmp	r2, #37	@ 0x25
 800eab8:	d1f9      	bne.n	800eaae <_vfiprintf_r+0x7a>
 800eaba:	ebba 0b04 	subs.w	fp, sl, r4
 800eabe:	d00b      	beq.n	800ead8 <_vfiprintf_r+0xa4>
 800eac0:	465b      	mov	r3, fp
 800eac2:	4622      	mov	r2, r4
 800eac4:	4629      	mov	r1, r5
 800eac6:	4630      	mov	r0, r6
 800eac8:	f7ff ffa2 	bl	800ea10 <__sfputs_r>
 800eacc:	3001      	adds	r0, #1
 800eace:	f000 80a7 	beq.w	800ec20 <_vfiprintf_r+0x1ec>
 800ead2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ead4:	445a      	add	r2, fp
 800ead6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ead8:	f89a 3000 	ldrb.w	r3, [sl]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f000 809f 	beq.w	800ec20 <_vfiprintf_r+0x1ec>
 800eae2:	2300      	movs	r3, #0
 800eae4:	f04f 32ff 	mov.w	r2, #4294967295
 800eae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eaec:	f10a 0a01 	add.w	sl, sl, #1
 800eaf0:	9304      	str	r3, [sp, #16]
 800eaf2:	9307      	str	r3, [sp, #28]
 800eaf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eaf8:	931a      	str	r3, [sp, #104]	@ 0x68
 800eafa:	4654      	mov	r4, sl
 800eafc:	2205      	movs	r2, #5
 800eafe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb02:	4853      	ldr	r0, [pc, #332]	@ (800ec50 <_vfiprintf_r+0x21c>)
 800eb04:	f7f1 fb7c 	bl	8000200 <memchr>
 800eb08:	9a04      	ldr	r2, [sp, #16]
 800eb0a:	b9d8      	cbnz	r0, 800eb44 <_vfiprintf_r+0x110>
 800eb0c:	06d1      	lsls	r1, r2, #27
 800eb0e:	bf44      	itt	mi
 800eb10:	2320      	movmi	r3, #32
 800eb12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb16:	0713      	lsls	r3, r2, #28
 800eb18:	bf44      	itt	mi
 800eb1a:	232b      	movmi	r3, #43	@ 0x2b
 800eb1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb20:	f89a 3000 	ldrb.w	r3, [sl]
 800eb24:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb26:	d015      	beq.n	800eb54 <_vfiprintf_r+0x120>
 800eb28:	9a07      	ldr	r2, [sp, #28]
 800eb2a:	4654      	mov	r4, sl
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	f04f 0c0a 	mov.w	ip, #10
 800eb32:	4621      	mov	r1, r4
 800eb34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb38:	3b30      	subs	r3, #48	@ 0x30
 800eb3a:	2b09      	cmp	r3, #9
 800eb3c:	d94b      	bls.n	800ebd6 <_vfiprintf_r+0x1a2>
 800eb3e:	b1b0      	cbz	r0, 800eb6e <_vfiprintf_r+0x13a>
 800eb40:	9207      	str	r2, [sp, #28]
 800eb42:	e014      	b.n	800eb6e <_vfiprintf_r+0x13a>
 800eb44:	eba0 0308 	sub.w	r3, r0, r8
 800eb48:	fa09 f303 	lsl.w	r3, r9, r3
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	9304      	str	r3, [sp, #16]
 800eb50:	46a2      	mov	sl, r4
 800eb52:	e7d2      	b.n	800eafa <_vfiprintf_r+0xc6>
 800eb54:	9b03      	ldr	r3, [sp, #12]
 800eb56:	1d19      	adds	r1, r3, #4
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	9103      	str	r1, [sp, #12]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	bfbb      	ittet	lt
 800eb60:	425b      	neglt	r3, r3
 800eb62:	f042 0202 	orrlt.w	r2, r2, #2
 800eb66:	9307      	strge	r3, [sp, #28]
 800eb68:	9307      	strlt	r3, [sp, #28]
 800eb6a:	bfb8      	it	lt
 800eb6c:	9204      	strlt	r2, [sp, #16]
 800eb6e:	7823      	ldrb	r3, [r4, #0]
 800eb70:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb72:	d10a      	bne.n	800eb8a <_vfiprintf_r+0x156>
 800eb74:	7863      	ldrb	r3, [r4, #1]
 800eb76:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb78:	d132      	bne.n	800ebe0 <_vfiprintf_r+0x1ac>
 800eb7a:	9b03      	ldr	r3, [sp, #12]
 800eb7c:	1d1a      	adds	r2, r3, #4
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	9203      	str	r2, [sp, #12]
 800eb82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb86:	3402      	adds	r4, #2
 800eb88:	9305      	str	r3, [sp, #20]
 800eb8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ec60 <_vfiprintf_r+0x22c>
 800eb8e:	7821      	ldrb	r1, [r4, #0]
 800eb90:	2203      	movs	r2, #3
 800eb92:	4650      	mov	r0, sl
 800eb94:	f7f1 fb34 	bl	8000200 <memchr>
 800eb98:	b138      	cbz	r0, 800ebaa <_vfiprintf_r+0x176>
 800eb9a:	9b04      	ldr	r3, [sp, #16]
 800eb9c:	eba0 000a 	sub.w	r0, r0, sl
 800eba0:	2240      	movs	r2, #64	@ 0x40
 800eba2:	4082      	lsls	r2, r0
 800eba4:	4313      	orrs	r3, r2
 800eba6:	3401      	adds	r4, #1
 800eba8:	9304      	str	r3, [sp, #16]
 800ebaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebae:	4829      	ldr	r0, [pc, #164]	@ (800ec54 <_vfiprintf_r+0x220>)
 800ebb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebb4:	2206      	movs	r2, #6
 800ebb6:	f7f1 fb23 	bl	8000200 <memchr>
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	d03f      	beq.n	800ec3e <_vfiprintf_r+0x20a>
 800ebbe:	4b26      	ldr	r3, [pc, #152]	@ (800ec58 <_vfiprintf_r+0x224>)
 800ebc0:	bb1b      	cbnz	r3, 800ec0a <_vfiprintf_r+0x1d6>
 800ebc2:	9b03      	ldr	r3, [sp, #12]
 800ebc4:	3307      	adds	r3, #7
 800ebc6:	f023 0307 	bic.w	r3, r3, #7
 800ebca:	3308      	adds	r3, #8
 800ebcc:	9303      	str	r3, [sp, #12]
 800ebce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebd0:	443b      	add	r3, r7
 800ebd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebd4:	e76a      	b.n	800eaac <_vfiprintf_r+0x78>
 800ebd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebda:	460c      	mov	r4, r1
 800ebdc:	2001      	movs	r0, #1
 800ebde:	e7a8      	b.n	800eb32 <_vfiprintf_r+0xfe>
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	3401      	adds	r4, #1
 800ebe4:	9305      	str	r3, [sp, #20]
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	f04f 0c0a 	mov.w	ip, #10
 800ebec:	4620      	mov	r0, r4
 800ebee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebf2:	3a30      	subs	r2, #48	@ 0x30
 800ebf4:	2a09      	cmp	r2, #9
 800ebf6:	d903      	bls.n	800ec00 <_vfiprintf_r+0x1cc>
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d0c6      	beq.n	800eb8a <_vfiprintf_r+0x156>
 800ebfc:	9105      	str	r1, [sp, #20]
 800ebfe:	e7c4      	b.n	800eb8a <_vfiprintf_r+0x156>
 800ec00:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec04:	4604      	mov	r4, r0
 800ec06:	2301      	movs	r3, #1
 800ec08:	e7f0      	b.n	800ebec <_vfiprintf_r+0x1b8>
 800ec0a:	ab03      	add	r3, sp, #12
 800ec0c:	9300      	str	r3, [sp, #0]
 800ec0e:	462a      	mov	r2, r5
 800ec10:	4b12      	ldr	r3, [pc, #72]	@ (800ec5c <_vfiprintf_r+0x228>)
 800ec12:	a904      	add	r1, sp, #16
 800ec14:	4630      	mov	r0, r6
 800ec16:	f3af 8000 	nop.w
 800ec1a:	4607      	mov	r7, r0
 800ec1c:	1c78      	adds	r0, r7, #1
 800ec1e:	d1d6      	bne.n	800ebce <_vfiprintf_r+0x19a>
 800ec20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec22:	07d9      	lsls	r1, r3, #31
 800ec24:	d405      	bmi.n	800ec32 <_vfiprintf_r+0x1fe>
 800ec26:	89ab      	ldrh	r3, [r5, #12]
 800ec28:	059a      	lsls	r2, r3, #22
 800ec2a:	d402      	bmi.n	800ec32 <_vfiprintf_r+0x1fe>
 800ec2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec2e:	f7fd fde7 	bl	800c800 <__retarget_lock_release_recursive>
 800ec32:	89ab      	ldrh	r3, [r5, #12]
 800ec34:	065b      	lsls	r3, r3, #25
 800ec36:	f53f af1f 	bmi.w	800ea78 <_vfiprintf_r+0x44>
 800ec3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec3c:	e71e      	b.n	800ea7c <_vfiprintf_r+0x48>
 800ec3e:	ab03      	add	r3, sp, #12
 800ec40:	9300      	str	r3, [sp, #0]
 800ec42:	462a      	mov	r2, r5
 800ec44:	4b05      	ldr	r3, [pc, #20]	@ (800ec5c <_vfiprintf_r+0x228>)
 800ec46:	a904      	add	r1, sp, #16
 800ec48:	4630      	mov	r0, r6
 800ec4a:	f7ff f9df 	bl	800e00c <_printf_i>
 800ec4e:	e7e4      	b.n	800ec1a <_vfiprintf_r+0x1e6>
 800ec50:	0804c290 	.word	0x0804c290
 800ec54:	0804c29a 	.word	0x0804c29a
 800ec58:	00000000 	.word	0x00000000
 800ec5c:	0800ea11 	.word	0x0800ea11
 800ec60:	0804c296 	.word	0x0804c296

0800ec64 <__swbuf_r>:
 800ec64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec66:	460e      	mov	r6, r1
 800ec68:	4614      	mov	r4, r2
 800ec6a:	4605      	mov	r5, r0
 800ec6c:	b118      	cbz	r0, 800ec76 <__swbuf_r+0x12>
 800ec6e:	6a03      	ldr	r3, [r0, #32]
 800ec70:	b90b      	cbnz	r3, 800ec76 <__swbuf_r+0x12>
 800ec72:	f7fd fbdd 	bl	800c430 <__sinit>
 800ec76:	69a3      	ldr	r3, [r4, #24]
 800ec78:	60a3      	str	r3, [r4, #8]
 800ec7a:	89a3      	ldrh	r3, [r4, #12]
 800ec7c:	071a      	lsls	r2, r3, #28
 800ec7e:	d501      	bpl.n	800ec84 <__swbuf_r+0x20>
 800ec80:	6923      	ldr	r3, [r4, #16]
 800ec82:	b943      	cbnz	r3, 800ec96 <__swbuf_r+0x32>
 800ec84:	4621      	mov	r1, r4
 800ec86:	4628      	mov	r0, r5
 800ec88:	f000 f82a 	bl	800ece0 <__swsetup_r>
 800ec8c:	b118      	cbz	r0, 800ec96 <__swbuf_r+0x32>
 800ec8e:	f04f 37ff 	mov.w	r7, #4294967295
 800ec92:	4638      	mov	r0, r7
 800ec94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec96:	6823      	ldr	r3, [r4, #0]
 800ec98:	6922      	ldr	r2, [r4, #16]
 800ec9a:	1a98      	subs	r0, r3, r2
 800ec9c:	6963      	ldr	r3, [r4, #20]
 800ec9e:	b2f6      	uxtb	r6, r6
 800eca0:	4283      	cmp	r3, r0
 800eca2:	4637      	mov	r7, r6
 800eca4:	dc05      	bgt.n	800ecb2 <__swbuf_r+0x4e>
 800eca6:	4621      	mov	r1, r4
 800eca8:	4628      	mov	r0, r5
 800ecaa:	f7ff fca1 	bl	800e5f0 <_fflush_r>
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	d1ed      	bne.n	800ec8e <__swbuf_r+0x2a>
 800ecb2:	68a3      	ldr	r3, [r4, #8]
 800ecb4:	3b01      	subs	r3, #1
 800ecb6:	60a3      	str	r3, [r4, #8]
 800ecb8:	6823      	ldr	r3, [r4, #0]
 800ecba:	1c5a      	adds	r2, r3, #1
 800ecbc:	6022      	str	r2, [r4, #0]
 800ecbe:	701e      	strb	r6, [r3, #0]
 800ecc0:	6962      	ldr	r2, [r4, #20]
 800ecc2:	1c43      	adds	r3, r0, #1
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d004      	beq.n	800ecd2 <__swbuf_r+0x6e>
 800ecc8:	89a3      	ldrh	r3, [r4, #12]
 800ecca:	07db      	lsls	r3, r3, #31
 800eccc:	d5e1      	bpl.n	800ec92 <__swbuf_r+0x2e>
 800ecce:	2e0a      	cmp	r6, #10
 800ecd0:	d1df      	bne.n	800ec92 <__swbuf_r+0x2e>
 800ecd2:	4621      	mov	r1, r4
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	f7ff fc8b 	bl	800e5f0 <_fflush_r>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d0d9      	beq.n	800ec92 <__swbuf_r+0x2e>
 800ecde:	e7d6      	b.n	800ec8e <__swbuf_r+0x2a>

0800ece0 <__swsetup_r>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	4b29      	ldr	r3, [pc, #164]	@ (800ed88 <__swsetup_r+0xa8>)
 800ece4:	4605      	mov	r5, r0
 800ece6:	6818      	ldr	r0, [r3, #0]
 800ece8:	460c      	mov	r4, r1
 800ecea:	b118      	cbz	r0, 800ecf4 <__swsetup_r+0x14>
 800ecec:	6a03      	ldr	r3, [r0, #32]
 800ecee:	b90b      	cbnz	r3, 800ecf4 <__swsetup_r+0x14>
 800ecf0:	f7fd fb9e 	bl	800c430 <__sinit>
 800ecf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecf8:	0719      	lsls	r1, r3, #28
 800ecfa:	d422      	bmi.n	800ed42 <__swsetup_r+0x62>
 800ecfc:	06da      	lsls	r2, r3, #27
 800ecfe:	d407      	bmi.n	800ed10 <__swsetup_r+0x30>
 800ed00:	2209      	movs	r2, #9
 800ed02:	602a      	str	r2, [r5, #0]
 800ed04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed08:	81a3      	strh	r3, [r4, #12]
 800ed0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed0e:	e033      	b.n	800ed78 <__swsetup_r+0x98>
 800ed10:	0758      	lsls	r0, r3, #29
 800ed12:	d512      	bpl.n	800ed3a <__swsetup_r+0x5a>
 800ed14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed16:	b141      	cbz	r1, 800ed2a <__swsetup_r+0x4a>
 800ed18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed1c:	4299      	cmp	r1, r3
 800ed1e:	d002      	beq.n	800ed26 <__swsetup_r+0x46>
 800ed20:	4628      	mov	r0, r5
 800ed22:	f7fd fd85 	bl	800c830 <_free_r>
 800ed26:	2300      	movs	r3, #0
 800ed28:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed2a:	89a3      	ldrh	r3, [r4, #12]
 800ed2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ed30:	81a3      	strh	r3, [r4, #12]
 800ed32:	2300      	movs	r3, #0
 800ed34:	6063      	str	r3, [r4, #4]
 800ed36:	6923      	ldr	r3, [r4, #16]
 800ed38:	6023      	str	r3, [r4, #0]
 800ed3a:	89a3      	ldrh	r3, [r4, #12]
 800ed3c:	f043 0308 	orr.w	r3, r3, #8
 800ed40:	81a3      	strh	r3, [r4, #12]
 800ed42:	6923      	ldr	r3, [r4, #16]
 800ed44:	b94b      	cbnz	r3, 800ed5a <__swsetup_r+0x7a>
 800ed46:	89a3      	ldrh	r3, [r4, #12]
 800ed48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ed4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed50:	d003      	beq.n	800ed5a <__swsetup_r+0x7a>
 800ed52:	4621      	mov	r1, r4
 800ed54:	4628      	mov	r0, r5
 800ed56:	f000 f883 	bl	800ee60 <__smakebuf_r>
 800ed5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed5e:	f013 0201 	ands.w	r2, r3, #1
 800ed62:	d00a      	beq.n	800ed7a <__swsetup_r+0x9a>
 800ed64:	2200      	movs	r2, #0
 800ed66:	60a2      	str	r2, [r4, #8]
 800ed68:	6962      	ldr	r2, [r4, #20]
 800ed6a:	4252      	negs	r2, r2
 800ed6c:	61a2      	str	r2, [r4, #24]
 800ed6e:	6922      	ldr	r2, [r4, #16]
 800ed70:	b942      	cbnz	r2, 800ed84 <__swsetup_r+0xa4>
 800ed72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ed76:	d1c5      	bne.n	800ed04 <__swsetup_r+0x24>
 800ed78:	bd38      	pop	{r3, r4, r5, pc}
 800ed7a:	0799      	lsls	r1, r3, #30
 800ed7c:	bf58      	it	pl
 800ed7e:	6962      	ldrpl	r2, [r4, #20]
 800ed80:	60a2      	str	r2, [r4, #8]
 800ed82:	e7f4      	b.n	800ed6e <__swsetup_r+0x8e>
 800ed84:	2000      	movs	r0, #0
 800ed86:	e7f7      	b.n	800ed78 <__swsetup_r+0x98>
 800ed88:	200029e0 	.word	0x200029e0

0800ed8c <_raise_r>:
 800ed8c:	291f      	cmp	r1, #31
 800ed8e:	b538      	push	{r3, r4, r5, lr}
 800ed90:	4605      	mov	r5, r0
 800ed92:	460c      	mov	r4, r1
 800ed94:	d904      	bls.n	800eda0 <_raise_r+0x14>
 800ed96:	2316      	movs	r3, #22
 800ed98:	6003      	str	r3, [r0, #0]
 800ed9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed9e:	bd38      	pop	{r3, r4, r5, pc}
 800eda0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eda2:	b112      	cbz	r2, 800edaa <_raise_r+0x1e>
 800eda4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eda8:	b94b      	cbnz	r3, 800edbe <_raise_r+0x32>
 800edaa:	4628      	mov	r0, r5
 800edac:	f000 f830 	bl	800ee10 <_getpid_r>
 800edb0:	4622      	mov	r2, r4
 800edb2:	4601      	mov	r1, r0
 800edb4:	4628      	mov	r0, r5
 800edb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edba:	f000 b817 	b.w	800edec <_kill_r>
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d00a      	beq.n	800edd8 <_raise_r+0x4c>
 800edc2:	1c59      	adds	r1, r3, #1
 800edc4:	d103      	bne.n	800edce <_raise_r+0x42>
 800edc6:	2316      	movs	r3, #22
 800edc8:	6003      	str	r3, [r0, #0]
 800edca:	2001      	movs	r0, #1
 800edcc:	e7e7      	b.n	800ed9e <_raise_r+0x12>
 800edce:	2100      	movs	r1, #0
 800edd0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800edd4:	4620      	mov	r0, r4
 800edd6:	4798      	blx	r3
 800edd8:	2000      	movs	r0, #0
 800edda:	e7e0      	b.n	800ed9e <_raise_r+0x12>

0800eddc <raise>:
 800eddc:	4b02      	ldr	r3, [pc, #8]	@ (800ede8 <raise+0xc>)
 800edde:	4601      	mov	r1, r0
 800ede0:	6818      	ldr	r0, [r3, #0]
 800ede2:	f7ff bfd3 	b.w	800ed8c <_raise_r>
 800ede6:	bf00      	nop
 800ede8:	200029e0 	.word	0x200029e0

0800edec <_kill_r>:
 800edec:	b538      	push	{r3, r4, r5, lr}
 800edee:	4d07      	ldr	r5, [pc, #28]	@ (800ee0c <_kill_r+0x20>)
 800edf0:	2300      	movs	r3, #0
 800edf2:	4604      	mov	r4, r0
 800edf4:	4608      	mov	r0, r1
 800edf6:	4611      	mov	r1, r2
 800edf8:	602b      	str	r3, [r5, #0]
 800edfa:	f7f8 fe97 	bl	8007b2c <_kill>
 800edfe:	1c43      	adds	r3, r0, #1
 800ee00:	d102      	bne.n	800ee08 <_kill_r+0x1c>
 800ee02:	682b      	ldr	r3, [r5, #0]
 800ee04:	b103      	cbz	r3, 800ee08 <_kill_r+0x1c>
 800ee06:	6023      	str	r3, [r4, #0]
 800ee08:	bd38      	pop	{r3, r4, r5, pc}
 800ee0a:	bf00      	nop
 800ee0c:	20003690 	.word	0x20003690

0800ee10 <_getpid_r>:
 800ee10:	f7f8 be84 	b.w	8007b1c <_getpid>

0800ee14 <__swhatbuf_r>:
 800ee14:	b570      	push	{r4, r5, r6, lr}
 800ee16:	460c      	mov	r4, r1
 800ee18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee1c:	2900      	cmp	r1, #0
 800ee1e:	b096      	sub	sp, #88	@ 0x58
 800ee20:	4615      	mov	r5, r2
 800ee22:	461e      	mov	r6, r3
 800ee24:	da0d      	bge.n	800ee42 <__swhatbuf_r+0x2e>
 800ee26:	89a3      	ldrh	r3, [r4, #12]
 800ee28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ee2c:	f04f 0100 	mov.w	r1, #0
 800ee30:	bf14      	ite	ne
 800ee32:	2340      	movne	r3, #64	@ 0x40
 800ee34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ee38:	2000      	movs	r0, #0
 800ee3a:	6031      	str	r1, [r6, #0]
 800ee3c:	602b      	str	r3, [r5, #0]
 800ee3e:	b016      	add	sp, #88	@ 0x58
 800ee40:	bd70      	pop	{r4, r5, r6, pc}
 800ee42:	466a      	mov	r2, sp
 800ee44:	f000 f848 	bl	800eed8 <_fstat_r>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	dbec      	blt.n	800ee26 <__swhatbuf_r+0x12>
 800ee4c:	9901      	ldr	r1, [sp, #4]
 800ee4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ee52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ee56:	4259      	negs	r1, r3
 800ee58:	4159      	adcs	r1, r3
 800ee5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee5e:	e7eb      	b.n	800ee38 <__swhatbuf_r+0x24>

0800ee60 <__smakebuf_r>:
 800ee60:	898b      	ldrh	r3, [r1, #12]
 800ee62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee64:	079d      	lsls	r5, r3, #30
 800ee66:	4606      	mov	r6, r0
 800ee68:	460c      	mov	r4, r1
 800ee6a:	d507      	bpl.n	800ee7c <__smakebuf_r+0x1c>
 800ee6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ee70:	6023      	str	r3, [r4, #0]
 800ee72:	6123      	str	r3, [r4, #16]
 800ee74:	2301      	movs	r3, #1
 800ee76:	6163      	str	r3, [r4, #20]
 800ee78:	b003      	add	sp, #12
 800ee7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee7c:	ab01      	add	r3, sp, #4
 800ee7e:	466a      	mov	r2, sp
 800ee80:	f7ff ffc8 	bl	800ee14 <__swhatbuf_r>
 800ee84:	9f00      	ldr	r7, [sp, #0]
 800ee86:	4605      	mov	r5, r0
 800ee88:	4639      	mov	r1, r7
 800ee8a:	4630      	mov	r0, r6
 800ee8c:	f7fc fb74 	bl	800b578 <_malloc_r>
 800ee90:	b948      	cbnz	r0, 800eea6 <__smakebuf_r+0x46>
 800ee92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee96:	059a      	lsls	r2, r3, #22
 800ee98:	d4ee      	bmi.n	800ee78 <__smakebuf_r+0x18>
 800ee9a:	f023 0303 	bic.w	r3, r3, #3
 800ee9e:	f043 0302 	orr.w	r3, r3, #2
 800eea2:	81a3      	strh	r3, [r4, #12]
 800eea4:	e7e2      	b.n	800ee6c <__smakebuf_r+0xc>
 800eea6:	89a3      	ldrh	r3, [r4, #12]
 800eea8:	6020      	str	r0, [r4, #0]
 800eeaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eeae:	81a3      	strh	r3, [r4, #12]
 800eeb0:	9b01      	ldr	r3, [sp, #4]
 800eeb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eeb6:	b15b      	cbz	r3, 800eed0 <__smakebuf_r+0x70>
 800eeb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eebc:	4630      	mov	r0, r6
 800eebe:	f000 f81d 	bl	800eefc <_isatty_r>
 800eec2:	b128      	cbz	r0, 800eed0 <__smakebuf_r+0x70>
 800eec4:	89a3      	ldrh	r3, [r4, #12]
 800eec6:	f023 0303 	bic.w	r3, r3, #3
 800eeca:	f043 0301 	orr.w	r3, r3, #1
 800eece:	81a3      	strh	r3, [r4, #12]
 800eed0:	89a3      	ldrh	r3, [r4, #12]
 800eed2:	431d      	orrs	r5, r3
 800eed4:	81a5      	strh	r5, [r4, #12]
 800eed6:	e7cf      	b.n	800ee78 <__smakebuf_r+0x18>

0800eed8 <_fstat_r>:
 800eed8:	b538      	push	{r3, r4, r5, lr}
 800eeda:	4d07      	ldr	r5, [pc, #28]	@ (800eef8 <_fstat_r+0x20>)
 800eedc:	2300      	movs	r3, #0
 800eede:	4604      	mov	r4, r0
 800eee0:	4608      	mov	r0, r1
 800eee2:	4611      	mov	r1, r2
 800eee4:	602b      	str	r3, [r5, #0]
 800eee6:	f7f8 fe81 	bl	8007bec <_fstat>
 800eeea:	1c43      	adds	r3, r0, #1
 800eeec:	d102      	bne.n	800eef4 <_fstat_r+0x1c>
 800eeee:	682b      	ldr	r3, [r5, #0]
 800eef0:	b103      	cbz	r3, 800eef4 <_fstat_r+0x1c>
 800eef2:	6023      	str	r3, [r4, #0]
 800eef4:	bd38      	pop	{r3, r4, r5, pc}
 800eef6:	bf00      	nop
 800eef8:	20003690 	.word	0x20003690

0800eefc <_isatty_r>:
 800eefc:	b538      	push	{r3, r4, r5, lr}
 800eefe:	4d06      	ldr	r5, [pc, #24]	@ (800ef18 <_isatty_r+0x1c>)
 800ef00:	2300      	movs	r3, #0
 800ef02:	4604      	mov	r4, r0
 800ef04:	4608      	mov	r0, r1
 800ef06:	602b      	str	r3, [r5, #0]
 800ef08:	f7f8 fe80 	bl	8007c0c <_isatty>
 800ef0c:	1c43      	adds	r3, r0, #1
 800ef0e:	d102      	bne.n	800ef16 <_isatty_r+0x1a>
 800ef10:	682b      	ldr	r3, [r5, #0]
 800ef12:	b103      	cbz	r3, 800ef16 <_isatty_r+0x1a>
 800ef14:	6023      	str	r3, [r4, #0]
 800ef16:	bd38      	pop	{r3, r4, r5, pc}
 800ef18:	20003690 	.word	0x20003690

0800ef1c <_init>:
 800ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef1e:	bf00      	nop
 800ef20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef22:	bc08      	pop	{r3}
 800ef24:	469e      	mov	lr, r3
 800ef26:	4770      	bx	lr

0800ef28 <_fini>:
 800ef28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef2a:	bf00      	nop
 800ef2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef2e:	bc08      	pop	{r3}
 800ef30:	469e      	mov	lr, r3
 800ef32:	4770      	bx	lr
